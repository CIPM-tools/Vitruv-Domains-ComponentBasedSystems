import static extension edu.kit.ipd.sdq.vitruvius.dsls.response.tests.pcmjava.PCMJavaHelper.*;

import "http://www.emftext.org/java" as java
import "http://palladiosimulator.org/PalladioComponentModel/5.1" as pcm

response: CreateHelperClassForRepository
trigger: insert root pcm.repository.Repository
create model: file name relative to project folder: repositoryToJavaHelper.getPathInProject(change.newValue)
create root element: compilationUnit of type java.containers.CompilationUnit corresponding to change.newValue
create model element: javaClass of type java.classifiers.Class corresponding to change.newValue
execute: {
	compilationUnit.namespaces += repositoryToJavaHelper.getPackageName(change.newValue);
	initializeCompilationUnitAndJavaClassifier(compilationUnit, javaClass, repositoryToJavaHelper.getClassName(change.newValue));
}

response: CreateClassForBasicComponent
trigger: insert in list pcm.repository.Repository[components__Repository]
create model: file name relative to project folder: componentToClass.getPathInProject(change.newValue)
create root element: compilationUnit of type java.containers.CompilationUnit corresponding to change.newValue
create model element: javaClass of type java.classifiers.Class corresponding to change.newValue
execute: {
	compilationUnit.namespaces += componentToClass.getPackageName(change.newValue);
	initializeCompilationUnitAndJavaClassifier(compilationUnit, javaClass, componentToClass.getClassName(change.newValue));
}

response: CreateInterfaceForInterface
trigger: insert in list pcm.repository.Repository[interfaces__Repository]
create model: file name relative to project folder: interfaceToInterface.getPathInProject(change.newValue)
create root element: compilationUnit of type java.containers.CompilationUnit corresponding to change.newValue
create model element: javaInterface of type java.classifiers.Interface corresponding to change.newValue
execute: {
	compilationUnit.namespaces += interfaceToInterface.getPackageName(change.newValue);
	initializeCompilationUnitAndJavaClassifier(compilationUnit, javaInterface, interfaceToInterface.getClassName(change.newValue));
}