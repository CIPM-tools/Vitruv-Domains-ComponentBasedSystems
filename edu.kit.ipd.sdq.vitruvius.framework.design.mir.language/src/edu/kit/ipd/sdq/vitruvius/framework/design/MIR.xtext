grammar edu.kit.ipd.sdq.vitruvius.framework.design.MIR with org.eclipse.xtext.xbase.Xbase

import "http://www.eclipse.org/emf/2002/Ecore" as ecore

generate mIR "http://www.kit.edu/ipd/sdq/vitruvius/framework/design/MIR"

Model:
	(mmImports+=Import)+
	(javaImportSection=XImportSection)?
	(mappings+=Mapping)*
	(invariants+=Invariant)*
	(globalVariables+=GlobalVariable)*
	(respones+=Response)*
;
	
// TODO use importSection from Xtend.xtext
Import:
	'import' nsURI=STRING 'as' mmNsPrefix=MMNsPrefix
;

MMNsPrefix:
	nsPrefix=ID
;

// ***** //
// * M * //
// ***** //	
Mapping:
	'map' MappingBase
;

MappingBase:
	(nameA=ID ':')? metaclassA=[ecore::EClass|NsPrefixQualifiedID] 
	'to' (nameB=ID ':')? metaclassB=[ecore::EClass|NsPrefixQualifiedID] 
	'{'
	(whens+=When)*
	(withs+=With)*
	'}'
;

When:
	// TODO make sure this is the right for binary OCL-like expressions for model elements
	'when' xorExpression=XOrExpression
;

With:
	'with' MappingBase
;

// ***** //
// * I * //
// ***** //
Invariant:
	// TODO try to use an OCL.xtext or similar
	'context' NsPrefixQualifiedID
	'inv' name=ID 
	(parameters+=Parameter)?
	'{'
		// TODO make sure this is the right for binary OCL-like expressions for model elements
		xorExpression=XOrExpression	
	'}'
;

Parameter:
	(name=ID ':')? metaclass=[ecore::EClass|NsPrefixQualifiedID] 
;

// ***** //
// * R * //
// ***** //
GlobalVariable:
	// TODO make sure this is the right rule for java type declarations
	'var' name=ID ':' jvmTypeReference=JvmTypeReference
;

Response:
	(operationRestriction=OperationRestriction
	invariantRestriction=InvariantRestriction?)
	|
	(operationRestriction=OperationRestriction?
	invariantRestriction=InvariantRestriction)
	'by' '{'
		// TODO allow all Xtend stmts here
		xtendStmt=STRING
	'}'
;

OperationRestriction:
	'on' MetalclassOperationRestriction | FeatureOperationRestriction
;

MetalclassOperationRestriction:
	MetaclassOperationType 'of' NsPrefixQualifiedID
;

MetaclassOperationType:
	'creation' | 'update' | 'deletion' 
;

FeatureOperationRestriction:
	FeatureOperationType 'of' NsPrefixQualifiedID '.' feature=ID
;

FeatureOperationType:
	'update'
;

InvariantRestriction:
	'restore' 'inv' name=[Invariant|ID] ('(' parameters+=Parameter ')')?
;

CpxID:
	ID ('.' ID)+
;	

NsPrefixQualifiedID :
	ID '::' PackageQualifiedID
// TODO find out how to make sure that only nsPrefixes used in the import stmts are allowed here
//	nsPrefix=[NsPrefix|ID] '::' PackageQualifiedID
;

PackageQualifiedID : 
	ID ('::' ID)* '::' (CpxID|ID)
;