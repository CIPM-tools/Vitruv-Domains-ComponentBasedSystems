/*
* generated by Xtext
*/
package edu.kit.ipd.sdq.vitruvius.framework.design.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.xbase.services.XbaseGrammarAccess;
import org.eclipse.xtext.xbase.services.XtypeGrammarAccess;

@Singleton
public class MIRGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Model");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cMmImportsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cMmImportsImportParserRuleCall_0_0 = (RuleCall)cMmImportsAssignment_0.eContents().get(0);
		private final Assignment cJavaImportSectionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cJavaImportSectionXImportSectionParserRuleCall_1_0 = (RuleCall)cJavaImportSectionAssignment_1.eContents().get(0);
		private final Assignment cMappingsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cMappingsMappingParserRuleCall_2_0 = (RuleCall)cMappingsAssignment_2.eContents().get(0);
		private final Assignment cInvariantsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cInvariantsInvariantParserRuleCall_3_0 = (RuleCall)cInvariantsAssignment_3.eContents().get(0);
		private final Assignment cGlobalVariablesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cGlobalVariablesGlobalVariableParserRuleCall_4_0 = (RuleCall)cGlobalVariablesAssignment_4.eContents().get(0);
		private final Assignment cResponesAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cResponesResponseParserRuleCall_5_0 = (RuleCall)cResponesAssignment_5.eContents().get(0);
		
		//Model:
		//	mmImports+=Import+ javaImportSection=XImportSection? mappings+=Mapping* invariants+=Invariant*
		//	globalVariables+=GlobalVariable* respones+=Response*;
		public ParserRule getRule() { return rule; }

		//mmImports+=Import+ javaImportSection=XImportSection? mappings+=Mapping* invariants+=Invariant*
		//globalVariables+=GlobalVariable* respones+=Response*
		public Group getGroup() { return cGroup; }

		//mmImports+=Import+
		public Assignment getMmImportsAssignment_0() { return cMmImportsAssignment_0; }

		//Import
		public RuleCall getMmImportsImportParserRuleCall_0_0() { return cMmImportsImportParserRuleCall_0_0; }

		//javaImportSection=XImportSection?
		public Assignment getJavaImportSectionAssignment_1() { return cJavaImportSectionAssignment_1; }

		//XImportSection
		public RuleCall getJavaImportSectionXImportSectionParserRuleCall_1_0() { return cJavaImportSectionXImportSectionParserRuleCall_1_0; }

		//mappings+=Mapping*
		public Assignment getMappingsAssignment_2() { return cMappingsAssignment_2; }

		//Mapping
		public RuleCall getMappingsMappingParserRuleCall_2_0() { return cMappingsMappingParserRuleCall_2_0; }

		//invariants+=Invariant*
		public Assignment getInvariantsAssignment_3() { return cInvariantsAssignment_3; }

		//Invariant
		public RuleCall getInvariantsInvariantParserRuleCall_3_0() { return cInvariantsInvariantParserRuleCall_3_0; }

		//globalVariables+=GlobalVariable*
		public Assignment getGlobalVariablesAssignment_4() { return cGlobalVariablesAssignment_4; }

		//GlobalVariable
		public RuleCall getGlobalVariablesGlobalVariableParserRuleCall_4_0() { return cGlobalVariablesGlobalVariableParserRuleCall_4_0; }

		//respones+=Response*
		public Assignment getResponesAssignment_5() { return cResponesAssignment_5; }

		//Response
		public RuleCall getResponesResponseParserRuleCall_5_0() { return cResponesResponseParserRuleCall_5_0; }
	}

	public class ImportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Import");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNsURIAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNsURISTRINGTerminalRuleCall_1_0 = (RuleCall)cNsURIAssignment_1.eContents().get(0);
		private final Keyword cAsKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cMmNsPrefixAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cMmNsPrefixMMNsPrefixParserRuleCall_3_0 = (RuleCall)cMmNsPrefixAssignment_3.eContents().get(0);
		
		//// TODO use importSection from Xtend.xtext
		//Import:
		//	"import" nsURI=STRING "as" mmNsPrefix=MMNsPrefix;
		public ParserRule getRule() { return rule; }

		//"import" nsURI=STRING "as" mmNsPrefix=MMNsPrefix
		public Group getGroup() { return cGroup; }

		//"import"
		public Keyword getImportKeyword_0() { return cImportKeyword_0; }

		//nsURI=STRING
		public Assignment getNsURIAssignment_1() { return cNsURIAssignment_1; }

		//STRING
		public RuleCall getNsURISTRINGTerminalRuleCall_1_0() { return cNsURISTRINGTerminalRuleCall_1_0; }

		//"as"
		public Keyword getAsKeyword_2() { return cAsKeyword_2; }

		//mmNsPrefix=MMNsPrefix
		public Assignment getMmNsPrefixAssignment_3() { return cMmNsPrefixAssignment_3; }

		//MMNsPrefix
		public RuleCall getMmNsPrefixMMNsPrefixParserRuleCall_3_0() { return cMmNsPrefixMMNsPrefixParserRuleCall_3_0; }
	}

	public class MMNsPrefixElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MMNsPrefix");
		private final Assignment cNsPrefixAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNsPrefixIDTerminalRuleCall_0 = (RuleCall)cNsPrefixAssignment.eContents().get(0);
		
		//MMNsPrefix:
		//	nsPrefix=ID;
		public ParserRule getRule() { return rule; }

		//nsPrefix=ID
		public Assignment getNsPrefixAssignment() { return cNsPrefixAssignment; }

		//ID
		public RuleCall getNsPrefixIDTerminalRuleCall_0() { return cNsPrefixIDTerminalRuleCall_0; }
	}

	public class MappingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Mapping");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMapKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cMappingBaseParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//// ***** //
		//// * M * //
		//// ***** //	
		//Mapping:
		//	"map" MappingBase;
		public ParserRule getRule() { return rule; }

		//"map" MappingBase
		public Group getGroup() { return cGroup; }

		//"map"
		public Keyword getMapKeyword_0() { return cMapKeyword_0; }

		//MappingBase
		public RuleCall getMappingBaseParserRuleCall_1() { return cMappingBaseParserRuleCall_1; }
	}

	public class MappingBaseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MappingBase");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Assignment cNameAAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cNameAIDTerminalRuleCall_0_0_0 = (RuleCall)cNameAAssignment_0_0.eContents().get(0);
		private final Keyword cColonKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cMetaclassAAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cMetaclassAEClassCrossReference_1_0 = (CrossReference)cMetaclassAAssignment_1.eContents().get(0);
		private final RuleCall cMetaclassAEClassNsPrefixQualifiedIDParserRuleCall_1_0_1 = (RuleCall)cMetaclassAEClassCrossReference_1_0.eContents().get(1);
		private final Keyword cToKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cNameBAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cNameBIDTerminalRuleCall_3_0_0 = (RuleCall)cNameBAssignment_3_0.eContents().get(0);
		private final Keyword cColonKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Assignment cMetaclassBAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cMetaclassBEClassCrossReference_4_0 = (CrossReference)cMetaclassBAssignment_4.eContents().get(0);
		private final RuleCall cMetaclassBEClassNsPrefixQualifiedIDParserRuleCall_4_0_1 = (RuleCall)cMetaclassBEClassCrossReference_4_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cWhensAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cWhensWhenParserRuleCall_6_0 = (RuleCall)cWhensAssignment_6.eContents().get(0);
		private final Assignment cWithsAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cWithsWithParserRuleCall_7_0 = (RuleCall)cWithsAssignment_7.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//MappingBase:
		//	(nameA=ID ":")? metaclassA=[ecore::EClass|NsPrefixQualifiedID] "to" (nameB=ID ":")?
		//	metaclassB=[ecore::EClass|NsPrefixQualifiedID] "{" whens+=When* withs+=With* "}";
		public ParserRule getRule() { return rule; }

		//(nameA=ID ":")? metaclassA=[ecore::EClass|NsPrefixQualifiedID] "to" (nameB=ID ":")?
		//metaclassB=[ecore::EClass|NsPrefixQualifiedID] "{" whens+=When* withs+=With* "}"
		public Group getGroup() { return cGroup; }

		//(nameA=ID ":")?
		public Group getGroup_0() { return cGroup_0; }

		//nameA=ID
		public Assignment getNameAAssignment_0_0() { return cNameAAssignment_0_0; }

		//ID
		public RuleCall getNameAIDTerminalRuleCall_0_0_0() { return cNameAIDTerminalRuleCall_0_0_0; }

		//":"
		public Keyword getColonKeyword_0_1() { return cColonKeyword_0_1; }

		//metaclassA=[ecore::EClass|NsPrefixQualifiedID]
		public Assignment getMetaclassAAssignment_1() { return cMetaclassAAssignment_1; }

		//[ecore::EClass|NsPrefixQualifiedID]
		public CrossReference getMetaclassAEClassCrossReference_1_0() { return cMetaclassAEClassCrossReference_1_0; }

		//NsPrefixQualifiedID
		public RuleCall getMetaclassAEClassNsPrefixQualifiedIDParserRuleCall_1_0_1() { return cMetaclassAEClassNsPrefixQualifiedIDParserRuleCall_1_0_1; }

		//"to"
		public Keyword getToKeyword_2() { return cToKeyword_2; }

		//(nameB=ID ":")?
		public Group getGroup_3() { return cGroup_3; }

		//nameB=ID
		public Assignment getNameBAssignment_3_0() { return cNameBAssignment_3_0; }

		//ID
		public RuleCall getNameBIDTerminalRuleCall_3_0_0() { return cNameBIDTerminalRuleCall_3_0_0; }

		//":"
		public Keyword getColonKeyword_3_1() { return cColonKeyword_3_1; }

		//metaclassB=[ecore::EClass|NsPrefixQualifiedID]
		public Assignment getMetaclassBAssignment_4() { return cMetaclassBAssignment_4; }

		//[ecore::EClass|NsPrefixQualifiedID]
		public CrossReference getMetaclassBEClassCrossReference_4_0() { return cMetaclassBEClassCrossReference_4_0; }

		//NsPrefixQualifiedID
		public RuleCall getMetaclassBEClassNsPrefixQualifiedIDParserRuleCall_4_0_1() { return cMetaclassBEClassNsPrefixQualifiedIDParserRuleCall_4_0_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_5() { return cLeftCurlyBracketKeyword_5; }

		//whens+=When*
		public Assignment getWhensAssignment_6() { return cWhensAssignment_6; }

		//When
		public RuleCall getWhensWhenParserRuleCall_6_0() { return cWhensWhenParserRuleCall_6_0; }

		//withs+=With*
		public Assignment getWithsAssignment_7() { return cWithsAssignment_7; }

		//With
		public RuleCall getWithsWithParserRuleCall_7_0() { return cWithsWithParserRuleCall_7_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_8() { return cRightCurlyBracketKeyword_8; }
	}

	public class WhenElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "When");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWhenKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cXorExpressionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cXorExpressionXOrExpressionParserRuleCall_1_0 = (RuleCall)cXorExpressionAssignment_1.eContents().get(0);
		
		//When: // TODO make sure this is the right for binary OCL-like expressions for model elements
		//	"when" xorExpression=XOrExpression;
		public ParserRule getRule() { return rule; }

		//// TODO make sure this is the right for binary OCL-like expressions for model elements
		//"when" xorExpression=XOrExpression
		public Group getGroup() { return cGroup; }

		//// TODO make sure this is the right for binary OCL-like expressions for model elements
		//"when"
		public Keyword getWhenKeyword_0() { return cWhenKeyword_0; }

		//xorExpression=XOrExpression
		public Assignment getXorExpressionAssignment_1() { return cXorExpressionAssignment_1; }

		//XOrExpression
		public RuleCall getXorExpressionXOrExpressionParserRuleCall_1_0() { return cXorExpressionXOrExpressionParserRuleCall_1_0; }
	}

	public class WithElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "With");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWithKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cMappingBaseParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//With:
		//	"with" MappingBase;
		public ParserRule getRule() { return rule; }

		//"with" MappingBase
		public Group getGroup() { return cGroup; }

		//"with"
		public Keyword getWithKeyword_0() { return cWithKeyword_0; }

		//MappingBase
		public RuleCall getMappingBaseParserRuleCall_1() { return cMappingBaseParserRuleCall_1; }
	}

	public class InvariantElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Invariant");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cContextKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cNsPrefixQualifiedIDParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cInvKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameIDTerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Assignment cParametersAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cParametersParameterParserRuleCall_4_0 = (RuleCall)cParametersAssignment_4.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cXorExpressionAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cXorExpressionXOrExpressionParserRuleCall_6_0 = (RuleCall)cXorExpressionAssignment_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//// ***** //
		//// * I * //
		//// ***** //
		//Invariant: // TODO try to use an OCL.xtext or similar
		//	"context" NsPrefixQualifiedID "inv" name=ID parameters+=Parameter? "{" // TODO make sure this is the right for binary OCL-like expressions for model elements
		//	xorExpression=XOrExpression "}";
		public ParserRule getRule() { return rule; }

		//// TODO try to use an OCL.xtext or similar
		//"context" NsPrefixQualifiedID "inv" name=ID parameters+=Parameter? "{" // TODO make sure this is the right for binary OCL-like expressions for model elements
		//xorExpression=XOrExpression "}"
		public Group getGroup() { return cGroup; }

		//// TODO try to use an OCL.xtext or similar
		//"context"
		public Keyword getContextKeyword_0() { return cContextKeyword_0; }

		//NsPrefixQualifiedID
		public RuleCall getNsPrefixQualifiedIDParserRuleCall_1() { return cNsPrefixQualifiedIDParserRuleCall_1; }

		//"inv"
		public Keyword getInvKeyword_2() { return cInvKeyword_2; }

		//name=ID
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_3_0() { return cNameIDTerminalRuleCall_3_0; }

		//parameters+=Parameter?
		public Assignment getParametersAssignment_4() { return cParametersAssignment_4; }

		//Parameter
		public RuleCall getParametersParameterParserRuleCall_4_0() { return cParametersParameterParserRuleCall_4_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_5() { return cLeftCurlyBracketKeyword_5; }

		//// TODO make sure this is the right for binary OCL-like expressions for model elements
		//xorExpression=XOrExpression
		public Assignment getXorExpressionAssignment_6() { return cXorExpressionAssignment_6; }

		//XOrExpression
		public RuleCall getXorExpressionXOrExpressionParserRuleCall_6_0() { return cXorExpressionXOrExpressionParserRuleCall_6_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}

	public class ParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Parameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0_0 = (RuleCall)cNameAssignment_0_0.eContents().get(0);
		private final Keyword cColonKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cMetaclassAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cMetaclassEClassCrossReference_1_0 = (CrossReference)cMetaclassAssignment_1.eContents().get(0);
		private final RuleCall cMetaclassEClassNsPrefixQualifiedIDParserRuleCall_1_0_1 = (RuleCall)cMetaclassEClassCrossReference_1_0.eContents().get(1);
		
		//Parameter:
		//	(name=ID ":")? metaclass=[ecore::EClass|NsPrefixQualifiedID];
		public ParserRule getRule() { return rule; }

		//(name=ID ":")? metaclass=[ecore::EClass|NsPrefixQualifiedID]
		public Group getGroup() { return cGroup; }

		//(name=ID ":")?
		public Group getGroup_0() { return cGroup_0; }

		//name=ID
		public Assignment getNameAssignment_0_0() { return cNameAssignment_0_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0_0() { return cNameIDTerminalRuleCall_0_0_0; }

		//":"
		public Keyword getColonKeyword_0_1() { return cColonKeyword_0_1; }

		//metaclass=[ecore::EClass|NsPrefixQualifiedID]
		public Assignment getMetaclassAssignment_1() { return cMetaclassAssignment_1; }

		//[ecore::EClass|NsPrefixQualifiedID]
		public CrossReference getMetaclassEClassCrossReference_1_0() { return cMetaclassEClassCrossReference_1_0; }

		//NsPrefixQualifiedID
		public RuleCall getMetaclassEClassNsPrefixQualifiedIDParserRuleCall_1_0_1() { return cMetaclassEClassNsPrefixQualifiedIDParserRuleCall_1_0_1; }
	}

	public class GlobalVariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "GlobalVariable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cVarKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cJvmTypeReferenceAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cJvmTypeReferenceJvmTypeReferenceParserRuleCall_3_0 = (RuleCall)cJvmTypeReferenceAssignment_3.eContents().get(0);
		
		//// ***** //
		//// * R * //
		//// ***** //
		//GlobalVariable: // TODO make sure this is the right rule for java type declarations
		//	"var" name=ID ":" jvmTypeReference=JvmTypeReference;
		public ParserRule getRule() { return rule; }

		//// TODO make sure this is the right rule for java type declarations
		//"var" name=ID ":" jvmTypeReference=JvmTypeReference
		public Group getGroup() { return cGroup; }

		//// TODO make sure this is the right rule for java type declarations
		//"var"
		public Keyword getVarKeyword_0() { return cVarKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//":"
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }

		//jvmTypeReference=JvmTypeReference
		public Assignment getJvmTypeReferenceAssignment_3() { return cJvmTypeReferenceAssignment_3; }

		//JvmTypeReference
		public RuleCall getJvmTypeReferenceJvmTypeReferenceParserRuleCall_3_0() { return cJvmTypeReferenceJvmTypeReferenceParserRuleCall_3_0; }
	}

	public class ResponseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Response");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cOperationRestrictionAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cOperationRestrictionOperationRestrictionParserRuleCall_0_0_0 = (RuleCall)cOperationRestrictionAssignment_0_0.eContents().get(0);
		private final Assignment cInvariantRestrictionAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cInvariantRestrictionInvariantRestrictionParserRuleCall_0_1_0 = (RuleCall)cInvariantRestrictionAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Assignment cOperationRestrictionAssignment_1_0_0 = (Assignment)cGroup_1_0.eContents().get(0);
		private final RuleCall cOperationRestrictionOperationRestrictionParserRuleCall_1_0_0_0 = (RuleCall)cOperationRestrictionAssignment_1_0_0.eContents().get(0);
		private final Assignment cInvariantRestrictionAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final RuleCall cInvariantRestrictionInvariantRestrictionParserRuleCall_1_0_1_0 = (RuleCall)cInvariantRestrictionAssignment_1_0_1.eContents().get(0);
		private final Keyword cByKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cXtendStmtAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cXtendStmtSTRINGTerminalRuleCall_1_3_0 = (RuleCall)cXtendStmtAssignment_1_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_1_4 = (Keyword)cGroup_1.eContents().get(4);
		
		//Response:
		//	operationRestriction=OperationRestriction invariantRestriction=InvariantRestriction? |
		//	(operationRestriction=OperationRestriction? invariantRestriction=InvariantRestriction) "by" "{" // TODO allow all Xtend stmts here
		//	xtendStmt=STRING "}";
		public ParserRule getRule() { return rule; }

		//operationRestriction=OperationRestriction invariantRestriction=InvariantRestriction? |
		//(operationRestriction=OperationRestriction? invariantRestriction=InvariantRestriction) "by" "{" // TODO allow all Xtend stmts here
		//xtendStmt=STRING "}"
		public Alternatives getAlternatives() { return cAlternatives; }

		//operationRestriction=OperationRestriction invariantRestriction=InvariantRestriction?
		public Group getGroup_0() { return cGroup_0; }

		//operationRestriction=OperationRestriction
		public Assignment getOperationRestrictionAssignment_0_0() { return cOperationRestrictionAssignment_0_0; }

		//OperationRestriction
		public RuleCall getOperationRestrictionOperationRestrictionParserRuleCall_0_0_0() { return cOperationRestrictionOperationRestrictionParserRuleCall_0_0_0; }

		//invariantRestriction=InvariantRestriction?
		public Assignment getInvariantRestrictionAssignment_0_1() { return cInvariantRestrictionAssignment_0_1; }

		//InvariantRestriction
		public RuleCall getInvariantRestrictionInvariantRestrictionParserRuleCall_0_1_0() { return cInvariantRestrictionInvariantRestrictionParserRuleCall_0_1_0; }

		//(operationRestriction=OperationRestriction? invariantRestriction=InvariantRestriction) "by" "{" // TODO allow all Xtend stmts here
		//xtendStmt=STRING "}"
		public Group getGroup_1() { return cGroup_1; }

		//operationRestriction=OperationRestriction? invariantRestriction=InvariantRestriction
		public Group getGroup_1_0() { return cGroup_1_0; }

		//operationRestriction=OperationRestriction?
		public Assignment getOperationRestrictionAssignment_1_0_0() { return cOperationRestrictionAssignment_1_0_0; }

		//OperationRestriction
		public RuleCall getOperationRestrictionOperationRestrictionParserRuleCall_1_0_0_0() { return cOperationRestrictionOperationRestrictionParserRuleCall_1_0_0_0; }

		//invariantRestriction=InvariantRestriction
		public Assignment getInvariantRestrictionAssignment_1_0_1() { return cInvariantRestrictionAssignment_1_0_1; }

		//InvariantRestriction
		public RuleCall getInvariantRestrictionInvariantRestrictionParserRuleCall_1_0_1_0() { return cInvariantRestrictionInvariantRestrictionParserRuleCall_1_0_1_0; }

		//"by"
		public Keyword getByKeyword_1_1() { return cByKeyword_1_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1_2() { return cLeftCurlyBracketKeyword_1_2; }

		//// TODO allow all Xtend stmts here
		//xtendStmt=STRING
		public Assignment getXtendStmtAssignment_1_3() { return cXtendStmtAssignment_1_3; }

		//STRING
		public RuleCall getXtendStmtSTRINGTerminalRuleCall_1_3_0() { return cXtendStmtSTRINGTerminalRuleCall_1_3_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_1_4() { return cRightCurlyBracketKeyword_1_4; }
	}

	public class OperationRestrictionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OperationRestriction");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cOnKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final RuleCall cMetalclassOperationRestrictionParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final RuleCall cFeatureOperationRestrictionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//OperationRestriction:
		//	"on" MetalclassOperationRestriction | FeatureOperationRestriction;
		public ParserRule getRule() { return rule; }

		//"on" MetalclassOperationRestriction | FeatureOperationRestriction
		public Alternatives getAlternatives() { return cAlternatives; }

		//"on" MetalclassOperationRestriction
		public Group getGroup_0() { return cGroup_0; }

		//"on"
		public Keyword getOnKeyword_0_0() { return cOnKeyword_0_0; }

		//MetalclassOperationRestriction
		public RuleCall getMetalclassOperationRestrictionParserRuleCall_0_1() { return cMetalclassOperationRestrictionParserRuleCall_0_1; }

		//FeatureOperationRestriction
		public RuleCall getFeatureOperationRestrictionParserRuleCall_1() { return cFeatureOperationRestrictionParserRuleCall_1; }
	}

	public class MetalclassOperationRestrictionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MetalclassOperationRestriction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cMetaclassOperationTypeParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cOfKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cNsPrefixQualifiedIDParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//MetalclassOperationRestriction:
		//	MetaclassOperationType "of" NsPrefixQualifiedID;
		public ParserRule getRule() { return rule; }

		//MetaclassOperationType "of" NsPrefixQualifiedID
		public Group getGroup() { return cGroup; }

		//MetaclassOperationType
		public RuleCall getMetaclassOperationTypeParserRuleCall_0() { return cMetaclassOperationTypeParserRuleCall_0; }

		//"of"
		public Keyword getOfKeyword_1() { return cOfKeyword_1; }

		//NsPrefixQualifiedID
		public RuleCall getNsPrefixQualifiedIDParserRuleCall_2() { return cNsPrefixQualifiedIDParserRuleCall_2; }
	}

	public class MetaclassOperationTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MetaclassOperationType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cCreationKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cUpdateKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cDeletionKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		
		//MetaclassOperationType:
		//	"creation" | "update" | "deletion";
		public ParserRule getRule() { return rule; }

		//"creation" | "update" | "deletion"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"creation"
		public Keyword getCreationKeyword_0() { return cCreationKeyword_0; }

		//"update"
		public Keyword getUpdateKeyword_1() { return cUpdateKeyword_1; }

		//"deletion"
		public Keyword getDeletionKeyword_2() { return cDeletionKeyword_2; }
	}

	public class FeatureOperationRestrictionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FeatureOperationRestriction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cFeatureOperationTypeParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cOfKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cNsPrefixQualifiedIDParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Keyword cFullStopKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cFeatureAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cFeatureIDTerminalRuleCall_4_0 = (RuleCall)cFeatureAssignment_4.eContents().get(0);
		
		//FeatureOperationRestriction:
		//	FeatureOperationType "of" NsPrefixQualifiedID "." feature=ID;
		public ParserRule getRule() { return rule; }

		//FeatureOperationType "of" NsPrefixQualifiedID "." feature=ID
		public Group getGroup() { return cGroup; }

		//FeatureOperationType
		public RuleCall getFeatureOperationTypeParserRuleCall_0() { return cFeatureOperationTypeParserRuleCall_0; }

		//"of"
		public Keyword getOfKeyword_1() { return cOfKeyword_1; }

		//NsPrefixQualifiedID
		public RuleCall getNsPrefixQualifiedIDParserRuleCall_2() { return cNsPrefixQualifiedIDParserRuleCall_2; }

		//"."
		public Keyword getFullStopKeyword_3() { return cFullStopKeyword_3; }

		//feature=ID
		public Assignment getFeatureAssignment_4() { return cFeatureAssignment_4; }

		//ID
		public RuleCall getFeatureIDTerminalRuleCall_4_0() { return cFeatureIDTerminalRuleCall_4_0; }
	}

	public class FeatureOperationTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FeatureOperationType");
		private final Keyword cUpdateKeyword = (Keyword)rule.eContents().get(1);
		
		//FeatureOperationType:
		//	"update";
		public ParserRule getRule() { return rule; }

		//"update"
		public Keyword getUpdateKeyword() { return cUpdateKeyword; }
	}

	public class InvariantRestrictionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "InvariantRestriction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRestoreKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cInvKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cNameInvariantCrossReference_2_0 = (CrossReference)cNameAssignment_2.eContents().get(0);
		private final RuleCall cNameInvariantIDTerminalRuleCall_2_0_1 = (RuleCall)cNameInvariantCrossReference_2_0.eContents().get(1);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLeftParenthesisKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cParametersAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cParametersParameterParserRuleCall_3_1_0 = (RuleCall)cParametersAssignment_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		
		//InvariantRestriction:
		//	"restore" "inv" name=[Invariant] ("(" parameters+=Parameter ")")?;
		public ParserRule getRule() { return rule; }

		//"restore" "inv" name=[Invariant] ("(" parameters+=Parameter ")")?
		public Group getGroup() { return cGroup; }

		//"restore"
		public Keyword getRestoreKeyword_0() { return cRestoreKeyword_0; }

		//"inv"
		public Keyword getInvKeyword_1() { return cInvKeyword_1; }

		//name=[Invariant]
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//[Invariant]
		public CrossReference getNameInvariantCrossReference_2_0() { return cNameInvariantCrossReference_2_0; }

		//ID
		public RuleCall getNameInvariantIDTerminalRuleCall_2_0_1() { return cNameInvariantIDTerminalRuleCall_2_0_1; }

		//("(" parameters+=Parameter ")")?
		public Group getGroup_3() { return cGroup_3; }

		//"("
		public Keyword getLeftParenthesisKeyword_3_0() { return cLeftParenthesisKeyword_3_0; }

		//parameters+=Parameter
		public Assignment getParametersAssignment_3_1() { return cParametersAssignment_3_1; }

		//Parameter
		public RuleCall getParametersParameterParserRuleCall_3_1_0() { return cParametersParameterParserRuleCall_3_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3_2() { return cRightParenthesisKeyword_3_2; }
	}

	public class CpxIDElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CpxID");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//CpxID:
		//	ID ("." ID)+;
		public ParserRule getRule() { return rule; }

		//ID ("." ID)+
		public Group getGroup() { return cGroup; }

		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }

		//("." ID)+
		public Group getGroup_1() { return cGroup_1; }

		//"."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}

	public class NsPrefixQualifiedIDElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NsPrefixQualifiedID");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cColonColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cPackageQualifiedIDParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//// TODO find out how to make sure that only nsPrefixes used in the import stmts are allowed here
		////	nsPrefix=[NsPrefix|ID] '::' PackageQualifiedID
		//NsPrefixQualifiedID:
		//	ID "::" PackageQualifiedID;
		public ParserRule getRule() { return rule; }

		//ID "::" PackageQualifiedID
		public Group getGroup() { return cGroup; }

		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }

		//"::"
		public Keyword getColonColonKeyword_1() { return cColonColonKeyword_1; }

		//PackageQualifiedID
		public RuleCall getPackageQualifiedIDParserRuleCall_2() { return cPackageQualifiedIDParserRuleCall_2; }
	}

	public class PackageQualifiedIDElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PackageQualifiedID");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cColonColonKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Keyword cColonColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final RuleCall cCpxIDParserRuleCall_3_0 = (RuleCall)cAlternatives_3.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_3_1 = (RuleCall)cAlternatives_3.eContents().get(1);
		
		//PackageQualifiedID:
		//	ID ("::" ID)* "::" (CpxID | ID);
		public ParserRule getRule() { return rule; }

		//ID ("::" ID)* "::" (CpxID | ID)
		public Group getGroup() { return cGroup; }

		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }

		//("::" ID)*
		public Group getGroup_1() { return cGroup_1; }

		//"::"
		public Keyword getColonColonKeyword_1_0() { return cColonColonKeyword_1_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }

		//"::"
		public Keyword getColonColonKeyword_2() { return cColonColonKeyword_2; }

		//CpxID | ID
		public Alternatives getAlternatives_3() { return cAlternatives_3; }

		//CpxID
		public RuleCall getCpxIDParserRuleCall_3_0() { return cCpxIDParserRuleCall_3_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_3_1() { return cIDTerminalRuleCall_3_1; }
	}
	
	
	private final ModelElements pModel;
	private final ImportElements pImport;
	private final MMNsPrefixElements pMMNsPrefix;
	private final MappingElements pMapping;
	private final MappingBaseElements pMappingBase;
	private final WhenElements pWhen;
	private final WithElements pWith;
	private final InvariantElements pInvariant;
	private final ParameterElements pParameter;
	private final GlobalVariableElements pGlobalVariable;
	private final ResponseElements pResponse;
	private final OperationRestrictionElements pOperationRestriction;
	private final MetalclassOperationRestrictionElements pMetalclassOperationRestriction;
	private final MetaclassOperationTypeElements pMetaclassOperationType;
	private final FeatureOperationRestrictionElements pFeatureOperationRestriction;
	private final FeatureOperationTypeElements pFeatureOperationType;
	private final InvariantRestrictionElements pInvariantRestriction;
	private final CpxIDElements pCpxID;
	private final NsPrefixQualifiedIDElements pNsPrefixQualifiedID;
	private final PackageQualifiedIDElements pPackageQualifiedID;
	
	private final Grammar grammar;

	private final XbaseGrammarAccess gaXbase;

	@Inject
	public MIRGrammarAccess(GrammarProvider grammarProvider,
		XbaseGrammarAccess gaXbase) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaXbase = gaXbase;
		this.pModel = new ModelElements();
		this.pImport = new ImportElements();
		this.pMMNsPrefix = new MMNsPrefixElements();
		this.pMapping = new MappingElements();
		this.pMappingBase = new MappingBaseElements();
		this.pWhen = new WhenElements();
		this.pWith = new WithElements();
		this.pInvariant = new InvariantElements();
		this.pParameter = new ParameterElements();
		this.pGlobalVariable = new GlobalVariableElements();
		this.pResponse = new ResponseElements();
		this.pOperationRestriction = new OperationRestrictionElements();
		this.pMetalclassOperationRestriction = new MetalclassOperationRestrictionElements();
		this.pMetaclassOperationType = new MetaclassOperationTypeElements();
		this.pFeatureOperationRestriction = new FeatureOperationRestrictionElements();
		this.pFeatureOperationType = new FeatureOperationTypeElements();
		this.pInvariantRestriction = new InvariantRestrictionElements();
		this.pCpxID = new CpxIDElements();
		this.pNsPrefixQualifiedID = new NsPrefixQualifiedIDElements();
		this.pPackageQualifiedID = new PackageQualifiedIDElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("edu.kit.ipd.sdq.vitruvius.framework.design.MIR".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public XbaseGrammarAccess getXbaseGrammarAccess() {
		return gaXbase;
	}

	
	//Model:
	//	mmImports+=Import+ javaImportSection=XImportSection? mappings+=Mapping* invariants+=Invariant*
	//	globalVariables+=GlobalVariable* respones+=Response*;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}

	//// TODO use importSection from Xtend.xtext
	//Import:
	//	"import" nsURI=STRING "as" mmNsPrefix=MMNsPrefix;
	public ImportElements getImportAccess() {
		return pImport;
	}
	
	public ParserRule getImportRule() {
		return getImportAccess().getRule();
	}

	//MMNsPrefix:
	//	nsPrefix=ID;
	public MMNsPrefixElements getMMNsPrefixAccess() {
		return pMMNsPrefix;
	}
	
	public ParserRule getMMNsPrefixRule() {
		return getMMNsPrefixAccess().getRule();
	}

	//// ***** //
	//// * M * //
	//// ***** //	
	//Mapping:
	//	"map" MappingBase;
	public MappingElements getMappingAccess() {
		return pMapping;
	}
	
	public ParserRule getMappingRule() {
		return getMappingAccess().getRule();
	}

	//MappingBase:
	//	(nameA=ID ":")? metaclassA=[ecore::EClass|NsPrefixQualifiedID] "to" (nameB=ID ":")?
	//	metaclassB=[ecore::EClass|NsPrefixQualifiedID] "{" whens+=When* withs+=With* "}";
	public MappingBaseElements getMappingBaseAccess() {
		return pMappingBase;
	}
	
	public ParserRule getMappingBaseRule() {
		return getMappingBaseAccess().getRule();
	}

	//When: // TODO make sure this is the right for binary OCL-like expressions for model elements
	//	"when" xorExpression=XOrExpression;
	public WhenElements getWhenAccess() {
		return pWhen;
	}
	
	public ParserRule getWhenRule() {
		return getWhenAccess().getRule();
	}

	//With:
	//	"with" MappingBase;
	public WithElements getWithAccess() {
		return pWith;
	}
	
	public ParserRule getWithRule() {
		return getWithAccess().getRule();
	}

	//// ***** //
	//// * I * //
	//// ***** //
	//Invariant: // TODO try to use an OCL.xtext or similar
	//	"context" NsPrefixQualifiedID "inv" name=ID parameters+=Parameter? "{" // TODO make sure this is the right for binary OCL-like expressions for model elements
	//	xorExpression=XOrExpression "}";
	public InvariantElements getInvariantAccess() {
		return pInvariant;
	}
	
	public ParserRule getInvariantRule() {
		return getInvariantAccess().getRule();
	}

	//Parameter:
	//	(name=ID ":")? metaclass=[ecore::EClass|NsPrefixQualifiedID];
	public ParameterElements getParameterAccess() {
		return pParameter;
	}
	
	public ParserRule getParameterRule() {
		return getParameterAccess().getRule();
	}

	//// ***** //
	//// * R * //
	//// ***** //
	//GlobalVariable: // TODO make sure this is the right rule for java type declarations
	//	"var" name=ID ":" jvmTypeReference=JvmTypeReference;
	public GlobalVariableElements getGlobalVariableAccess() {
		return pGlobalVariable;
	}
	
	public ParserRule getGlobalVariableRule() {
		return getGlobalVariableAccess().getRule();
	}

	//Response:
	//	operationRestriction=OperationRestriction invariantRestriction=InvariantRestriction? |
	//	(operationRestriction=OperationRestriction? invariantRestriction=InvariantRestriction) "by" "{" // TODO allow all Xtend stmts here
	//	xtendStmt=STRING "}";
	public ResponseElements getResponseAccess() {
		return pResponse;
	}
	
	public ParserRule getResponseRule() {
		return getResponseAccess().getRule();
	}

	//OperationRestriction:
	//	"on" MetalclassOperationRestriction | FeatureOperationRestriction;
	public OperationRestrictionElements getOperationRestrictionAccess() {
		return pOperationRestriction;
	}
	
	public ParserRule getOperationRestrictionRule() {
		return getOperationRestrictionAccess().getRule();
	}

	//MetalclassOperationRestriction:
	//	MetaclassOperationType "of" NsPrefixQualifiedID;
	public MetalclassOperationRestrictionElements getMetalclassOperationRestrictionAccess() {
		return pMetalclassOperationRestriction;
	}
	
	public ParserRule getMetalclassOperationRestrictionRule() {
		return getMetalclassOperationRestrictionAccess().getRule();
	}

	//MetaclassOperationType:
	//	"creation" | "update" | "deletion";
	public MetaclassOperationTypeElements getMetaclassOperationTypeAccess() {
		return pMetaclassOperationType;
	}
	
	public ParserRule getMetaclassOperationTypeRule() {
		return getMetaclassOperationTypeAccess().getRule();
	}

	//FeatureOperationRestriction:
	//	FeatureOperationType "of" NsPrefixQualifiedID "." feature=ID;
	public FeatureOperationRestrictionElements getFeatureOperationRestrictionAccess() {
		return pFeatureOperationRestriction;
	}
	
	public ParserRule getFeatureOperationRestrictionRule() {
		return getFeatureOperationRestrictionAccess().getRule();
	}

	//FeatureOperationType:
	//	"update";
	public FeatureOperationTypeElements getFeatureOperationTypeAccess() {
		return pFeatureOperationType;
	}
	
	public ParserRule getFeatureOperationTypeRule() {
		return getFeatureOperationTypeAccess().getRule();
	}

	//InvariantRestriction:
	//	"restore" "inv" name=[Invariant] ("(" parameters+=Parameter ")")?;
	public InvariantRestrictionElements getInvariantRestrictionAccess() {
		return pInvariantRestriction;
	}
	
	public ParserRule getInvariantRestrictionRule() {
		return getInvariantRestrictionAccess().getRule();
	}

	//CpxID:
	//	ID ("." ID)+;
	public CpxIDElements getCpxIDAccess() {
		return pCpxID;
	}
	
	public ParserRule getCpxIDRule() {
		return getCpxIDAccess().getRule();
	}

	//// TODO find out how to make sure that only nsPrefixes used in the import stmts are allowed here
	////	nsPrefix=[NsPrefix|ID] '::' PackageQualifiedID
	//NsPrefixQualifiedID:
	//	ID "::" PackageQualifiedID;
	public NsPrefixQualifiedIDElements getNsPrefixQualifiedIDAccess() {
		return pNsPrefixQualifiedID;
	}
	
	public ParserRule getNsPrefixQualifiedIDRule() {
		return getNsPrefixQualifiedIDAccess().getRule();
	}

	//PackageQualifiedID:
	//	ID ("::" ID)* "::" (CpxID | ID);
	public PackageQualifiedIDElements getPackageQualifiedIDAccess() {
		return pPackageQualifiedID;
	}
	
	public ParserRule getPackageQualifiedIDRule() {
		return getPackageQualifiedIDAccess().getRule();
	}

	//XExpression:
	//	XAssignment;
	public XbaseGrammarAccess.XExpressionElements getXExpressionAccess() {
		return gaXbase.getXExpressionAccess();
	}
	
	public ParserRule getXExpressionRule() {
		return getXExpressionAccess().getRule();
	}

	//XAssignment returns XExpression:
	//	{XAssignment} feature=[types::JvmIdentifiableElement|FeatureCallID] OpSingleAssign value=XAssignment | XOrExpression
	//	(=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpMultiAssign])
	//	rightOperand=XAssignment)?;
	public XbaseGrammarAccess.XAssignmentElements getXAssignmentAccess() {
		return gaXbase.getXAssignmentAccess();
	}
	
	public ParserRule getXAssignmentRule() {
		return getXAssignmentAccess().getRule();
	}

	//OpSingleAssign:
	//	"=";
	public XbaseGrammarAccess.OpSingleAssignElements getOpSingleAssignAccess() {
		return gaXbase.getOpSingleAssignAccess();
	}
	
	public ParserRule getOpSingleAssignRule() {
		return getOpSingleAssignAccess().getRule();
	}

	//OpMultiAssign:
	//	"+=" | "-=" | "*=" | "/=" | "%=" | "<" "<" "=" | ">" ">"? ">=";
	public XbaseGrammarAccess.OpMultiAssignElements getOpMultiAssignAccess() {
		return gaXbase.getOpMultiAssignAccess();
	}
	
	public ParserRule getOpMultiAssignRule() {
		return getOpMultiAssignAccess().getRule();
	}

	//XOrExpression returns XExpression:
	//	XAndExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpOr])
	//	rightOperand=XAndExpression)*;
	public XbaseGrammarAccess.XOrExpressionElements getXOrExpressionAccess() {
		return gaXbase.getXOrExpressionAccess();
	}
	
	public ParserRule getXOrExpressionRule() {
		return getXOrExpressionAccess().getRule();
	}

	//OpOr:
	//	"||";
	public XbaseGrammarAccess.OpOrElements getOpOrAccess() {
		return gaXbase.getOpOrAccess();
	}
	
	public ParserRule getOpOrRule() {
		return getOpOrAccess().getRule();
	}

	//XAndExpression returns XExpression:
	//	XEqualityExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpAnd])
	//	rightOperand=XEqualityExpression)*;
	public XbaseGrammarAccess.XAndExpressionElements getXAndExpressionAccess() {
		return gaXbase.getXAndExpressionAccess();
	}
	
	public ParserRule getXAndExpressionRule() {
		return getXAndExpressionAccess().getRule();
	}

	//OpAnd:
	//	"&&";
	public XbaseGrammarAccess.OpAndElements getOpAndAccess() {
		return gaXbase.getOpAndAccess();
	}
	
	public ParserRule getOpAndRule() {
		return getOpAndAccess().getRule();
	}

	//XEqualityExpression returns XExpression:
	//	XRelationalExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpEquality])
	//	rightOperand=XRelationalExpression)*;
	public XbaseGrammarAccess.XEqualityExpressionElements getXEqualityExpressionAccess() {
		return gaXbase.getXEqualityExpressionAccess();
	}
	
	public ParserRule getXEqualityExpressionRule() {
		return getXEqualityExpressionAccess().getRule();
	}

	//OpEquality:
	//	"==" | "!=" | "===" | "!==";
	public XbaseGrammarAccess.OpEqualityElements getOpEqualityAccess() {
		return gaXbase.getOpEqualityAccess();
	}
	
	public ParserRule getOpEqualityRule() {
		return getOpEqualityAccess().getRule();
	}

	//XRelationalExpression returns XExpression:
	//	XOtherOperatorExpression (=> ({XInstanceOfExpression.expression=current} "instanceof") type=JvmTypeReference | =>
	//	({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpCompare])
	//	rightOperand=XOtherOperatorExpression)*;
	public XbaseGrammarAccess.XRelationalExpressionElements getXRelationalExpressionAccess() {
		return gaXbase.getXRelationalExpressionAccess();
	}
	
	public ParserRule getXRelationalExpressionRule() {
		return getXRelationalExpressionAccess().getRule();
	}

	//OpCompare:
	//	">=" | "<" "=" | ">" | "<";
	public XbaseGrammarAccess.OpCompareElements getOpCompareAccess() {
		return gaXbase.getOpCompareAccess();
	}
	
	public ParserRule getOpCompareRule() {
		return getOpCompareAccess().getRule();
	}

	//XOtherOperatorExpression returns XExpression:
	//	XAdditiveExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpOther])
	//	rightOperand=XAdditiveExpression)*;
	public XbaseGrammarAccess.XOtherOperatorExpressionElements getXOtherOperatorExpressionAccess() {
		return gaXbase.getXOtherOperatorExpressionAccess();
	}
	
	public ParserRule getXOtherOperatorExpressionRule() {
		return getXOtherOperatorExpressionAccess().getRule();
	}

	//OpOther:
	//	"->" | "..<" | ">" ".." | ".." | "=>" | ">" (=> (">" ">") | ">") | "<" (=> ("<" "<") | "<" | "=>") | "<>" | "?:";
	public XbaseGrammarAccess.OpOtherElements getOpOtherAccess() {
		return gaXbase.getOpOtherAccess();
	}
	
	public ParserRule getOpOtherRule() {
		return getOpOtherAccess().getRule();
	}

	//XAdditiveExpression returns XExpression:
	//	XMultiplicativeExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpAdd])
	//	rightOperand=XMultiplicativeExpression)*;
	public XbaseGrammarAccess.XAdditiveExpressionElements getXAdditiveExpressionAccess() {
		return gaXbase.getXAdditiveExpressionAccess();
	}
	
	public ParserRule getXAdditiveExpressionRule() {
		return getXAdditiveExpressionAccess().getRule();
	}

	//OpAdd:
	//	"+" | "-";
	public XbaseGrammarAccess.OpAddElements getOpAddAccess() {
		return gaXbase.getOpAddAccess();
	}
	
	public ParserRule getOpAddRule() {
		return getOpAddAccess().getRule();
	}

	//XMultiplicativeExpression returns XExpression:
	//	XUnaryOperation (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpMulti])
	//	rightOperand=XUnaryOperation)*;
	public XbaseGrammarAccess.XMultiplicativeExpressionElements getXMultiplicativeExpressionAccess() {
		return gaXbase.getXMultiplicativeExpressionAccess();
	}
	
	public ParserRule getXMultiplicativeExpressionRule() {
		return getXMultiplicativeExpressionAccess().getRule();
	}

	//OpMulti:
	//	"*" | "**" | "/" | "%";
	public XbaseGrammarAccess.OpMultiElements getOpMultiAccess() {
		return gaXbase.getOpMultiAccess();
	}
	
	public ParserRule getOpMultiRule() {
		return getOpMultiAccess().getRule();
	}

	//XUnaryOperation returns XExpression:
	//	{XUnaryOperation} feature=[types::JvmIdentifiableElement|OpUnary] operand=XUnaryOperation | XCastedExpression;
	public XbaseGrammarAccess.XUnaryOperationElements getXUnaryOperationAccess() {
		return gaXbase.getXUnaryOperationAccess();
	}
	
	public ParserRule getXUnaryOperationRule() {
		return getXUnaryOperationAccess().getRule();
	}

	//OpUnary:
	//	"!" | "-" | "+";
	public XbaseGrammarAccess.OpUnaryElements getOpUnaryAccess() {
		return gaXbase.getOpUnaryAccess();
	}
	
	public ParserRule getOpUnaryRule() {
		return getOpUnaryAccess().getRule();
	}

	//XCastedExpression returns XExpression:
	//	XPostfixOperation (=> ({XCastedExpression.target=current} "as") type=JvmTypeReference)*;
	public XbaseGrammarAccess.XCastedExpressionElements getXCastedExpressionAccess() {
		return gaXbase.getXCastedExpressionAccess();
	}
	
	public ParserRule getXCastedExpressionRule() {
		return getXCastedExpressionAccess().getRule();
	}

	//XPostfixOperation returns XExpression:
	//	XMemberFeatureCall => ({XPostfixOperation.operand=current} feature=[types::JvmIdentifiableElement|OpPostfix])?;
	public XbaseGrammarAccess.XPostfixOperationElements getXPostfixOperationAccess() {
		return gaXbase.getXPostfixOperationAccess();
	}
	
	public ParserRule getXPostfixOperationRule() {
		return getXPostfixOperationAccess().getRule();
	}

	//OpPostfix:
	//	"++" | "--";
	public XbaseGrammarAccess.OpPostfixElements getOpPostfixAccess() {
		return gaXbase.getOpPostfixAccess();
	}
	
	public ParserRule getOpPostfixRule() {
		return getOpPostfixAccess().getRule();
	}

	//XMemberFeatureCall returns XExpression:
	//	XPrimaryExpression (=> ({XAssignment.assignable=current} ("." | explicitStatic?="::")
	//	feature=[types::JvmIdentifiableElement|FeatureCallID] OpSingleAssign) value=XAssignment | =>
	//	({XMemberFeatureCall.memberCallTarget=current} ("." | nullSafe?="?." | explicitStatic?="::")) ("<"
	//	typeArguments+=JvmArgumentTypeReference ("," typeArguments+=JvmArgumentTypeReference)* ">")?
	//	feature=[types::JvmIdentifiableElement|IdOrSuper] (=> explicitOperationCall?="(" (memberCallArguments+=XShortClosure |
	//	memberCallArguments+=XExpression ("," memberCallArguments+=XExpression)*)? ")")? memberCallArguments+=XClosure?)*;
	public XbaseGrammarAccess.XMemberFeatureCallElements getXMemberFeatureCallAccess() {
		return gaXbase.getXMemberFeatureCallAccess();
	}
	
	public ParserRule getXMemberFeatureCallRule() {
		return getXMemberFeatureCallAccess().getRule();
	}

	//XPrimaryExpression returns XExpression:
	//	XConstructorCall | XBlockExpression | XSwitchExpression | XSynchronizedExpression | XFeatureCall | XLiteral |
	//	XIfExpression | XForLoopExpression | XBasicForLoopExpression | XWhileExpression | XDoWhileExpression |
	//	XThrowExpression | XReturnExpression | XTryCatchFinallyExpression | XParenthesizedExpression;
	public XbaseGrammarAccess.XPrimaryExpressionElements getXPrimaryExpressionAccess() {
		return gaXbase.getXPrimaryExpressionAccess();
	}
	
	public ParserRule getXPrimaryExpressionRule() {
		return getXPrimaryExpressionAccess().getRule();
	}

	//XLiteral returns XExpression:
	//	XCollectionLiteral | XClosure | XBooleanLiteral | XNumberLiteral | XNullLiteral | XStringLiteral | XTypeLiteral;
	public XbaseGrammarAccess.XLiteralElements getXLiteralAccess() {
		return gaXbase.getXLiteralAccess();
	}
	
	public ParserRule getXLiteralRule() {
		return getXLiteralAccess().getRule();
	}

	//XCollectionLiteral:
	//	XSetLiteral | XListLiteral;
	public XbaseGrammarAccess.XCollectionLiteralElements getXCollectionLiteralAccess() {
		return gaXbase.getXCollectionLiteralAccess();
	}
	
	public ParserRule getXCollectionLiteralRule() {
		return getXCollectionLiteralAccess().getRule();
	}

	//XSetLiteral:
	//	{XSetLiteral} "#" "{" (elements+=XExpression ("," elements+=XExpression)*)? "}";
	public XbaseGrammarAccess.XSetLiteralElements getXSetLiteralAccess() {
		return gaXbase.getXSetLiteralAccess();
	}
	
	public ParserRule getXSetLiteralRule() {
		return getXSetLiteralAccess().getRule();
	}

	//XListLiteral:
	//	{XListLiteral} "#" "[" (elements+=XExpression ("," elements+=XExpression)*)? "]";
	public XbaseGrammarAccess.XListLiteralElements getXListLiteralAccess() {
		return gaXbase.getXListLiteralAccess();
	}
	
	public ParserRule getXListLiteralRule() {
		return getXListLiteralAccess().getRule();
	}

	//XClosure returns XExpression:
	//	=> ({XClosure} "[") => ((declaredFormalParameters+=JvmFormalParameter (","
	//	declaredFormalParameters+=JvmFormalParameter)*)? explicitSyntax?="|")? expression=XExpressionInClosure "]";
	public XbaseGrammarAccess.XClosureElements getXClosureAccess() {
		return gaXbase.getXClosureAccess();
	}
	
	public ParserRule getXClosureRule() {
		return getXClosureAccess().getRule();
	}

	//XExpressionInClosure returns XExpression:
	//	{XBlockExpression} (expressions+=XExpressionOrVarDeclaration ";"?)*;
	public XbaseGrammarAccess.XExpressionInClosureElements getXExpressionInClosureAccess() {
		return gaXbase.getXExpressionInClosureAccess();
	}
	
	public ParserRule getXExpressionInClosureRule() {
		return getXExpressionInClosureAccess().getRule();
	}

	//XShortClosure returns XExpression:
	//	=> ({XClosure} (declaredFormalParameters+=JvmFormalParameter ("," declaredFormalParameters+=JvmFormalParameter)*)?
	//	explicitSyntax?="|") expression=XExpression;
	public XbaseGrammarAccess.XShortClosureElements getXShortClosureAccess() {
		return gaXbase.getXShortClosureAccess();
	}
	
	public ParserRule getXShortClosureRule() {
		return getXShortClosureAccess().getRule();
	}

	//XParenthesizedExpression returns XExpression:
	//	"(" XExpression ")";
	public XbaseGrammarAccess.XParenthesizedExpressionElements getXParenthesizedExpressionAccess() {
		return gaXbase.getXParenthesizedExpressionAccess();
	}
	
	public ParserRule getXParenthesizedExpressionRule() {
		return getXParenthesizedExpressionAccess().getRule();
	}

	//XIfExpression returns XExpression:
	//	{XIfExpression} "if" "(" if=XExpression ")" then=XExpression ("else" else=XExpression)?;
	public XbaseGrammarAccess.XIfExpressionElements getXIfExpressionAccess() {
		return gaXbase.getXIfExpressionAccess();
	}
	
	public ParserRule getXIfExpressionRule() {
		return getXIfExpressionAccess().getRule();
	}

	//XSwitchExpression returns XExpression:
	//	{XSwitchExpression} "switch" (=> ("(" declaredParam=JvmFormalParameter ":") switch=XExpression ")" | =>
	//	(declaredParam=JvmFormalParameter ":")? switch=XExpression) "{" cases+=XCasePart* ("default" ":" default=XExpression)?
	//	"}";
	public XbaseGrammarAccess.XSwitchExpressionElements getXSwitchExpressionAccess() {
		return gaXbase.getXSwitchExpressionAccess();
	}
	
	public ParserRule getXSwitchExpressionRule() {
		return getXSwitchExpressionAccess().getRule();
	}

	//XCasePart:
	//	{XCasePart} typeGuard=JvmTypeReference? ("case" case=XExpression)? (":" then=XExpression | fallThrough?=",");
	public XbaseGrammarAccess.XCasePartElements getXCasePartAccess() {
		return gaXbase.getXCasePartAccess();
	}
	
	public ParserRule getXCasePartRule() {
		return getXCasePartAccess().getRule();
	}

	//XForLoopExpression returns XExpression:
	//	=> ({XForLoopExpression} "for" "(" declaredParam=JvmFormalParameter ":") forExpression=XExpression ")"
	//	eachExpression=XExpression;
	public XbaseGrammarAccess.XForLoopExpressionElements getXForLoopExpressionAccess() {
		return gaXbase.getXForLoopExpressionAccess();
	}
	
	public ParserRule getXForLoopExpressionRule() {
		return getXForLoopExpressionAccess().getRule();
	}

	//XBasicForLoopExpression returns XExpression:
	//	{XBasicForLoopExpression} "for" "(" (initExpressions+=XExpressionOrVarDeclaration (","
	//	initExpressions+=XExpressionOrVarDeclaration)*)? ";" expression=XExpression? ";" (updateExpressions+=XExpression (","
	//	updateExpressions+=XExpression)*)? ")" eachExpression=XExpression;
	public XbaseGrammarAccess.XBasicForLoopExpressionElements getXBasicForLoopExpressionAccess() {
		return gaXbase.getXBasicForLoopExpressionAccess();
	}
	
	public ParserRule getXBasicForLoopExpressionRule() {
		return getXBasicForLoopExpressionAccess().getRule();
	}

	//XWhileExpression returns XExpression:
	//	{XWhileExpression} "while" "(" predicate=XExpression ")" body=XExpression;
	public XbaseGrammarAccess.XWhileExpressionElements getXWhileExpressionAccess() {
		return gaXbase.getXWhileExpressionAccess();
	}
	
	public ParserRule getXWhileExpressionRule() {
		return getXWhileExpressionAccess().getRule();
	}

	//XDoWhileExpression returns XExpression:
	//	{XDoWhileExpression} "do" body=XExpression "while" "(" predicate=XExpression ")";
	public XbaseGrammarAccess.XDoWhileExpressionElements getXDoWhileExpressionAccess() {
		return gaXbase.getXDoWhileExpressionAccess();
	}
	
	public ParserRule getXDoWhileExpressionRule() {
		return getXDoWhileExpressionAccess().getRule();
	}

	//XBlockExpression returns XExpression:
	//	{XBlockExpression} "{" (expressions+=XExpressionOrVarDeclaration ";"?)* "}";
	public XbaseGrammarAccess.XBlockExpressionElements getXBlockExpressionAccess() {
		return gaXbase.getXBlockExpressionAccess();
	}
	
	public ParserRule getXBlockExpressionRule() {
		return getXBlockExpressionAccess().getRule();
	}

	//XExpressionOrVarDeclaration returns XExpression:
	//	XVariableDeclaration | XExpression;
	public XbaseGrammarAccess.XExpressionOrVarDeclarationElements getXExpressionOrVarDeclarationAccess() {
		return gaXbase.getXExpressionOrVarDeclarationAccess();
	}
	
	public ParserRule getXExpressionOrVarDeclarationRule() {
		return getXExpressionOrVarDeclarationAccess().getRule();
	}

	//XVariableDeclaration returns XExpression:
	//	{XVariableDeclaration} (writeable?="var" | "val") (=> (type=JvmTypeReference name=ValidID) | name=ValidID) ("="
	//	right=XExpression)?;
	public XbaseGrammarAccess.XVariableDeclarationElements getXVariableDeclarationAccess() {
		return gaXbase.getXVariableDeclarationAccess();
	}
	
	public ParserRule getXVariableDeclarationRule() {
		return getXVariableDeclarationAccess().getRule();
	}

	//JvmFormalParameter returns types::JvmFormalParameter:
	//	parameterType=JvmTypeReference? name=ValidID;
	public XbaseGrammarAccess.JvmFormalParameterElements getJvmFormalParameterAccess() {
		return gaXbase.getJvmFormalParameterAccess();
	}
	
	public ParserRule getJvmFormalParameterRule() {
		return getJvmFormalParameterAccess().getRule();
	}

	//FullJvmFormalParameter returns types::JvmFormalParameter:
	//	parameterType=JvmTypeReference name=ValidID;
	public XbaseGrammarAccess.FullJvmFormalParameterElements getFullJvmFormalParameterAccess() {
		return gaXbase.getFullJvmFormalParameterAccess();
	}
	
	public ParserRule getFullJvmFormalParameterRule() {
		return getFullJvmFormalParameterAccess().getRule();
	}

	//XFeatureCall returns XExpression:
	//	{XFeatureCall} ("<" typeArguments+=JvmArgumentTypeReference ("," typeArguments+=JvmArgumentTypeReference)* ">")?
	//	feature=[types::JvmIdentifiableElement|IdOrSuper] (=> explicitOperationCall?="(" (featureCallArguments+=XShortClosure
	//	| featureCallArguments+=XExpression ("," featureCallArguments+=XExpression)*)? ")")? featureCallArguments+=XClosure?;
	public XbaseGrammarAccess.XFeatureCallElements getXFeatureCallAccess() {
		return gaXbase.getXFeatureCallAccess();
	}
	
	public ParserRule getXFeatureCallRule() {
		return getXFeatureCallAccess().getRule();
	}

	//FeatureCallID:
	//	ValidID | "extends" | "static" | "import" | "extension";
	public XbaseGrammarAccess.FeatureCallIDElements getFeatureCallIDAccess() {
		return gaXbase.getFeatureCallIDAccess();
	}
	
	public ParserRule getFeatureCallIDRule() {
		return getFeatureCallIDAccess().getRule();
	}

	//IdOrSuper:
	//	FeatureCallID | "super";
	public XbaseGrammarAccess.IdOrSuperElements getIdOrSuperAccess() {
		return gaXbase.getIdOrSuperAccess();
	}
	
	public ParserRule getIdOrSuperRule() {
		return getIdOrSuperAccess().getRule();
	}

	//XConstructorCall returns XExpression:
	//	{XConstructorCall} "new" constructor=[types::JvmConstructor|QualifiedName] ("<"
	//	typeArguments+=JvmArgumentTypeReference ("," typeArguments+=JvmArgumentTypeReference)* ">")? (=>
	//	explicitConstructorCall?="(" (arguments+=XShortClosure | arguments+=XExpression ("," arguments+=XExpression)*)? ")")?
	//	arguments+=XClosure?;
	public XbaseGrammarAccess.XConstructorCallElements getXConstructorCallAccess() {
		return gaXbase.getXConstructorCallAccess();
	}
	
	public ParserRule getXConstructorCallRule() {
		return getXConstructorCallAccess().getRule();
	}

	//XBooleanLiteral returns XExpression:
	//	{XBooleanLiteral} ("false" | isTrue?="true");
	public XbaseGrammarAccess.XBooleanLiteralElements getXBooleanLiteralAccess() {
		return gaXbase.getXBooleanLiteralAccess();
	}
	
	public ParserRule getXBooleanLiteralRule() {
		return getXBooleanLiteralAccess().getRule();
	}

	//XNullLiteral returns XExpression:
	//	{XNullLiteral} "null";
	public XbaseGrammarAccess.XNullLiteralElements getXNullLiteralAccess() {
		return gaXbase.getXNullLiteralAccess();
	}
	
	public ParserRule getXNullLiteralRule() {
		return getXNullLiteralAccess().getRule();
	}

	//XNumberLiteral returns XExpression:
	//	{XNumberLiteral} value=Number;
	public XbaseGrammarAccess.XNumberLiteralElements getXNumberLiteralAccess() {
		return gaXbase.getXNumberLiteralAccess();
	}
	
	public ParserRule getXNumberLiteralRule() {
		return getXNumberLiteralAccess().getRule();
	}

	//XStringLiteral returns XExpression:
	//	{XStringLiteral} value=STRING;
	public XbaseGrammarAccess.XStringLiteralElements getXStringLiteralAccess() {
		return gaXbase.getXStringLiteralAccess();
	}
	
	public ParserRule getXStringLiteralRule() {
		return getXStringLiteralAccess().getRule();
	}

	//XTypeLiteral returns XExpression:
	//	{XTypeLiteral} "typeof" "(" type=[types::JvmType|QualifiedName] arrayDimensions+=ArrayBrackets* ")";
	public XbaseGrammarAccess.XTypeLiteralElements getXTypeLiteralAccess() {
		return gaXbase.getXTypeLiteralAccess();
	}
	
	public ParserRule getXTypeLiteralRule() {
		return getXTypeLiteralAccess().getRule();
	}

	//XThrowExpression returns XExpression:
	//	{XThrowExpression} "throw" expression=XExpression;
	public XbaseGrammarAccess.XThrowExpressionElements getXThrowExpressionAccess() {
		return gaXbase.getXThrowExpressionAccess();
	}
	
	public ParserRule getXThrowExpressionRule() {
		return getXThrowExpressionAccess().getRule();
	}

	//XReturnExpression returns XExpression:
	//	{XReturnExpression} "return" -> expression=XExpression?;
	public XbaseGrammarAccess.XReturnExpressionElements getXReturnExpressionAccess() {
		return gaXbase.getXReturnExpressionAccess();
	}
	
	public ParserRule getXReturnExpressionRule() {
		return getXReturnExpressionAccess().getRule();
	}

	//XTryCatchFinallyExpression returns XExpression:
	//	{XTryCatchFinallyExpression} "try" expression=XExpression (catchClauses+=XCatchClause+ ("finally"
	//	finallyExpression=XExpression)? | "finally" finallyExpression=XExpression);
	public XbaseGrammarAccess.XTryCatchFinallyExpressionElements getXTryCatchFinallyExpressionAccess() {
		return gaXbase.getXTryCatchFinallyExpressionAccess();
	}
	
	public ParserRule getXTryCatchFinallyExpressionRule() {
		return getXTryCatchFinallyExpressionAccess().getRule();
	}

	//XSynchronizedExpression returns XExpression:
	//	=> ({XSynchronizedExpression} "synchronized" "(") param=XExpression ")" expression=XExpression;
	public XbaseGrammarAccess.XSynchronizedExpressionElements getXSynchronizedExpressionAccess() {
		return gaXbase.getXSynchronizedExpressionAccess();
	}
	
	public ParserRule getXSynchronizedExpressionRule() {
		return getXSynchronizedExpressionAccess().getRule();
	}

	//XCatchClause:
	//	"catch" "(" declaredParam=FullJvmFormalParameter ")" expression=XExpression;
	public XbaseGrammarAccess.XCatchClauseElements getXCatchClauseAccess() {
		return gaXbase.getXCatchClauseAccess();
	}
	
	public ParserRule getXCatchClauseRule() {
		return getXCatchClauseAccess().getRule();
	}

	//QualifiedName:
	//	ValidID ("." ValidID)*;
	public XbaseGrammarAccess.QualifiedNameElements getQualifiedNameAccess() {
		return gaXbase.getQualifiedNameAccess();
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}

	//Number hidden():
	//	HEX | (INT | DECIMAL) ("." (INT | DECIMAL))?;
	public XbaseGrammarAccess.NumberElements getNumberAccess() {
		return gaXbase.getNumberAccess();
	}
	
	public ParserRule getNumberRule() {
		return getNumberAccess().getRule();
	}

	/// **
	// * Dummy rule, for "better" downwards compatibility, since GrammarAccess generates non-static inner classes, 
	// * which makes downstream grammars break on classloading, when a rule is removed.
	// * / StaticQualifier:
	//	(ValidID "::")+;
	public XbaseGrammarAccess.StaticQualifierElements getStaticQualifierAccess() {
		return gaXbase.getStaticQualifierAccess();
	}
	
	public ParserRule getStaticQualifierRule() {
		return getStaticQualifierAccess().getRule();
	}

	//terminal HEX:
	//	("0x" | "0X") ("0".."9" | "a".."f" | "A".."F" | "_")+ ("#" (("b" | "B") ("i" | "I") | ("l" | "L")))?;
	public TerminalRule getHEXRule() {
		return gaXbase.getHEXRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9" ("0".."9" | "_")*;
	public TerminalRule getINTRule() {
		return gaXbase.getINTRule();
	} 

	//terminal DECIMAL:
	//	INT (("e" | "E") ("+" | "-")? INT)? (("b" | "B") ("i" | "I" | "d" | "D") | ("l" | "L" | "d" | "D" | "f" | "F"))?;
	public TerminalRule getDECIMALRule() {
		return gaXbase.getDECIMALRule();
	} 

	//JvmTypeReference:
	//	JvmParameterizedTypeReference => ({JvmGenericArrayTypeReference.componentType=current} ArrayBrackets)* |
	//	XFunctionTypeRef;
	public XtypeGrammarAccess.JvmTypeReferenceElements getJvmTypeReferenceAccess() {
		return gaXbase.getJvmTypeReferenceAccess();
	}
	
	public ParserRule getJvmTypeReferenceRule() {
		return getJvmTypeReferenceAccess().getRule();
	}

	//ArrayBrackets:
	//	"[" "]";
	public XtypeGrammarAccess.ArrayBracketsElements getArrayBracketsAccess() {
		return gaXbase.getArrayBracketsAccess();
	}
	
	public ParserRule getArrayBracketsRule() {
		return getArrayBracketsAccess().getRule();
	}

	//XFunctionTypeRef:
	//	("(" (paramTypes+=JvmTypeReference ("," paramTypes+=JvmTypeReference)*)? ")")? "=>" returnType=JvmTypeReference;
	public XtypeGrammarAccess.XFunctionTypeRefElements getXFunctionTypeRefAccess() {
		return gaXbase.getXFunctionTypeRefAccess();
	}
	
	public ParserRule getXFunctionTypeRefRule() {
		return getXFunctionTypeRefAccess().getRule();
	}

	//JvmParameterizedTypeReference:
	//	type=[JvmType|QualifiedName] ("<" arguments+=JvmArgumentTypeReference ("," arguments+=JvmArgumentTypeReference)* ">"
	//	(=> ({JvmInnerTypeReference.outer=current} ".") type=[JvmType|ValidID] ("<" arguments+=JvmArgumentTypeReference (","
	//	arguments+=JvmArgumentTypeReference)* ">")?)*)?;
	public XtypeGrammarAccess.JvmParameterizedTypeReferenceElements getJvmParameterizedTypeReferenceAccess() {
		return gaXbase.getJvmParameterizedTypeReferenceAccess();
	}
	
	public ParserRule getJvmParameterizedTypeReferenceRule() {
		return getJvmParameterizedTypeReferenceAccess().getRule();
	}

	//JvmArgumentTypeReference returns JvmTypeReference:
	//	JvmTypeReference | JvmWildcardTypeReference;
	public XtypeGrammarAccess.JvmArgumentTypeReferenceElements getJvmArgumentTypeReferenceAccess() {
		return gaXbase.getJvmArgumentTypeReferenceAccess();
	}
	
	public ParserRule getJvmArgumentTypeReferenceRule() {
		return getJvmArgumentTypeReferenceAccess().getRule();
	}

	//JvmWildcardTypeReference:
	//	{JvmWildcardTypeReference} "?" (constraints+=JvmUpperBound constraints+=JvmUpperBoundAnded* |
	//	constraints+=JvmLowerBound constraints+=JvmLowerBoundAnded*)?;
	public XtypeGrammarAccess.JvmWildcardTypeReferenceElements getJvmWildcardTypeReferenceAccess() {
		return gaXbase.getJvmWildcardTypeReferenceAccess();
	}
	
	public ParserRule getJvmWildcardTypeReferenceRule() {
		return getJvmWildcardTypeReferenceAccess().getRule();
	}

	//JvmUpperBound:
	//	"extends" typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmUpperBoundElements getJvmUpperBoundAccess() {
		return gaXbase.getJvmUpperBoundAccess();
	}
	
	public ParserRule getJvmUpperBoundRule() {
		return getJvmUpperBoundAccess().getRule();
	}

	//JvmUpperBoundAnded returns JvmUpperBound:
	//	"&" typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmUpperBoundAndedElements getJvmUpperBoundAndedAccess() {
		return gaXbase.getJvmUpperBoundAndedAccess();
	}
	
	public ParserRule getJvmUpperBoundAndedRule() {
		return getJvmUpperBoundAndedAccess().getRule();
	}

	//JvmLowerBound:
	//	"super" typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmLowerBoundElements getJvmLowerBoundAccess() {
		return gaXbase.getJvmLowerBoundAccess();
	}
	
	public ParserRule getJvmLowerBoundRule() {
		return getJvmLowerBoundAccess().getRule();
	}

	//JvmLowerBoundAnded returns JvmLowerBound:
	//	"&" typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmLowerBoundAndedElements getJvmLowerBoundAndedAccess() {
		return gaXbase.getJvmLowerBoundAndedAccess();
	}
	
	public ParserRule getJvmLowerBoundAndedRule() {
		return getJvmLowerBoundAndedAccess().getRule();
	}

	//JvmTypeParameter:
	//	name=ValidID (constraints+=JvmUpperBound constraints+=JvmUpperBoundAnded*)?;
	public XtypeGrammarAccess.JvmTypeParameterElements getJvmTypeParameterAccess() {
		return gaXbase.getJvmTypeParameterAccess();
	}
	
	public ParserRule getJvmTypeParameterRule() {
		return getJvmTypeParameterAccess().getRule();
	}

	//QualifiedNameWithWildcard:
	//	QualifiedName "." "*";
	public XtypeGrammarAccess.QualifiedNameWithWildcardElements getQualifiedNameWithWildcardAccess() {
		return gaXbase.getQualifiedNameWithWildcardAccess();
	}
	
	public ParserRule getQualifiedNameWithWildcardRule() {
		return getQualifiedNameWithWildcardAccess().getRule();
	}

	//ValidID:
	//	ID;
	public XtypeGrammarAccess.ValidIDElements getValidIDAccess() {
		return gaXbase.getValidIDAccess();
	}
	
	public ParserRule getValidIDRule() {
		return getValidIDAccess().getRule();
	}

	//XImportSection:
	//	importDeclarations+=XImportDeclaration+;
	public XtypeGrammarAccess.XImportSectionElements getXImportSectionAccess() {
		return gaXbase.getXImportSectionAccess();
	}
	
	public ParserRule getXImportSectionRule() {
		return getXImportSectionAccess().getRule();
	}

	//XImportDeclaration:
	//	"import" (static?="static" extension?="extension"? importedType=[JvmDeclaredType|QualifiedNameInStaticImport]
	//	(wildcard?="*" | memberName=ValidID) | importedType=[JvmDeclaredType|QualifiedName] |
	//	importedNamespace=QualifiedNameWithWildcard) ";"?;
	public XtypeGrammarAccess.XImportDeclarationElements getXImportDeclarationAccess() {
		return gaXbase.getXImportDeclarationAccess();
	}
	
	public ParserRule getXImportDeclarationRule() {
		return getXImportDeclarationAccess().getRule();
	}

	//QualifiedNameInStaticImport:
	//	(ValidID ".")+;
	public XtypeGrammarAccess.QualifiedNameInStaticImportElements getQualifiedNameInStaticImportAccess() {
		return gaXbase.getQualifiedNameInStaticImportAccess();
	}
	
	public ParserRule getQualifiedNameInStaticImportRule() {
		return getQualifiedNameInStaticImportAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "$" | "_") ("a".."z" | "A".."Z" | "$" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaXbase.getIDRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" . / * ('b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\') * / | !("\\" | "\""))* "\""? | "\'" ("\\" .
	//	/ * ('b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\') * / | !("\\" | "\'"))* "\'"?;
	public TerminalRule getSTRINGRule() {
		return gaXbase.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaXbase.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaXbase.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaXbase.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaXbase.getANY_OTHERRule();
	} 
}
