/*
* generated by Xtext
*/
package edu.kit.ipd.sdq.vitruvius.framework.mir.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.xbase.services.XbaseGrammarAccess;
import org.eclipse.xtext.xbase.services.XtypeGrammarAccess;

@Singleton
public class MIRGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class MIRFileElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MIRFile");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGeneratesKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cPackageKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cGeneratedPackageAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cGeneratedPackageQualifiedNameParserRuleCall_2_0 = (RuleCall)cGeneratedPackageAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cGeneratesKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Keyword cTypeKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Assignment cGeneratedClassAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cGeneratedClassQualifiedNameParserRuleCall_3_2_0 = (RuleCall)cGeneratedClassAssignment_3_2.eContents().get(0);
		private final Alternatives cAlternatives_4 = (Alternatives)cGroup.eContents().get(4);
		private final Assignment cImportsAssignment_4_0 = (Assignment)cAlternatives_4.eContents().get(0);
		private final RuleCall cImportsImportParserRuleCall_4_0_0 = (RuleCall)cImportsAssignment_4_0.eContents().get(0);
		private final Assignment cMappingsAssignment_4_1 = (Assignment)cAlternatives_4.eContents().get(1);
		private final RuleCall cMappingsMappingParserRuleCall_4_1_0 = (RuleCall)cMappingsAssignment_4_1.eContents().get(0);
		private final Assignment cInvariantsAssignment_4_2 = (Assignment)cAlternatives_4.eContents().get(2);
		private final RuleCall cInvariantsInvariantParserRuleCall_4_2_0 = (RuleCall)cInvariantsAssignment_4_2.eContents().get(0);
		private final Assignment cResponsesAssignment_4_3 = (Assignment)cAlternatives_4.eContents().get(3);
		private final RuleCall cResponsesResponseParserRuleCall_4_3_0 = (RuleCall)cResponsesAssignment_4_3.eContents().get(0);
		
		//MIRFile:
		//	"generates" "package" generatedPackage=QualifiedName ("generates" "type" generatedClass=QualifiedName)?
		//	(imports+=Import | mappings+=Mapping | invariants+=Invariant | responses+=Response)*;
		public ParserRule getRule() { return rule; }

		//"generates" "package" generatedPackage=QualifiedName ("generates" "type" generatedClass=QualifiedName)? (imports+=Import
		//| mappings+=Mapping | invariants+=Invariant | responses+=Response)*
		public Group getGroup() { return cGroup; }

		//"generates"
		public Keyword getGeneratesKeyword_0() { return cGeneratesKeyword_0; }

		//"package"
		public Keyword getPackageKeyword_1() { return cPackageKeyword_1; }

		//generatedPackage=QualifiedName
		public Assignment getGeneratedPackageAssignment_2() { return cGeneratedPackageAssignment_2; }

		//QualifiedName
		public RuleCall getGeneratedPackageQualifiedNameParserRuleCall_2_0() { return cGeneratedPackageQualifiedNameParserRuleCall_2_0; }

		//("generates" "type" generatedClass=QualifiedName)?
		public Group getGroup_3() { return cGroup_3; }

		//"generates"
		public Keyword getGeneratesKeyword_3_0() { return cGeneratesKeyword_3_0; }

		//"type"
		public Keyword getTypeKeyword_3_1() { return cTypeKeyword_3_1; }

		//generatedClass=QualifiedName
		public Assignment getGeneratedClassAssignment_3_2() { return cGeneratedClassAssignment_3_2; }

		//QualifiedName
		public RuleCall getGeneratedClassQualifiedNameParserRuleCall_3_2_0() { return cGeneratedClassQualifiedNameParserRuleCall_3_2_0; }

		//(imports+=Import | mappings+=Mapping | invariants+=Invariant | responses+=Response)*
		public Alternatives getAlternatives_4() { return cAlternatives_4; }

		//imports+=Import
		public Assignment getImportsAssignment_4_0() { return cImportsAssignment_4_0; }

		//Import
		public RuleCall getImportsImportParserRuleCall_4_0_0() { return cImportsImportParserRuleCall_4_0_0; }

		//mappings+=Mapping
		public Assignment getMappingsAssignment_4_1() { return cMappingsAssignment_4_1; }

		//Mapping
		public RuleCall getMappingsMappingParserRuleCall_4_1_0() { return cMappingsMappingParserRuleCall_4_1_0; }

		//invariants+=Invariant
		public Assignment getInvariantsAssignment_4_2() { return cInvariantsAssignment_4_2; }

		//Invariant
		public RuleCall getInvariantsInvariantParserRuleCall_4_2_0() { return cInvariantsInvariantParserRuleCall_4_2_0; }

		//responses+=Response
		public Assignment getResponsesAssignment_4_3() { return cResponsesAssignment_4_3; }

		//Response
		public RuleCall getResponsesResponseParserRuleCall_4_3_0() { return cResponsesResponseParserRuleCall_4_3_0; }
	}

	public class ImportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Import");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cPackageKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cPackageAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cPackageEPackageCrossReference_2_0 = (CrossReference)cPackageAssignment_2.eContents().get(0);
		private final RuleCall cPackageEPackageSTRINGTerminalRuleCall_2_0_1 = (RuleCall)cPackageEPackageCrossReference_2_0.eContents().get(1);
		private final Keyword cAsKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cNameAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cNameValidIDParserRuleCall_4_0 = (RuleCall)cNameAssignment_4.eContents().get(0);
		
		//Import:
		//	"import" "package" package=[ecore::EPackage|STRING] "as" name=ValidID;
		public ParserRule getRule() { return rule; }

		//"import" "package" package=[ecore::EPackage|STRING] "as" name=ValidID
		public Group getGroup() { return cGroup; }

		//"import"
		public Keyword getImportKeyword_0() { return cImportKeyword_0; }

		//"package"
		public Keyword getPackageKeyword_1() { return cPackageKeyword_1; }

		//package=[ecore::EPackage|STRING]
		public Assignment getPackageAssignment_2() { return cPackageAssignment_2; }

		//[ecore::EPackage|STRING]
		public CrossReference getPackageEPackageCrossReference_2_0() { return cPackageEPackageCrossReference_2_0; }

		//STRING
		public RuleCall getPackageEPackageSTRINGTerminalRuleCall_2_0_1() { return cPackageEPackageSTRINGTerminalRuleCall_2_0_1; }

		//"as"
		public Keyword getAsKeyword_3() { return cAsKeyword_3; }

		//name=ValidID
		public Assignment getNameAssignment_4() { return cNameAssignment_4; }

		//ValidID
		public RuleCall getNameValidIDParserRuleCall_4_0() { return cNameValidIDParserRuleCall_4_0; }
	}

	public class MappingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Mapping");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMapKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cClassMappingParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//// Mappings
		//Mapping returns ClassMapping:
		//	"map" ClassMapping;
		public ParserRule getRule() { return rule; }

		//"map" ClassMapping
		public Group getGroup() { return cGroup; }

		//"map"
		public Keyword getMapKeyword_0() { return cMapKeyword_0; }

		//ClassMapping
		public RuleCall getClassMappingParserRuleCall_1() { return cClassMappingParserRuleCall_1; }
	}

	public class ClassMappingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ClassMapping");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cMappedElementsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cMappedElementsNamedEClassParserRuleCall_0_0 = (RuleCall)cMappedElementsAssignment_0.eContents().get(0);
		private final Keyword cAndKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cMappedElementsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cMappedElementsNamedEClassParserRuleCall_2_0 = (RuleCall)cMappedElementsAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Alternatives cAlternatives_3_1 = (Alternatives)cGroup_3.eContents().get(1);
		private final Group cGroup_3_1_0 = (Group)cAlternatives_3_1.eContents().get(0);
		private final Keyword cWhenKeyword_3_1_0_0 = (Keyword)cGroup_3_1_0.eContents().get(0);
		private final Assignment cWhensAssignment_3_1_0_1 = (Assignment)cGroup_3_1_0.eContents().get(1);
		private final RuleCall cWhensWhenParserRuleCall_3_1_0_1_0 = (RuleCall)cWhensAssignment_3_1_0_1.eContents().get(0);
		private final Group cGroup_3_1_1 = (Group)cAlternatives_3_1.eContents().get(1);
		private final Keyword cWhereKeyword_3_1_1_0 = (Keyword)cGroup_3_1_1.eContents().get(0);
		private final Assignment cWheresAssignment_3_1_1_1 = (Assignment)cGroup_3_1_1.eContents().get(1);
		private final RuleCall cWheresWhereParserRuleCall_3_1_1_1_0 = (RuleCall)cWheresAssignment_3_1_1_1.eContents().get(0);
		private final Group cGroup_3_1_2 = (Group)cAlternatives_3_1.eContents().get(2);
		private final Keyword cWithKeyword_3_1_2_0 = (Keyword)cGroup_3_1_2.eContents().get(0);
		private final Assignment cWithsAssignment_3_1_2_1 = (Assignment)cGroup_3_1_2.eContents().get(1);
		private final RuleCall cWithsFeatureMappingParserRuleCall_3_1_2_1_0 = (RuleCall)cWithsAssignment_3_1_2_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		
		//ClassMapping:
		//	mappedElements+=NamedEClass "and" mappedElements+=NamedEClass ("{" ("when" whens+=When | "where" wheres+=Where |
		//	"with" withs+=FeatureMapping)* "}")?;
		public ParserRule getRule() { return rule; }

		//mappedElements+=NamedEClass "and" mappedElements+=NamedEClass ("{" ("when" whens+=When | "where" wheres+=Where | "with"
		//withs+=FeatureMapping)* "}")?
		public Group getGroup() { return cGroup; }

		//mappedElements+=NamedEClass
		public Assignment getMappedElementsAssignment_0() { return cMappedElementsAssignment_0; }

		//NamedEClass
		public RuleCall getMappedElementsNamedEClassParserRuleCall_0_0() { return cMappedElementsNamedEClassParserRuleCall_0_0; }

		//"and"
		public Keyword getAndKeyword_1() { return cAndKeyword_1; }

		//mappedElements+=NamedEClass
		public Assignment getMappedElementsAssignment_2() { return cMappedElementsAssignment_2; }

		//NamedEClass
		public RuleCall getMappedElementsNamedEClassParserRuleCall_2_0() { return cMappedElementsNamedEClassParserRuleCall_2_0; }

		//("{" ("when" whens+=When | "where" wheres+=Where | "with" withs+=FeatureMapping)* "}")?
		public Group getGroup_3() { return cGroup_3; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3_0() { return cLeftCurlyBracketKeyword_3_0; }

		//("when" whens+=When | "where" wheres+=Where | "with" withs+=FeatureMapping)*
		public Alternatives getAlternatives_3_1() { return cAlternatives_3_1; }

		//"when" whens+=When
		public Group getGroup_3_1_0() { return cGroup_3_1_0; }

		//"when"
		public Keyword getWhenKeyword_3_1_0_0() { return cWhenKeyword_3_1_0_0; }

		//whens+=When
		public Assignment getWhensAssignment_3_1_0_1() { return cWhensAssignment_3_1_0_1; }

		//When
		public RuleCall getWhensWhenParserRuleCall_3_1_0_1_0() { return cWhensWhenParserRuleCall_3_1_0_1_0; }

		//"where" wheres+=Where
		public Group getGroup_3_1_1() { return cGroup_3_1_1; }

		//"where"
		public Keyword getWhereKeyword_3_1_1_0() { return cWhereKeyword_3_1_1_0; }

		//wheres+=Where
		public Assignment getWheresAssignment_3_1_1_1() { return cWheresAssignment_3_1_1_1; }

		//Where
		public RuleCall getWheresWhereParserRuleCall_3_1_1_1_0() { return cWheresWhereParserRuleCall_3_1_1_1_0; }

		//"with" withs+=FeatureMapping
		public Group getGroup_3_1_2() { return cGroup_3_1_2; }

		//"with"
		public Keyword getWithKeyword_3_1_2_0() { return cWithKeyword_3_1_2_0; }

		//withs+=FeatureMapping
		public Assignment getWithsAssignment_3_1_2_1() { return cWithsAssignment_3_1_2_1; }

		//FeatureMapping
		public RuleCall getWithsFeatureMappingParserRuleCall_3_1_2_1_0() { return cWithsFeatureMappingParserRuleCall_3_1_2_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3_2() { return cRightCurlyBracketKeyword_3_2; }
	}

	public class WhereElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Where");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cExpressionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cExpressionExpressionBlockParserRuleCall_0_0 = (RuleCall)cExpressionAssignment_0.eContents().get(0);
		private final Keyword cOppositeKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Keyword cAutoKeyword_2_0 = (Keyword)cAlternatives_2.eContents().get(0);
		private final Assignment cOppositePredicateAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final RuleCall cOppositePredicatePredicateBlockParserRuleCall_2_1_0 = (RuleCall)cOppositePredicateAssignment_2_1.eContents().get(0);
		
		//Where:
		//	expression=ExpressionBlock "opposite" ("auto" | oppositePredicate=PredicateBlock);
		public ParserRule getRule() { return rule; }

		//expression=ExpressionBlock "opposite" ("auto" | oppositePredicate=PredicateBlock)
		public Group getGroup() { return cGroup; }

		//expression=ExpressionBlock
		public Assignment getExpressionAssignment_0() { return cExpressionAssignment_0; }

		//ExpressionBlock
		public RuleCall getExpressionExpressionBlockParserRuleCall_0_0() { return cExpressionExpressionBlockParserRuleCall_0_0; }

		//"opposite"
		public Keyword getOppositeKeyword_1() { return cOppositeKeyword_1; }

		//"auto" | oppositePredicate=PredicateBlock
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//"auto"
		public Keyword getAutoKeyword_2_0() { return cAutoKeyword_2_0; }

		//oppositePredicate=PredicateBlock
		public Assignment getOppositePredicateAssignment_2_1() { return cOppositePredicateAssignment_2_1; }

		//PredicateBlock
		public RuleCall getOppositePredicatePredicateBlockParserRuleCall_2_1_0() { return cOppositePredicatePredicateBlockParserRuleCall_2_1_0; }
	}

	public class WhenElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "When");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPredicateAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cPredicatePredicateBlockParserRuleCall_0_0 = (RuleCall)cPredicateAssignment_0.eContents().get(0);
		private final Keyword cOppositeKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Keyword cAutoKeyword_2_0 = (Keyword)cAlternatives_2.eContents().get(0);
		private final Assignment cOppositeExpressionAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final RuleCall cOppositeExpressionExpressionBlockParserRuleCall_2_1_0 = (RuleCall)cOppositeExpressionAssignment_2_1.eContents().get(0);
		
		//When:
		//	predicate=PredicateBlock "opposite" ("auto" | oppositeExpression=ExpressionBlock);
		public ParserRule getRule() { return rule; }

		//predicate=PredicateBlock "opposite" ("auto" | oppositeExpression=ExpressionBlock)
		public Group getGroup() { return cGroup; }

		//predicate=PredicateBlock
		public Assignment getPredicateAssignment_0() { return cPredicateAssignment_0; }

		//PredicateBlock
		public RuleCall getPredicatePredicateBlockParserRuleCall_0_0() { return cPredicatePredicateBlockParserRuleCall_0_0; }

		//"opposite"
		public Keyword getOppositeKeyword_1() { return cOppositeKeyword_1; }

		//"auto" | oppositeExpression=ExpressionBlock
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//"auto"
		public Keyword getAutoKeyword_2_0() { return cAutoKeyword_2_0; }

		//oppositeExpression=ExpressionBlock
		public Assignment getOppositeExpressionAssignment_2_1() { return cOppositeExpressionAssignment_2_1; }

		//ExpressionBlock
		public RuleCall getOppositeExpressionExpressionBlockParserRuleCall_2_1_0() { return cOppositeExpressionExpressionBlockParserRuleCall_2_1_0; }
	}

	public class FeatureMappingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FeatureMapping");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cMappedElementsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cMappedElementsFeatureCallParserRuleCall_0_0 = (RuleCall)cMappedElementsAssignment_0.eContents().get(0);
		private final Keyword cAndKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cMappedElementsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cMappedElementsFeatureCallParserRuleCall_2_0 = (RuleCall)cMappedElementsAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Alternatives cAlternatives_3_1 = (Alternatives)cGroup_3.eContents().get(1);
		private final Group cGroup_3_1_0 = (Group)cAlternatives_3_1.eContents().get(0);
		private final Keyword cWhenKeyword_3_1_0_0 = (Keyword)cGroup_3_1_0.eContents().get(0);
		private final Assignment cWhensAssignment_3_1_0_1 = (Assignment)cGroup_3_1_0.eContents().get(1);
		private final RuleCall cWhensWhenParserRuleCall_3_1_0_1_0 = (RuleCall)cWhensAssignment_3_1_0_1.eContents().get(0);
		private final Group cGroup_3_1_1 = (Group)cAlternatives_3_1.eContents().get(1);
		private final Keyword cWhereKeyword_3_1_1_0 = (Keyword)cGroup_3_1_1.eContents().get(0);
		private final Assignment cWheresAssignment_3_1_1_1 = (Assignment)cGroup_3_1_1.eContents().get(1);
		private final RuleCall cWheresWhereParserRuleCall_3_1_1_1_0 = (RuleCall)cWheresAssignment_3_1_1_1.eContents().get(0);
		private final Group cGroup_3_1_2 = (Group)cAlternatives_3_1.eContents().get(2);
		private final Keyword cWithKeyword_3_1_2_0 = (Keyword)cGroup_3_1_2.eContents().get(0);
		private final Assignment cWithsAssignment_3_1_2_1 = (Assignment)cGroup_3_1_2.eContents().get(1);
		private final RuleCall cWithsFeatureMappingParserRuleCall_3_1_2_1_0 = (RuleCall)cWithsAssignment_3_1_2_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		
		//FeatureMapping:
		//	mappedElements+=FeatureCall "and" mappedElements+=FeatureCall ("{" ("when" whens+=When | "where" wheres+=Where |
		//	"with" withs+=FeatureMapping)* "}")?;
		public ParserRule getRule() { return rule; }

		//mappedElements+=FeatureCall "and" mappedElements+=FeatureCall ("{" ("when" whens+=When | "where" wheres+=Where | "with"
		//withs+=FeatureMapping)* "}")?
		public Group getGroup() { return cGroup; }

		//mappedElements+=FeatureCall
		public Assignment getMappedElementsAssignment_0() { return cMappedElementsAssignment_0; }

		//FeatureCall
		public RuleCall getMappedElementsFeatureCallParserRuleCall_0_0() { return cMappedElementsFeatureCallParserRuleCall_0_0; }

		//"and"
		public Keyword getAndKeyword_1() { return cAndKeyword_1; }

		//mappedElements+=FeatureCall
		public Assignment getMappedElementsAssignment_2() { return cMappedElementsAssignment_2; }

		//FeatureCall
		public RuleCall getMappedElementsFeatureCallParserRuleCall_2_0() { return cMappedElementsFeatureCallParserRuleCall_2_0; }

		//("{" ("when" whens+=When | "where" wheres+=Where | "with" withs+=FeatureMapping)* "}")?
		public Group getGroup_3() { return cGroup_3; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3_0() { return cLeftCurlyBracketKeyword_3_0; }

		//("when" whens+=When | "where" wheres+=Where | "with" withs+=FeatureMapping)*
		public Alternatives getAlternatives_3_1() { return cAlternatives_3_1; }

		//"when" whens+=When
		public Group getGroup_3_1_0() { return cGroup_3_1_0; }

		//"when"
		public Keyword getWhenKeyword_3_1_0_0() { return cWhenKeyword_3_1_0_0; }

		//whens+=When
		public Assignment getWhensAssignment_3_1_0_1() { return cWhensAssignment_3_1_0_1; }

		//When
		public RuleCall getWhensWhenParserRuleCall_3_1_0_1_0() { return cWhensWhenParserRuleCall_3_1_0_1_0; }

		//"where" wheres+=Where
		public Group getGroup_3_1_1() { return cGroup_3_1_1; }

		//"where"
		public Keyword getWhereKeyword_3_1_1_0() { return cWhereKeyword_3_1_1_0; }

		//wheres+=Where
		public Assignment getWheresAssignment_3_1_1_1() { return cWheresAssignment_3_1_1_1; }

		//Where
		public RuleCall getWheresWhereParserRuleCall_3_1_1_1_0() { return cWheresWhereParserRuleCall_3_1_1_1_0; }

		//"with" withs+=FeatureMapping
		public Group getGroup_3_1_2() { return cGroup_3_1_2; }

		//"with"
		public Keyword getWithKeyword_3_1_2_0() { return cWithKeyword_3_1_2_0; }

		//withs+=FeatureMapping
		public Assignment getWithsAssignment_3_1_2_1() { return cWithsAssignment_3_1_2_1; }

		//FeatureMapping
		public RuleCall getWithsFeatureMappingParserRuleCall_3_1_2_1_0() { return cWithsFeatureMappingParserRuleCall_3_1_2_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3_2() { return cRightCurlyBracketKeyword_3_2; }
	}

	public class NamedEClassElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NamedEClass");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cNamedEClassAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cRepresentedEClassAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cRepresentedEClassEClassCrossReference_1_0 = (CrossReference)cRepresentedEClassAssignment_1.eContents().get(0);
		private final RuleCall cRepresentedEClassEClassQualifiedNameParserRuleCall_1_0_1 = (RuleCall)cRepresentedEClassEClassCrossReference_1_0.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cAsKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cNameAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cNameValidIDParserRuleCall_2_1_0 = (RuleCall)cNameAssignment_2_1.eContents().get(0);
		
		//NamedEClass returns TypedElement:
		//	{NamedEClass} representedEClass=[ecore::EClass|QualifiedName] ("as" name=ValidID)?;
		public ParserRule getRule() { return rule; }

		//{NamedEClass} representedEClass=[ecore::EClass|QualifiedName] ("as" name=ValidID)?
		public Group getGroup() { return cGroup; }

		//{NamedEClass}
		public Action getNamedEClassAction_0() { return cNamedEClassAction_0; }

		//representedEClass=[ecore::EClass|QualifiedName]
		public Assignment getRepresentedEClassAssignment_1() { return cRepresentedEClassAssignment_1; }

		//[ecore::EClass|QualifiedName]
		public CrossReference getRepresentedEClassEClassCrossReference_1_0() { return cRepresentedEClassEClassCrossReference_1_0; }

		//QualifiedName
		public RuleCall getRepresentedEClassEClassQualifiedNameParserRuleCall_1_0_1() { return cRepresentedEClassEClassQualifiedNameParserRuleCall_1_0_1; }

		//("as" name=ValidID)?
		public Group getGroup_2() { return cGroup_2; }

		//"as"
		public Keyword getAsKeyword_2_0() { return cAsKeyword_2_0; }

		//name=ValidID
		public Assignment getNameAssignment_2_1() { return cNameAssignment_2_1; }

		//ValidID
		public RuleCall getNameValidIDParserRuleCall_2_1_0() { return cNameValidIDParserRuleCall_2_1_0; }
	}

	public class TypedElementRefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TypedElementRef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTypedElementRefAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cRefAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cRefTypedElementCrossReference_1_0 = (CrossReference)cRefAssignment_1.eContents().get(0);
		private final RuleCall cRefTypedElementIDTerminalRuleCall_1_0_1 = (RuleCall)cRefTypedElementCrossReference_1_0.eContents().get(1);
		
		/// *NamedFeature returns TypedElement:
		//	{NamedFeature}
		//	feature=FeatureCall
		////	('as' name=ValidID)?
		//;* / TypedElementRef returns Ref:
		//	{TypedElementRef} ref=[TypedElement];
		public ParserRule getRule() { return rule; }

		//{TypedElementRef} ref=[TypedElement]
		public Group getGroup() { return cGroup; }

		//{TypedElementRef}
		public Action getTypedElementRefAction_0() { return cTypedElementRefAction_0; }

		//ref=[TypedElement]
		public Assignment getRefAssignment_1() { return cRefAssignment_1; }

		//[TypedElement]
		public CrossReference getRefTypedElementCrossReference_1_0() { return cRefTypedElementCrossReference_1_0; }

		//ID
		public RuleCall getRefTypedElementIDTerminalRuleCall_1_0_1() { return cRefTypedElementIDTerminalRuleCall_1_0_1; }
	}

	public class FeatureCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FeatureCall");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cTypedElementRefParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cFeatureCallRefAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cFullStopKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Assignment cTailAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final CrossReference cTailEStructuralFeatureCrossReference_1_2_1_0 = (CrossReference)cTailAssignment_1_2_1.eContents().get(0);
		private final RuleCall cTailEStructuralFeatureValidIDParserRuleCall_1_2_1_0_1 = (RuleCall)cTailEStructuralFeatureCrossReference_1_2_1_0.eContents().get(1);
		private final Group cGroup_1_2_2 = (Group)cGroup_1_2.eContents().get(2);
		private final Keyword cLeftSquareBracketKeyword_1_2_2_0 = (Keyword)cGroup_1_2_2.eContents().get(0);
		private final Assignment cTypeAssignment_1_2_2_1 = (Assignment)cGroup_1_2_2.eContents().get(1);
		private final CrossReference cTypeEClassifierCrossReference_1_2_2_1_0 = (CrossReference)cTypeAssignment_1_2_2_1.eContents().get(0);
		private final RuleCall cTypeEClassifierQualifiedNameParserRuleCall_1_2_2_1_0_1 = (RuleCall)cTypeEClassifierCrossReference_1_2_2_1_0.eContents().get(1);
		private final Keyword cRightSquareBracketKeyword_1_2_2_2 = (Keyword)cGroup_1_2_2.eContents().get(2);
		private final Group cGroup_1_2_3 = (Group)cGroup_1_2.eContents().get(3);
		private final Keyword cAsKeyword_1_2_3_0 = (Keyword)cGroup_1_2_3.eContents().get(0);
		private final Assignment cNameAssignment_1_2_3_1 = (Assignment)cGroup_1_2_3.eContents().get(1);
		private final RuleCall cNameValidIDParserRuleCall_1_2_3_1_0 = (RuleCall)cNameAssignment_1_2_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_2_4 = (Keyword)cGroup_1_2.eContents().get(4);
		
		//FeatureCall returns TypedElement:
		//	TypedElementRef ({FeatureCall.ref=current} "." ("(" tail=[ecore::EStructuralFeature|ValidID] ("["
		//	type=[ecore::EClassifier|QualifiedName] "]")? ("as" name=ValidID)? ")"))*;
		public ParserRule getRule() { return rule; }

		//TypedElementRef ({FeatureCall.ref=current} "." ("(" tail=[ecore::EStructuralFeature|ValidID] ("["
		//type=[ecore::EClassifier|QualifiedName] "]")? ("as" name=ValidID)? ")"))*
		public Group getGroup() { return cGroup; }

		//TypedElementRef
		public RuleCall getTypedElementRefParserRuleCall_0() { return cTypedElementRefParserRuleCall_0; }

		//({FeatureCall.ref=current} "." ("(" tail=[ecore::EStructuralFeature|ValidID] ("["
		//type=[ecore::EClassifier|QualifiedName] "]")? ("as" name=ValidID)? ")"))*
		public Group getGroup_1() { return cGroup_1; }

		//{FeatureCall.ref=current}
		public Action getFeatureCallRefAction_1_0() { return cFeatureCallRefAction_1_0; }

		//"."
		public Keyword getFullStopKeyword_1_1() { return cFullStopKeyword_1_1; }

		//"(" tail=[ecore::EStructuralFeature|ValidID] ("[" type=[ecore::EClassifier|QualifiedName] "]")? ("as" name=ValidID)? ")"
		public Group getGroup_1_2() { return cGroup_1_2; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_2_0() { return cLeftParenthesisKeyword_1_2_0; }

		//tail=[ecore::EStructuralFeature|ValidID]
		public Assignment getTailAssignment_1_2_1() { return cTailAssignment_1_2_1; }

		//[ecore::EStructuralFeature|ValidID]
		public CrossReference getTailEStructuralFeatureCrossReference_1_2_1_0() { return cTailEStructuralFeatureCrossReference_1_2_1_0; }

		//ValidID
		public RuleCall getTailEStructuralFeatureValidIDParserRuleCall_1_2_1_0_1() { return cTailEStructuralFeatureValidIDParserRuleCall_1_2_1_0_1; }

		//("[" type=[ecore::EClassifier|QualifiedName] "]")?
		public Group getGroup_1_2_2() { return cGroup_1_2_2; }

		//"["
		public Keyword getLeftSquareBracketKeyword_1_2_2_0() { return cLeftSquareBracketKeyword_1_2_2_0; }

		//type=[ecore::EClassifier|QualifiedName]
		public Assignment getTypeAssignment_1_2_2_1() { return cTypeAssignment_1_2_2_1; }

		//[ecore::EClassifier|QualifiedName]
		public CrossReference getTypeEClassifierCrossReference_1_2_2_1_0() { return cTypeEClassifierCrossReference_1_2_2_1_0; }

		//QualifiedName
		public RuleCall getTypeEClassifierQualifiedNameParserRuleCall_1_2_2_1_0_1() { return cTypeEClassifierQualifiedNameParserRuleCall_1_2_2_1_0_1; }

		//"]"
		public Keyword getRightSquareBracketKeyword_1_2_2_2() { return cRightSquareBracketKeyword_1_2_2_2; }

		//("as" name=ValidID)?
		public Group getGroup_1_2_3() { return cGroup_1_2_3; }

		//"as"
		public Keyword getAsKeyword_1_2_3_0() { return cAsKeyword_1_2_3_0; }

		//name=ValidID
		public Assignment getNameAssignment_1_2_3_1() { return cNameAssignment_1_2_3_1; }

		//ValidID
		public RuleCall getNameValidIDParserRuleCall_1_2_3_1_0() { return cNameValidIDParserRuleCall_1_2_3_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_1_2_4() { return cRightParenthesisKeyword_1_2_4; }
	}

	public class EClassParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EClassParameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cTypeEClassCrossReference_0_0 = (CrossReference)cTypeAssignment_0.eContents().get(0);
		private final RuleCall cTypeEClassQualifiedNameParserRuleCall_0_0_1 = (RuleCall)cTypeEClassCrossReference_0_0.eContents().get(1);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameValidIDParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//// Invariants
		//EClassParameter:
		//	type=[ecore::EClass|QualifiedName] name=ValidID;
		public ParserRule getRule() { return rule; }

		//type=[ecore::EClass|QualifiedName] name=ValidID
		public Group getGroup() { return cGroup; }

		//type=[ecore::EClass|QualifiedName]
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }

		//[ecore::EClass|QualifiedName]
		public CrossReference getTypeEClassCrossReference_0_0() { return cTypeEClassCrossReference_0_0; }

		//QualifiedName
		public RuleCall getTypeEClassQualifiedNameParserRuleCall_0_0_1() { return cTypeEClassQualifiedNameParserRuleCall_0_0_1; }

		//name=ValidID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ValidID
		public RuleCall getNameValidIDParserRuleCall_1_0() { return cNameValidIDParserRuleCall_1_0; }
	}

	public class InvariantElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Invariant");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cContextKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cContextAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cContextEClassCrossReference_1_0 = (CrossReference)cContextAssignment_1.eContents().get(0);
		private final RuleCall cContextEClassQualifiedNameParserRuleCall_1_0_1 = (RuleCall)cContextEClassCrossReference_1_0.eContents().get(1);
		private final Keyword cInvKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameValidIDParserRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cLeftParenthesisKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Group cGroup_4_1 = (Group)cGroup_4.eContents().get(1);
		private final Assignment cParamsAssignment_4_1_0 = (Assignment)cGroup_4_1.eContents().get(0);
		private final RuleCall cParamsEClassParameterParserRuleCall_4_1_0_0 = (RuleCall)cParamsAssignment_4_1_0.eContents().get(0);
		private final Group cGroup_4_1_1 = (Group)cGroup_4_1.eContents().get(1);
		private final Keyword cCommaKeyword_4_1_1_0 = (Keyword)cGroup_4_1_1.eContents().get(0);
		private final Assignment cParamsAssignment_4_1_1_1 = (Assignment)cGroup_4_1_1.eContents().get(1);
		private final RuleCall cParamsEClassParameterParserRuleCall_4_1_1_1_0 = (RuleCall)cParamsAssignment_4_1_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4_2 = (Keyword)cGroup_4.eContents().get(2);
		private final Keyword cColonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cPredicateAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cPredicatePredicateBlockParserRuleCall_6_0 = (RuleCall)cPredicateAssignment_6.eContents().get(0);
		
		//Invariant:
		//	"context" context=[ecore::EClass|QualifiedName] "inv" name=ValidID ("(" (params+=EClassParameter (","
		//	params+=EClassParameter)*)? ")")? ":" predicate=PredicateBlock;
		public ParserRule getRule() { return rule; }

		//"context" context=[ecore::EClass|QualifiedName] "inv" name=ValidID ("(" (params+=EClassParameter (","
		//params+=EClassParameter)*)? ")")? ":" predicate=PredicateBlock
		public Group getGroup() { return cGroup; }

		//"context"
		public Keyword getContextKeyword_0() { return cContextKeyword_0; }

		//context=[ecore::EClass|QualifiedName]
		public Assignment getContextAssignment_1() { return cContextAssignment_1; }

		//[ecore::EClass|QualifiedName]
		public CrossReference getContextEClassCrossReference_1_0() { return cContextEClassCrossReference_1_0; }

		//QualifiedName
		public RuleCall getContextEClassQualifiedNameParserRuleCall_1_0_1() { return cContextEClassQualifiedNameParserRuleCall_1_0_1; }

		//"inv"
		public Keyword getInvKeyword_2() { return cInvKeyword_2; }

		//name=ValidID
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }

		//ValidID
		public RuleCall getNameValidIDParserRuleCall_3_0() { return cNameValidIDParserRuleCall_3_0; }

		//("(" (params+=EClassParameter ("," params+=EClassParameter)*)? ")")?
		public Group getGroup_4() { return cGroup_4; }

		//"("
		public Keyword getLeftParenthesisKeyword_4_0() { return cLeftParenthesisKeyword_4_0; }

		//(params+=EClassParameter ("," params+=EClassParameter)*)?
		public Group getGroup_4_1() { return cGroup_4_1; }

		//params+=EClassParameter
		public Assignment getParamsAssignment_4_1_0() { return cParamsAssignment_4_1_0; }

		//EClassParameter
		public RuleCall getParamsEClassParameterParserRuleCall_4_1_0_0() { return cParamsEClassParameterParserRuleCall_4_1_0_0; }

		//("," params+=EClassParameter)*
		public Group getGroup_4_1_1() { return cGroup_4_1_1; }

		//","
		public Keyword getCommaKeyword_4_1_1_0() { return cCommaKeyword_4_1_1_0; }

		//params+=EClassParameter
		public Assignment getParamsAssignment_4_1_1_1() { return cParamsAssignment_4_1_1_1; }

		//EClassParameter
		public RuleCall getParamsEClassParameterParserRuleCall_4_1_1_1_0() { return cParamsEClassParameterParserRuleCall_4_1_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4_2() { return cRightParenthesisKeyword_4_2; }

		//":"
		public Keyword getColonKeyword_5() { return cColonKeyword_5; }

		//predicate=PredicateBlock
		public Assignment getPredicateAssignment_6() { return cPredicateAssignment_6; }

		//PredicateBlock
		public RuleCall getPredicatePredicateBlockParserRuleCall_6_0() { return cPredicatePredicateBlockParserRuleCall_6_0; }
	}

	public class PredicateBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PredicateBlock");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cXbaseKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final RuleCall cXBlockExpressionParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cOclKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cOCLBlockParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cJavaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final RuleCall cJavaBlockParserRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		
		//PredicateBlock returns ecore::EObject:
		//	"xbase" XBlockExpression | "ocl" OCLBlock | "java" JavaBlock;
		public ParserRule getRule() { return rule; }

		//"xbase" XBlockExpression | "ocl" OCLBlock | "java" JavaBlock
		public Alternatives getAlternatives() { return cAlternatives; }

		//"xbase" XBlockExpression
		public Group getGroup_0() { return cGroup_0; }

		//"xbase"
		public Keyword getXbaseKeyword_0_0() { return cXbaseKeyword_0_0; }

		//XBlockExpression
		public RuleCall getXBlockExpressionParserRuleCall_0_1() { return cXBlockExpressionParserRuleCall_0_1; }

		//"ocl" OCLBlock
		public Group getGroup_1() { return cGroup_1; }

		//"ocl"
		public Keyword getOclKeyword_1_0() { return cOclKeyword_1_0; }

		//OCLBlock
		public RuleCall getOCLBlockParserRuleCall_1_1() { return cOCLBlockParserRuleCall_1_1; }

		//"java" JavaBlock
		public Group getGroup_2() { return cGroup_2; }

		//"java"
		public Keyword getJavaKeyword_2_0() { return cJavaKeyword_2_0; }

		//JavaBlock
		public RuleCall getJavaBlockParserRuleCall_2_1() { return cJavaBlockParserRuleCall_2_1; }
	}

	public class ExpressionBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExpressionBlock");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cXbaseKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final RuleCall cXBlockExpressionParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cJavaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cJavaBlockParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//ExpressionBlock returns ecore::EObject:
		//	"xbase" XBlockExpression | "java" JavaBlock;
		public ParserRule getRule() { return rule; }

		//"xbase" XBlockExpression | "java" JavaBlock
		public Alternatives getAlternatives() { return cAlternatives; }

		//"xbase" XBlockExpression
		public Group getGroup_0() { return cGroup_0; }

		//"xbase"
		public Keyword getXbaseKeyword_0_0() { return cXbaseKeyword_0_0; }

		//XBlockExpression
		public RuleCall getXBlockExpressionParserRuleCall_0_1() { return cXBlockExpressionParserRuleCall_0_1; }

		//"java" JavaBlock
		public Group getGroup_1() { return cGroup_1; }

		//"java"
		public Keyword getJavaKeyword_1_0() { return cJavaKeyword_1_0; }

		//JavaBlock
		public RuleCall getJavaBlockParserRuleCall_1_1() { return cJavaBlockParserRuleCall_1_1; }
	}

	public class OCLBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OCLBlock");
		private final Assignment cOclStringAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cOclStringSTRINGTerminalRuleCall_0 = (RuleCall)cOclStringAssignment.eContents().get(0);
		
		//OCLBlock:
		//	oclString=STRING;
		public ParserRule getRule() { return rule; }

		//oclString=STRING
		public Assignment getOclStringAssignment() { return cOclStringAssignment; }

		//STRING
		public RuleCall getOclStringSTRINGTerminalRuleCall_0() { return cOclStringSTRINGTerminalRuleCall_0; }
	}

	public class JavaBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "JavaBlock");
		private final Assignment cJavaStringAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cJavaStringSTRINGTerminalRuleCall_0 = (RuleCall)cJavaStringAssignment.eContents().get(0);
		
		//JavaBlock:
		//	javaString=STRING;
		public ParserRule getRule() { return rule; }

		//javaString=STRING
		public Assignment getJavaStringAssignment() { return cJavaStringAssignment; }

		//STRING
		public RuleCall getJavaStringSTRINGTerminalRuleCall_0() { return cJavaStringSTRINGTerminalRuleCall_0; }
	}

	public class ResponseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Response");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cOnKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cActionAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cActionResponseActionEnumRuleCall_1_0_0 = (RuleCall)cActionAssignment_1_0.eContents().get(0);
		private final Keyword cOfKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cContextAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cContextNamedEClassParserRuleCall_2_0 = (RuleCall)cContextAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cRestoreKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cInvAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final CrossReference cInvInvariantCrossReference_3_1_0 = (CrossReference)cInvAssignment_3_1.eContents().get(0);
		private final RuleCall cInvInvariantIDTerminalRuleCall_3_1_0_1 = (RuleCall)cInvInvariantCrossReference_3_1_0.eContents().get(1);
		private final Keyword cByKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		private final Assignment cRestoreActionAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cRestoreActionXBlockExpressionParserRuleCall_4_0 = (RuleCall)cRestoreActionAssignment_4.eContents().get(0);
		
		//// Response
		//Response:
		//	"on" (action=ResponseAction "of")? context=NamedEClass ("restore" inv=[Invariant] "by")?
		//	restoreAction=XBlockExpression;
		public ParserRule getRule() { return rule; }

		//"on" (action=ResponseAction "of")? context=NamedEClass ("restore" inv=[Invariant] "by")? restoreAction=XBlockExpression
		public Group getGroup() { return cGroup; }

		//"on"
		public Keyword getOnKeyword_0() { return cOnKeyword_0; }

		//(action=ResponseAction "of")?
		public Group getGroup_1() { return cGroup_1; }

		//action=ResponseAction
		public Assignment getActionAssignment_1_0() { return cActionAssignment_1_0; }

		//ResponseAction
		public RuleCall getActionResponseActionEnumRuleCall_1_0_0() { return cActionResponseActionEnumRuleCall_1_0_0; }

		//"of"
		public Keyword getOfKeyword_1_1() { return cOfKeyword_1_1; }

		//context=NamedEClass
		public Assignment getContextAssignment_2() { return cContextAssignment_2; }

		//NamedEClass
		public RuleCall getContextNamedEClassParserRuleCall_2_0() { return cContextNamedEClassParserRuleCall_2_0; }

		//("restore" inv=[Invariant] "by")?
		public Group getGroup_3() { return cGroup_3; }

		//"restore"
		public Keyword getRestoreKeyword_3_0() { return cRestoreKeyword_3_0; }

		//inv=[Invariant]
		public Assignment getInvAssignment_3_1() { return cInvAssignment_3_1; }

		//[Invariant]
		public CrossReference getInvInvariantCrossReference_3_1_0() { return cInvInvariantCrossReference_3_1_0; }

		//ID
		public RuleCall getInvInvariantIDTerminalRuleCall_3_1_0_1() { return cInvInvariantIDTerminalRuleCall_3_1_0_1; }

		//"by"
		public Keyword getByKeyword_3_2() { return cByKeyword_3_2; }

		//restoreAction=XBlockExpression
		public Assignment getRestoreActionAssignment_4() { return cRestoreActionAssignment_4; }

		//XBlockExpression
		public RuleCall getRestoreActionXBlockExpressionParserRuleCall_4_0() { return cRestoreActionXBlockExpressionParserRuleCall_4_0; }
	}
	
	
	public class ResponseActionElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "ResponseAction");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cANYEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cANYAnyKeyword_0_0 = (Keyword)cANYEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cCREATEEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cCREATECreateKeyword_1_0 = (Keyword)cCREATEEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cCHANGEEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cCHANGEChangeKeyword_2_0 = (Keyword)cCHANGEEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum ResponseAction:
		//	ANY="any" | CREATE="create" | CHANGE="change";
		public EnumRule getRule() { return rule; }

		//ANY="any" | CREATE="create" | CHANGE="change"
		public Alternatives getAlternatives() { return cAlternatives; }

		//ANY="any"
		public EnumLiteralDeclaration getANYEnumLiteralDeclaration_0() { return cANYEnumLiteralDeclaration_0; }

		//"any"
		public Keyword getANYAnyKeyword_0_0() { return cANYAnyKeyword_0_0; }

		//CREATE="create"
		public EnumLiteralDeclaration getCREATEEnumLiteralDeclaration_1() { return cCREATEEnumLiteralDeclaration_1; }

		//"create"
		public Keyword getCREATECreateKeyword_1_0() { return cCREATECreateKeyword_1_0; }

		//CHANGE="change"
		public EnumLiteralDeclaration getCHANGEEnumLiteralDeclaration_2() { return cCHANGEEnumLiteralDeclaration_2; }

		//"change"
		public Keyword getCHANGEChangeKeyword_2_0() { return cCHANGEChangeKeyword_2_0; }
	}
	
	private final MIRFileElements pMIRFile;
	private final ImportElements pImport;
	private final MappingElements pMapping;
	private final ClassMappingElements pClassMapping;
	private final WhereElements pWhere;
	private final WhenElements pWhen;
	private final FeatureMappingElements pFeatureMapping;
	private final NamedEClassElements pNamedEClass;
	private final TypedElementRefElements pTypedElementRef;
	private final FeatureCallElements pFeatureCall;
	private final EClassParameterElements pEClassParameter;
	private final InvariantElements pInvariant;
	private final PredicateBlockElements pPredicateBlock;
	private final ExpressionBlockElements pExpressionBlock;
	private final OCLBlockElements pOCLBlock;
	private final JavaBlockElements pJavaBlock;
	private final ResponseElements pResponse;
	private final ResponseActionElements unknownRuleResponseAction;
	
	private final Grammar grammar;

	private final XbaseGrammarAccess gaXbase;

	@Inject
	public MIRGrammarAccess(GrammarProvider grammarProvider,
		XbaseGrammarAccess gaXbase) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaXbase = gaXbase;
		this.pMIRFile = new MIRFileElements();
		this.pImport = new ImportElements();
		this.pMapping = new MappingElements();
		this.pClassMapping = new ClassMappingElements();
		this.pWhere = new WhereElements();
		this.pWhen = new WhenElements();
		this.pFeatureMapping = new FeatureMappingElements();
		this.pNamedEClass = new NamedEClassElements();
		this.pTypedElementRef = new TypedElementRefElements();
		this.pFeatureCall = new FeatureCallElements();
		this.pEClassParameter = new EClassParameterElements();
		this.pInvariant = new InvariantElements();
		this.pPredicateBlock = new PredicateBlockElements();
		this.pExpressionBlock = new ExpressionBlockElements();
		this.pOCLBlock = new OCLBlockElements();
		this.pJavaBlock = new JavaBlockElements();
		this.pResponse = new ResponseElements();
		this.unknownRuleResponseAction = new ResponseActionElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("edu.kit.ipd.sdq.vitruvius.framework.mir.MIR".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public XbaseGrammarAccess getXbaseGrammarAccess() {
		return gaXbase;
	}

	
	//MIRFile:
	//	"generates" "package" generatedPackage=QualifiedName ("generates" "type" generatedClass=QualifiedName)?
	//	(imports+=Import | mappings+=Mapping | invariants+=Invariant | responses+=Response)*;
	public MIRFileElements getMIRFileAccess() {
		return pMIRFile;
	}
	
	public ParserRule getMIRFileRule() {
		return getMIRFileAccess().getRule();
	}

	//Import:
	//	"import" "package" package=[ecore::EPackage|STRING] "as" name=ValidID;
	public ImportElements getImportAccess() {
		return pImport;
	}
	
	public ParserRule getImportRule() {
		return getImportAccess().getRule();
	}

	//// Mappings
	//Mapping returns ClassMapping:
	//	"map" ClassMapping;
	public MappingElements getMappingAccess() {
		return pMapping;
	}
	
	public ParserRule getMappingRule() {
		return getMappingAccess().getRule();
	}

	//ClassMapping:
	//	mappedElements+=NamedEClass "and" mappedElements+=NamedEClass ("{" ("when" whens+=When | "where" wheres+=Where |
	//	"with" withs+=FeatureMapping)* "}")?;
	public ClassMappingElements getClassMappingAccess() {
		return pClassMapping;
	}
	
	public ParserRule getClassMappingRule() {
		return getClassMappingAccess().getRule();
	}

	//Where:
	//	expression=ExpressionBlock "opposite" ("auto" | oppositePredicate=PredicateBlock);
	public WhereElements getWhereAccess() {
		return pWhere;
	}
	
	public ParserRule getWhereRule() {
		return getWhereAccess().getRule();
	}

	//When:
	//	predicate=PredicateBlock "opposite" ("auto" | oppositeExpression=ExpressionBlock);
	public WhenElements getWhenAccess() {
		return pWhen;
	}
	
	public ParserRule getWhenRule() {
		return getWhenAccess().getRule();
	}

	//FeatureMapping:
	//	mappedElements+=FeatureCall "and" mappedElements+=FeatureCall ("{" ("when" whens+=When | "where" wheres+=Where |
	//	"with" withs+=FeatureMapping)* "}")?;
	public FeatureMappingElements getFeatureMappingAccess() {
		return pFeatureMapping;
	}
	
	public ParserRule getFeatureMappingRule() {
		return getFeatureMappingAccess().getRule();
	}

	//NamedEClass returns TypedElement:
	//	{NamedEClass} representedEClass=[ecore::EClass|QualifiedName] ("as" name=ValidID)?;
	public NamedEClassElements getNamedEClassAccess() {
		return pNamedEClass;
	}
	
	public ParserRule getNamedEClassRule() {
		return getNamedEClassAccess().getRule();
	}

	/// *NamedFeature returns TypedElement:
	//	{NamedFeature}
	//	feature=FeatureCall
	////	('as' name=ValidID)?
	//;* / TypedElementRef returns Ref:
	//	{TypedElementRef} ref=[TypedElement];
	public TypedElementRefElements getTypedElementRefAccess() {
		return pTypedElementRef;
	}
	
	public ParserRule getTypedElementRefRule() {
		return getTypedElementRefAccess().getRule();
	}

	//FeatureCall returns TypedElement:
	//	TypedElementRef ({FeatureCall.ref=current} "." ("(" tail=[ecore::EStructuralFeature|ValidID] ("["
	//	type=[ecore::EClassifier|QualifiedName] "]")? ("as" name=ValidID)? ")"))*;
	public FeatureCallElements getFeatureCallAccess() {
		return pFeatureCall;
	}
	
	public ParserRule getFeatureCallRule() {
		return getFeatureCallAccess().getRule();
	}

	//// Invariants
	//EClassParameter:
	//	type=[ecore::EClass|QualifiedName] name=ValidID;
	public EClassParameterElements getEClassParameterAccess() {
		return pEClassParameter;
	}
	
	public ParserRule getEClassParameterRule() {
		return getEClassParameterAccess().getRule();
	}

	//Invariant:
	//	"context" context=[ecore::EClass|QualifiedName] "inv" name=ValidID ("(" (params+=EClassParameter (","
	//	params+=EClassParameter)*)? ")")? ":" predicate=PredicateBlock;
	public InvariantElements getInvariantAccess() {
		return pInvariant;
	}
	
	public ParserRule getInvariantRule() {
		return getInvariantAccess().getRule();
	}

	//PredicateBlock returns ecore::EObject:
	//	"xbase" XBlockExpression | "ocl" OCLBlock | "java" JavaBlock;
	public PredicateBlockElements getPredicateBlockAccess() {
		return pPredicateBlock;
	}
	
	public ParserRule getPredicateBlockRule() {
		return getPredicateBlockAccess().getRule();
	}

	//ExpressionBlock returns ecore::EObject:
	//	"xbase" XBlockExpression | "java" JavaBlock;
	public ExpressionBlockElements getExpressionBlockAccess() {
		return pExpressionBlock;
	}
	
	public ParserRule getExpressionBlockRule() {
		return getExpressionBlockAccess().getRule();
	}

	//OCLBlock:
	//	oclString=STRING;
	public OCLBlockElements getOCLBlockAccess() {
		return pOCLBlock;
	}
	
	public ParserRule getOCLBlockRule() {
		return getOCLBlockAccess().getRule();
	}

	//JavaBlock:
	//	javaString=STRING;
	public JavaBlockElements getJavaBlockAccess() {
		return pJavaBlock;
	}
	
	public ParserRule getJavaBlockRule() {
		return getJavaBlockAccess().getRule();
	}

	//// Response
	//Response:
	//	"on" (action=ResponseAction "of")? context=NamedEClass ("restore" inv=[Invariant] "by")?
	//	restoreAction=XBlockExpression;
	public ResponseElements getResponseAccess() {
		return pResponse;
	}
	
	public ParserRule getResponseRule() {
		return getResponseAccess().getRule();
	}

	//enum ResponseAction:
	//	ANY="any" | CREATE="create" | CHANGE="change";
	public ResponseActionElements getResponseActionAccess() {
		return unknownRuleResponseAction;
	}
	
	public EnumRule getResponseActionRule() {
		return getResponseActionAccess().getRule();
	}

	//XExpression:
	//	XAssignment;
	public XbaseGrammarAccess.XExpressionElements getXExpressionAccess() {
		return gaXbase.getXExpressionAccess();
	}
	
	public ParserRule getXExpressionRule() {
		return getXExpressionAccess().getRule();
	}

	//XAssignment returns XExpression:
	//	{XAssignment} feature=[types::JvmIdentifiableElement|FeatureCallID] OpSingleAssign value=XAssignment | XOrExpression
	//	(=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpMultiAssign])
	//	rightOperand=XAssignment)?;
	public XbaseGrammarAccess.XAssignmentElements getXAssignmentAccess() {
		return gaXbase.getXAssignmentAccess();
	}
	
	public ParserRule getXAssignmentRule() {
		return getXAssignmentAccess().getRule();
	}

	//OpSingleAssign:
	//	"=";
	public XbaseGrammarAccess.OpSingleAssignElements getOpSingleAssignAccess() {
		return gaXbase.getOpSingleAssignAccess();
	}
	
	public ParserRule getOpSingleAssignRule() {
		return getOpSingleAssignAccess().getRule();
	}

	//OpMultiAssign:
	//	"+=" | "-=" | "*=" | "/=" | "%=" | "<" "<" "=" | ">" ">"? ">=";
	public XbaseGrammarAccess.OpMultiAssignElements getOpMultiAssignAccess() {
		return gaXbase.getOpMultiAssignAccess();
	}
	
	public ParserRule getOpMultiAssignRule() {
		return getOpMultiAssignAccess().getRule();
	}

	//XOrExpression returns XExpression:
	//	XAndExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpOr])
	//	rightOperand=XAndExpression)*;
	public XbaseGrammarAccess.XOrExpressionElements getXOrExpressionAccess() {
		return gaXbase.getXOrExpressionAccess();
	}
	
	public ParserRule getXOrExpressionRule() {
		return getXOrExpressionAccess().getRule();
	}

	//OpOr:
	//	"||";
	public XbaseGrammarAccess.OpOrElements getOpOrAccess() {
		return gaXbase.getOpOrAccess();
	}
	
	public ParserRule getOpOrRule() {
		return getOpOrAccess().getRule();
	}

	//XAndExpression returns XExpression:
	//	XEqualityExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpAnd])
	//	rightOperand=XEqualityExpression)*;
	public XbaseGrammarAccess.XAndExpressionElements getXAndExpressionAccess() {
		return gaXbase.getXAndExpressionAccess();
	}
	
	public ParserRule getXAndExpressionRule() {
		return getXAndExpressionAccess().getRule();
	}

	//OpAnd:
	//	"&&";
	public XbaseGrammarAccess.OpAndElements getOpAndAccess() {
		return gaXbase.getOpAndAccess();
	}
	
	public ParserRule getOpAndRule() {
		return getOpAndAccess().getRule();
	}

	//XEqualityExpression returns XExpression:
	//	XRelationalExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpEquality])
	//	rightOperand=XRelationalExpression)*;
	public XbaseGrammarAccess.XEqualityExpressionElements getXEqualityExpressionAccess() {
		return gaXbase.getXEqualityExpressionAccess();
	}
	
	public ParserRule getXEqualityExpressionRule() {
		return getXEqualityExpressionAccess().getRule();
	}

	//OpEquality:
	//	"==" | "!=" | "===" | "!==";
	public XbaseGrammarAccess.OpEqualityElements getOpEqualityAccess() {
		return gaXbase.getOpEqualityAccess();
	}
	
	public ParserRule getOpEqualityRule() {
		return getOpEqualityAccess().getRule();
	}

	//XRelationalExpression returns XExpression:
	//	XOtherOperatorExpression (=> ({XInstanceOfExpression.expression=current} "instanceof") type=JvmTypeReference | =>
	//	({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpCompare])
	//	rightOperand=XOtherOperatorExpression)*;
	public XbaseGrammarAccess.XRelationalExpressionElements getXRelationalExpressionAccess() {
		return gaXbase.getXRelationalExpressionAccess();
	}
	
	public ParserRule getXRelationalExpressionRule() {
		return getXRelationalExpressionAccess().getRule();
	}

	//OpCompare:
	//	">=" | "<" "=" | ">" | "<";
	public XbaseGrammarAccess.OpCompareElements getOpCompareAccess() {
		return gaXbase.getOpCompareAccess();
	}
	
	public ParserRule getOpCompareRule() {
		return getOpCompareAccess().getRule();
	}

	//XOtherOperatorExpression returns XExpression:
	//	XAdditiveExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpOther])
	//	rightOperand=XAdditiveExpression)*;
	public XbaseGrammarAccess.XOtherOperatorExpressionElements getXOtherOperatorExpressionAccess() {
		return gaXbase.getXOtherOperatorExpressionAccess();
	}
	
	public ParserRule getXOtherOperatorExpressionRule() {
		return getXOtherOperatorExpressionAccess().getRule();
	}

	//OpOther:
	//	"->" | "..<" | ">" ".." | ".." | "=>" | ">" (=> (">" ">") | ">") | "<" (=> ("<" "<") | "<" | "=>") | "<>" | "?:";
	public XbaseGrammarAccess.OpOtherElements getOpOtherAccess() {
		return gaXbase.getOpOtherAccess();
	}
	
	public ParserRule getOpOtherRule() {
		return getOpOtherAccess().getRule();
	}

	//XAdditiveExpression returns XExpression:
	//	XMultiplicativeExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpAdd])
	//	rightOperand=XMultiplicativeExpression)*;
	public XbaseGrammarAccess.XAdditiveExpressionElements getXAdditiveExpressionAccess() {
		return gaXbase.getXAdditiveExpressionAccess();
	}
	
	public ParserRule getXAdditiveExpressionRule() {
		return getXAdditiveExpressionAccess().getRule();
	}

	//OpAdd:
	//	"+" | "-";
	public XbaseGrammarAccess.OpAddElements getOpAddAccess() {
		return gaXbase.getOpAddAccess();
	}
	
	public ParserRule getOpAddRule() {
		return getOpAddAccess().getRule();
	}

	//XMultiplicativeExpression returns XExpression:
	//	XUnaryOperation (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpMulti])
	//	rightOperand=XUnaryOperation)*;
	public XbaseGrammarAccess.XMultiplicativeExpressionElements getXMultiplicativeExpressionAccess() {
		return gaXbase.getXMultiplicativeExpressionAccess();
	}
	
	public ParserRule getXMultiplicativeExpressionRule() {
		return getXMultiplicativeExpressionAccess().getRule();
	}

	//OpMulti:
	//	"*" | "**" | "/" | "%";
	public XbaseGrammarAccess.OpMultiElements getOpMultiAccess() {
		return gaXbase.getOpMultiAccess();
	}
	
	public ParserRule getOpMultiRule() {
		return getOpMultiAccess().getRule();
	}

	//XUnaryOperation returns XExpression:
	//	{XUnaryOperation} feature=[types::JvmIdentifiableElement|OpUnary] operand=XUnaryOperation | XCastedExpression;
	public XbaseGrammarAccess.XUnaryOperationElements getXUnaryOperationAccess() {
		return gaXbase.getXUnaryOperationAccess();
	}
	
	public ParserRule getXUnaryOperationRule() {
		return getXUnaryOperationAccess().getRule();
	}

	//OpUnary:
	//	"!" | "-" | "+";
	public XbaseGrammarAccess.OpUnaryElements getOpUnaryAccess() {
		return gaXbase.getOpUnaryAccess();
	}
	
	public ParserRule getOpUnaryRule() {
		return getOpUnaryAccess().getRule();
	}

	//XCastedExpression returns XExpression:
	//	XPostfixOperation (=> ({XCastedExpression.target=current} "as") type=JvmTypeReference)*;
	public XbaseGrammarAccess.XCastedExpressionElements getXCastedExpressionAccess() {
		return gaXbase.getXCastedExpressionAccess();
	}
	
	public ParserRule getXCastedExpressionRule() {
		return getXCastedExpressionAccess().getRule();
	}

	//XPostfixOperation returns XExpression:
	//	XMemberFeatureCall => ({XPostfixOperation.operand=current} feature=[types::JvmIdentifiableElement|OpPostfix])?;
	public XbaseGrammarAccess.XPostfixOperationElements getXPostfixOperationAccess() {
		return gaXbase.getXPostfixOperationAccess();
	}
	
	public ParserRule getXPostfixOperationRule() {
		return getXPostfixOperationAccess().getRule();
	}

	//OpPostfix:
	//	"++" | "--";
	public XbaseGrammarAccess.OpPostfixElements getOpPostfixAccess() {
		return gaXbase.getOpPostfixAccess();
	}
	
	public ParserRule getOpPostfixRule() {
		return getOpPostfixAccess().getRule();
	}

	//XMemberFeatureCall returns XExpression:
	//	XPrimaryExpression (=> ({XAssignment.assignable=current} ("." | explicitStatic?="::")
	//	feature=[types::JvmIdentifiableElement|FeatureCallID] OpSingleAssign) value=XAssignment | =>
	//	({XMemberFeatureCall.memberCallTarget=current} ("." | nullSafe?="?." | explicitStatic?="::")) ("<"
	//	typeArguments+=JvmArgumentTypeReference ("," typeArguments+=JvmArgumentTypeReference)* ">")?
	//	feature=[types::JvmIdentifiableElement|IdOrSuper] (=> explicitOperationCall?="(" (memberCallArguments+=XShortClosure |
	//	memberCallArguments+=XExpression ("," memberCallArguments+=XExpression)*)? ")")? memberCallArguments+=XClosure?)*;
	public XbaseGrammarAccess.XMemberFeatureCallElements getXMemberFeatureCallAccess() {
		return gaXbase.getXMemberFeatureCallAccess();
	}
	
	public ParserRule getXMemberFeatureCallRule() {
		return getXMemberFeatureCallAccess().getRule();
	}

	//XPrimaryExpression returns XExpression:
	//	XConstructorCall | XBlockExpression | XSwitchExpression | XSynchronizedExpression | XFeatureCall | XLiteral |
	//	XIfExpression | XForLoopExpression | XBasicForLoopExpression | XWhileExpression | XDoWhileExpression |
	//	XThrowExpression | XReturnExpression | XTryCatchFinallyExpression | XParenthesizedExpression;
	public XbaseGrammarAccess.XPrimaryExpressionElements getXPrimaryExpressionAccess() {
		return gaXbase.getXPrimaryExpressionAccess();
	}
	
	public ParserRule getXPrimaryExpressionRule() {
		return getXPrimaryExpressionAccess().getRule();
	}

	//XLiteral returns XExpression:
	//	XCollectionLiteral | XClosure | XBooleanLiteral | XNumberLiteral | XNullLiteral | XStringLiteral | XTypeLiteral;
	public XbaseGrammarAccess.XLiteralElements getXLiteralAccess() {
		return gaXbase.getXLiteralAccess();
	}
	
	public ParserRule getXLiteralRule() {
		return getXLiteralAccess().getRule();
	}

	//XCollectionLiteral:
	//	XSetLiteral | XListLiteral;
	public XbaseGrammarAccess.XCollectionLiteralElements getXCollectionLiteralAccess() {
		return gaXbase.getXCollectionLiteralAccess();
	}
	
	public ParserRule getXCollectionLiteralRule() {
		return getXCollectionLiteralAccess().getRule();
	}

	//XSetLiteral:
	//	{XSetLiteral} "#" "{" (elements+=XExpression ("," elements+=XExpression)*)? "}";
	public XbaseGrammarAccess.XSetLiteralElements getXSetLiteralAccess() {
		return gaXbase.getXSetLiteralAccess();
	}
	
	public ParserRule getXSetLiteralRule() {
		return getXSetLiteralAccess().getRule();
	}

	//XListLiteral:
	//	{XListLiteral} "#" "[" (elements+=XExpression ("," elements+=XExpression)*)? "]";
	public XbaseGrammarAccess.XListLiteralElements getXListLiteralAccess() {
		return gaXbase.getXListLiteralAccess();
	}
	
	public ParserRule getXListLiteralRule() {
		return getXListLiteralAccess().getRule();
	}

	//XClosure returns XExpression:
	//	=> ({XClosure} "[") => ((declaredFormalParameters+=JvmFormalParameter (","
	//	declaredFormalParameters+=JvmFormalParameter)*)? explicitSyntax?="|")? expression=XExpressionInClosure "]";
	public XbaseGrammarAccess.XClosureElements getXClosureAccess() {
		return gaXbase.getXClosureAccess();
	}
	
	public ParserRule getXClosureRule() {
		return getXClosureAccess().getRule();
	}

	//XExpressionInClosure returns XExpression:
	//	{XBlockExpression} (expressions+=XExpressionOrVarDeclaration ";"?)*;
	public XbaseGrammarAccess.XExpressionInClosureElements getXExpressionInClosureAccess() {
		return gaXbase.getXExpressionInClosureAccess();
	}
	
	public ParserRule getXExpressionInClosureRule() {
		return getXExpressionInClosureAccess().getRule();
	}

	//XShortClosure returns XExpression:
	//	=> ({XClosure} (declaredFormalParameters+=JvmFormalParameter ("," declaredFormalParameters+=JvmFormalParameter)*)?
	//	explicitSyntax?="|") expression=XExpression;
	public XbaseGrammarAccess.XShortClosureElements getXShortClosureAccess() {
		return gaXbase.getXShortClosureAccess();
	}
	
	public ParserRule getXShortClosureRule() {
		return getXShortClosureAccess().getRule();
	}

	//XParenthesizedExpression returns XExpression:
	//	"(" XExpression ")";
	public XbaseGrammarAccess.XParenthesizedExpressionElements getXParenthesizedExpressionAccess() {
		return gaXbase.getXParenthesizedExpressionAccess();
	}
	
	public ParserRule getXParenthesizedExpressionRule() {
		return getXParenthesizedExpressionAccess().getRule();
	}

	//XIfExpression returns XExpression:
	//	{XIfExpression} "if" "(" if=XExpression ")" then=XExpression ("else" else=XExpression)?;
	public XbaseGrammarAccess.XIfExpressionElements getXIfExpressionAccess() {
		return gaXbase.getXIfExpressionAccess();
	}
	
	public ParserRule getXIfExpressionRule() {
		return getXIfExpressionAccess().getRule();
	}

	//XSwitchExpression returns XExpression:
	//	{XSwitchExpression} "switch" (=> ("(" declaredParam=JvmFormalParameter ":") switch=XExpression ")" | =>
	//	(declaredParam=JvmFormalParameter ":")? switch=XExpression) "{" cases+=XCasePart* ("default" ":" default=XExpression)?
	//	"}";
	public XbaseGrammarAccess.XSwitchExpressionElements getXSwitchExpressionAccess() {
		return gaXbase.getXSwitchExpressionAccess();
	}
	
	public ParserRule getXSwitchExpressionRule() {
		return getXSwitchExpressionAccess().getRule();
	}

	//XCasePart:
	//	{XCasePart} typeGuard=JvmTypeReference? ("case" case=XExpression)? (":" then=XExpression | fallThrough?=",");
	public XbaseGrammarAccess.XCasePartElements getXCasePartAccess() {
		return gaXbase.getXCasePartAccess();
	}
	
	public ParserRule getXCasePartRule() {
		return getXCasePartAccess().getRule();
	}

	//XForLoopExpression returns XExpression:
	//	=> ({XForLoopExpression} "for" "(" declaredParam=JvmFormalParameter ":") forExpression=XExpression ")"
	//	eachExpression=XExpression;
	public XbaseGrammarAccess.XForLoopExpressionElements getXForLoopExpressionAccess() {
		return gaXbase.getXForLoopExpressionAccess();
	}
	
	public ParserRule getXForLoopExpressionRule() {
		return getXForLoopExpressionAccess().getRule();
	}

	//XBasicForLoopExpression returns XExpression:
	//	{XBasicForLoopExpression} "for" "(" (initExpressions+=XExpressionOrVarDeclaration (","
	//	initExpressions+=XExpressionOrVarDeclaration)*)? ";" expression=XExpression? ";" (updateExpressions+=XExpression (","
	//	updateExpressions+=XExpression)*)? ")" eachExpression=XExpression;
	public XbaseGrammarAccess.XBasicForLoopExpressionElements getXBasicForLoopExpressionAccess() {
		return gaXbase.getXBasicForLoopExpressionAccess();
	}
	
	public ParserRule getXBasicForLoopExpressionRule() {
		return getXBasicForLoopExpressionAccess().getRule();
	}

	//XWhileExpression returns XExpression:
	//	{XWhileExpression} "while" "(" predicate=XExpression ")" body=XExpression;
	public XbaseGrammarAccess.XWhileExpressionElements getXWhileExpressionAccess() {
		return gaXbase.getXWhileExpressionAccess();
	}
	
	public ParserRule getXWhileExpressionRule() {
		return getXWhileExpressionAccess().getRule();
	}

	//XDoWhileExpression returns XExpression:
	//	{XDoWhileExpression} "do" body=XExpression "while" "(" predicate=XExpression ")";
	public XbaseGrammarAccess.XDoWhileExpressionElements getXDoWhileExpressionAccess() {
		return gaXbase.getXDoWhileExpressionAccess();
	}
	
	public ParserRule getXDoWhileExpressionRule() {
		return getXDoWhileExpressionAccess().getRule();
	}

	//XBlockExpression returns XExpression:
	//	{XBlockExpression} "{" (expressions+=XExpressionOrVarDeclaration ";"?)* "}";
	public XbaseGrammarAccess.XBlockExpressionElements getXBlockExpressionAccess() {
		return gaXbase.getXBlockExpressionAccess();
	}
	
	public ParserRule getXBlockExpressionRule() {
		return getXBlockExpressionAccess().getRule();
	}

	//XExpressionOrVarDeclaration returns XExpression:
	//	XVariableDeclaration | XExpression;
	public XbaseGrammarAccess.XExpressionOrVarDeclarationElements getXExpressionOrVarDeclarationAccess() {
		return gaXbase.getXExpressionOrVarDeclarationAccess();
	}
	
	public ParserRule getXExpressionOrVarDeclarationRule() {
		return getXExpressionOrVarDeclarationAccess().getRule();
	}

	//XVariableDeclaration returns XExpression:
	//	{XVariableDeclaration} (writeable?="var" | "val") (=> (type=JvmTypeReference name=ValidID) | name=ValidID) ("="
	//	right=XExpression)?;
	public XbaseGrammarAccess.XVariableDeclarationElements getXVariableDeclarationAccess() {
		return gaXbase.getXVariableDeclarationAccess();
	}
	
	public ParserRule getXVariableDeclarationRule() {
		return getXVariableDeclarationAccess().getRule();
	}

	//JvmFormalParameter returns types::JvmFormalParameter:
	//	parameterType=JvmTypeReference? name=ValidID;
	public XbaseGrammarAccess.JvmFormalParameterElements getJvmFormalParameterAccess() {
		return gaXbase.getJvmFormalParameterAccess();
	}
	
	public ParserRule getJvmFormalParameterRule() {
		return getJvmFormalParameterAccess().getRule();
	}

	//FullJvmFormalParameter returns types::JvmFormalParameter:
	//	parameterType=JvmTypeReference name=ValidID;
	public XbaseGrammarAccess.FullJvmFormalParameterElements getFullJvmFormalParameterAccess() {
		return gaXbase.getFullJvmFormalParameterAccess();
	}
	
	public ParserRule getFullJvmFormalParameterRule() {
		return getFullJvmFormalParameterAccess().getRule();
	}

	//XFeatureCall returns XExpression:
	//	{XFeatureCall} ("<" typeArguments+=JvmArgumentTypeReference ("," typeArguments+=JvmArgumentTypeReference)* ">")?
	//	feature=[types::JvmIdentifiableElement|IdOrSuper] (=> explicitOperationCall?="(" (featureCallArguments+=XShortClosure
	//	| featureCallArguments+=XExpression ("," featureCallArguments+=XExpression)*)? ")")? featureCallArguments+=XClosure?;
	public XbaseGrammarAccess.XFeatureCallElements getXFeatureCallAccess() {
		return gaXbase.getXFeatureCallAccess();
	}
	
	public ParserRule getXFeatureCallRule() {
		return getXFeatureCallAccess().getRule();
	}

	//FeatureCallID:
	//	ValidID | "extends" | "static" | "import" | "extension";
	public XbaseGrammarAccess.FeatureCallIDElements getFeatureCallIDAccess() {
		return gaXbase.getFeatureCallIDAccess();
	}
	
	public ParserRule getFeatureCallIDRule() {
		return getFeatureCallIDAccess().getRule();
	}

	//IdOrSuper:
	//	FeatureCallID | "super";
	public XbaseGrammarAccess.IdOrSuperElements getIdOrSuperAccess() {
		return gaXbase.getIdOrSuperAccess();
	}
	
	public ParserRule getIdOrSuperRule() {
		return getIdOrSuperAccess().getRule();
	}

	//XConstructorCall returns XExpression:
	//	{XConstructorCall} "new" constructor=[types::JvmConstructor|QualifiedName] ("<"
	//	typeArguments+=JvmArgumentTypeReference ("," typeArguments+=JvmArgumentTypeReference)* ">")? (=>
	//	explicitConstructorCall?="(" (arguments+=XShortClosure | arguments+=XExpression ("," arguments+=XExpression)*)? ")")?
	//	arguments+=XClosure?;
	public XbaseGrammarAccess.XConstructorCallElements getXConstructorCallAccess() {
		return gaXbase.getXConstructorCallAccess();
	}
	
	public ParserRule getXConstructorCallRule() {
		return getXConstructorCallAccess().getRule();
	}

	//XBooleanLiteral returns XExpression:
	//	{XBooleanLiteral} ("false" | isTrue?="true");
	public XbaseGrammarAccess.XBooleanLiteralElements getXBooleanLiteralAccess() {
		return gaXbase.getXBooleanLiteralAccess();
	}
	
	public ParserRule getXBooleanLiteralRule() {
		return getXBooleanLiteralAccess().getRule();
	}

	//XNullLiteral returns XExpression:
	//	{XNullLiteral} "null";
	public XbaseGrammarAccess.XNullLiteralElements getXNullLiteralAccess() {
		return gaXbase.getXNullLiteralAccess();
	}
	
	public ParserRule getXNullLiteralRule() {
		return getXNullLiteralAccess().getRule();
	}

	//XNumberLiteral returns XExpression:
	//	{XNumberLiteral} value=Number;
	public XbaseGrammarAccess.XNumberLiteralElements getXNumberLiteralAccess() {
		return gaXbase.getXNumberLiteralAccess();
	}
	
	public ParserRule getXNumberLiteralRule() {
		return getXNumberLiteralAccess().getRule();
	}

	//XStringLiteral returns XExpression:
	//	{XStringLiteral} value=STRING;
	public XbaseGrammarAccess.XStringLiteralElements getXStringLiteralAccess() {
		return gaXbase.getXStringLiteralAccess();
	}
	
	public ParserRule getXStringLiteralRule() {
		return getXStringLiteralAccess().getRule();
	}

	//XTypeLiteral returns XExpression:
	//	{XTypeLiteral} "typeof" "(" type=[types::JvmType|QualifiedName] arrayDimensions+=ArrayBrackets* ")";
	public XbaseGrammarAccess.XTypeLiteralElements getXTypeLiteralAccess() {
		return gaXbase.getXTypeLiteralAccess();
	}
	
	public ParserRule getXTypeLiteralRule() {
		return getXTypeLiteralAccess().getRule();
	}

	//XThrowExpression returns XExpression:
	//	{XThrowExpression} "throw" expression=XExpression;
	public XbaseGrammarAccess.XThrowExpressionElements getXThrowExpressionAccess() {
		return gaXbase.getXThrowExpressionAccess();
	}
	
	public ParserRule getXThrowExpressionRule() {
		return getXThrowExpressionAccess().getRule();
	}

	//XReturnExpression returns XExpression:
	//	{XReturnExpression} "return" -> expression=XExpression?;
	public XbaseGrammarAccess.XReturnExpressionElements getXReturnExpressionAccess() {
		return gaXbase.getXReturnExpressionAccess();
	}
	
	public ParserRule getXReturnExpressionRule() {
		return getXReturnExpressionAccess().getRule();
	}

	//XTryCatchFinallyExpression returns XExpression:
	//	{XTryCatchFinallyExpression} "try" expression=XExpression (catchClauses+=XCatchClause+ ("finally"
	//	finallyExpression=XExpression)? | "finally" finallyExpression=XExpression);
	public XbaseGrammarAccess.XTryCatchFinallyExpressionElements getXTryCatchFinallyExpressionAccess() {
		return gaXbase.getXTryCatchFinallyExpressionAccess();
	}
	
	public ParserRule getXTryCatchFinallyExpressionRule() {
		return getXTryCatchFinallyExpressionAccess().getRule();
	}

	//XSynchronizedExpression returns XExpression:
	//	=> ({XSynchronizedExpression} "synchronized" "(") param=XExpression ")" expression=XExpression;
	public XbaseGrammarAccess.XSynchronizedExpressionElements getXSynchronizedExpressionAccess() {
		return gaXbase.getXSynchronizedExpressionAccess();
	}
	
	public ParserRule getXSynchronizedExpressionRule() {
		return getXSynchronizedExpressionAccess().getRule();
	}

	//XCatchClause:
	//	"catch" "(" declaredParam=FullJvmFormalParameter ")" expression=XExpression;
	public XbaseGrammarAccess.XCatchClauseElements getXCatchClauseAccess() {
		return gaXbase.getXCatchClauseAccess();
	}
	
	public ParserRule getXCatchClauseRule() {
		return getXCatchClauseAccess().getRule();
	}

	//QualifiedName:
	//	ValidID ("." ValidID)*;
	public XbaseGrammarAccess.QualifiedNameElements getQualifiedNameAccess() {
		return gaXbase.getQualifiedNameAccess();
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}

	//Number hidden():
	//	HEX | (INT | DECIMAL) ("." (INT | DECIMAL))?;
	public XbaseGrammarAccess.NumberElements getNumberAccess() {
		return gaXbase.getNumberAccess();
	}
	
	public ParserRule getNumberRule() {
		return getNumberAccess().getRule();
	}

	/// **
	// * Dummy rule, for "better" downwards compatibility, since GrammarAccess generates non-static inner classes, 
	// * which makes downstream grammars break on classloading, when a rule is removed.
	// * / StaticQualifier:
	//	(ValidID "::")+;
	public XbaseGrammarAccess.StaticQualifierElements getStaticQualifierAccess() {
		return gaXbase.getStaticQualifierAccess();
	}
	
	public ParserRule getStaticQualifierRule() {
		return getStaticQualifierAccess().getRule();
	}

	//terminal HEX:
	//	("0x" | "0X") ("0".."9" | "a".."f" | "A".."F" | "_")+ ("#" (("b" | "B") ("i" | "I") | ("l" | "L")))?;
	public TerminalRule getHEXRule() {
		return gaXbase.getHEXRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9" ("0".."9" | "_")*;
	public TerminalRule getINTRule() {
		return gaXbase.getINTRule();
	} 

	//terminal DECIMAL:
	//	INT (("e" | "E") ("+" | "-")? INT)? (("b" | "B") ("i" | "I" | "d" | "D") | ("l" | "L" | "d" | "D" | "f" | "F"))?;
	public TerminalRule getDECIMALRule() {
		return gaXbase.getDECIMALRule();
	} 

	//JvmTypeReference:
	//	JvmParameterizedTypeReference => ({JvmGenericArrayTypeReference.componentType=current} ArrayBrackets)* |
	//	XFunctionTypeRef;
	public XtypeGrammarAccess.JvmTypeReferenceElements getJvmTypeReferenceAccess() {
		return gaXbase.getJvmTypeReferenceAccess();
	}
	
	public ParserRule getJvmTypeReferenceRule() {
		return getJvmTypeReferenceAccess().getRule();
	}

	//ArrayBrackets:
	//	"[" "]";
	public XtypeGrammarAccess.ArrayBracketsElements getArrayBracketsAccess() {
		return gaXbase.getArrayBracketsAccess();
	}
	
	public ParserRule getArrayBracketsRule() {
		return getArrayBracketsAccess().getRule();
	}

	//XFunctionTypeRef:
	//	("(" (paramTypes+=JvmTypeReference ("," paramTypes+=JvmTypeReference)*)? ")")? "=>" returnType=JvmTypeReference;
	public XtypeGrammarAccess.XFunctionTypeRefElements getXFunctionTypeRefAccess() {
		return gaXbase.getXFunctionTypeRefAccess();
	}
	
	public ParserRule getXFunctionTypeRefRule() {
		return getXFunctionTypeRefAccess().getRule();
	}

	//JvmParameterizedTypeReference:
	//	type=[JvmType|QualifiedName] ("<" arguments+=JvmArgumentTypeReference ("," arguments+=JvmArgumentTypeReference)* ">"
	//	(=> ({JvmInnerTypeReference.outer=current} ".") type=[JvmType|ValidID] ("<" arguments+=JvmArgumentTypeReference (","
	//	arguments+=JvmArgumentTypeReference)* ">")?)*)?;
	public XtypeGrammarAccess.JvmParameterizedTypeReferenceElements getJvmParameterizedTypeReferenceAccess() {
		return gaXbase.getJvmParameterizedTypeReferenceAccess();
	}
	
	public ParserRule getJvmParameterizedTypeReferenceRule() {
		return getJvmParameterizedTypeReferenceAccess().getRule();
	}

	//JvmArgumentTypeReference returns JvmTypeReference:
	//	JvmTypeReference | JvmWildcardTypeReference;
	public XtypeGrammarAccess.JvmArgumentTypeReferenceElements getJvmArgumentTypeReferenceAccess() {
		return gaXbase.getJvmArgumentTypeReferenceAccess();
	}
	
	public ParserRule getJvmArgumentTypeReferenceRule() {
		return getJvmArgumentTypeReferenceAccess().getRule();
	}

	//JvmWildcardTypeReference:
	//	{JvmWildcardTypeReference} "?" (constraints+=JvmUpperBound constraints+=JvmUpperBoundAnded* |
	//	constraints+=JvmLowerBound constraints+=JvmLowerBoundAnded*)?;
	public XtypeGrammarAccess.JvmWildcardTypeReferenceElements getJvmWildcardTypeReferenceAccess() {
		return gaXbase.getJvmWildcardTypeReferenceAccess();
	}
	
	public ParserRule getJvmWildcardTypeReferenceRule() {
		return getJvmWildcardTypeReferenceAccess().getRule();
	}

	//JvmUpperBound:
	//	"extends" typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmUpperBoundElements getJvmUpperBoundAccess() {
		return gaXbase.getJvmUpperBoundAccess();
	}
	
	public ParserRule getJvmUpperBoundRule() {
		return getJvmUpperBoundAccess().getRule();
	}

	//JvmUpperBoundAnded returns JvmUpperBound:
	//	"&" typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmUpperBoundAndedElements getJvmUpperBoundAndedAccess() {
		return gaXbase.getJvmUpperBoundAndedAccess();
	}
	
	public ParserRule getJvmUpperBoundAndedRule() {
		return getJvmUpperBoundAndedAccess().getRule();
	}

	//JvmLowerBound:
	//	"super" typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmLowerBoundElements getJvmLowerBoundAccess() {
		return gaXbase.getJvmLowerBoundAccess();
	}
	
	public ParserRule getJvmLowerBoundRule() {
		return getJvmLowerBoundAccess().getRule();
	}

	//JvmLowerBoundAnded returns JvmLowerBound:
	//	"&" typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmLowerBoundAndedElements getJvmLowerBoundAndedAccess() {
		return gaXbase.getJvmLowerBoundAndedAccess();
	}
	
	public ParserRule getJvmLowerBoundAndedRule() {
		return getJvmLowerBoundAndedAccess().getRule();
	}

	//JvmTypeParameter:
	//	name=ValidID (constraints+=JvmUpperBound constraints+=JvmUpperBoundAnded*)?;
	public XtypeGrammarAccess.JvmTypeParameterElements getJvmTypeParameterAccess() {
		return gaXbase.getJvmTypeParameterAccess();
	}
	
	public ParserRule getJvmTypeParameterRule() {
		return getJvmTypeParameterAccess().getRule();
	}

	//QualifiedNameWithWildcard:
	//	QualifiedName "." "*";
	public XtypeGrammarAccess.QualifiedNameWithWildcardElements getQualifiedNameWithWildcardAccess() {
		return gaXbase.getQualifiedNameWithWildcardAccess();
	}
	
	public ParserRule getQualifiedNameWithWildcardRule() {
		return getQualifiedNameWithWildcardAccess().getRule();
	}

	//ValidID:
	//	ID;
	public XtypeGrammarAccess.ValidIDElements getValidIDAccess() {
		return gaXbase.getValidIDAccess();
	}
	
	public ParserRule getValidIDRule() {
		return getValidIDAccess().getRule();
	}

	//XImportSection:
	//	importDeclarations+=XImportDeclaration+;
	public XtypeGrammarAccess.XImportSectionElements getXImportSectionAccess() {
		return gaXbase.getXImportSectionAccess();
	}
	
	public ParserRule getXImportSectionRule() {
		return getXImportSectionAccess().getRule();
	}

	//XImportDeclaration:
	//	"import" (static?="static" extension?="extension"? importedType=[JvmDeclaredType|QualifiedNameInStaticImport]
	//	(wildcard?="*" | memberName=ValidID) | importedType=[JvmDeclaredType|QualifiedName] |
	//	importedNamespace=QualifiedNameWithWildcard) ";"?;
	public XtypeGrammarAccess.XImportDeclarationElements getXImportDeclarationAccess() {
		return gaXbase.getXImportDeclarationAccess();
	}
	
	public ParserRule getXImportDeclarationRule() {
		return getXImportDeclarationAccess().getRule();
	}

	//QualifiedNameInStaticImport:
	//	(ValidID ".")+;
	public XtypeGrammarAccess.QualifiedNameInStaticImportElements getQualifiedNameInStaticImportAccess() {
		return gaXbase.getQualifiedNameInStaticImportAccess();
	}
	
	public ParserRule getQualifiedNameInStaticImportRule() {
		return getQualifiedNameInStaticImportAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "$" | "_") ("a".."z" | "A".."Z" | "$" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaXbase.getIDRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" . / * ('b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\') * / | !("\\" | "\""))* "\""? | "\'" ("\\" .
	//	/ * ('b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\') * / | !("\\" | "\'"))* "\'"?;
	public TerminalRule getSTRINGRule() {
		return gaXbase.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaXbase.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaXbase.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaXbase.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaXbase.getANY_OTHERRule();
	} 
}
