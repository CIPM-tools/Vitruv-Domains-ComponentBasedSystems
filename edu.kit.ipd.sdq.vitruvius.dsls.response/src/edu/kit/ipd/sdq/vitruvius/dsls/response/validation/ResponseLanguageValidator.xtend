/*
 * generated by Xtext 2.9.0
 */
package edu.kit.ipd.sdq.vitruvius.dsls.response.validation

import org.eclipse.xtext.validation.Check
import edu.kit.ipd.sdq.vitruvius.dsls.response.responseLanguage.ResponseLanguagePackage
import edu.kit.ipd.sdq.vitruvius.dsls.response.responseLanguage.Effects
import edu.kit.ipd.sdq.vitruvius.dsls.response.responseLanguage.ResponseFile
import static extension edu.kit.ipd.sdq.vitruvius.dsls.response.generator.ResponseLanguageGeneratorUtils.*;
import java.util.HashMap
import edu.kit.ipd.sdq.vitruvius.dsls.response.responseLanguage.Response
import edu.kit.ipd.sdq.vitruvius.dsls.response.responseLanguage.ConcreteTargetModelCreate
import edu.kit.ipd.sdq.vitruvius.dsls.response.responseLanguage.ConcreteTargetModelDelete
import edu.kit.ipd.sdq.vitruvius.dsls.response.responseLanguage.CorrespondingModelElementSpecification

/**
 * This class contains custom validation rules. 
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
class ResponseLanguageValidator extends AbstractResponseLanguageValidator {
	
	@Check
	def checkResponseFile(ResponseFile file) {
		val alreadyCheckedResponses = new HashMap<String, Response>();
		for (response : file.responses) {
			if (alreadyCheckedResponses.containsKey(response.responseName)) {
				warning("Duplicate response name.",
					response, ResponseLanguagePackage.Literals.RESPONSE__NAME);
				warning("Duplicate response name.",
					alreadyCheckedResponses.get(response.responseName), ResponseLanguagePackage.Literals.RESPONSE__NAME);
			}
			alreadyCheckedResponses.put(response.responseName, response);
		}
	}

	@Check
	def checkCorrespondingElementSpecification(CorrespondingModelElementSpecification element) {
		if (!element.name.nullOrEmpty && element.name.startsWith("_")) {
			error("Element names must not start with an underscore.", ResponseLanguagePackage.Literals.CORRESPONDING_MODEL_ELEMENT_SPECIFICATION__NAME);
		}
	}

	@Check
	def checkEffects(Effects effects) {
		if (!(effects.targetChange instanceof ConcreteTargetModelCreate ||
			effects.targetChange instanceof ConcreteTargetModelDelete) && effects.codeBlock == null) {
			warning("No code is specified to execute for the models to update.",
				ResponseLanguagePackage.Literals.EFFECTS__CODE_BLOCK);
		}
//		val response = effects.containingResponse;^
//		if (!(response.trigger instanceof ConcreteModelElementCreate) && 
//			effects.targetModel instanceof CreatedModel) {
//			error("A model can only be created in response to the creation of a model element.",
//				ResponseLanguagePackage.Literals.EFFECTS__TARGET_MODEL);
//		}
	}
	
}
