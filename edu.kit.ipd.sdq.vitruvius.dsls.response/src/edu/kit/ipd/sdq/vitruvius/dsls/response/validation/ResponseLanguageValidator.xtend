/*
 * generated by Xtext 2.9.0
 */
package edu.kit.ipd.sdq.vitruvius.dsls.response.validation

import org.eclipse.xtext.validation.Check
import edu.kit.ipd.sdq.vitruvius.dsls.response.responseLanguage.ResponseLanguagePackage
import java.util.HashMap
import edu.kit.ipd.sdq.vitruvius.dsls.response.responseLanguage.Response
import edu.kit.ipd.sdq.vitruvius.dsls.response.responseLanguage.CorrespondingModelElementSpecification
import edu.kit.ipd.sdq.vitruvius.dsls.response.responseLanguage.Effect
import edu.kit.ipd.sdq.vitruvius.dsls.response.responseLanguage.ImplicitEffect
import static extension edu.kit.ipd.sdq.vitruvius.dsls.response.helper.ResponseLanguageHelper.*;
import edu.kit.ipd.sdq.vitruvius.dsls.response.responseLanguage.ExplicitEffect
import edu.kit.ipd.sdq.vitruvius.dsls.response.responseLanguage.ResponsesSegment
import static extension edu.kit.ipd.sdq.vitruvius.dsls.response.generator.ResponseClassNamesGenerator.*;
import edu.kit.ipd.sdq.vitruvius.dsls.response.responseLanguage.EffectInput
import edu.kit.ipd.sdq.vitruvius.dsls.response.responseLanguage.CorrespondingModelElementCreate

/**
 * This class contains custom validation rules. 
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
class ResponseLanguageValidator extends AbstractResponseLanguageValidator {

	@Check
	def checkResponseFile(ResponsesSegment responseSegment) {
		val alreadyCheckedResponses = new HashMap<String, Response>();
		for (response : responseSegment.responses) {
			val responseName = response.responseClassNameGenerator.simpleName;
			if (alreadyCheckedResponses.containsKey(responseName)) {
				val errorMessage = "Duplicate response name: " + responseName;
				error(errorMessage, response, ResponseLanguagePackage.Literals.RESPONSE__NAME);
				error(
					errorMessage,
					alreadyCheckedResponses.get(responseName),
					ResponseLanguagePackage.Literals.RESPONSE__NAME
				);
			}
			alreadyCheckedResponses.put(responseName, response);
		}
		val alreadyCheckedEffects = new HashMap<String, Effect>();
		for (implicitEffect : responseSegment.responses.map[effect]) {
			alreadyCheckedEffects.put(implicitEffect.effectClassNameGenerator.simpleName, implicitEffect);
		}
		for (effect : responseSegment.effects) {
			val effectName = effect.effectClassNameGenerator.simpleName
			if (alreadyCheckedEffects.containsKey(effectName)) {
				val errorMessage = "Duplicate effect name: " + effectName;
				error(errorMessage, effect, ResponseLanguagePackage.Literals.EXPLICIT_EFFECT__NAME);
				val duplicateNameEffect = alreadyCheckedEffects.get(effectName);
				if (duplicateNameEffect instanceof ImplicitEffect) {
					error(errorMessage, duplicateNameEffect.containingResponse,
						ResponseLanguagePackage.Literals.RESPONSE__NAME);
				} else if (duplicateNameEffect instanceof ExplicitEffect) {
					error(errorMessage, duplicateNameEffect, ResponseLanguagePackage.Literals.EXPLICIT_EFFECT__NAME);
				}
			}
			alreadyCheckedEffects.put(effectName, effect);
		}
	}

	@Check
	def checkCorrespondingElementSpecification(CorrespondingModelElementSpecification element) {
		if (!element.name.nullOrEmpty && element.name.startsWith("_")) {
			error("Element names must not start with an underscore.",
				ResponseLanguagePackage.Literals.CORRESPONDING_MODEL_ELEMENT_SPECIFICATION__NAME);
		}
	}

	@Check
	def checkEffects(Effect effect) {
		if (effect.codeBlock == null && !effect.correspondingElements.filter(CorrespondingModelElementCreate).nullOrEmpty) {
			warning("Created elements must be initialized and inserted into the target model in the execute block.",
				ResponseLanguagePackage.Literals.EFFECT__CODE_BLOCK);
		}
	}
	
	@Check
	def checkEffectInput(EffectInput effectInput) {
		if (!effectInput.javaInputElements.empty) {
			warning("Using plain Java elements is discouraged. Try to use model elements and make list inputs to single valued input of other effect that is called for each element.",
				ResponseLanguagePackage.Literals.EFFECT_INPUT__JAVA_INPUT_ELEMENTS);
		}
	}

}
