/*
 * generated by Xtext 2.9.0
 */
package edu.kit.ipd.sdq.vitruvius.dsls.response.jvmmodel

import com.google.inject.Inject
import org.eclipse.xtext.xbase.jvmmodel.AbstractModelInferrer
import org.eclipse.xtext.xbase.jvmmodel.IJvmDeclaredTypeAcceptor
import org.eclipse.xtext.xbase.jvmmodel.JvmTypesBuilder
import org.eclipse.xtext.xbase.XBlockExpression
import org.eclipse.xtext.common.types.JvmGenericType
import org.eclipse.emf.ecore.EObject
import org.eclipse.xtext.common.types.JvmVisibility
import edu.kit.ipd.sdq.vitruvius.dsls.response.responseLanguage.ModelChangeEvent
import org.eclipse.emf.ecore.EClass
import org.eclipse.xtext.common.types.JvmFormalParameter
import static extension edu.kit.ipd.sdq.vitruvius.dsls.response.helper.EChangeHelper.*;
import org.eclipse.xtext.common.types.JvmTypeReference
import java.util.ArrayList
import static edu.kit.ipd.sdq.vitruvius.dsls.response.generator.ResponseLanguageGeneratorConstants.*;
import static extension edu.kit.ipd.sdq.vitruvius.dsls.response.helper.ResponseLanguageHelper.*;

/**
 * <p>Infers a JVM model from the source model.</p> 
 *
 * <p>The JVM model should contain all elements that would appear in the Java code 
 * which is generated from the source model. Other models link against the JVM model rather than the source model.</p>     
 */
class ResponseLanguageJvmModelInferrer extends AbstractModelInferrer {
    /**
     * convenience API to build and initialize JVM types and their members.
     */
	@Inject extension JvmTypesBuilder
	
	/**
	 * The dispatch method {@code infer} is called for each instance of the
	 * given element's type that is contained in a resource.
	 * 
	 * @param element
	 *            the model to create one or more
	 *            {@link org.eclipse.xtext.common.types.JvmDeclaredType declared
	 *            types} from.
	 * @param acceptor
	 *            each created
	 *            {@link org.eclipse.xtext.common.types.JvmDeclaredType type}
	 *            without a container should be passed to the acceptor in order
	 *            get attached to the current resource. The acceptor's
	 *            {@link IJvmDeclaredTypeAcceptor#accept(org.eclipse.xtext.common.types.JvmDeclaredType)
	 *            accept(..)} method takes the constructed empty type for the
	 *            pre-indexing phase. This one is further initialized in the
	 *            indexing phase using the closure you pass to the returned
	 *            {@link org.eclipse.xtext.xbase.jvmmodel.IJvmDeclaredTypeAcceptor.IPostIndexingInitializing#initializeLater(org.eclipse.xtext.xbase.lib.Procedures.Procedure1)
	 *            initializeLater(..)}.
	 * @param isPreIndexingPhase
	 *            whether the method is called in a pre-indexing phase, i.e.
	 *            when the global index is not yet fully updated. You must not
	 *            rely on linking using the index if isPreIndexingPhase is
	 *            <code>true</code>.
	 */
	def dispatch void infer(XBlockExpression codeBlock, IJvmDeclaredTypeAcceptor acceptor, boolean isPreIndexingPhase) {
		if (isPreIndexingPhase) {
			return;
		}
		val response = codeBlock.containingResponse;
		val event = response?.trigger.event;
		var EClass change;
		if (event instanceof ModelChangeEvent) {
			change = event.change;
		}

		val methodParameters = <JvmFormalParameter>newArrayList();
		val changeTypeParameters = new ArrayList<String>();
		if (change?.name != null) {
			if (event instanceof ModelChangeEvent) {
				changeTypeParameters += getGenericTypeParameterFQNOfChange(event)
			}
			methodParameters += codeBlock.generateChangeParameter(change.instanceTypeName, changeTypeParameters);
		}

		acceptor.accept(response.toClass("Response")) [
			members += codeBlock.toMethod(RESPONSE_APPLY_METHOD_NAME, typeRef(Void.TYPE)) [applyMethod |
				applyMethod.parameters += methodParameters
				applyMethod.body = codeBlock]
			it.makeClassStatic(response)
		]
		
	}
	
	private def void makeClassStatic(JvmGenericType type, EObject context) {
		type.members += context.toConstructor [
			visibility = JvmVisibility::PRIVATE
			body = ''''''
			documentation = "Private constructor since this class is static"
		]
	}
	
	def generateChangeParameter(EObject context, String changeClassName, String... typeParameterClassNames) {
		val typeParameters = new ArrayList<JvmTypeReference>(typeParameterClassNames.size);
		for (typeParameterClassName : typeParameterClassNames) {
			typeParameters.add(typeRef(typeParameterClassName));	
		}		
		val changeType = typeRef(changeClassName, typeParameters)
		return context.toParameter(CHANGE_PARAMETER_NAME, changeType);
	}
	
}
