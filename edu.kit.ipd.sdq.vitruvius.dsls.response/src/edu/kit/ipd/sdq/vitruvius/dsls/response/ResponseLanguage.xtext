grammar edu.kit.ipd.sdq.vitruvius.dsls.response.ResponseLanguage with edu.kit.ipd.sdq.vitruvius.dsls.mirbase.MirBase
hidden(WS, SL_COMMENT)

generate responseLanguage "http://www.kit.edu/ipd/sdq/vitruvius/dsls/response/ResponseLanguage"

import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "http://www.kit.edu/ipd/sdq/vitruvius/dsls/mirbase/MirBase" as mirbase


ResponseFile:
	(namespaceImports=XImportSection)?
	MirBaseFile
	(responsesSegments+=ResponsesSegment)+;
	
ResponsesSegment:
	'responses from metamodel' fromMetamodel=MetamodelReference 'to metamodel' toMetamodel=MetamodelReference
	'called' name=ValidID
	(responses+=Response |
		effects+=ExplicitEffect)*;

Response:
	(documentation=ML_COMMENT)?
	'response:' name=ValidID
	trigger=Trigger
	effect=ImplicitEffect;



// ****** EFFECTS ******

fragment Effect:
	(correspondingElements+=(CorrespondingModelElementRetrieve |
	CorrespondingModelElementDelete |
	CorrespondingModelElementCreate))*
	('execute:' codeBlock=ExecutionCodeBlock)?;

ImplicitEffect:
	Effect;

ExplicitEffect:
	'effect:' name=ValidID
	input=EffectInput
	Effect;
	
EffectInput:
	{EffectInput}
	('input:' modelInputElements+=NamedModelElement (',' modelInputElements+=NamedModelElement)*)?
	('plain java input:' javaInputElements+=NamedJavaElement (',' javaInputElements+=NamedJavaElement)*)?;



// ****** CORRESPONDENCE SPECIFICATION ******	

fragment CorrespondingModelElementSpecification:
	elementType=ModelElement 'as' name=ValidID 'corresponding to' correspondenceSource=CorrespondingObjectCodeBlock;

CorrespondingModelElementCreate returns CorrespondingModelElementCreate:
	{CorrespondingModelElementCreate}
	'create element:' CorrespondingModelElementSpecification ('tag with' tag=TagCodeBlock)? (persistence=ModelPersistence)?;

fragment CorrespondingModelElementRetrieveOrDelete:
	CorrespondingModelElementSpecification ('tagged with' tag=TagCodeBlock)? ('with' precondition=PreconditionCodeBlock)?
	(failSpecification=CorrespondenceFailSpecification)?;

CorrespondingModelElementRetrieve returns CorrespondingModelElementRetrieve:
	{CorrespondingModelElementRetrieve}
	'retrieve element:' CorrespondingModelElementRetrieveOrDelete (persistence=ModelMove)?;

CorrespondingModelElementDelete returns CorrespondingModelElementDelete:
	{CorrespondingModelElementDelete}
	'delete element:' CorrespondingModelElementRetrieveOrDelete;

ModelPersistence returns ModelLocation:
	(useRelativeToSource?='persist as root at changed model relative location:'
	| useRelativeToProject?='persist as root at project-relative location:') modelPath=ModelPathCodeBlock;
	
ModelMove returns ModelLocation:
	(useRelativeToSource?='move containing model relative to original location:'
	| useRelativeToProject?='move containing model to project-relative location:') modelPath=ModelPathCodeBlock;



// ****** CORRESPONDENCE FAIL ******

CorrespondenceFailSpecification:
	'on fail' (CorrespondenceFailException | CorrespondenceFailAction);

CorrespondenceFailException:
	{CorrespondenceFailException}
	'throw exception';

CorrespondenceFailAction:
	(CorrespondenceFailDialog | CorrespondenceFailDoNothing /*| CorrespondenceFailCodeBlock */) (abortEffect?='and abort effect' | 'and continue effect');
	
CorrespondenceFailDoNothing:
	{CorrespondenceFailDoNothing}
	'do nothing';
	
CorrespondenceFailDialog:
	('show default user dialog' {CorrespondenceFailDefaultDialog}
	| 'show user dialog with message' {CorrespondenceFailCustomDialog} message=STRING);
	
/*CorrespondenceFailCodeBlock returns CorrespondenceFailCodeBlock:
	CodeBlock;*/



// ****** CODE BLOCKS ******

TagCodeBlock returns TagCodeBlock:
	{TagCodeBlock}
	CodeBlock;

PreconditionCodeBlock returns PreconditionCodeBlock:
	{PreconditionCodeBlock}
	CodeBlock;

CorrespondingObjectCodeBlock returns CorrespondingObjectCodeBlock:
	{CorrespondingObjectCodeBlock}
	CodeBlock;

ModelPathCodeBlock returns ModelPathCodeBlock:
	{ModelPathCodeBlock}
	CodeBlock;

ExecutionCodeBlock returns ExecutionCodeBlock:
	{ExecutionCodeBlock}
	CodeBlock;

fragment CodeBlock:
	code=XExpression;



// ****** TRIGGER ******

InvariantViolationEvent:
	'invariant' violation=[ecore::EClass|QualifiedName];

Trigger:
	'trigger:' (ModelChange | InvariantViolationEvent)
	('precondition:' precondition=PreconditionCodeBlock)?;

ModelChange:
	ConcreteModelElementChange | ArbitraryModelElementChange;

ConcreteModelElementChange returns ConcreteModelElementChange:
	AtomicConcreteModelElementChange;

AtomicConcreteModelElementChange:
	AtomicRootObjectChange | AtomicFeatureChange;

AtomicRootObjectChange:
	('insert root' {InsertRootChange} |
	'remove root' {RemoveRootChange})
	changedElement=ModelElement;

AtomicFeatureChange:
	(AtomicMultiValuedFeatureChange | AtomicSingleValuedFeatureChange)
	changedFeature=FeatureOfElement;

AtomicMultiValuedFeatureChange returns AtomicMultiValuedFeatureChange:
	'insert in list' {MultiValuedFeatureInsertChange} |
	'remove from list' {MultiValuedFeatureRemoveChange} |
	'permute list' {MultiValuedFeaturePermuteChange};

AtomicSingleValuedFeatureChange returns AtomicSingleValuedFeatureChange:
/* The next two will be removed with the new Change MM */
	'create value' {SingleValuedFeatureCreate} | 'delete value' {SingleValuedFeatureDelete} | 'replace value'
	{SingleValuedFeatureReplace};

ArbitraryModelElementChange:
	'change in instance of' changedModel=MetamodelReference;
	