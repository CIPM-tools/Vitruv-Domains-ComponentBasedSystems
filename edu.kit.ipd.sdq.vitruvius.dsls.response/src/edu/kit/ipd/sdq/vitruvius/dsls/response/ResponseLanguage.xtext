grammar edu.kit.ipd.sdq.vitruvius.dsls.response.ResponseLanguage 
	with edu.kit.ipd.sdq.vitruvius.dsls.mirbase.MirBase hidden(WS, SL_COMMENT)

generate responseLanguage "http://www.kit.edu/ipd/sdq/vitruvius/dsls/response/ResponseLanguage"

import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "http://www.kit.edu/ipd/sdq/vitruvius/dsls/mirbase/MirBase" as mirbase

ResponseFile returns mirbase::MirBaseFile:
	{ResponseFile}
	(metamodelImports+=MetamodelImport)*
	(responses += Response)*
;

Response:
	(documentation=ML_COMMENT)?
	'response:' (name=ValidID)?
	trigger=Trigger 
	effects=Effects;

Effects:
	{Effects}
	('effect:' targetChange=TargetChange)? 
	('execute:' codeBlock=ExecutionBlock)?;

TargetChange:
	ConcreteTargetModelRootChange | ArbitraryTargetMetamodelInstanceUpdate;

ConcreteTargetModelRootChange:
	(ConcreteTargetModelRootUpdate | ConcreteTargetModelRootCreate | ConcreteTargetModelRootDelete)
	'corresponding to' correspondenceSource=CorrespondenceSourceDeterminationBlock;
	
ConcreteTargetModelRootUpdate:
	'update root' rootModelElement=ModelElement;
	
ConcreteTargetModelRootCreate:
	'create root' rootModelElement=ModelElement 'at' relativeToSourcePath=STRING autodelete?='auto-delete'?;

ConcreteTargetModelRootDelete:
	'delete root' rootModelElement=ModelElement;

ArbitraryTargetMetamodelInstanceUpdate:
	'update instances of' metamodelReference=MetamodelReference;

CodeBlock:
	CorrespondenceSourceDeterminationBlock | PreconditionBlock | ExecutionBlock;

CorrespondenceSourceDeterminationBlock:
	{CorrespondenceSourceDeterminationBlock}
	code=XExpression;

PreconditionBlock:
	{PreconditionBlock}
	code=XExpression;

ExecutionBlock:
	{ExecutionBlock}
	code=XExpression;

InvariantViolationEvent:
	'invariant' violation=[ecore::EClass|QualifiedName];

Trigger:
	'trigger:' (ModelChange | InvariantViolationEvent)
	('precondition:' precondition=PreconditionBlock)?;
	
ModelChange:
	ConcreteModelElementChange | ArbitraryModelElementChange;

ConcreteModelElementChange returns ConcreteModelElementChange:
	AtomicConcreteModelElementChange;
	
AtomicConcreteModelElementChange:
	AtomicRootObjectChange | AtomicFeatureChange;

AtomicRootObjectChange:
	('insert root' {InsertRootChange} | 
	'remove root' {RemoveRootChange})
	changedElement=ModelElement;

AtomicFeatureChange:
	(AtomicMultiValuedFeatureChange | AtomicSingleValuedFeatureChange)
	changedFeature=FeatureOfElement;

AtomicMultiValuedFeatureChange returns AtomicMultiValuedFeatureChange:
	'insert in list' {MultiValuedFeatureInsertChange} |
	'remove from list' {MultiValuedFeatureRemoveChange} |
	'permute list' {MultiValuedFeaturePermuteChange};

AtomicSingleValuedFeatureChange returns AtomicSingleValuedFeatureChange:
	/* The next two will be removed with the new Change MM */
	'create value' {SingleValuedFeatureCreate} |
	'delete value' {SingleValuedFeatureDelete} |
	'replace value' {SingleValuedFeatureReplace};

ArbitraryModelElementChange:
	'change in instance of' changedModel=MetamodelReference;
	