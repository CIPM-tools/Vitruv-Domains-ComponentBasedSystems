/**
 * generated by Xtext 2.9.1
 */
package edu.kit.ipd.sdq.vitruvius.dsls.response.responseLanguage.impl;

import edu.kit.ipd.sdq.vitruvius.dsls.response.responseLanguage.ModelPathCodeBlock;
import edu.kit.ipd.sdq.vitruvius.dsls.response.responseLanguage.ModelPersistence;
import edu.kit.ipd.sdq.vitruvius.dsls.response.responseLanguage.ResponseLanguagePackage;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Model Persistence</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link edu.kit.ipd.sdq.vitruvius.dsls.response.responseLanguage.impl.ModelPersistenceImpl#isUseRelativeToSource <em>Use Relative To Source</em>}</li>
 *   <li>{@link edu.kit.ipd.sdq.vitruvius.dsls.response.responseLanguage.impl.ModelPersistenceImpl#isUseRelativeToProject <em>Use Relative To Project</em>}</li>
 *   <li>{@link edu.kit.ipd.sdq.vitruvius.dsls.response.responseLanguage.impl.ModelPersistenceImpl#getModelPath <em>Model Path</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ModelPersistenceImpl extends MinimalEObjectImpl.Container implements ModelPersistence
{
  /**
   * The default value of the '{@link #isUseRelativeToSource() <em>Use Relative To Source</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isUseRelativeToSource()
   * @generated
   * @ordered
   */
  protected static final boolean USE_RELATIVE_TO_SOURCE_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isUseRelativeToSource() <em>Use Relative To Source</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isUseRelativeToSource()
   * @generated
   * @ordered
   */
  protected boolean useRelativeToSource = USE_RELATIVE_TO_SOURCE_EDEFAULT;

  /**
   * The default value of the '{@link #isUseRelativeToProject() <em>Use Relative To Project</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isUseRelativeToProject()
   * @generated
   * @ordered
   */
  protected static final boolean USE_RELATIVE_TO_PROJECT_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isUseRelativeToProject() <em>Use Relative To Project</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isUseRelativeToProject()
   * @generated
   * @ordered
   */
  protected boolean useRelativeToProject = USE_RELATIVE_TO_PROJECT_EDEFAULT;

  /**
   * The cached value of the '{@link #getModelPath() <em>Model Path</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getModelPath()
   * @generated
   * @ordered
   */
  protected ModelPathCodeBlock modelPath;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ModelPersistenceImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return ResponseLanguagePackage.Literals.MODEL_PERSISTENCE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public boolean isUseRelativeToSource()
  {
    return useRelativeToSource;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setUseRelativeToSource(boolean newUseRelativeToSource)
  {
    boolean oldUseRelativeToSource = useRelativeToSource;
    useRelativeToSource = newUseRelativeToSource;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, ResponseLanguagePackage.MODEL_PERSISTENCE__USE_RELATIVE_TO_SOURCE, oldUseRelativeToSource, useRelativeToSource));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public boolean isUseRelativeToProject()
  {
    return useRelativeToProject;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setUseRelativeToProject(boolean newUseRelativeToProject)
  {
    boolean oldUseRelativeToProject = useRelativeToProject;
    useRelativeToProject = newUseRelativeToProject;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, ResponseLanguagePackage.MODEL_PERSISTENCE__USE_RELATIVE_TO_PROJECT, oldUseRelativeToProject, useRelativeToProject));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ModelPathCodeBlock getModelPath()
  {
    return modelPath;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetModelPath(ModelPathCodeBlock newModelPath, NotificationChain msgs)
  {
    ModelPathCodeBlock oldModelPath = modelPath;
    modelPath = newModelPath;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, ResponseLanguagePackage.MODEL_PERSISTENCE__MODEL_PATH, oldModelPath, newModelPath);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setModelPath(ModelPathCodeBlock newModelPath)
  {
    if (newModelPath != modelPath)
    {
      NotificationChain msgs = null;
      if (modelPath != null)
        msgs = ((InternalEObject)modelPath).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - ResponseLanguagePackage.MODEL_PERSISTENCE__MODEL_PATH, null, msgs);
      if (newModelPath != null)
        msgs = ((InternalEObject)newModelPath).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - ResponseLanguagePackage.MODEL_PERSISTENCE__MODEL_PATH, null, msgs);
      msgs = basicSetModelPath(newModelPath, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, ResponseLanguagePackage.MODEL_PERSISTENCE__MODEL_PATH, newModelPath, newModelPath));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case ResponseLanguagePackage.MODEL_PERSISTENCE__MODEL_PATH:
        return basicSetModelPath(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case ResponseLanguagePackage.MODEL_PERSISTENCE__USE_RELATIVE_TO_SOURCE:
        return isUseRelativeToSource();
      case ResponseLanguagePackage.MODEL_PERSISTENCE__USE_RELATIVE_TO_PROJECT:
        return isUseRelativeToProject();
      case ResponseLanguagePackage.MODEL_PERSISTENCE__MODEL_PATH:
        return getModelPath();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case ResponseLanguagePackage.MODEL_PERSISTENCE__USE_RELATIVE_TO_SOURCE:
        setUseRelativeToSource((Boolean)newValue);
        return;
      case ResponseLanguagePackage.MODEL_PERSISTENCE__USE_RELATIVE_TO_PROJECT:
        setUseRelativeToProject((Boolean)newValue);
        return;
      case ResponseLanguagePackage.MODEL_PERSISTENCE__MODEL_PATH:
        setModelPath((ModelPathCodeBlock)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case ResponseLanguagePackage.MODEL_PERSISTENCE__USE_RELATIVE_TO_SOURCE:
        setUseRelativeToSource(USE_RELATIVE_TO_SOURCE_EDEFAULT);
        return;
      case ResponseLanguagePackage.MODEL_PERSISTENCE__USE_RELATIVE_TO_PROJECT:
        setUseRelativeToProject(USE_RELATIVE_TO_PROJECT_EDEFAULT);
        return;
      case ResponseLanguagePackage.MODEL_PERSISTENCE__MODEL_PATH:
        setModelPath((ModelPathCodeBlock)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case ResponseLanguagePackage.MODEL_PERSISTENCE__USE_RELATIVE_TO_SOURCE:
        return useRelativeToSource != USE_RELATIVE_TO_SOURCE_EDEFAULT;
      case ResponseLanguagePackage.MODEL_PERSISTENCE__USE_RELATIVE_TO_PROJECT:
        return useRelativeToProject != USE_RELATIVE_TO_PROJECT_EDEFAULT;
      case ResponseLanguagePackage.MODEL_PERSISTENCE__MODEL_PATH:
        return modelPath != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuffer result = new StringBuffer(super.toString());
    result.append(" (useRelativeToSource: ");
    result.append(useRelativeToSource);
    result.append(", useRelativeToProject: ");
    result.append(useRelativeToProject);
    result.append(')');
    return result.toString();
  }

} //ModelPersistenceImpl
