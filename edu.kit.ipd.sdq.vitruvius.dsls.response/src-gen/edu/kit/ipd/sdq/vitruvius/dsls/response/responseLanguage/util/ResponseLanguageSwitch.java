/**
 * generated by Xtext 2.9.1
 */
package edu.kit.ipd.sdq.vitruvius.dsls.response.responseLanguage.util;

import edu.kit.ipd.sdq.vitruvius.dsls.mirbase.mirBase.MirBaseFile;

import edu.kit.ipd.sdq.vitruvius.dsls.response.responseLanguage.*;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.util.Switch;

/**
 * <!-- begin-user-doc -->
 * The <b>Switch</b> for the model's inheritance hierarchy.
 * It supports the call {@link #doSwitch(EObject) doSwitch(object)}
 * to invoke the <code>caseXXX</code> method for each class of the model,
 * starting with the actual class of the object
 * and proceeding up the inheritance hierarchy
 * until a non-null result is returned,
 * which is the result of the switch.
 * <!-- end-user-doc -->
 * @see edu.kit.ipd.sdq.vitruvius.dsls.response.responseLanguage.ResponseLanguagePackage
 * @generated
 */
public class ResponseLanguageSwitch<T> extends Switch<T>
{
  /**
   * The cached model package
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static ResponseLanguagePackage modelPackage;

  /**
   * Creates an instance of the switch.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ResponseLanguageSwitch()
  {
    if (modelPackage == null)
    {
      modelPackage = ResponseLanguagePackage.eINSTANCE;
    }
  }

  /**
   * Checks whether this is a switch for the given package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param ePackage the package in question.
   * @return whether this is a switch for the given package.
   * @generated
   */
  @Override
  protected boolean isSwitchFor(EPackage ePackage)
  {
    return ePackage == modelPackage;
  }

  /**
   * Calls <code>caseXXX</code> for each class of the model until one returns a non null result; it yields that result.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the first non-null result returned by a <code>caseXXX</code> call.
   * @generated
   */
  @Override
  protected T doSwitch(int classifierID, EObject theEObject)
  {
    switch (classifierID)
    {
      case ResponseLanguagePackage.RESPONSE:
      {
        Response response = (Response)theEObject;
        T result = caseResponse(response);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ResponseLanguagePackage.EFFECTS:
      {
        Effects effects = (Effects)theEObject;
        T result = caseEffects(effects);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ResponseLanguagePackage.TARGET_CHANGE:
      {
        TargetChange targetChange = (TargetChange)theEObject;
        T result = caseTargetChange(targetChange);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ResponseLanguagePackage.CONCRETE_TARGET_MODEL_CHANGE:
      {
        ConcreteTargetModelChange concreteTargetModelChange = (ConcreteTargetModelChange)theEObject;
        T result = caseConcreteTargetModelChange(concreteTargetModelChange);
        if (result == null) result = caseTargetChange(concreteTargetModelChange);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ResponseLanguagePackage.CORRESPONDING_MODEL_ELEMENT_CREATE:
      {
        CorrespondingModelElementCreate correspondingModelElementCreate = (CorrespondingModelElementCreate)theEObject;
        T result = caseCorrespondingModelElementCreate(correspondingModelElementCreate);
        if (result == null) result = caseCorrespondingModelElementSpecification(correspondingModelElementCreate);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ResponseLanguagePackage.MODEL_PERSISTENCE:
      {
        ModelPersistence modelPersistence = (ModelPersistence)theEObject;
        T result = caseModelPersistence(modelPersistence);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ResponseLanguagePackage.CORRESPONDING_MODEL_ELEMENT_DELETE:
      {
        CorrespondingModelElementDelete correspondingModelElementDelete = (CorrespondingModelElementDelete)theEObject;
        T result = caseCorrespondingModelElementDelete(correspondingModelElementDelete);
        if (result == null) result = caseCorrespondingModelElementRetrieveOrDelete(correspondingModelElementDelete);
        if (result == null) result = caseCorrespondingModelElementSpecificationWithPrecondition(correspondingModelElementDelete);
        if (result == null) result = caseCorrespondingModelElementSpecification(correspondingModelElementDelete);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ResponseLanguagePackage.CORRESPONDING_MODEL_ELEMENT_RETRIEVE:
      {
        CorrespondingModelElementRetrieve correspondingModelElementRetrieve = (CorrespondingModelElementRetrieve)theEObject;
        T result = caseCorrespondingModelElementRetrieve(correspondingModelElementRetrieve);
        if (result == null) result = caseCorrespondingModelElementRetrieveOrDelete(correspondingModelElementRetrieve);
        if (result == null) result = caseCorrespondingModelElementSpecificationWithPrecondition(correspondingModelElementRetrieve);
        if (result == null) result = caseCorrespondingModelElementSpecification(correspondingModelElementRetrieve);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ResponseLanguagePackage.CORRESPONDING_MODEL_ELEMENT_RETRIEVE_OR_DELETE:
      {
        CorrespondingModelElementRetrieveOrDelete correspondingModelElementRetrieveOrDelete = (CorrespondingModelElementRetrieveOrDelete)theEObject;
        T result = caseCorrespondingModelElementRetrieveOrDelete(correspondingModelElementRetrieveOrDelete);
        if (result == null) result = caseCorrespondingModelElementSpecificationWithPrecondition(correspondingModelElementRetrieveOrDelete);
        if (result == null) result = caseCorrespondingModelElementSpecification(correspondingModelElementRetrieveOrDelete);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ResponseLanguagePackage.CORRESPONDING_MODEL_ELEMENT_SPECIFICATION_WITH_PRECONDITION:
      {
        CorrespondingModelElementSpecificationWithPrecondition correspondingModelElementSpecificationWithPrecondition = (CorrespondingModelElementSpecificationWithPrecondition)theEObject;
        T result = caseCorrespondingModelElementSpecificationWithPrecondition(correspondingModelElementSpecificationWithPrecondition);
        if (result == null) result = caseCorrespondingModelElementSpecification(correspondingModelElementSpecificationWithPrecondition);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ResponseLanguagePackage.CORRESPONDING_MODEL_ELEMENT_SPECIFICATION:
      {
        CorrespondingModelElementSpecification correspondingModelElementSpecification = (CorrespondingModelElementSpecification)theEObject;
        T result = caseCorrespondingModelElementSpecification(correspondingModelElementSpecification);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ResponseLanguagePackage.ARBITRARY_TARGET_METAMODEL_INSTANCE_UPDATE:
      {
        ArbitraryTargetMetamodelInstanceUpdate arbitraryTargetMetamodelInstanceUpdate = (ArbitraryTargetMetamodelInstanceUpdate)theEObject;
        T result = caseArbitraryTargetMetamodelInstanceUpdate(arbitraryTargetMetamodelInstanceUpdate);
        if (result == null) result = caseTargetChange(arbitraryTargetMetamodelInstanceUpdate);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ResponseLanguagePackage.PRECONDITION_CODE_BLOCK:
      {
        PreconditionCodeBlock preconditionCodeBlock = (PreconditionCodeBlock)theEObject;
        T result = casePreconditionCodeBlock(preconditionCodeBlock);
        if (result == null) result = caseCodeBlock(preconditionCodeBlock);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ResponseLanguagePackage.CORRESPONDING_OBJECT_CODE_BLOCK:
      {
        CorrespondingObjectCodeBlock correspondingObjectCodeBlock = (CorrespondingObjectCodeBlock)theEObject;
        T result = caseCorrespondingObjectCodeBlock(correspondingObjectCodeBlock);
        if (result == null) result = caseCodeBlock(correspondingObjectCodeBlock);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ResponseLanguagePackage.MODEL_PATH_CODE_BLOCK:
      {
        ModelPathCodeBlock modelPathCodeBlock = (ModelPathCodeBlock)theEObject;
        T result = caseModelPathCodeBlock(modelPathCodeBlock);
        if (result == null) result = caseCodeBlock(modelPathCodeBlock);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ResponseLanguagePackage.EXECUTION_CODE_BLOCK:
      {
        ExecutionCodeBlock executionCodeBlock = (ExecutionCodeBlock)theEObject;
        T result = caseExecutionCodeBlock(executionCodeBlock);
        if (result == null) result = caseCodeBlock(executionCodeBlock);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ResponseLanguagePackage.CODE_BLOCK:
      {
        CodeBlock codeBlock = (CodeBlock)theEObject;
        T result = caseCodeBlock(codeBlock);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ResponseLanguagePackage.INVARIANT_VIOLATION_EVENT:
      {
        InvariantViolationEvent invariantViolationEvent = (InvariantViolationEvent)theEObject;
        T result = caseInvariantViolationEvent(invariantViolationEvent);
        if (result == null) result = caseTrigger(invariantViolationEvent);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ResponseLanguagePackage.TRIGGER:
      {
        Trigger trigger = (Trigger)theEObject;
        T result = caseTrigger(trigger);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ResponseLanguagePackage.MODEL_CHANGE:
      {
        ModelChange modelChange = (ModelChange)theEObject;
        T result = caseModelChange(modelChange);
        if (result == null) result = caseTrigger(modelChange);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ResponseLanguagePackage.CONCRETE_MODEL_ELEMENT_CHANGE:
      {
        ConcreteModelElementChange concreteModelElementChange = (ConcreteModelElementChange)theEObject;
        T result = caseConcreteModelElementChange(concreteModelElementChange);
        if (result == null) result = caseModelChange(concreteModelElementChange);
        if (result == null) result = caseTrigger(concreteModelElementChange);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ResponseLanguagePackage.ATOMIC_CONCRETE_MODEL_ELEMENT_CHANGE:
      {
        AtomicConcreteModelElementChange atomicConcreteModelElementChange = (AtomicConcreteModelElementChange)theEObject;
        T result = caseAtomicConcreteModelElementChange(atomicConcreteModelElementChange);
        if (result == null) result = caseConcreteModelElementChange(atomicConcreteModelElementChange);
        if (result == null) result = caseModelChange(atomicConcreteModelElementChange);
        if (result == null) result = caseTrigger(atomicConcreteModelElementChange);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ResponseLanguagePackage.ATOMIC_ROOT_OBJECT_CHANGE:
      {
        AtomicRootObjectChange atomicRootObjectChange = (AtomicRootObjectChange)theEObject;
        T result = caseAtomicRootObjectChange(atomicRootObjectChange);
        if (result == null) result = caseAtomicConcreteModelElementChange(atomicRootObjectChange);
        if (result == null) result = caseConcreteModelElementChange(atomicRootObjectChange);
        if (result == null) result = caseModelChange(atomicRootObjectChange);
        if (result == null) result = caseTrigger(atomicRootObjectChange);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ResponseLanguagePackage.ATOMIC_FEATURE_CHANGE:
      {
        AtomicFeatureChange atomicFeatureChange = (AtomicFeatureChange)theEObject;
        T result = caseAtomicFeatureChange(atomicFeatureChange);
        if (result == null) result = caseAtomicConcreteModelElementChange(atomicFeatureChange);
        if (result == null) result = caseConcreteModelElementChange(atomicFeatureChange);
        if (result == null) result = caseModelChange(atomicFeatureChange);
        if (result == null) result = caseTrigger(atomicFeatureChange);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ResponseLanguagePackage.ATOMIC_MULTI_VALUED_FEATURE_CHANGE:
      {
        AtomicMultiValuedFeatureChange atomicMultiValuedFeatureChange = (AtomicMultiValuedFeatureChange)theEObject;
        T result = caseAtomicMultiValuedFeatureChange(atomicMultiValuedFeatureChange);
        if (result == null) result = caseAtomicFeatureChange(atomicMultiValuedFeatureChange);
        if (result == null) result = caseAtomicConcreteModelElementChange(atomicMultiValuedFeatureChange);
        if (result == null) result = caseConcreteModelElementChange(atomicMultiValuedFeatureChange);
        if (result == null) result = caseModelChange(atomicMultiValuedFeatureChange);
        if (result == null) result = caseTrigger(atomicMultiValuedFeatureChange);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ResponseLanguagePackage.ATOMIC_SINGLE_VALUED_FEATURE_CHANGE:
      {
        AtomicSingleValuedFeatureChange atomicSingleValuedFeatureChange = (AtomicSingleValuedFeatureChange)theEObject;
        T result = caseAtomicSingleValuedFeatureChange(atomicSingleValuedFeatureChange);
        if (result == null) result = caseAtomicFeatureChange(atomicSingleValuedFeatureChange);
        if (result == null) result = caseAtomicConcreteModelElementChange(atomicSingleValuedFeatureChange);
        if (result == null) result = caseConcreteModelElementChange(atomicSingleValuedFeatureChange);
        if (result == null) result = caseModelChange(atomicSingleValuedFeatureChange);
        if (result == null) result = caseTrigger(atomicSingleValuedFeatureChange);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ResponseLanguagePackage.ARBITRARY_MODEL_ELEMENT_CHANGE:
      {
        ArbitraryModelElementChange arbitraryModelElementChange = (ArbitraryModelElementChange)theEObject;
        T result = caseArbitraryModelElementChange(arbitraryModelElementChange);
        if (result == null) result = caseModelChange(arbitraryModelElementChange);
        if (result == null) result = caseTrigger(arbitraryModelElementChange);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ResponseLanguagePackage.RESPONSE_FILE:
      {
        ResponseFile responseFile = (ResponseFile)theEObject;
        T result = caseResponseFile(responseFile);
        if (result == null) result = caseMirBaseFile(responseFile);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ResponseLanguagePackage.INSERT_ROOT_CHANGE:
      {
        InsertRootChange insertRootChange = (InsertRootChange)theEObject;
        T result = caseInsertRootChange(insertRootChange);
        if (result == null) result = caseAtomicRootObjectChange(insertRootChange);
        if (result == null) result = caseAtomicConcreteModelElementChange(insertRootChange);
        if (result == null) result = caseConcreteModelElementChange(insertRootChange);
        if (result == null) result = caseModelChange(insertRootChange);
        if (result == null) result = caseTrigger(insertRootChange);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ResponseLanguagePackage.REMOVE_ROOT_CHANGE:
      {
        RemoveRootChange removeRootChange = (RemoveRootChange)theEObject;
        T result = caseRemoveRootChange(removeRootChange);
        if (result == null) result = caseAtomicRootObjectChange(removeRootChange);
        if (result == null) result = caseAtomicConcreteModelElementChange(removeRootChange);
        if (result == null) result = caseConcreteModelElementChange(removeRootChange);
        if (result == null) result = caseModelChange(removeRootChange);
        if (result == null) result = caseTrigger(removeRootChange);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ResponseLanguagePackage.MULTI_VALUED_FEATURE_INSERT_CHANGE:
      {
        MultiValuedFeatureInsertChange multiValuedFeatureInsertChange = (MultiValuedFeatureInsertChange)theEObject;
        T result = caseMultiValuedFeatureInsertChange(multiValuedFeatureInsertChange);
        if (result == null) result = caseAtomicMultiValuedFeatureChange(multiValuedFeatureInsertChange);
        if (result == null) result = caseAtomicFeatureChange(multiValuedFeatureInsertChange);
        if (result == null) result = caseAtomicConcreteModelElementChange(multiValuedFeatureInsertChange);
        if (result == null) result = caseConcreteModelElementChange(multiValuedFeatureInsertChange);
        if (result == null) result = caseModelChange(multiValuedFeatureInsertChange);
        if (result == null) result = caseTrigger(multiValuedFeatureInsertChange);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ResponseLanguagePackage.MULTI_VALUED_FEATURE_REMOVE_CHANGE:
      {
        MultiValuedFeatureRemoveChange multiValuedFeatureRemoveChange = (MultiValuedFeatureRemoveChange)theEObject;
        T result = caseMultiValuedFeatureRemoveChange(multiValuedFeatureRemoveChange);
        if (result == null) result = caseAtomicMultiValuedFeatureChange(multiValuedFeatureRemoveChange);
        if (result == null) result = caseAtomicFeatureChange(multiValuedFeatureRemoveChange);
        if (result == null) result = caseAtomicConcreteModelElementChange(multiValuedFeatureRemoveChange);
        if (result == null) result = caseConcreteModelElementChange(multiValuedFeatureRemoveChange);
        if (result == null) result = caseModelChange(multiValuedFeatureRemoveChange);
        if (result == null) result = caseTrigger(multiValuedFeatureRemoveChange);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ResponseLanguagePackage.MULTI_VALUED_FEATURE_PERMUTE_CHANGE:
      {
        MultiValuedFeaturePermuteChange multiValuedFeaturePermuteChange = (MultiValuedFeaturePermuteChange)theEObject;
        T result = caseMultiValuedFeaturePermuteChange(multiValuedFeaturePermuteChange);
        if (result == null) result = caseAtomicMultiValuedFeatureChange(multiValuedFeaturePermuteChange);
        if (result == null) result = caseAtomicFeatureChange(multiValuedFeaturePermuteChange);
        if (result == null) result = caseAtomicConcreteModelElementChange(multiValuedFeaturePermuteChange);
        if (result == null) result = caseConcreteModelElementChange(multiValuedFeaturePermuteChange);
        if (result == null) result = caseModelChange(multiValuedFeaturePermuteChange);
        if (result == null) result = caseTrigger(multiValuedFeaturePermuteChange);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ResponseLanguagePackage.SINGLE_VALUED_FEATURE_CREATE:
      {
        SingleValuedFeatureCreate singleValuedFeatureCreate = (SingleValuedFeatureCreate)theEObject;
        T result = caseSingleValuedFeatureCreate(singleValuedFeatureCreate);
        if (result == null) result = caseAtomicSingleValuedFeatureChange(singleValuedFeatureCreate);
        if (result == null) result = caseAtomicFeatureChange(singleValuedFeatureCreate);
        if (result == null) result = caseAtomicConcreteModelElementChange(singleValuedFeatureCreate);
        if (result == null) result = caseConcreteModelElementChange(singleValuedFeatureCreate);
        if (result == null) result = caseModelChange(singleValuedFeatureCreate);
        if (result == null) result = caseTrigger(singleValuedFeatureCreate);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ResponseLanguagePackage.SINGLE_VALUED_FEATURE_DELETE:
      {
        SingleValuedFeatureDelete singleValuedFeatureDelete = (SingleValuedFeatureDelete)theEObject;
        T result = caseSingleValuedFeatureDelete(singleValuedFeatureDelete);
        if (result == null) result = caseAtomicSingleValuedFeatureChange(singleValuedFeatureDelete);
        if (result == null) result = caseAtomicFeatureChange(singleValuedFeatureDelete);
        if (result == null) result = caseAtomicConcreteModelElementChange(singleValuedFeatureDelete);
        if (result == null) result = caseConcreteModelElementChange(singleValuedFeatureDelete);
        if (result == null) result = caseModelChange(singleValuedFeatureDelete);
        if (result == null) result = caseTrigger(singleValuedFeatureDelete);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ResponseLanguagePackage.SINGLE_VALUED_FEATURE_REPLACE:
      {
        SingleValuedFeatureReplace singleValuedFeatureReplace = (SingleValuedFeatureReplace)theEObject;
        T result = caseSingleValuedFeatureReplace(singleValuedFeatureReplace);
        if (result == null) result = caseAtomicSingleValuedFeatureChange(singleValuedFeatureReplace);
        if (result == null) result = caseAtomicFeatureChange(singleValuedFeatureReplace);
        if (result == null) result = caseAtomicConcreteModelElementChange(singleValuedFeatureReplace);
        if (result == null) result = caseConcreteModelElementChange(singleValuedFeatureReplace);
        if (result == null) result = caseModelChange(singleValuedFeatureReplace);
        if (result == null) result = caseTrigger(singleValuedFeatureReplace);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      default: return defaultCase(theEObject);
    }
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Response</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Response</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseResponse(Response object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Effects</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Effects</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEffects(Effects object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Target Change</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Target Change</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseTargetChange(TargetChange object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Concrete Target Model Change</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Concrete Target Model Change</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseConcreteTargetModelChange(ConcreteTargetModelChange object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Corresponding Model Element Create</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Corresponding Model Element Create</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCorrespondingModelElementCreate(CorrespondingModelElementCreate object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Model Persistence</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Model Persistence</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseModelPersistence(ModelPersistence object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Corresponding Model Element Delete</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Corresponding Model Element Delete</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCorrespondingModelElementDelete(CorrespondingModelElementDelete object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Corresponding Model Element Retrieve</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Corresponding Model Element Retrieve</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCorrespondingModelElementRetrieve(CorrespondingModelElementRetrieve object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Corresponding Model Element Retrieve Or Delete</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Corresponding Model Element Retrieve Or Delete</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCorrespondingModelElementRetrieveOrDelete(CorrespondingModelElementRetrieveOrDelete object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Corresponding Model Element Specification With Precondition</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Corresponding Model Element Specification With Precondition</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCorrespondingModelElementSpecificationWithPrecondition(CorrespondingModelElementSpecificationWithPrecondition object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Corresponding Model Element Specification</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Corresponding Model Element Specification</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCorrespondingModelElementSpecification(CorrespondingModelElementSpecification object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Arbitrary Target Metamodel Instance Update</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Arbitrary Target Metamodel Instance Update</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseArbitraryTargetMetamodelInstanceUpdate(ArbitraryTargetMetamodelInstanceUpdate object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Precondition Code Block</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Precondition Code Block</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePreconditionCodeBlock(PreconditionCodeBlock object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Corresponding Object Code Block</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Corresponding Object Code Block</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCorrespondingObjectCodeBlock(CorrespondingObjectCodeBlock object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Model Path Code Block</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Model Path Code Block</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseModelPathCodeBlock(ModelPathCodeBlock object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Execution Code Block</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Execution Code Block</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseExecutionCodeBlock(ExecutionCodeBlock object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Code Block</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Code Block</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCodeBlock(CodeBlock object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Invariant Violation Event</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Invariant Violation Event</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseInvariantViolationEvent(InvariantViolationEvent object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Trigger</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Trigger</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseTrigger(Trigger object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Model Change</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Model Change</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseModelChange(ModelChange object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Concrete Model Element Change</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Concrete Model Element Change</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseConcreteModelElementChange(ConcreteModelElementChange object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Atomic Concrete Model Element Change</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Atomic Concrete Model Element Change</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAtomicConcreteModelElementChange(AtomicConcreteModelElementChange object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Atomic Root Object Change</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Atomic Root Object Change</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAtomicRootObjectChange(AtomicRootObjectChange object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Atomic Feature Change</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Atomic Feature Change</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAtomicFeatureChange(AtomicFeatureChange object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Atomic Multi Valued Feature Change</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Atomic Multi Valued Feature Change</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAtomicMultiValuedFeatureChange(AtomicMultiValuedFeatureChange object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Atomic Single Valued Feature Change</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Atomic Single Valued Feature Change</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAtomicSingleValuedFeatureChange(AtomicSingleValuedFeatureChange object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Arbitrary Model Element Change</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Arbitrary Model Element Change</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseArbitraryModelElementChange(ArbitraryModelElementChange object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Response File</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Response File</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseResponseFile(ResponseFile object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Insert Root Change</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Insert Root Change</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseInsertRootChange(InsertRootChange object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Remove Root Change</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Remove Root Change</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseRemoveRootChange(RemoveRootChange object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Multi Valued Feature Insert Change</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Multi Valued Feature Insert Change</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseMultiValuedFeatureInsertChange(MultiValuedFeatureInsertChange object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Multi Valued Feature Remove Change</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Multi Valued Feature Remove Change</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseMultiValuedFeatureRemoveChange(MultiValuedFeatureRemoveChange object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Multi Valued Feature Permute Change</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Multi Valued Feature Permute Change</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseMultiValuedFeaturePermuteChange(MultiValuedFeaturePermuteChange object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Single Valued Feature Create</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Single Valued Feature Create</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSingleValuedFeatureCreate(SingleValuedFeatureCreate object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Single Valued Feature Delete</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Single Valued Feature Delete</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSingleValuedFeatureDelete(SingleValuedFeatureDelete object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Single Valued Feature Replace</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Single Valued Feature Replace</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSingleValuedFeatureReplace(SingleValuedFeatureReplace object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>File</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>File</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseMirBaseFile(MirBaseFile object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>EObject</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch, but this is the last case anyway.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>EObject</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject)
   * @generated
   */
  @Override
  public T defaultCase(EObject object)
  {
    return null;
  }

} //ResponseLanguageSwitch
