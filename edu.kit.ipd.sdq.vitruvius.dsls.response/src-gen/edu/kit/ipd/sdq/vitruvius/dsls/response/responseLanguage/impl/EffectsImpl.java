/**
 * generated by Xtext 2.9.1
 */
package edu.kit.ipd.sdq.vitruvius.dsls.response.responseLanguage.impl;

import edu.kit.ipd.sdq.vitruvius.dsls.response.responseLanguage.Effects;
import edu.kit.ipd.sdq.vitruvius.dsls.response.responseLanguage.ExecutionCodeBlock;
import edu.kit.ipd.sdq.vitruvius.dsls.response.responseLanguage.ResponseLanguagePackage;
import edu.kit.ipd.sdq.vitruvius.dsls.response.responseLanguage.TargetChange;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Effects</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link edu.kit.ipd.sdq.vitruvius.dsls.response.responseLanguage.impl.EffectsImpl#getTargetChange <em>Target Change</em>}</li>
 *   <li>{@link edu.kit.ipd.sdq.vitruvius.dsls.response.responseLanguage.impl.EffectsImpl#getCodeBlock <em>Code Block</em>}</li>
 * </ul>
 *
 * @generated
 */
public class EffectsImpl extends MinimalEObjectImpl.Container implements Effects
{
  /**
   * The cached value of the '{@link #getTargetChange() <em>Target Change</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTargetChange()
   * @generated
   * @ordered
   */
  protected TargetChange targetChange;

  /**
   * The cached value of the '{@link #getCodeBlock() <em>Code Block</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCodeBlock()
   * @generated
   * @ordered
   */
  protected ExecutionCodeBlock codeBlock;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected EffectsImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return ResponseLanguagePackage.Literals.EFFECTS;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public TargetChange getTargetChange()
  {
    return targetChange;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetTargetChange(TargetChange newTargetChange, NotificationChain msgs)
  {
    TargetChange oldTargetChange = targetChange;
    targetChange = newTargetChange;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, ResponseLanguagePackage.EFFECTS__TARGET_CHANGE, oldTargetChange, newTargetChange);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setTargetChange(TargetChange newTargetChange)
  {
    if (newTargetChange != targetChange)
    {
      NotificationChain msgs = null;
      if (targetChange != null)
        msgs = ((InternalEObject)targetChange).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - ResponseLanguagePackage.EFFECTS__TARGET_CHANGE, null, msgs);
      if (newTargetChange != null)
        msgs = ((InternalEObject)newTargetChange).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - ResponseLanguagePackage.EFFECTS__TARGET_CHANGE, null, msgs);
      msgs = basicSetTargetChange(newTargetChange, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, ResponseLanguagePackage.EFFECTS__TARGET_CHANGE, newTargetChange, newTargetChange));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ExecutionCodeBlock getCodeBlock()
  {
    return codeBlock;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetCodeBlock(ExecutionCodeBlock newCodeBlock, NotificationChain msgs)
  {
    ExecutionCodeBlock oldCodeBlock = codeBlock;
    codeBlock = newCodeBlock;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, ResponseLanguagePackage.EFFECTS__CODE_BLOCK, oldCodeBlock, newCodeBlock);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setCodeBlock(ExecutionCodeBlock newCodeBlock)
  {
    if (newCodeBlock != codeBlock)
    {
      NotificationChain msgs = null;
      if (codeBlock != null)
        msgs = ((InternalEObject)codeBlock).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - ResponseLanguagePackage.EFFECTS__CODE_BLOCK, null, msgs);
      if (newCodeBlock != null)
        msgs = ((InternalEObject)newCodeBlock).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - ResponseLanguagePackage.EFFECTS__CODE_BLOCK, null, msgs);
      msgs = basicSetCodeBlock(newCodeBlock, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, ResponseLanguagePackage.EFFECTS__CODE_BLOCK, newCodeBlock, newCodeBlock));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case ResponseLanguagePackage.EFFECTS__TARGET_CHANGE:
        return basicSetTargetChange(null, msgs);
      case ResponseLanguagePackage.EFFECTS__CODE_BLOCK:
        return basicSetCodeBlock(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case ResponseLanguagePackage.EFFECTS__TARGET_CHANGE:
        return getTargetChange();
      case ResponseLanguagePackage.EFFECTS__CODE_BLOCK:
        return getCodeBlock();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case ResponseLanguagePackage.EFFECTS__TARGET_CHANGE:
        setTargetChange((TargetChange)newValue);
        return;
      case ResponseLanguagePackage.EFFECTS__CODE_BLOCK:
        setCodeBlock((ExecutionCodeBlock)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case ResponseLanguagePackage.EFFECTS__TARGET_CHANGE:
        setTargetChange((TargetChange)null);
        return;
      case ResponseLanguagePackage.EFFECTS__CODE_BLOCK:
        setCodeBlock((ExecutionCodeBlock)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case ResponseLanguagePackage.EFFECTS__TARGET_CHANGE:
        return targetChange != null;
      case ResponseLanguagePackage.EFFECTS__CODE_BLOCK:
        return codeBlock != null;
    }
    return super.eIsSet(featureID);
  }

} //EffectsImpl
