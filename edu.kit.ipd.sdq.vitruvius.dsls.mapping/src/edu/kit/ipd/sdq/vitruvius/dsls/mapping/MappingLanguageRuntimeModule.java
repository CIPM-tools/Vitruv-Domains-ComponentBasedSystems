/*
 * generated by Xtext
 */
package edu.kit.ipd.sdq.vitruvius.dsls.mapping;

import org.eclipse.xtext.generator.IGenerator;
import org.eclipse.xtext.linking.ILinkingService;
import org.eclipse.xtext.naming.IQualifiedNameConverter;
import org.eclipse.xtext.scoping.IGlobalScopeProvider;

import com.google.inject.Binder;
import com.google.inject.name.Names;

import edu.kit.ipd.sdq.vitruvius.dsls.mapping.generator.MappingLanguageGenerator;
import edu.kit.ipd.sdq.vitruvius.dsls.mapping.linking.MappingLanguageLinkingService;
import edu.kit.ipd.sdq.vitruvius.dsls.mapping.scoping.MappingLanguageGlobalScopeProvider;
import edu.kit.ipd.sdq.vitruvius.dsls.mapping.scoping.MappingLanguageQualifiedNameConverter;
import edu.kit.ipd.sdq.vitruvius.dsls.mapping.scoping.MappingLanguageScopeProviderDelegate;

/**
 * Use this class to register components to be used at runtime / without the Equinox extension registry.
 */
public class MappingLanguageRuntimeModule extends edu.kit.ipd.sdq.vitruvius.dsls.mapping.AbstractMappingLanguageRuntimeModule {
	@Override
	public Class<? extends IGlobalScopeProvider> bindIGlobalScopeProvider() {
		return MappingLanguageGlobalScopeProvider.class;
	}
	
	@Override
	public Class<? extends ILinkingService> bindILinkingService() {
		return MappingLanguageLinkingService.class;
	}
	
	@Override
	public void configureIScopeProviderDelegate(Binder binder) {
		binder.bind(org.eclipse.xtext.scoping.IScopeProvider.class)
		      .annotatedWith(Names.named(org.eclipse.xtext.scoping.impl.AbstractDeclarativeScopeProvider.NAMED_DELEGATE))
		      .to(MappingLanguageScopeProviderDelegate.class);
	}
	
	@Override
	public Class<? extends IQualifiedNameConverter> bindIQualifiedNameConverter() {
		return MappingLanguageQualifiedNameConverter.class;
	}
	
	@Override
	public Class<? extends IGenerator> bindIGenerator() {
		return MappingLanguageGenerator.class;
	}
}
