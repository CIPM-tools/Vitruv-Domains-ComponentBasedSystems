/*
 * generated by Xtext
 */
package edu.kit.ipd.sdq.vitruvius.dsls.mapping.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.xbase.services.XbaseGrammarAccess;
import org.eclipse.xtext.xbase.services.XtypeGrammarAccess;

@Singleton
public class MappingLanguageGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class MappingFileElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MappingFile");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGeneratesKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cPluginNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPluginNameQualifiedNameParserRuleCall_1_0 = (RuleCall)cPluginNameAssignment_1.eContents().get(0);
		private final Assignment cImportsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cImportsImportParserRuleCall_2_0 = (RuleCall)cImportsAssignment_2.eContents().get(0);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Assignment cMappingsAssignment_3_0 = (Assignment)cAlternatives_3.eContents().get(0);
		private final RuleCall cMappingsMappingParserRuleCall_3_0_0 = (RuleCall)cMappingsAssignment_3_0.eContents().get(0);
		private final Assignment cMappingsAssignment_3_1 = (Assignment)cAlternatives_3.eContents().get(1);
		private final RuleCall cMappingsDefaultMappingParserRuleCall_3_1_0 = (RuleCall)cMappingsAssignment_3_1.eContents().get(0);
		
		//MappingFile:
		//	"generates" pluginName=QualifiedName imports+=Import* (mappings+=Mapping | mappings+=DefaultMapping)*;
		@Override public ParserRule getRule() { return rule; }

		//"generates" pluginName=QualifiedName imports+=Import* (mappings+=Mapping | mappings+=DefaultMapping)*
		public Group getGroup() { return cGroup; }

		//"generates"
		public Keyword getGeneratesKeyword_0() { return cGeneratesKeyword_0; }

		//pluginName=QualifiedName
		public Assignment getPluginNameAssignment_1() { return cPluginNameAssignment_1; }

		//QualifiedName
		public RuleCall getPluginNameQualifiedNameParserRuleCall_1_0() { return cPluginNameQualifiedNameParserRuleCall_1_0; }

		//imports+=Import*
		public Assignment getImportsAssignment_2() { return cImportsAssignment_2; }

		//Import
		public RuleCall getImportsImportParserRuleCall_2_0() { return cImportsImportParserRuleCall_2_0; }

		//(mappings+=Mapping | mappings+=DefaultMapping)*
		public Alternatives getAlternatives_3() { return cAlternatives_3; }

		//mappings+=Mapping
		public Assignment getMappingsAssignment_3_0() { return cMappingsAssignment_3_0; }

		//Mapping
		public RuleCall getMappingsMappingParserRuleCall_3_0_0() { return cMappingsMappingParserRuleCall_3_0_0; }

		//mappings+=DefaultMapping
		public Assignment getMappingsAssignment_3_1() { return cMappingsAssignment_3_1; }

		//DefaultMapping
		public RuleCall getMappingsDefaultMappingParserRuleCall_3_1_0() { return cMappingsDefaultMappingParserRuleCall_3_1_0; }
	}

	public class ImportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Import");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cPackageAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cPackageEPackageCrossReference_1_0 = (CrossReference)cPackageAssignment_1.eContents().get(0);
		private final RuleCall cPackageEPackageSTRINGTerminalRuleCall_1_0_1 = (RuleCall)cPackageEPackageCrossReference_1_0.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cAsKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cNameAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cNameValidIDParserRuleCall_2_1_0 = (RuleCall)cNameAssignment_2_1.eContents().get(0);
		
		//Import:
		//	"import" package=[ecore::EPackage|STRING] ("as" name=ValidID)?;
		@Override public ParserRule getRule() { return rule; }

		//"import" package=[ecore::EPackage|STRING] ("as" name=ValidID)?
		public Group getGroup() { return cGroup; }

		//"import"
		public Keyword getImportKeyword_0() { return cImportKeyword_0; }

		//package=[ecore::EPackage|STRING]
		public Assignment getPackageAssignment_1() { return cPackageAssignment_1; }

		//[ecore::EPackage|STRING]
		public CrossReference getPackageEPackageCrossReference_1_0() { return cPackageEPackageCrossReference_1_0; }

		//STRING
		public RuleCall getPackageEPackageSTRINGTerminalRuleCall_1_0_1() { return cPackageEPackageSTRINGTerminalRuleCall_1_0_1; }

		//("as" name=ValidID)?
		public Group getGroup_2() { return cGroup_2; }

		//"as"
		public Keyword getAsKeyword_2_0() { return cAsKeyword_2_0; }

		//name=ValidID
		public Assignment getNameAssignment_2_1() { return cNameAssignment_2_1; }

		//ValidID
		public RuleCall getNameValidIDParserRuleCall_2_1_0() { return cNameValidIDParserRuleCall_2_1_0; }
	}

	public class DefaultMappingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DefaultMapping");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cMappingAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cDefaultAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cDefaultDefaultKeyword_1_0 = (Keyword)cDefaultAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameValidIDParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCreateKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Group cGroup_4_1 = (Group)cGroup_4.eContents().get(1);
		private final Assignment cSignaturesAssignment_4_1_0 = (Assignment)cGroup_4_1.eContents().get(0);
		private final RuleCall cSignaturesSignatureParserRuleCall_4_1_0_0 = (RuleCall)cSignaturesAssignment_4_1_0.eContents().get(0);
		private final Assignment cConstraintsAssignment_4_1_1 = (Assignment)cGroup_4_1.eContents().get(1);
		private final RuleCall cConstraintsSignatureConstraintBlockParserRuleCall_4_1_1_0 = (RuleCall)cConstraintsAssignment_4_1_1.eContents().get(0);
		
		//DefaultMapping returns Mapping:
		//	{Mapping} default?="default" name=ValidID ":" ("create" (signatures+=Signature
		//	constraints+=SignatureConstraintBlock))*;
		@Override public ParserRule getRule() { return rule; }

		//{Mapping} default?="default" name=ValidID ":" ("create" (signatures+=Signature constraints+=SignatureConstraintBlock))*
		public Group getGroup() { return cGroup; }

		//{Mapping}
		public Action getMappingAction_0() { return cMappingAction_0; }

		//default?="default"
		public Assignment getDefaultAssignment_1() { return cDefaultAssignment_1; }

		//"default"
		public Keyword getDefaultDefaultKeyword_1_0() { return cDefaultDefaultKeyword_1_0; }

		//name=ValidID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ValidID
		public RuleCall getNameValidIDParserRuleCall_2_0() { return cNameValidIDParserRuleCall_2_0; }

		//":"
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }

		//("create" (signatures+=Signature constraints+=SignatureConstraintBlock))*
		public Group getGroup_4() { return cGroup_4; }

		//"create"
		public Keyword getCreateKeyword_4_0() { return cCreateKeyword_4_0; }

		//signatures+=Signature constraints+=SignatureConstraintBlock
		public Group getGroup_4_1() { return cGroup_4_1; }

		//signatures+=Signature
		public Assignment getSignaturesAssignment_4_1_0() { return cSignaturesAssignment_4_1_0; }

		//Signature
		public RuleCall getSignaturesSignatureParserRuleCall_4_1_0_0() { return cSignaturesSignatureParserRuleCall_4_1_0_0; }

		//constraints+=SignatureConstraintBlock
		public Assignment getConstraintsAssignment_4_1_1() { return cConstraintsAssignment_4_1_1; }

		//SignatureConstraintBlock
		public RuleCall getConstraintsSignatureConstraintBlockParserRuleCall_4_1_1_0() { return cConstraintsSignatureConstraintBlockParserRuleCall_4_1_1_0; }
	}

	public class MappingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Mapping");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cMappingAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cGroup_0.eContents().get(1);
		private final Keyword cMappingKeyword_0_1_0 = (Keyword)cGroup_0_1.eContents().get(0);
		private final Assignment cNameAssignment_0_1_1 = (Assignment)cGroup_0_1.eContents().get(1);
		private final RuleCall cNameValidIDParserRuleCall_0_1_1_0 = (RuleCall)cNameAssignment_0_1_1.eContents().get(0);
		private final Keyword cColonKeyword_0_1_2 = (Keyword)cGroup_0_1.eContents().get(2);
		private final Group cGroup_0_2 = (Group)cGroup_0.eContents().get(2);
		private final Keyword cWhenKeyword_0_2_0 = (Keyword)cGroup_0_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_2_1 = (Keyword)cGroup_0_2.eContents().get(1);
		private final Assignment cRequiresAssignment_0_2_2 = (Assignment)cGroup_0_2.eContents().get(2);
		private final RuleCall cRequiresRequiredMappingParserRuleCall_0_2_2_0 = (RuleCall)cRequiresAssignment_0_2_2.eContents().get(0);
		private final Group cGroup_0_2_3 = (Group)cGroup_0_2.eContents().get(3);
		private final Keyword cCommaKeyword_0_2_3_0 = (Keyword)cGroup_0_2_3.eContents().get(0);
		private final Assignment cRequiresAssignment_0_2_3_1 = (Assignment)cGroup_0_2_3.eContents().get(1);
		private final RuleCall cRequiresRequiredMappingParserRuleCall_0_2_3_1_0 = (RuleCall)cRequiresAssignment_0_2_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_0_2_4 = (Keyword)cGroup_0_2.eContents().get(4);
		private final Group cGroup_0_3 = (Group)cGroup_0.eContents().get(3);
		private final Group cGroup_0_3_0 = (Group)cGroup_0_3.eContents().get(0);
		private final Keyword cMapKeyword_0_3_0_0 = (Keyword)cGroup_0_3_0.eContents().get(0);
		private final Assignment cSignaturesAssignment_0_3_0_1 = (Assignment)cGroup_0_3_0.eContents().get(1);
		private final RuleCall cSignaturesSignatureParserRuleCall_0_3_0_1_0 = (RuleCall)cSignaturesAssignment_0_3_0_1.eContents().get(0);
		private final Assignment cConstraintBlocksAssignment_0_3_0_2 = (Assignment)cGroup_0_3_0.eContents().get(2);
		private final RuleCall cConstraintBlocksSignatureConstraintBlockParserRuleCall_0_3_0_2_0 = (RuleCall)cConstraintBlocksAssignment_0_3_0_2.eContents().get(0);
		private final Keyword cAndKeyword_0_3_0_3 = (Keyword)cGroup_0_3_0.eContents().get(3);
		private final Assignment cSignaturesAssignment_0_3_0_4 = (Assignment)cGroup_0_3_0.eContents().get(4);
		private final RuleCall cSignaturesSignatureParserRuleCall_0_3_0_4_0 = (RuleCall)cSignaturesAssignment_0_3_0_4.eContents().get(0);
		private final Assignment cConstraintBlocksAssignment_0_3_0_5 = (Assignment)cGroup_0_3_0.eContents().get(5);
		private final RuleCall cConstraintBlocksSignatureConstraintBlockParserRuleCall_0_3_0_5_0 = (RuleCall)cConstraintBlocksAssignment_0_3_0_5.eContents().get(0);
		private final Group cGroup_0_3_1 = (Group)cGroup_0_3.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0_3_1_0 = (Keyword)cGroup_0_3_1.eContents().get(0);
		private final Assignment cConstraintsBodyAssignment_0_3_1_1 = (Assignment)cGroup_0_3_1.eContents().get(1);
		private final RuleCall cConstraintsBodyBodyConstraintBlockParserRuleCall_0_3_1_1_0 = (RuleCall)cConstraintsBodyAssignment_0_3_1_1.eContents().get(0);
		private final Assignment cSubmappingsAssignment_0_3_1_2 = (Assignment)cGroup_0_3_1.eContents().get(2);
		private final RuleCall cSubmappingsMappingParserRuleCall_0_3_1_2_0 = (RuleCall)cSubmappingsAssignment_0_3_1_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_0_3_1_3 = (Keyword)cGroup_0_3_1.eContents().get(3);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cMapKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cConstraintsBodyAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cConstraintsBodyBodyConstraintBlockParserRuleCall_1_2_0 = (RuleCall)cConstraintsBodyAssignment_1_2.eContents().get(0);
		private final Assignment cSubmappingsAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cSubmappingsMappingParserRuleCall_1_3_0 = (RuleCall)cSubmappingsAssignment_1_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_1_4 = (Keyword)cGroup_1.eContents().get(4);
		
		//Mapping:
		//	{Mapping} ("mapping" name=ValidID ":")? ("when" "(" requires+=RequiredMapping ("," requires+=RequiredMapping)* ")")?
		//	(("map" signatures+=Signature constraintBlocks+=SignatureConstraintBlock "and" signatures+=Signature
		//	constraintBlocks+=SignatureConstraintBlock) ("{" constraintsBody=BodyConstraintBlock submappings+=Mapping* "}")?) |
		//	"map" "{" constraintsBody=BodyConstraintBlock submappings+=Mapping* "}";
		@Override public ParserRule getRule() { return rule; }

		//{Mapping} ("mapping" name=ValidID ":")? ("when" "(" requires+=RequiredMapping ("," requires+=RequiredMapping)* ")")?
		//(("map" signatures+=Signature constraintBlocks+=SignatureConstraintBlock "and" signatures+=Signature
		//constraintBlocks+=SignatureConstraintBlock) ("{" constraintsBody=BodyConstraintBlock submappings+=Mapping* "}")?) |
		//"map" "{" constraintsBody=BodyConstraintBlock submappings+=Mapping* "}"
		public Alternatives getAlternatives() { return cAlternatives; }

		//{Mapping} ("mapping" name=ValidID ":")? ("when" "(" requires+=RequiredMapping ("," requires+=RequiredMapping)* ")")?
		//(("map" signatures+=Signature constraintBlocks+=SignatureConstraintBlock "and" signatures+=Signature
		//constraintBlocks+=SignatureConstraintBlock) ("{" constraintsBody=BodyConstraintBlock submappings+=Mapping* "}")?)
		public Group getGroup_0() { return cGroup_0; }

		//{Mapping}
		public Action getMappingAction_0_0() { return cMappingAction_0_0; }

		//("mapping" name=ValidID ":")?
		public Group getGroup_0_1() { return cGroup_0_1; }

		//"mapping"
		public Keyword getMappingKeyword_0_1_0() { return cMappingKeyword_0_1_0; }

		//name=ValidID
		public Assignment getNameAssignment_0_1_1() { return cNameAssignment_0_1_1; }

		//ValidID
		public RuleCall getNameValidIDParserRuleCall_0_1_1_0() { return cNameValidIDParserRuleCall_0_1_1_0; }

		//":"
		public Keyword getColonKeyword_0_1_2() { return cColonKeyword_0_1_2; }

		//("when" "(" requires+=RequiredMapping ("," requires+=RequiredMapping)* ")")?
		public Group getGroup_0_2() { return cGroup_0_2; }

		//"when"
		public Keyword getWhenKeyword_0_2_0() { return cWhenKeyword_0_2_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_0_2_1() { return cLeftParenthesisKeyword_0_2_1; }

		//requires+=RequiredMapping
		public Assignment getRequiresAssignment_0_2_2() { return cRequiresAssignment_0_2_2; }

		//RequiredMapping
		public RuleCall getRequiresRequiredMappingParserRuleCall_0_2_2_0() { return cRequiresRequiredMappingParserRuleCall_0_2_2_0; }

		//("," requires+=RequiredMapping)*
		public Group getGroup_0_2_3() { return cGroup_0_2_3; }

		//","
		public Keyword getCommaKeyword_0_2_3_0() { return cCommaKeyword_0_2_3_0; }

		//requires+=RequiredMapping
		public Assignment getRequiresAssignment_0_2_3_1() { return cRequiresAssignment_0_2_3_1; }

		//RequiredMapping
		public RuleCall getRequiresRequiredMappingParserRuleCall_0_2_3_1_0() { return cRequiresRequiredMappingParserRuleCall_0_2_3_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_0_2_4() { return cRightParenthesisKeyword_0_2_4; }

		//("map" signatures+=Signature constraintBlocks+=SignatureConstraintBlock "and" signatures+=Signature
		//constraintBlocks+=SignatureConstraintBlock) ("{" constraintsBody=BodyConstraintBlock submappings+=Mapping* "}")?
		public Group getGroup_0_3() { return cGroup_0_3; }

		//"map" signatures+=Signature constraintBlocks+=SignatureConstraintBlock "and" signatures+=Signature
		//constraintBlocks+=SignatureConstraintBlock
		public Group getGroup_0_3_0() { return cGroup_0_3_0; }

		//"map"
		public Keyword getMapKeyword_0_3_0_0() { return cMapKeyword_0_3_0_0; }

		//signatures+=Signature
		public Assignment getSignaturesAssignment_0_3_0_1() { return cSignaturesAssignment_0_3_0_1; }

		//Signature
		public RuleCall getSignaturesSignatureParserRuleCall_0_3_0_1_0() { return cSignaturesSignatureParserRuleCall_0_3_0_1_0; }

		//constraintBlocks+=SignatureConstraintBlock
		public Assignment getConstraintBlocksAssignment_0_3_0_2() { return cConstraintBlocksAssignment_0_3_0_2; }

		//SignatureConstraintBlock
		public RuleCall getConstraintBlocksSignatureConstraintBlockParserRuleCall_0_3_0_2_0() { return cConstraintBlocksSignatureConstraintBlockParserRuleCall_0_3_0_2_0; }

		//"and"
		public Keyword getAndKeyword_0_3_0_3() { return cAndKeyword_0_3_0_3; }

		//signatures+=Signature
		public Assignment getSignaturesAssignment_0_3_0_4() { return cSignaturesAssignment_0_3_0_4; }

		//Signature
		public RuleCall getSignaturesSignatureParserRuleCall_0_3_0_4_0() { return cSignaturesSignatureParserRuleCall_0_3_0_4_0; }

		//constraintBlocks+=SignatureConstraintBlock
		public Assignment getConstraintBlocksAssignment_0_3_0_5() { return cConstraintBlocksAssignment_0_3_0_5; }

		//SignatureConstraintBlock
		public RuleCall getConstraintBlocksSignatureConstraintBlockParserRuleCall_0_3_0_5_0() { return cConstraintBlocksSignatureConstraintBlockParserRuleCall_0_3_0_5_0; }

		//("{" constraintsBody=BodyConstraintBlock submappings+=Mapping* "}")?
		public Group getGroup_0_3_1() { return cGroup_0_3_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_0_3_1_0() { return cLeftCurlyBracketKeyword_0_3_1_0; }

		//constraintsBody=BodyConstraintBlock
		public Assignment getConstraintsBodyAssignment_0_3_1_1() { return cConstraintsBodyAssignment_0_3_1_1; }

		//BodyConstraintBlock
		public RuleCall getConstraintsBodyBodyConstraintBlockParserRuleCall_0_3_1_1_0() { return cConstraintsBodyBodyConstraintBlockParserRuleCall_0_3_1_1_0; }

		//submappings+=Mapping*
		public Assignment getSubmappingsAssignment_0_3_1_2() { return cSubmappingsAssignment_0_3_1_2; }

		//Mapping
		public RuleCall getSubmappingsMappingParserRuleCall_0_3_1_2_0() { return cSubmappingsMappingParserRuleCall_0_3_1_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_0_3_1_3() { return cRightCurlyBracketKeyword_0_3_1_3; }

		//"map" "{" constraintsBody=BodyConstraintBlock submappings+=Mapping* "}"
		public Group getGroup_1() { return cGroup_1; }

		//"map"
		public Keyword getMapKeyword_1_0() { return cMapKeyword_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1_1() { return cLeftCurlyBracketKeyword_1_1; }

		//constraintsBody=BodyConstraintBlock
		public Assignment getConstraintsBodyAssignment_1_2() { return cConstraintsBodyAssignment_1_2; }

		//BodyConstraintBlock
		public RuleCall getConstraintsBodyBodyConstraintBlockParserRuleCall_1_2_0() { return cConstraintsBodyBodyConstraintBlockParserRuleCall_1_2_0; }

		//submappings+=Mapping*
		public Assignment getSubmappingsAssignment_1_3() { return cSubmappingsAssignment_1_3; }

		//Mapping
		public RuleCall getSubmappingsMappingParserRuleCall_1_3_0() { return cSubmappingsMappingParserRuleCall_1_3_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_1_4() { return cRightCurlyBracketKeyword_1_4; }
	}

	public class SignatureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Signature");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSignatureAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cElementsAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cElementsNamedEClassParserRuleCall_2_0_0 = (RuleCall)cElementsAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cElementsAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cElementsNamedEClassParserRuleCall_2_1_1_0 = (RuleCall)cElementsAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Signature:
		//	{Signature} "{" (elements+=NamedEClass ("," elements+=NamedEClass)*)? "}";
		@Override public ParserRule getRule() { return rule; }

		//{Signature} "{" (elements+=NamedEClass ("," elements+=NamedEClass)*)? "}"
		public Group getGroup() { return cGroup; }

		//{Signature}
		public Action getSignatureAction_0() { return cSignatureAction_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//(elements+=NamedEClass ("," elements+=NamedEClass)*)?
		public Group getGroup_2() { return cGroup_2; }

		//elements+=NamedEClass
		public Assignment getElementsAssignment_2_0() { return cElementsAssignment_2_0; }

		//NamedEClass
		public RuleCall getElementsNamedEClassParserRuleCall_2_0_0() { return cElementsNamedEClassParserRuleCall_2_0_0; }

		//("," elements+=NamedEClass)*
		public Group getGroup_2_1() { return cGroup_2_1; }

		//","
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }

		//elements+=NamedEClass
		public Assignment getElementsAssignment_2_1_1() { return cElementsAssignment_2_1_1; }

		//NamedEClass
		public RuleCall getElementsNamedEClassParserRuleCall_2_1_1_0() { return cElementsNamedEClassParserRuleCall_2_1_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}

	public class NamedEClassElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NamedEClass");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cTypeEClassCrossReference_0_0 = (CrossReference)cTypeAssignment_0.eContents().get(0);
		private final RuleCall cTypeEClassQualifiedNameParserRuleCall_0_0_1 = (RuleCall)cTypeEClassCrossReference_0_0.eContents().get(1);
		private final Keyword cAsKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameValidIDParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		//NamedEClass:
		//	type=[ecore::EClass|QualifiedName] "as" name=ValidID;
		@Override public ParserRule getRule() { return rule; }

		//type=[ecore::EClass|QualifiedName] "as" name=ValidID
		public Group getGroup() { return cGroup; }

		//type=[ecore::EClass|QualifiedName]
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }

		//[ecore::EClass|QualifiedName]
		public CrossReference getTypeEClassCrossReference_0_0() { return cTypeEClassCrossReference_0_0; }

		//QualifiedName
		public RuleCall getTypeEClassQualifiedNameParserRuleCall_0_0_1() { return cTypeEClassQualifiedNameParserRuleCall_0_0_1; }

		//"as"
		public Keyword getAsKeyword_1() { return cAsKeyword_1; }

		//name=ValidID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ValidID
		public RuleCall getNameValidIDParserRuleCall_2_0() { return cNameValidIDParserRuleCall_2_0; }
	}

	public class RequiredMappingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RequiredMapping");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cMappingAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cMappingMappingCrossReference_0_0 = (CrossReference)cMappingAssignment_0.eContents().get(0);
		private final RuleCall cMappingMappingIDTerminalRuleCall_0_0_1 = (RuleCall)cMappingMappingCrossReference_0_0.eContents().get(1);
		private final Keyword cAsKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameValidIDParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		//RequiredMapping:
		//	mapping=[Mapping] "as" name=ValidID;
		@Override public ParserRule getRule() { return rule; }

		//mapping=[Mapping] "as" name=ValidID
		public Group getGroup() { return cGroup; }

		//mapping=[Mapping]
		public Assignment getMappingAssignment_0() { return cMappingAssignment_0; }

		//[Mapping]
		public CrossReference getMappingMappingCrossReference_0_0() { return cMappingMappingCrossReference_0_0; }

		//ID
		public RuleCall getMappingMappingIDTerminalRuleCall_0_0_1() { return cMappingMappingIDTerminalRuleCall_0_0_1; }

		//"as"
		public Keyword getAsKeyword_1() { return cAsKeyword_1; }

		//name=ValidID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ValidID
		public RuleCall getNameValidIDParserRuleCall_2_0() { return cNameValidIDParserRuleCall_2_0; }
	}

	public class ConstraintBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ConstraintBlock");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSignatureConstraintBlockParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cBodyConstraintBlockParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//ConstraintBlock:
		//	SignatureConstraintBlock | BodyConstraintBlock;
		@Override public ParserRule getRule() { return rule; }

		//SignatureConstraintBlock | BodyConstraintBlock
		public Alternatives getAlternatives() { return cAlternatives; }

		//SignatureConstraintBlock
		public RuleCall getSignatureConstraintBlockParserRuleCall_0() { return cSignatureConstraintBlockParserRuleCall_0; }

		//BodyConstraintBlock
		public RuleCall getBodyConstraintBlockParserRuleCall_1() { return cBodyConstraintBlockParserRuleCall_1; }
	}

	public class ConstraintExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ConstraintExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSignatureConstraintExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cBodyConstraintExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//ConstraintExpression:
		//	SignatureConstraintExpression | BodyConstraintExpression;
		@Override public ParserRule getRule() { return rule; }

		//SignatureConstraintExpression | BodyConstraintExpression
		public Alternatives getAlternatives() { return cAlternatives; }

		//SignatureConstraintExpression
		public RuleCall getSignatureConstraintExpressionParserRuleCall_0() { return cSignatureConstraintExpressionParserRuleCall_0; }

		//BodyConstraintExpression
		public RuleCall getBodyConstraintExpressionParserRuleCall_1() { return cBodyConstraintExpressionParserRuleCall_1; }
	}

	public class SignatureConstraintBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SignatureConstraintBlock");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSignatureConstraintBlockAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Assignment cExpressionsAssignment_1_1_0 = (Assignment)cGroup_1_1.eContents().get(0);
		private final RuleCall cExpressionsSignatureConstraintExpressionParserRuleCall_1_1_0_0 = (RuleCall)cExpressionsAssignment_1_1_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_1_1_1 = (Keyword)cGroup_1_1.eContents().get(1);
		private final Keyword cRightSquareBracketKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//SignatureConstraintBlock:
		//	{SignatureConstraintBlock} ("[" (expressions+=SignatureConstraintExpression ";"?)* "]")?;
		@Override public ParserRule getRule() { return rule; }

		//{SignatureConstraintBlock} ("[" (expressions+=SignatureConstraintExpression ";"?)* "]")?
		public Group getGroup() { return cGroup; }

		//{SignatureConstraintBlock}
		public Action getSignatureConstraintBlockAction_0() { return cSignatureConstraintBlockAction_0; }

		//("[" (expressions+=SignatureConstraintExpression ";"?)* "]")?
		public Group getGroup_1() { return cGroup_1; }

		//"["
		public Keyword getLeftSquareBracketKeyword_1_0() { return cLeftSquareBracketKeyword_1_0; }

		//(expressions+=SignatureConstraintExpression ";"?)*
		public Group getGroup_1_1() { return cGroup_1_1; }

		//expressions+=SignatureConstraintExpression
		public Assignment getExpressionsAssignment_1_1_0() { return cExpressionsAssignment_1_1_0; }

		//SignatureConstraintExpression
		public RuleCall getExpressionsSignatureConstraintExpressionParserRuleCall_1_1_0_0() { return cExpressionsSignatureConstraintExpressionParserRuleCall_1_1_0_0; }

		//";"?
		public Keyword getSemicolonKeyword_1_1_1() { return cSemicolonKeyword_1_1_1; }

		//"]"
		public Keyword getRightSquareBracketKeyword_1_2() { return cRightSquareBracketKeyword_1_2; }
	}

	public class SignatureConstraintExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SignatureConstraintExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cInExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cEqualsLiteralExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cDefaultContainExpressionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//SignatureConstraintExpression returns ConstraintExpression:
		//	InExpression | EqualsLiteralExpression | DefaultContainExpression;
		@Override public ParserRule getRule() { return rule; }

		//InExpression | EqualsLiteralExpression | DefaultContainExpression
		public Alternatives getAlternatives() { return cAlternatives; }

		//InExpression
		public RuleCall getInExpressionParserRuleCall_0() { return cInExpressionParserRuleCall_0; }

		//EqualsLiteralExpression
		public RuleCall getEqualsLiteralExpressionParserRuleCall_1() { return cEqualsLiteralExpressionParserRuleCall_1; }

		//DefaultContainExpression
		public RuleCall getDefaultContainExpressionParserRuleCall_2() { return cDefaultContainExpressionParserRuleCall_2; }
	}

	public class BodyConstraintBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BodyConstraintBlock");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBodyConstraintBlockAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Assignment cExpressionsAssignment_1_1_0 = (Assignment)cGroup_1_1.eContents().get(0);
		private final RuleCall cExpressionsBodyConstraintExpressionParserRuleCall_1_1_0_0 = (RuleCall)cExpressionsAssignment_1_1_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_1_1_1 = (Keyword)cGroup_1_1.eContents().get(1);
		private final Keyword cRightSquareBracketKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//BodyConstraintBlock:
		//	{BodyConstraintBlock} ("[" (expressions+=BodyConstraintExpression ";"?)* "]")?;
		@Override public ParserRule getRule() { return rule; }

		//{BodyConstraintBlock} ("[" (expressions+=BodyConstraintExpression ";"?)* "]")?
		public Group getGroup() { return cGroup; }

		//{BodyConstraintBlock}
		public Action getBodyConstraintBlockAction_0() { return cBodyConstraintBlockAction_0; }

		//("[" (expressions+=BodyConstraintExpression ";"?)* "]")?
		public Group getGroup_1() { return cGroup_1; }

		//"["
		public Keyword getLeftSquareBracketKeyword_1_0() { return cLeftSquareBracketKeyword_1_0; }

		//(expressions+=BodyConstraintExpression ";"?)*
		public Group getGroup_1_1() { return cGroup_1_1; }

		//expressions+=BodyConstraintExpression
		public Assignment getExpressionsAssignment_1_1_0() { return cExpressionsAssignment_1_1_0; }

		//BodyConstraintExpression
		public RuleCall getExpressionsBodyConstraintExpressionParserRuleCall_1_1_0_0() { return cExpressionsBodyConstraintExpressionParserRuleCall_1_1_0_0; }

		//";"?
		public Keyword getSemicolonKeyword_1_1_1() { return cSemicolonKeyword_1_1_1; }

		//"]"
		public Keyword getRightSquareBracketKeyword_1_2() { return cRightSquareBracketKeyword_1_2; }
	}

	public class BodyConstraintExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BodyConstraintExpression");
		private final RuleCall cAttributeEquivalenceExpressionParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//BodyConstraintExpression returns ConstraintExpression:
		//	AttributeEquivalenceExpression;
		@Override public ParserRule getRule() { return rule; }

		//AttributeEquivalenceExpression
		public RuleCall getAttributeEquivalenceExpressionParserRuleCall() { return cAttributeEquivalenceExpressionParserRuleCall; }
	}

	public class VariableRefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VariableRef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cVariableRefAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cTargetAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTargetContextVariableParserRuleCall_1_0 = (RuleCall)cTargetAssignment_1.eContents().get(0);
		
		//VariableRef returns ConstraintExpression:
		//	{VariableRef} target=ContextVariable;
		@Override public ParserRule getRule() { return rule; }

		//{VariableRef} target=ContextVariable
		public Group getGroup() { return cGroup; }

		//{VariableRef}
		public Action getVariableRefAction_0() { return cVariableRefAction_0; }

		//target=ContextVariable
		public Assignment getTargetAssignment_1() { return cTargetAssignment_1; }

		//ContextVariable
		public RuleCall getTargetContextVariableParserRuleCall_1_0() { return cTargetContextVariableParserRuleCall_1_0; }
	}

	public class InExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "InExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cInExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cInKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTargetAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTargetContextVariableParserRuleCall_3_0 = (RuleCall)cTargetAssignment_3.eContents().get(0);
		private final Keyword cCommaKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cSourceAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cSourceFeatureOfContextVariableParserRuleCall_5_0 = (RuleCall)cSourceAssignment_5.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//InExpression returns ConstraintExpression:
		//	{InExpression} "in" "(" target=ContextVariable "," source=FeatureOfContextVariable ")";
		@Override public ParserRule getRule() { return rule; }

		//{InExpression} "in" "(" target=ContextVariable "," source=FeatureOfContextVariable ")"
		public Group getGroup() { return cGroup; }

		//{InExpression}
		public Action getInExpressionAction_0() { return cInExpressionAction_0; }

		//"in"
		public Keyword getInKeyword_1() { return cInKeyword_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//target=ContextVariable
		public Assignment getTargetAssignment_3() { return cTargetAssignment_3; }

		//ContextVariable
		public RuleCall getTargetContextVariableParserRuleCall_3_0() { return cTargetContextVariableParserRuleCall_3_0; }

		//","
		public Keyword getCommaKeyword_4() { return cCommaKeyword_4; }

		//source=FeatureOfContextVariable
		public Assignment getSourceAssignment_5() { return cSourceAssignment_5; }

		//FeatureOfContextVariable
		public RuleCall getSourceFeatureOfContextVariableParserRuleCall_5_0() { return cSourceFeatureOfContextVariableParserRuleCall_5_0; }

		//")"
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }
	}

	public class DefaultContainExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DefaultContainExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDefaultContainExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Keyword cDefaultContainKeyword_1_0_0 = (Keyword)cGroup_1_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1_0_1 = (Keyword)cGroup_1_0.eContents().get(1);
		private final Assignment cTargetAssignment_1_0_2 = (Assignment)cGroup_1_0.eContents().get(2);
		private final RuleCall cTargetContextVariableParserRuleCall_1_0_2_0 = (RuleCall)cTargetAssignment_1_0_2.eContents().get(0);
		private final Keyword cCommaKeyword_1_0_3 = (Keyword)cGroup_1_0.eContents().get(3);
		private final Assignment cSourceAssignment_1_0_4 = (Assignment)cGroup_1_0.eContents().get(4);
		private final RuleCall cSourceFeatureOfContextVariableParserRuleCall_1_0_4_0 = (RuleCall)cSourceAssignment_1_0_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_0_5 = (Keyword)cGroup_1_0.eContents().get(5);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Keyword cDefaultResourceKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1_1_1 = (Keyword)cGroup_1_1.eContents().get(1);
		private final Assignment cTargetAssignment_1_1_2 = (Assignment)cGroup_1_1.eContents().get(2);
		private final RuleCall cTargetContextVariableParserRuleCall_1_1_2_0 = (RuleCall)cTargetAssignment_1_1_2.eContents().get(0);
		private final Keyword cCommaKeyword_1_1_3 = (Keyword)cGroup_1_1.eContents().get(3);
		private final Assignment cResourceAssignment_1_1_4 = (Assignment)cGroup_1_1.eContents().get(4);
		private final RuleCall cResourceSTRINGTerminalRuleCall_1_1_4_0 = (RuleCall)cResourceAssignment_1_1_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_1_5 = (Keyword)cGroup_1_1.eContents().get(5);
		
		//DefaultContainExpression returns ConstraintExpression:
		//	{DefaultContainExpression} ("default-contain" "(" target=ContextVariable "," source=FeatureOfContextVariable ")" |
		//	"default-resource" "(" target=ContextVariable "," resource=STRING ")");
		@Override public ParserRule getRule() { return rule; }

		//{DefaultContainExpression} ("default-contain" "(" target=ContextVariable "," source=FeatureOfContextVariable ")" |
		//"default-resource" "(" target=ContextVariable "," resource=STRING ")")
		public Group getGroup() { return cGroup; }

		//{DefaultContainExpression}
		public Action getDefaultContainExpressionAction_0() { return cDefaultContainExpressionAction_0; }

		//"default-contain" "(" target=ContextVariable "," source=FeatureOfContextVariable ")" | "default-resource" "("
		//target=ContextVariable "," resource=STRING ")"
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//"default-contain" "(" target=ContextVariable "," source=FeatureOfContextVariable ")"
		public Group getGroup_1_0() { return cGroup_1_0; }

		//"default-contain"
		public Keyword getDefaultContainKeyword_1_0_0() { return cDefaultContainKeyword_1_0_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_0_1() { return cLeftParenthesisKeyword_1_0_1; }

		//target=ContextVariable
		public Assignment getTargetAssignment_1_0_2() { return cTargetAssignment_1_0_2; }

		//ContextVariable
		public RuleCall getTargetContextVariableParserRuleCall_1_0_2_0() { return cTargetContextVariableParserRuleCall_1_0_2_0; }

		//","
		public Keyword getCommaKeyword_1_0_3() { return cCommaKeyword_1_0_3; }

		//source=FeatureOfContextVariable
		public Assignment getSourceAssignment_1_0_4() { return cSourceAssignment_1_0_4; }

		//FeatureOfContextVariable
		public RuleCall getSourceFeatureOfContextVariableParserRuleCall_1_0_4_0() { return cSourceFeatureOfContextVariableParserRuleCall_1_0_4_0; }

		//")"
		public Keyword getRightParenthesisKeyword_1_0_5() { return cRightParenthesisKeyword_1_0_5; }

		//"default-resource" "(" target=ContextVariable "," resource=STRING ")"
		public Group getGroup_1_1() { return cGroup_1_1; }

		//"default-resource"
		public Keyword getDefaultResourceKeyword_1_1_0() { return cDefaultResourceKeyword_1_1_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_1_1() { return cLeftParenthesisKeyword_1_1_1; }

		//target=ContextVariable
		public Assignment getTargetAssignment_1_1_2() { return cTargetAssignment_1_1_2; }

		//ContextVariable
		public RuleCall getTargetContextVariableParserRuleCall_1_1_2_0() { return cTargetContextVariableParserRuleCall_1_1_2_0; }

		//","
		public Keyword getCommaKeyword_1_1_3() { return cCommaKeyword_1_1_3; }

		//resource=STRING
		public Assignment getResourceAssignment_1_1_4() { return cResourceAssignment_1_1_4; }

		//STRING
		public RuleCall getResourceSTRINGTerminalRuleCall_1_1_4_0() { return cResourceSTRINGTerminalRuleCall_1_1_4_0; }

		//")"
		public Keyword getRightParenthesisKeyword_1_1_5() { return cRightParenthesisKeyword_1_1_5; }
	}

	public class EqualsLiteralExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EqualsLiteralExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cEqualsLiteralExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cEqualKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTargetAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTargetFeatureOfContextVariableParserRuleCall_3_0 = (RuleCall)cTargetAssignment_3.eContents().get(0);
		private final Keyword cCommaKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cValueAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cValueConstraintLiteralParserRuleCall_5_0 = (RuleCall)cValueAssignment_5.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//EqualsLiteralExpression returns ConstraintExpression:
		//	{EqualsLiteralExpression} "equal" "(" target=FeatureOfContextVariable "," value=ConstraintLiteral ")";
		@Override public ParserRule getRule() { return rule; }

		//{EqualsLiteralExpression} "equal" "(" target=FeatureOfContextVariable "," value=ConstraintLiteral ")"
		public Group getGroup() { return cGroup; }

		//{EqualsLiteralExpression}
		public Action getEqualsLiteralExpressionAction_0() { return cEqualsLiteralExpressionAction_0; }

		//"equal"
		public Keyword getEqualKeyword_1() { return cEqualKeyword_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//target=FeatureOfContextVariable
		public Assignment getTargetAssignment_3() { return cTargetAssignment_3; }

		//FeatureOfContextVariable
		public RuleCall getTargetFeatureOfContextVariableParserRuleCall_3_0() { return cTargetFeatureOfContextVariableParserRuleCall_3_0; }

		//","
		public Keyword getCommaKeyword_4() { return cCommaKeyword_4; }

		//value=ConstraintLiteral
		public Assignment getValueAssignment_5() { return cValueAssignment_5; }

		//ConstraintLiteral
		public RuleCall getValueConstraintLiteralParserRuleCall_5_0() { return cValueConstraintLiteralParserRuleCall_5_0; }

		//")"
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }
	}

	public class AttributeEquivalenceExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AttributeEquivalenceExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAttributeEquivalenceExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cEqualKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cLeftAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cLeftFeatureOfContextVariableParserRuleCall_3_0 = (RuleCall)cLeftAssignment_3.eContents().get(0);
		private final Keyword cCommaKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cRightAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cRightFeatureOfContextVariableParserRuleCall_5_0 = (RuleCall)cRightAssignment_5.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//AttributeEquivalenceExpression returns ConstraintExpression:
		//	{AttributeEquivalenceExpression} "equal" "(" left=FeatureOfContextVariable "," right=FeatureOfContextVariable ")";
		@Override public ParserRule getRule() { return rule; }

		//{AttributeEquivalenceExpression} "equal" "(" left=FeatureOfContextVariable "," right=FeatureOfContextVariable ")"
		public Group getGroup() { return cGroup; }

		//{AttributeEquivalenceExpression}
		public Action getAttributeEquivalenceExpressionAction_0() { return cAttributeEquivalenceExpressionAction_0; }

		//"equal"
		public Keyword getEqualKeyword_1() { return cEqualKeyword_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//left=FeatureOfContextVariable
		public Assignment getLeftAssignment_3() { return cLeftAssignment_3; }

		//FeatureOfContextVariable
		public RuleCall getLeftFeatureOfContextVariableParserRuleCall_3_0() { return cLeftFeatureOfContextVariableParserRuleCall_3_0; }

		//","
		public Keyword getCommaKeyword_4() { return cCommaKeyword_4; }

		//right=FeatureOfContextVariable
		public Assignment getRightAssignment_5() { return cRightAssignment_5; }

		//FeatureOfContextVariable
		public RuleCall getRightFeatureOfContextVariableParserRuleCall_5_0() { return cRightFeatureOfContextVariableParserRuleCall_5_0; }

		//")"
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }
	}

	public class FeatureOfContextVariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FeatureOfContextVariable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cContextAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cContextContextVariableParserRuleCall_0_0 = (RuleCall)cContextAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cFeatureAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final CrossReference cFeatureEStructuralFeatureCrossReference_1_1_0 = (CrossReference)cFeatureAssignment_1_1.eContents().get(0);
		private final RuleCall cFeatureEStructuralFeatureValidIDParserRuleCall_1_1_0_1 = (RuleCall)cFeatureEStructuralFeatureCrossReference_1_1_0.eContents().get(1);
		
		//FeatureOfContextVariable:
		//	context=ContextVariable ("." feature=[ecore::EStructuralFeature|ValidID]);
		@Override public ParserRule getRule() { return rule; }

		//context=ContextVariable ("." feature=[ecore::EStructuralFeature|ValidID])
		public Group getGroup() { return cGroup; }

		//context=ContextVariable
		public Assignment getContextAssignment_0() { return cContextAssignment_0; }

		//ContextVariable
		public RuleCall getContextContextVariableParserRuleCall_0_0() { return cContextContextVariableParserRuleCall_0_0; }

		//"." feature=[ecore::EStructuralFeature|ValidID]
		public Group getGroup_1() { return cGroup_1; }

		//"."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//feature=[ecore::EStructuralFeature|ValidID]
		public Assignment getFeatureAssignment_1_1() { return cFeatureAssignment_1_1; }

		//[ecore::EStructuralFeature|ValidID]
		public CrossReference getFeatureEStructuralFeatureCrossReference_1_1_0() { return cFeatureEStructuralFeatureCrossReference_1_1_0; }

		//ValidID
		public RuleCall getFeatureEStructuralFeatureValidIDParserRuleCall_1_1_0_1() { return cFeatureEStructuralFeatureValidIDParserRuleCall_1_1_0_1; }
	}

	public class ContextVariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ContextVariable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cRequiredMappingPathAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cRequiredMappingPathRequiredMappingPathBaseParserRuleCall_0_0 = (RuleCall)cRequiredMappingPathAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cColonColonKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cTargetClassAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final CrossReference cTargetClassNamedEClassCrossReference_1_1_0 = (CrossReference)cTargetClassAssignment_1_1.eContents().get(0);
		private final RuleCall cTargetClassNamedEClassValidIDParserRuleCall_1_1_0_1 = (RuleCall)cTargetClassNamedEClassCrossReference_1_1_0.eContents().get(1);
		
		//ContextVariable:
		//	requiredMappingPath=RequiredMappingPathBase? ("::" targetClass=[NamedEClass|ValidID]);
		@Override public ParserRule getRule() { return rule; }

		//requiredMappingPath=RequiredMappingPathBase? ("::" targetClass=[NamedEClass|ValidID])
		public Group getGroup() { return cGroup; }

		//requiredMappingPath=RequiredMappingPathBase?
		public Assignment getRequiredMappingPathAssignment_0() { return cRequiredMappingPathAssignment_0; }

		//RequiredMappingPathBase
		public RuleCall getRequiredMappingPathRequiredMappingPathBaseParserRuleCall_0_0() { return cRequiredMappingPathRequiredMappingPathBaseParserRuleCall_0_0; }

		//"::" targetClass=[NamedEClass|ValidID]
		public Group getGroup_1() { return cGroup_1; }

		//"::"
		public Keyword getColonColonKeyword_1_0() { return cColonColonKeyword_1_0; }

		//targetClass=[NamedEClass|ValidID]
		public Assignment getTargetClassAssignment_1_1() { return cTargetClassAssignment_1_1; }

		//[NamedEClass|ValidID]
		public CrossReference getTargetClassNamedEClassCrossReference_1_1_0() { return cTargetClassNamedEClassCrossReference_1_1_0; }

		//ValidID
		public RuleCall getTargetClassNamedEClassValidIDParserRuleCall_1_1_0_1() { return cTargetClassNamedEClassValidIDParserRuleCall_1_1_0_1; }
	}

	public class RequiredMappingPathBaseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RequiredMappingPathBase");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cRequiredMappingAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cRequiredMappingRequiredMappingCrossReference_0_0 = (CrossReference)cRequiredMappingAssignment_0.eContents().get(0);
		private final RuleCall cRequiredMappingRequiredMappingValidIDParserRuleCall_0_0_1 = (RuleCall)cRequiredMappingRequiredMappingCrossReference_0_0.eContents().get(1);
		private final Assignment cTailAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTailRequiredMappingPathTailParserRuleCall_1_0 = (RuleCall)cTailAssignment_1.eContents().get(0);
		
		//RequiredMappingPathBase:
		//	requiredMapping=[RequiredMapping|ValidID] tail=RequiredMappingPathTail?;
		@Override public ParserRule getRule() { return rule; }

		//requiredMapping=[RequiredMapping|ValidID] tail=RequiredMappingPathTail?
		public Group getGroup() { return cGroup; }

		//requiredMapping=[RequiredMapping|ValidID]
		public Assignment getRequiredMappingAssignment_0() { return cRequiredMappingAssignment_0; }

		//[RequiredMapping|ValidID]
		public CrossReference getRequiredMappingRequiredMappingCrossReference_0_0() { return cRequiredMappingRequiredMappingCrossReference_0_0; }

		//ValidID
		public RuleCall getRequiredMappingRequiredMappingValidIDParserRuleCall_0_0_1() { return cRequiredMappingRequiredMappingValidIDParserRuleCall_0_0_1; }

		//tail=RequiredMappingPathTail?
		public Assignment getTailAssignment_1() { return cTailAssignment_1; }

		//RequiredMappingPathTail
		public RuleCall getTailRequiredMappingPathTailParserRuleCall_1_0() { return cTailRequiredMappingPathTailParserRuleCall_1_0; }
	}

	public class RequiredMappingPathTailElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RequiredMappingPathTail");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFullStopKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cRequiredMappingAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cRequiredMappingRequiredMappingCrossReference_1_0 = (CrossReference)cRequiredMappingAssignment_1.eContents().get(0);
		private final RuleCall cRequiredMappingRequiredMappingValidIDParserRuleCall_1_0_1 = (RuleCall)cRequiredMappingRequiredMappingCrossReference_1_0.eContents().get(1);
		private final Assignment cTailAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTailRequiredMappingPathTailParserRuleCall_2_0 = (RuleCall)cTailAssignment_2.eContents().get(0);
		
		//RequiredMappingPathTail:
		//	"." requiredMapping=[RequiredMapping|ValidID] tail=RequiredMappingPathTail?;
		@Override public ParserRule getRule() { return rule; }

		//"." requiredMapping=[RequiredMapping|ValidID] tail=RequiredMappingPathTail?
		public Group getGroup() { return cGroup; }

		//"."
		public Keyword getFullStopKeyword_0() { return cFullStopKeyword_0; }

		//requiredMapping=[RequiredMapping|ValidID]
		public Assignment getRequiredMappingAssignment_1() { return cRequiredMappingAssignment_1; }

		//[RequiredMapping|ValidID]
		public CrossReference getRequiredMappingRequiredMappingCrossReference_1_0() { return cRequiredMappingRequiredMappingCrossReference_1_0; }

		//ValidID
		public RuleCall getRequiredMappingRequiredMappingValidIDParserRuleCall_1_0_1() { return cRequiredMappingRequiredMappingValidIDParserRuleCall_1_0_1; }

		//tail=RequiredMappingPathTail?
		public Assignment getTailAssignment_2() { return cTailAssignment_2; }

		//RequiredMappingPathTail
		public RuleCall getTailRequiredMappingPathTailParserRuleCall_2_0() { return cTailRequiredMappingPathTailParserRuleCall_2_0; }
	}

	public class ConstraintLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ConstraintLiteral");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cConstraintBooleanLiteralParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cConstraintNullLiteralParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cConstraintNumberLiteralParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cConstraintStringLiteralParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//// LITERALS from Xbase.xtext
		//ConstraintLiteral:
		//	ConstraintBooleanLiteral | ConstraintNullLiteral | ConstraintNumberLiteral | ConstraintStringLiteral;
		@Override public ParserRule getRule() { return rule; }

		//ConstraintBooleanLiteral | ConstraintNullLiteral | ConstraintNumberLiteral | ConstraintStringLiteral
		public Alternatives getAlternatives() { return cAlternatives; }

		//ConstraintBooleanLiteral
		public RuleCall getConstraintBooleanLiteralParserRuleCall_0() { return cConstraintBooleanLiteralParserRuleCall_0; }

		//ConstraintNullLiteral
		public RuleCall getConstraintNullLiteralParserRuleCall_1() { return cConstraintNullLiteralParserRuleCall_1; }

		//ConstraintNumberLiteral
		public RuleCall getConstraintNumberLiteralParserRuleCall_2() { return cConstraintNumberLiteralParserRuleCall_2; }

		//ConstraintStringLiteral
		public RuleCall getConstraintStringLiteralParserRuleCall_3() { return cConstraintStringLiteralParserRuleCall_3; }
	}

	public class ConstraintBooleanLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ConstraintBooleanLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cConstraintBooleanLiteralAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cFalseKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Assignment cIsTrueAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final Keyword cIsTrueTrueKeyword_1_1_0 = (Keyword)cIsTrueAssignment_1_1.eContents().get(0);
		
		//ConstraintBooleanLiteral returns ConstraintLiteral:
		//	{ConstraintBooleanLiteral} ("false" | isTrue?="true");
		@Override public ParserRule getRule() { return rule; }

		//{ConstraintBooleanLiteral} ("false" | isTrue?="true")
		public Group getGroup() { return cGroup; }

		//{ConstraintBooleanLiteral}
		public Action getConstraintBooleanLiteralAction_0() { return cConstraintBooleanLiteralAction_0; }

		//"false" | isTrue?="true"
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//"false"
		public Keyword getFalseKeyword_1_0() { return cFalseKeyword_1_0; }

		//isTrue?="true"
		public Assignment getIsTrueAssignment_1_1() { return cIsTrueAssignment_1_1; }

		//"true"
		public Keyword getIsTrueTrueKeyword_1_1_0() { return cIsTrueTrueKeyword_1_1_0; }
	}

	public class ConstraintNullLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ConstraintNullLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cConstraintNullLiteralAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cNullKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//ConstraintNullLiteral returns ConstraintLiteral:
		//	{ConstraintNullLiteral} "null";
		@Override public ParserRule getRule() { return rule; }

		//{ConstraintNullLiteral} "null"
		public Group getGroup() { return cGroup; }

		//{ConstraintNullLiteral}
		public Action getConstraintNullLiteralAction_0() { return cConstraintNullLiteralAction_0; }

		//"null"
		public Keyword getNullKeyword_1() { return cNullKeyword_1; }
	}

	public class ConstraintNumberLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ConstraintNumberLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cConstraintNumberLiteralAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueNumberParserRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//ConstraintNumberLiteral returns ConstraintLiteral:
		//	{ConstraintNumberLiteral} value=Number;
		@Override public ParserRule getRule() { return rule; }

		//{ConstraintNumberLiteral} value=Number
		public Group getGroup() { return cGroup; }

		//{ConstraintNumberLiteral}
		public Action getConstraintNumberLiteralAction_0() { return cConstraintNumberLiteralAction_0; }

		//value=Number
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//Number
		public RuleCall getValueNumberParserRuleCall_1_0() { return cValueNumberParserRuleCall_1_0; }
	}

	public class ConstraintStringLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ConstraintStringLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cConstraintStringLiteralAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//ConstraintStringLiteral returns ConstraintLiteral:
		//	{ConstraintStringLiteral} value=STRING;
		@Override public ParserRule getRule() { return rule; }

		//{ConstraintStringLiteral} value=STRING
		public Group getGroup() { return cGroup; }

		//{ConstraintStringLiteral}
		public Action getConstraintStringLiteralAction_0() { return cConstraintStringLiteralAction_0; }

		//value=STRING
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_1_0() { return cValueSTRINGTerminalRuleCall_1_0; }
	}
	
	
	private final MappingFileElements pMappingFile;
	private final ImportElements pImport;
	private final DefaultMappingElements pDefaultMapping;
	private final MappingElements pMapping;
	private final SignatureElements pSignature;
	private final NamedEClassElements pNamedEClass;
	private final RequiredMappingElements pRequiredMapping;
	private final ConstraintBlockElements pConstraintBlock;
	private final ConstraintExpressionElements pConstraintExpression;
	private final SignatureConstraintBlockElements pSignatureConstraintBlock;
	private final SignatureConstraintExpressionElements pSignatureConstraintExpression;
	private final BodyConstraintBlockElements pBodyConstraintBlock;
	private final BodyConstraintExpressionElements pBodyConstraintExpression;
	private final VariableRefElements pVariableRef;
	private final InExpressionElements pInExpression;
	private final DefaultContainExpressionElements pDefaultContainExpression;
	private final EqualsLiteralExpressionElements pEqualsLiteralExpression;
	private final AttributeEquivalenceExpressionElements pAttributeEquivalenceExpression;
	private final FeatureOfContextVariableElements pFeatureOfContextVariable;
	private final ContextVariableElements pContextVariable;
	private final RequiredMappingPathBaseElements pRequiredMappingPathBase;
	private final RequiredMappingPathTailElements pRequiredMappingPathTail;
	private final ConstraintLiteralElements pConstraintLiteral;
	private final ConstraintBooleanLiteralElements pConstraintBooleanLiteral;
	private final ConstraintNullLiteralElements pConstraintNullLiteral;
	private final ConstraintNumberLiteralElements pConstraintNumberLiteral;
	private final ConstraintStringLiteralElements pConstraintStringLiteral;
	
	private final Grammar grammar;

	private final XbaseGrammarAccess gaXbase;

	@Inject
	public MappingLanguageGrammarAccess(GrammarProvider grammarProvider,
		XbaseGrammarAccess gaXbase) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaXbase = gaXbase;
		this.pMappingFile = new MappingFileElements();
		this.pImport = new ImportElements();
		this.pDefaultMapping = new DefaultMappingElements();
		this.pMapping = new MappingElements();
		this.pSignature = new SignatureElements();
		this.pNamedEClass = new NamedEClassElements();
		this.pRequiredMapping = new RequiredMappingElements();
		this.pConstraintBlock = new ConstraintBlockElements();
		this.pConstraintExpression = new ConstraintExpressionElements();
		this.pSignatureConstraintBlock = new SignatureConstraintBlockElements();
		this.pSignatureConstraintExpression = new SignatureConstraintExpressionElements();
		this.pBodyConstraintBlock = new BodyConstraintBlockElements();
		this.pBodyConstraintExpression = new BodyConstraintExpressionElements();
		this.pVariableRef = new VariableRefElements();
		this.pInExpression = new InExpressionElements();
		this.pDefaultContainExpression = new DefaultContainExpressionElements();
		this.pEqualsLiteralExpression = new EqualsLiteralExpressionElements();
		this.pAttributeEquivalenceExpression = new AttributeEquivalenceExpressionElements();
		this.pFeatureOfContextVariable = new FeatureOfContextVariableElements();
		this.pContextVariable = new ContextVariableElements();
		this.pRequiredMappingPathBase = new RequiredMappingPathBaseElements();
		this.pRequiredMappingPathTail = new RequiredMappingPathTailElements();
		this.pConstraintLiteral = new ConstraintLiteralElements();
		this.pConstraintBooleanLiteral = new ConstraintBooleanLiteralElements();
		this.pConstraintNullLiteral = new ConstraintNullLiteralElements();
		this.pConstraintNumberLiteral = new ConstraintNumberLiteralElements();
		this.pConstraintStringLiteral = new ConstraintStringLiteralElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("edu.kit.ipd.sdq.vitruvius.dsls.mapping.MappingLanguage".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	public XbaseGrammarAccess getXbaseGrammarAccess() {
		return gaXbase;
	}

	
	//MappingFile:
	//	"generates" pluginName=QualifiedName imports+=Import* (mappings+=Mapping | mappings+=DefaultMapping)*;
	public MappingFileElements getMappingFileAccess() {
		return pMappingFile;
	}
	
	public ParserRule getMappingFileRule() {
		return getMappingFileAccess().getRule();
	}

	//Import:
	//	"import" package=[ecore::EPackage|STRING] ("as" name=ValidID)?;
	public ImportElements getImportAccess() {
		return pImport;
	}
	
	public ParserRule getImportRule() {
		return getImportAccess().getRule();
	}

	//DefaultMapping returns Mapping:
	//	{Mapping} default?="default" name=ValidID ":" ("create" (signatures+=Signature
	//	constraints+=SignatureConstraintBlock))*;
	public DefaultMappingElements getDefaultMappingAccess() {
		return pDefaultMapping;
	}
	
	public ParserRule getDefaultMappingRule() {
		return getDefaultMappingAccess().getRule();
	}

	//Mapping:
	//	{Mapping} ("mapping" name=ValidID ":")? ("when" "(" requires+=RequiredMapping ("," requires+=RequiredMapping)* ")")?
	//	(("map" signatures+=Signature constraintBlocks+=SignatureConstraintBlock "and" signatures+=Signature
	//	constraintBlocks+=SignatureConstraintBlock) ("{" constraintsBody=BodyConstraintBlock submappings+=Mapping* "}")?) |
	//	"map" "{" constraintsBody=BodyConstraintBlock submappings+=Mapping* "}";
	public MappingElements getMappingAccess() {
		return pMapping;
	}
	
	public ParserRule getMappingRule() {
		return getMappingAccess().getRule();
	}

	//Signature:
	//	{Signature} "{" (elements+=NamedEClass ("," elements+=NamedEClass)*)? "}";
	public SignatureElements getSignatureAccess() {
		return pSignature;
	}
	
	public ParserRule getSignatureRule() {
		return getSignatureAccess().getRule();
	}

	//NamedEClass:
	//	type=[ecore::EClass|QualifiedName] "as" name=ValidID;
	public NamedEClassElements getNamedEClassAccess() {
		return pNamedEClass;
	}
	
	public ParserRule getNamedEClassRule() {
		return getNamedEClassAccess().getRule();
	}

	//RequiredMapping:
	//	mapping=[Mapping] "as" name=ValidID;
	public RequiredMappingElements getRequiredMappingAccess() {
		return pRequiredMapping;
	}
	
	public ParserRule getRequiredMappingRule() {
		return getRequiredMappingAccess().getRule();
	}

	//ConstraintBlock:
	//	SignatureConstraintBlock | BodyConstraintBlock;
	public ConstraintBlockElements getConstraintBlockAccess() {
		return pConstraintBlock;
	}
	
	public ParserRule getConstraintBlockRule() {
		return getConstraintBlockAccess().getRule();
	}

	//ConstraintExpression:
	//	SignatureConstraintExpression | BodyConstraintExpression;
	public ConstraintExpressionElements getConstraintExpressionAccess() {
		return pConstraintExpression;
	}
	
	public ParserRule getConstraintExpressionRule() {
		return getConstraintExpressionAccess().getRule();
	}

	//SignatureConstraintBlock:
	//	{SignatureConstraintBlock} ("[" (expressions+=SignatureConstraintExpression ";"?)* "]")?;
	public SignatureConstraintBlockElements getSignatureConstraintBlockAccess() {
		return pSignatureConstraintBlock;
	}
	
	public ParserRule getSignatureConstraintBlockRule() {
		return getSignatureConstraintBlockAccess().getRule();
	}

	//SignatureConstraintExpression returns ConstraintExpression:
	//	InExpression | EqualsLiteralExpression | DefaultContainExpression;
	public SignatureConstraintExpressionElements getSignatureConstraintExpressionAccess() {
		return pSignatureConstraintExpression;
	}
	
	public ParserRule getSignatureConstraintExpressionRule() {
		return getSignatureConstraintExpressionAccess().getRule();
	}

	//BodyConstraintBlock:
	//	{BodyConstraintBlock} ("[" (expressions+=BodyConstraintExpression ";"?)* "]")?;
	public BodyConstraintBlockElements getBodyConstraintBlockAccess() {
		return pBodyConstraintBlock;
	}
	
	public ParserRule getBodyConstraintBlockRule() {
		return getBodyConstraintBlockAccess().getRule();
	}

	//BodyConstraintExpression returns ConstraintExpression:
	//	AttributeEquivalenceExpression;
	public BodyConstraintExpressionElements getBodyConstraintExpressionAccess() {
		return pBodyConstraintExpression;
	}
	
	public ParserRule getBodyConstraintExpressionRule() {
		return getBodyConstraintExpressionAccess().getRule();
	}

	//VariableRef returns ConstraintExpression:
	//	{VariableRef} target=ContextVariable;
	public VariableRefElements getVariableRefAccess() {
		return pVariableRef;
	}
	
	public ParserRule getVariableRefRule() {
		return getVariableRefAccess().getRule();
	}

	//InExpression returns ConstraintExpression:
	//	{InExpression} "in" "(" target=ContextVariable "," source=FeatureOfContextVariable ")";
	public InExpressionElements getInExpressionAccess() {
		return pInExpression;
	}
	
	public ParserRule getInExpressionRule() {
		return getInExpressionAccess().getRule();
	}

	//DefaultContainExpression returns ConstraintExpression:
	//	{DefaultContainExpression} ("default-contain" "(" target=ContextVariable "," source=FeatureOfContextVariable ")" |
	//	"default-resource" "(" target=ContextVariable "," resource=STRING ")");
	public DefaultContainExpressionElements getDefaultContainExpressionAccess() {
		return pDefaultContainExpression;
	}
	
	public ParserRule getDefaultContainExpressionRule() {
		return getDefaultContainExpressionAccess().getRule();
	}

	//EqualsLiteralExpression returns ConstraintExpression:
	//	{EqualsLiteralExpression} "equal" "(" target=FeatureOfContextVariable "," value=ConstraintLiteral ")";
	public EqualsLiteralExpressionElements getEqualsLiteralExpressionAccess() {
		return pEqualsLiteralExpression;
	}
	
	public ParserRule getEqualsLiteralExpressionRule() {
		return getEqualsLiteralExpressionAccess().getRule();
	}

	//AttributeEquivalenceExpression returns ConstraintExpression:
	//	{AttributeEquivalenceExpression} "equal" "(" left=FeatureOfContextVariable "," right=FeatureOfContextVariable ")";
	public AttributeEquivalenceExpressionElements getAttributeEquivalenceExpressionAccess() {
		return pAttributeEquivalenceExpression;
	}
	
	public ParserRule getAttributeEquivalenceExpressionRule() {
		return getAttributeEquivalenceExpressionAccess().getRule();
	}

	//FeatureOfContextVariable:
	//	context=ContextVariable ("." feature=[ecore::EStructuralFeature|ValidID]);
	public FeatureOfContextVariableElements getFeatureOfContextVariableAccess() {
		return pFeatureOfContextVariable;
	}
	
	public ParserRule getFeatureOfContextVariableRule() {
		return getFeatureOfContextVariableAccess().getRule();
	}

	//ContextVariable:
	//	requiredMappingPath=RequiredMappingPathBase? ("::" targetClass=[NamedEClass|ValidID]);
	public ContextVariableElements getContextVariableAccess() {
		return pContextVariable;
	}
	
	public ParserRule getContextVariableRule() {
		return getContextVariableAccess().getRule();
	}

	//RequiredMappingPathBase:
	//	requiredMapping=[RequiredMapping|ValidID] tail=RequiredMappingPathTail?;
	public RequiredMappingPathBaseElements getRequiredMappingPathBaseAccess() {
		return pRequiredMappingPathBase;
	}
	
	public ParserRule getRequiredMappingPathBaseRule() {
		return getRequiredMappingPathBaseAccess().getRule();
	}

	//RequiredMappingPathTail:
	//	"." requiredMapping=[RequiredMapping|ValidID] tail=RequiredMappingPathTail?;
	public RequiredMappingPathTailElements getRequiredMappingPathTailAccess() {
		return pRequiredMappingPathTail;
	}
	
	public ParserRule getRequiredMappingPathTailRule() {
		return getRequiredMappingPathTailAccess().getRule();
	}

	//// LITERALS from Xbase.xtext
	//ConstraintLiteral:
	//	ConstraintBooleanLiteral | ConstraintNullLiteral | ConstraintNumberLiteral | ConstraintStringLiteral;
	public ConstraintLiteralElements getConstraintLiteralAccess() {
		return pConstraintLiteral;
	}
	
	public ParserRule getConstraintLiteralRule() {
		return getConstraintLiteralAccess().getRule();
	}

	//ConstraintBooleanLiteral returns ConstraintLiteral:
	//	{ConstraintBooleanLiteral} ("false" | isTrue?="true");
	public ConstraintBooleanLiteralElements getConstraintBooleanLiteralAccess() {
		return pConstraintBooleanLiteral;
	}
	
	public ParserRule getConstraintBooleanLiteralRule() {
		return getConstraintBooleanLiteralAccess().getRule();
	}

	//ConstraintNullLiteral returns ConstraintLiteral:
	//	{ConstraintNullLiteral} "null";
	public ConstraintNullLiteralElements getConstraintNullLiteralAccess() {
		return pConstraintNullLiteral;
	}
	
	public ParserRule getConstraintNullLiteralRule() {
		return getConstraintNullLiteralAccess().getRule();
	}

	//ConstraintNumberLiteral returns ConstraintLiteral:
	//	{ConstraintNumberLiteral} value=Number;
	public ConstraintNumberLiteralElements getConstraintNumberLiteralAccess() {
		return pConstraintNumberLiteral;
	}
	
	public ParserRule getConstraintNumberLiteralRule() {
		return getConstraintNumberLiteralAccess().getRule();
	}

	//ConstraintStringLiteral returns ConstraintLiteral:
	//	{ConstraintStringLiteral} value=STRING;
	public ConstraintStringLiteralElements getConstraintStringLiteralAccess() {
		return pConstraintStringLiteral;
	}
	
	public ParserRule getConstraintStringLiteralRule() {
		return getConstraintStringLiteralAccess().getRule();
	}

	//XExpression:
	//	XAssignment;
	public XbaseGrammarAccess.XExpressionElements getXExpressionAccess() {
		return gaXbase.getXExpressionAccess();
	}
	
	public ParserRule getXExpressionRule() {
		return getXExpressionAccess().getRule();
	}

	//XAssignment returns XExpression:
	//	{XAssignment} feature=[types::JvmIdentifiableElement|FeatureCallID] OpSingleAssign value=XAssignment | XOrExpression
	//	(=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpMultiAssign])
	//	rightOperand=XAssignment)?;
	public XbaseGrammarAccess.XAssignmentElements getXAssignmentAccess() {
		return gaXbase.getXAssignmentAccess();
	}
	
	public ParserRule getXAssignmentRule() {
		return getXAssignmentAccess().getRule();
	}

	//OpSingleAssign:
	//	"=";
	public XbaseGrammarAccess.OpSingleAssignElements getOpSingleAssignAccess() {
		return gaXbase.getOpSingleAssignAccess();
	}
	
	public ParserRule getOpSingleAssignRule() {
		return getOpSingleAssignAccess().getRule();
	}

	//OpMultiAssign:
	//	"+=" | "-=" | "*=" | "/=" | "%=" | "<" "<" "=" | ">" ">"? ">=";
	public XbaseGrammarAccess.OpMultiAssignElements getOpMultiAssignAccess() {
		return gaXbase.getOpMultiAssignAccess();
	}
	
	public ParserRule getOpMultiAssignRule() {
		return getOpMultiAssignAccess().getRule();
	}

	//XOrExpression returns XExpression:
	//	XAndExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpOr])
	//	rightOperand=XAndExpression)*;
	public XbaseGrammarAccess.XOrExpressionElements getXOrExpressionAccess() {
		return gaXbase.getXOrExpressionAccess();
	}
	
	public ParserRule getXOrExpressionRule() {
		return getXOrExpressionAccess().getRule();
	}

	//OpOr:
	//	"||";
	public XbaseGrammarAccess.OpOrElements getOpOrAccess() {
		return gaXbase.getOpOrAccess();
	}
	
	public ParserRule getOpOrRule() {
		return getOpOrAccess().getRule();
	}

	//XAndExpression returns XExpression:
	//	XEqualityExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpAnd])
	//	rightOperand=XEqualityExpression)*;
	public XbaseGrammarAccess.XAndExpressionElements getXAndExpressionAccess() {
		return gaXbase.getXAndExpressionAccess();
	}
	
	public ParserRule getXAndExpressionRule() {
		return getXAndExpressionAccess().getRule();
	}

	//OpAnd:
	//	"&&";
	public XbaseGrammarAccess.OpAndElements getOpAndAccess() {
		return gaXbase.getOpAndAccess();
	}
	
	public ParserRule getOpAndRule() {
		return getOpAndAccess().getRule();
	}

	//XEqualityExpression returns XExpression:
	//	XRelationalExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpEquality])
	//	rightOperand=XRelationalExpression)*;
	public XbaseGrammarAccess.XEqualityExpressionElements getXEqualityExpressionAccess() {
		return gaXbase.getXEqualityExpressionAccess();
	}
	
	public ParserRule getXEqualityExpressionRule() {
		return getXEqualityExpressionAccess().getRule();
	}

	//OpEquality:
	//	"==" | "!=" | "===" | "!==";
	public XbaseGrammarAccess.OpEqualityElements getOpEqualityAccess() {
		return gaXbase.getOpEqualityAccess();
	}
	
	public ParserRule getOpEqualityRule() {
		return getOpEqualityAccess().getRule();
	}

	//XRelationalExpression returns XExpression:
	//	XOtherOperatorExpression (=> ({XInstanceOfExpression.expression=current} "instanceof") type=JvmTypeReference | =>
	//	({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpCompare])
	//	rightOperand=XOtherOperatorExpression)*;
	public XbaseGrammarAccess.XRelationalExpressionElements getXRelationalExpressionAccess() {
		return gaXbase.getXRelationalExpressionAccess();
	}
	
	public ParserRule getXRelationalExpressionRule() {
		return getXRelationalExpressionAccess().getRule();
	}

	//OpCompare:
	//	">=" | "<" "=" | ">" | "<";
	public XbaseGrammarAccess.OpCompareElements getOpCompareAccess() {
		return gaXbase.getOpCompareAccess();
	}
	
	public ParserRule getOpCompareRule() {
		return getOpCompareAccess().getRule();
	}

	//XOtherOperatorExpression returns XExpression:
	//	XAdditiveExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpOther])
	//	rightOperand=XAdditiveExpression)*;
	public XbaseGrammarAccess.XOtherOperatorExpressionElements getXOtherOperatorExpressionAccess() {
		return gaXbase.getXOtherOperatorExpressionAccess();
	}
	
	public ParserRule getXOtherOperatorExpressionRule() {
		return getXOtherOperatorExpressionAccess().getRule();
	}

	//OpOther:
	//	"->" | "..<" | ">" ".." | ".." | "=>" | ">" (=> (">" ">") | ">") | "<" (=> ("<" "<") | "<" | "=>") | "<>" | "?:";
	public XbaseGrammarAccess.OpOtherElements getOpOtherAccess() {
		return gaXbase.getOpOtherAccess();
	}
	
	public ParserRule getOpOtherRule() {
		return getOpOtherAccess().getRule();
	}

	//XAdditiveExpression returns XExpression:
	//	XMultiplicativeExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpAdd])
	//	rightOperand=XMultiplicativeExpression)*;
	public XbaseGrammarAccess.XAdditiveExpressionElements getXAdditiveExpressionAccess() {
		return gaXbase.getXAdditiveExpressionAccess();
	}
	
	public ParserRule getXAdditiveExpressionRule() {
		return getXAdditiveExpressionAccess().getRule();
	}

	//OpAdd:
	//	"+" | "-";
	public XbaseGrammarAccess.OpAddElements getOpAddAccess() {
		return gaXbase.getOpAddAccess();
	}
	
	public ParserRule getOpAddRule() {
		return getOpAddAccess().getRule();
	}

	//XMultiplicativeExpression returns XExpression:
	//	XUnaryOperation (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpMulti])
	//	rightOperand=XUnaryOperation)*;
	public XbaseGrammarAccess.XMultiplicativeExpressionElements getXMultiplicativeExpressionAccess() {
		return gaXbase.getXMultiplicativeExpressionAccess();
	}
	
	public ParserRule getXMultiplicativeExpressionRule() {
		return getXMultiplicativeExpressionAccess().getRule();
	}

	//OpMulti:
	//	"*" | "**" | "/" | "%";
	public XbaseGrammarAccess.OpMultiElements getOpMultiAccess() {
		return gaXbase.getOpMultiAccess();
	}
	
	public ParserRule getOpMultiRule() {
		return getOpMultiAccess().getRule();
	}

	//XUnaryOperation returns XExpression:
	//	{XUnaryOperation} feature=[types::JvmIdentifiableElement|OpUnary] operand=XUnaryOperation | XCastedExpression;
	public XbaseGrammarAccess.XUnaryOperationElements getXUnaryOperationAccess() {
		return gaXbase.getXUnaryOperationAccess();
	}
	
	public ParserRule getXUnaryOperationRule() {
		return getXUnaryOperationAccess().getRule();
	}

	//OpUnary:
	//	"!" | "-" | "+";
	public XbaseGrammarAccess.OpUnaryElements getOpUnaryAccess() {
		return gaXbase.getOpUnaryAccess();
	}
	
	public ParserRule getOpUnaryRule() {
		return getOpUnaryAccess().getRule();
	}

	//XCastedExpression returns XExpression:
	//	XPostfixOperation (=> ({XCastedExpression.target=current} "as") type=JvmTypeReference)*;
	public XbaseGrammarAccess.XCastedExpressionElements getXCastedExpressionAccess() {
		return gaXbase.getXCastedExpressionAccess();
	}
	
	public ParserRule getXCastedExpressionRule() {
		return getXCastedExpressionAccess().getRule();
	}

	//XPostfixOperation returns XExpression:
	//	XMemberFeatureCall => ({XPostfixOperation.operand=current} feature=[types::JvmIdentifiableElement|OpPostfix])?;
	public XbaseGrammarAccess.XPostfixOperationElements getXPostfixOperationAccess() {
		return gaXbase.getXPostfixOperationAccess();
	}
	
	public ParserRule getXPostfixOperationRule() {
		return getXPostfixOperationAccess().getRule();
	}

	//OpPostfix:
	//	"++" | "--";
	public XbaseGrammarAccess.OpPostfixElements getOpPostfixAccess() {
		return gaXbase.getOpPostfixAccess();
	}
	
	public ParserRule getOpPostfixRule() {
		return getOpPostfixAccess().getRule();
	}

	//XMemberFeatureCall returns XExpression:
	//	XPrimaryExpression (=> ({XAssignment.assignable=current} ("." | explicitStatic?="::")
	//	feature=[types::JvmIdentifiableElement|FeatureCallID] OpSingleAssign) value=XAssignment | =>
	//	({XMemberFeatureCall.memberCallTarget=current} ("." | nullSafe?="?." | explicitStatic?="::")) ("<"
	//	typeArguments+=JvmArgumentTypeReference ("," typeArguments+=JvmArgumentTypeReference)* ">")?
	//	feature=[types::JvmIdentifiableElement|IdOrSuper] (=> explicitOperationCall?="(" (memberCallArguments+=XShortClosure |
	//	memberCallArguments+=XExpression ("," memberCallArguments+=XExpression)*)? ")")? memberCallArguments+=XClosure?)*;
	public XbaseGrammarAccess.XMemberFeatureCallElements getXMemberFeatureCallAccess() {
		return gaXbase.getXMemberFeatureCallAccess();
	}
	
	public ParserRule getXMemberFeatureCallRule() {
		return getXMemberFeatureCallAccess().getRule();
	}

	//XPrimaryExpression returns XExpression:
	//	XConstructorCall | XBlockExpression | XSwitchExpression | XSynchronizedExpression | XFeatureCall | XLiteral |
	//	XIfExpression | XForLoopExpression | XBasicForLoopExpression | XWhileExpression | XDoWhileExpression |
	//	XThrowExpression | XReturnExpression | XTryCatchFinallyExpression | XParenthesizedExpression;
	public XbaseGrammarAccess.XPrimaryExpressionElements getXPrimaryExpressionAccess() {
		return gaXbase.getXPrimaryExpressionAccess();
	}
	
	public ParserRule getXPrimaryExpressionRule() {
		return getXPrimaryExpressionAccess().getRule();
	}

	//XLiteral returns XExpression:
	//	XCollectionLiteral | XClosure | XBooleanLiteral | XNumberLiteral | XNullLiteral | XStringLiteral | XTypeLiteral;
	public XbaseGrammarAccess.XLiteralElements getXLiteralAccess() {
		return gaXbase.getXLiteralAccess();
	}
	
	public ParserRule getXLiteralRule() {
		return getXLiteralAccess().getRule();
	}

	//XCollectionLiteral:
	//	XSetLiteral | XListLiteral;
	public XbaseGrammarAccess.XCollectionLiteralElements getXCollectionLiteralAccess() {
		return gaXbase.getXCollectionLiteralAccess();
	}
	
	public ParserRule getXCollectionLiteralRule() {
		return getXCollectionLiteralAccess().getRule();
	}

	//XSetLiteral:
	//	{XSetLiteral} "#" "{" (elements+=XExpression ("," elements+=XExpression)*)? "}";
	public XbaseGrammarAccess.XSetLiteralElements getXSetLiteralAccess() {
		return gaXbase.getXSetLiteralAccess();
	}
	
	public ParserRule getXSetLiteralRule() {
		return getXSetLiteralAccess().getRule();
	}

	//XListLiteral:
	//	{XListLiteral} "#" "[" (elements+=XExpression ("," elements+=XExpression)*)? "]";
	public XbaseGrammarAccess.XListLiteralElements getXListLiteralAccess() {
		return gaXbase.getXListLiteralAccess();
	}
	
	public ParserRule getXListLiteralRule() {
		return getXListLiteralAccess().getRule();
	}

	//XClosure returns XExpression:
	//	=> ({XClosure} "[") => ((declaredFormalParameters+=JvmFormalParameter (","
	//	declaredFormalParameters+=JvmFormalParameter)*)? explicitSyntax?="|")? expression=XExpressionInClosure "]";
	public XbaseGrammarAccess.XClosureElements getXClosureAccess() {
		return gaXbase.getXClosureAccess();
	}
	
	public ParserRule getXClosureRule() {
		return getXClosureAccess().getRule();
	}

	//XExpressionInClosure returns XExpression:
	//	{XBlockExpression} (expressions+=XExpressionOrVarDeclaration ";"?)*;
	public XbaseGrammarAccess.XExpressionInClosureElements getXExpressionInClosureAccess() {
		return gaXbase.getXExpressionInClosureAccess();
	}
	
	public ParserRule getXExpressionInClosureRule() {
		return getXExpressionInClosureAccess().getRule();
	}

	//XShortClosure returns XExpression:
	//	=> ({XClosure} (declaredFormalParameters+=JvmFormalParameter ("," declaredFormalParameters+=JvmFormalParameter)*)?
	//	explicitSyntax?="|") expression=XExpression;
	public XbaseGrammarAccess.XShortClosureElements getXShortClosureAccess() {
		return gaXbase.getXShortClosureAccess();
	}
	
	public ParserRule getXShortClosureRule() {
		return getXShortClosureAccess().getRule();
	}

	//XParenthesizedExpression returns XExpression:
	//	"(" XExpression ")";
	public XbaseGrammarAccess.XParenthesizedExpressionElements getXParenthesizedExpressionAccess() {
		return gaXbase.getXParenthesizedExpressionAccess();
	}
	
	public ParserRule getXParenthesizedExpressionRule() {
		return getXParenthesizedExpressionAccess().getRule();
	}

	//XIfExpression returns XExpression:
	//	{XIfExpression} "if" "(" if=XExpression ")" then=XExpression ("else" else=XExpression)?;
	public XbaseGrammarAccess.XIfExpressionElements getXIfExpressionAccess() {
		return gaXbase.getXIfExpressionAccess();
	}
	
	public ParserRule getXIfExpressionRule() {
		return getXIfExpressionAccess().getRule();
	}

	//XSwitchExpression returns XExpression:
	//	{XSwitchExpression} "switch" (=> ("(" declaredParam=JvmFormalParameter ":") switch=XExpression ")" | =>
	//	(declaredParam=JvmFormalParameter ":")? switch=XExpression) "{" cases+=XCasePart* ("default" ":" default=XExpression)?
	//	"}";
	public XbaseGrammarAccess.XSwitchExpressionElements getXSwitchExpressionAccess() {
		return gaXbase.getXSwitchExpressionAccess();
	}
	
	public ParserRule getXSwitchExpressionRule() {
		return getXSwitchExpressionAccess().getRule();
	}

	//XCasePart:
	//	{XCasePart} typeGuard=JvmTypeReference? ("case" case=XExpression)? (":" then=XExpression | fallThrough?=",");
	public XbaseGrammarAccess.XCasePartElements getXCasePartAccess() {
		return gaXbase.getXCasePartAccess();
	}
	
	public ParserRule getXCasePartRule() {
		return getXCasePartAccess().getRule();
	}

	//XForLoopExpression returns XExpression:
	//	=> ({XForLoopExpression} "for" "(" declaredParam=JvmFormalParameter ":") forExpression=XExpression ")"
	//	eachExpression=XExpression;
	public XbaseGrammarAccess.XForLoopExpressionElements getXForLoopExpressionAccess() {
		return gaXbase.getXForLoopExpressionAccess();
	}
	
	public ParserRule getXForLoopExpressionRule() {
		return getXForLoopExpressionAccess().getRule();
	}

	//XBasicForLoopExpression returns XExpression:
	//	{XBasicForLoopExpression} "for" "(" (initExpressions+=XExpressionOrVarDeclaration (","
	//	initExpressions+=XExpressionOrVarDeclaration)*)? ";" expression=XExpression? ";" (updateExpressions+=XExpression (","
	//	updateExpressions+=XExpression)*)? ")" eachExpression=XExpression;
	public XbaseGrammarAccess.XBasicForLoopExpressionElements getXBasicForLoopExpressionAccess() {
		return gaXbase.getXBasicForLoopExpressionAccess();
	}
	
	public ParserRule getXBasicForLoopExpressionRule() {
		return getXBasicForLoopExpressionAccess().getRule();
	}

	//XWhileExpression returns XExpression:
	//	{XWhileExpression} "while" "(" predicate=XExpression ")" body=XExpression;
	public XbaseGrammarAccess.XWhileExpressionElements getXWhileExpressionAccess() {
		return gaXbase.getXWhileExpressionAccess();
	}
	
	public ParserRule getXWhileExpressionRule() {
		return getXWhileExpressionAccess().getRule();
	}

	//XDoWhileExpression returns XExpression:
	//	{XDoWhileExpression} "do" body=XExpression "while" "(" predicate=XExpression ")";
	public XbaseGrammarAccess.XDoWhileExpressionElements getXDoWhileExpressionAccess() {
		return gaXbase.getXDoWhileExpressionAccess();
	}
	
	public ParserRule getXDoWhileExpressionRule() {
		return getXDoWhileExpressionAccess().getRule();
	}

	//XBlockExpression returns XExpression:
	//	{XBlockExpression} "{" (expressions+=XExpressionOrVarDeclaration ";"?)* "}";
	public XbaseGrammarAccess.XBlockExpressionElements getXBlockExpressionAccess() {
		return gaXbase.getXBlockExpressionAccess();
	}
	
	public ParserRule getXBlockExpressionRule() {
		return getXBlockExpressionAccess().getRule();
	}

	//XExpressionOrVarDeclaration returns XExpression:
	//	XVariableDeclaration | XExpression;
	public XbaseGrammarAccess.XExpressionOrVarDeclarationElements getXExpressionOrVarDeclarationAccess() {
		return gaXbase.getXExpressionOrVarDeclarationAccess();
	}
	
	public ParserRule getXExpressionOrVarDeclarationRule() {
		return getXExpressionOrVarDeclarationAccess().getRule();
	}

	//XVariableDeclaration returns XExpression:
	//	{XVariableDeclaration} (writeable?="var" | "val") (=> (type=JvmTypeReference name=ValidID) | name=ValidID) ("="
	//	right=XExpression)?;
	public XbaseGrammarAccess.XVariableDeclarationElements getXVariableDeclarationAccess() {
		return gaXbase.getXVariableDeclarationAccess();
	}
	
	public ParserRule getXVariableDeclarationRule() {
		return getXVariableDeclarationAccess().getRule();
	}

	//JvmFormalParameter returns types::JvmFormalParameter:
	//	parameterType=JvmTypeReference? name=ValidID;
	public XbaseGrammarAccess.JvmFormalParameterElements getJvmFormalParameterAccess() {
		return gaXbase.getJvmFormalParameterAccess();
	}
	
	public ParserRule getJvmFormalParameterRule() {
		return getJvmFormalParameterAccess().getRule();
	}

	//FullJvmFormalParameter returns types::JvmFormalParameter:
	//	parameterType=JvmTypeReference name=ValidID;
	public XbaseGrammarAccess.FullJvmFormalParameterElements getFullJvmFormalParameterAccess() {
		return gaXbase.getFullJvmFormalParameterAccess();
	}
	
	public ParserRule getFullJvmFormalParameterRule() {
		return getFullJvmFormalParameterAccess().getRule();
	}

	//XFeatureCall returns XExpression:
	//	{XFeatureCall} ("<" typeArguments+=JvmArgumentTypeReference ("," typeArguments+=JvmArgumentTypeReference)* ">")?
	//	feature=[types::JvmIdentifiableElement|IdOrSuper] (=> explicitOperationCall?="(" (featureCallArguments+=XShortClosure
	//	| featureCallArguments+=XExpression ("," featureCallArguments+=XExpression)*)? ")")? featureCallArguments+=XClosure?;
	public XbaseGrammarAccess.XFeatureCallElements getXFeatureCallAccess() {
		return gaXbase.getXFeatureCallAccess();
	}
	
	public ParserRule getXFeatureCallRule() {
		return getXFeatureCallAccess().getRule();
	}

	//FeatureCallID:
	//	ValidID | "extends" | "static" | "import" | "extension";
	public XbaseGrammarAccess.FeatureCallIDElements getFeatureCallIDAccess() {
		return gaXbase.getFeatureCallIDAccess();
	}
	
	public ParserRule getFeatureCallIDRule() {
		return getFeatureCallIDAccess().getRule();
	}

	//IdOrSuper:
	//	FeatureCallID | "super";
	public XbaseGrammarAccess.IdOrSuperElements getIdOrSuperAccess() {
		return gaXbase.getIdOrSuperAccess();
	}
	
	public ParserRule getIdOrSuperRule() {
		return getIdOrSuperAccess().getRule();
	}

	//XConstructorCall returns XExpression:
	//	{XConstructorCall} "new" constructor=[types::JvmConstructor|QualifiedName] ("<"
	//	typeArguments+=JvmArgumentTypeReference ("," typeArguments+=JvmArgumentTypeReference)* ">")? (=>
	//	explicitConstructorCall?="(" (arguments+=XShortClosure | arguments+=XExpression ("," arguments+=XExpression)*)? ")")?
	//	arguments+=XClosure?;
	public XbaseGrammarAccess.XConstructorCallElements getXConstructorCallAccess() {
		return gaXbase.getXConstructorCallAccess();
	}
	
	public ParserRule getXConstructorCallRule() {
		return getXConstructorCallAccess().getRule();
	}

	//XBooleanLiteral returns XExpression:
	//	{XBooleanLiteral} ("false" | isTrue?="true");
	public XbaseGrammarAccess.XBooleanLiteralElements getXBooleanLiteralAccess() {
		return gaXbase.getXBooleanLiteralAccess();
	}
	
	public ParserRule getXBooleanLiteralRule() {
		return getXBooleanLiteralAccess().getRule();
	}

	//XNullLiteral returns XExpression:
	//	{XNullLiteral} "null";
	public XbaseGrammarAccess.XNullLiteralElements getXNullLiteralAccess() {
		return gaXbase.getXNullLiteralAccess();
	}
	
	public ParserRule getXNullLiteralRule() {
		return getXNullLiteralAccess().getRule();
	}

	//XNumberLiteral returns XExpression:
	//	{XNumberLiteral} value=Number;
	public XbaseGrammarAccess.XNumberLiteralElements getXNumberLiteralAccess() {
		return gaXbase.getXNumberLiteralAccess();
	}
	
	public ParserRule getXNumberLiteralRule() {
		return getXNumberLiteralAccess().getRule();
	}

	//XStringLiteral returns XExpression:
	//	{XStringLiteral} value=STRING;
	public XbaseGrammarAccess.XStringLiteralElements getXStringLiteralAccess() {
		return gaXbase.getXStringLiteralAccess();
	}
	
	public ParserRule getXStringLiteralRule() {
		return getXStringLiteralAccess().getRule();
	}

	//XTypeLiteral returns XExpression:
	//	{XTypeLiteral} "typeof" "(" type=[types::JvmType|QualifiedName] arrayDimensions+=ArrayBrackets* ")";
	public XbaseGrammarAccess.XTypeLiteralElements getXTypeLiteralAccess() {
		return gaXbase.getXTypeLiteralAccess();
	}
	
	public ParserRule getXTypeLiteralRule() {
		return getXTypeLiteralAccess().getRule();
	}

	//XThrowExpression returns XExpression:
	//	{XThrowExpression} "throw" expression=XExpression;
	public XbaseGrammarAccess.XThrowExpressionElements getXThrowExpressionAccess() {
		return gaXbase.getXThrowExpressionAccess();
	}
	
	public ParserRule getXThrowExpressionRule() {
		return getXThrowExpressionAccess().getRule();
	}

	//XReturnExpression returns XExpression:
	//	{XReturnExpression} "return" -> expression=XExpression?;
	public XbaseGrammarAccess.XReturnExpressionElements getXReturnExpressionAccess() {
		return gaXbase.getXReturnExpressionAccess();
	}
	
	public ParserRule getXReturnExpressionRule() {
		return getXReturnExpressionAccess().getRule();
	}

	//XTryCatchFinallyExpression returns XExpression:
	//	{XTryCatchFinallyExpression} "try" expression=XExpression (catchClauses+=XCatchClause+ ("finally"
	//	finallyExpression=XExpression)? | "finally" finallyExpression=XExpression);
	public XbaseGrammarAccess.XTryCatchFinallyExpressionElements getXTryCatchFinallyExpressionAccess() {
		return gaXbase.getXTryCatchFinallyExpressionAccess();
	}
	
	public ParserRule getXTryCatchFinallyExpressionRule() {
		return getXTryCatchFinallyExpressionAccess().getRule();
	}

	//XSynchronizedExpression returns XExpression:
	//	=> ({XSynchronizedExpression} "synchronized" "(") param=XExpression ")" expression=XExpression;
	public XbaseGrammarAccess.XSynchronizedExpressionElements getXSynchronizedExpressionAccess() {
		return gaXbase.getXSynchronizedExpressionAccess();
	}
	
	public ParserRule getXSynchronizedExpressionRule() {
		return getXSynchronizedExpressionAccess().getRule();
	}

	//XCatchClause:
	//	"catch" "(" declaredParam=FullJvmFormalParameter ")" expression=XExpression;
	public XbaseGrammarAccess.XCatchClauseElements getXCatchClauseAccess() {
		return gaXbase.getXCatchClauseAccess();
	}
	
	public ParserRule getXCatchClauseRule() {
		return getXCatchClauseAccess().getRule();
	}

	//QualifiedName:
	//	ValidID ("." ValidID)*;
	public XbaseGrammarAccess.QualifiedNameElements getQualifiedNameAccess() {
		return gaXbase.getQualifiedNameAccess();
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}

	//Number hidden():
	//	HEX | (INT | DECIMAL) ("." (INT | DECIMAL))?;
	public XbaseGrammarAccess.NumberElements getNumberAccess() {
		return gaXbase.getNumberAccess();
	}
	
	public ParserRule getNumberRule() {
		return getNumberAccess().getRule();
	}

	/// **
	// * Dummy rule, for "better" downwards compatibility, since GrammarAccess generates non-static inner classes, 
	// * which makes downstream grammars break on classloading, when a rule is removed.
	// * / StaticQualifier:
	//	(ValidID "::")+;
	public XbaseGrammarAccess.StaticQualifierElements getStaticQualifierAccess() {
		return gaXbase.getStaticQualifierAccess();
	}
	
	public ParserRule getStaticQualifierRule() {
		return getStaticQualifierAccess().getRule();
	}

	//terminal HEX:
	//	("0x" | "0X") ("0".."9" | "a".."f" | "A".."F" | "_")+ ("#" (("b" | "B") ("i" | "I") | ("l" | "L")))?;
	public TerminalRule getHEXRule() {
		return gaXbase.getHEXRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9" ("0".."9" | "_")*;
	public TerminalRule getINTRule() {
		return gaXbase.getINTRule();
	} 

	//terminal DECIMAL:
	//	INT (("e" | "E") ("+" | "-")? INT)? (("b" | "B") ("i" | "I" | "d" | "D") | ("l" | "L" | "d" | "D" | "f" | "F"))?;
	public TerminalRule getDECIMALRule() {
		return gaXbase.getDECIMALRule();
	} 

	//JvmTypeReference:
	//	JvmParameterizedTypeReference => ({JvmGenericArrayTypeReference.componentType=current} ArrayBrackets)* |
	//	XFunctionTypeRef;
	public XtypeGrammarAccess.JvmTypeReferenceElements getJvmTypeReferenceAccess() {
		return gaXbase.getJvmTypeReferenceAccess();
	}
	
	public ParserRule getJvmTypeReferenceRule() {
		return getJvmTypeReferenceAccess().getRule();
	}

	//ArrayBrackets:
	//	"[" "]";
	public XtypeGrammarAccess.ArrayBracketsElements getArrayBracketsAccess() {
		return gaXbase.getArrayBracketsAccess();
	}
	
	public ParserRule getArrayBracketsRule() {
		return getArrayBracketsAccess().getRule();
	}

	//XFunctionTypeRef:
	//	("(" (paramTypes+=JvmTypeReference ("," paramTypes+=JvmTypeReference)*)? ")")? "=>" returnType=JvmTypeReference;
	public XtypeGrammarAccess.XFunctionTypeRefElements getXFunctionTypeRefAccess() {
		return gaXbase.getXFunctionTypeRefAccess();
	}
	
	public ParserRule getXFunctionTypeRefRule() {
		return getXFunctionTypeRefAccess().getRule();
	}

	//JvmParameterizedTypeReference:
	//	type=[JvmType|QualifiedName] ("<" arguments+=JvmArgumentTypeReference ("," arguments+=JvmArgumentTypeReference)* ">"
	//	(=> ({JvmInnerTypeReference.outer=current} ".") type=[JvmType|ValidID] ("<" arguments+=JvmArgumentTypeReference (","
	//	arguments+=JvmArgumentTypeReference)* ">")?)*)?;
	public XtypeGrammarAccess.JvmParameterizedTypeReferenceElements getJvmParameterizedTypeReferenceAccess() {
		return gaXbase.getJvmParameterizedTypeReferenceAccess();
	}
	
	public ParserRule getJvmParameterizedTypeReferenceRule() {
		return getJvmParameterizedTypeReferenceAccess().getRule();
	}

	//JvmArgumentTypeReference returns JvmTypeReference:
	//	JvmTypeReference | JvmWildcardTypeReference;
	public XtypeGrammarAccess.JvmArgumentTypeReferenceElements getJvmArgumentTypeReferenceAccess() {
		return gaXbase.getJvmArgumentTypeReferenceAccess();
	}
	
	public ParserRule getJvmArgumentTypeReferenceRule() {
		return getJvmArgumentTypeReferenceAccess().getRule();
	}

	//JvmWildcardTypeReference:
	//	{JvmWildcardTypeReference} "?" (constraints+=JvmUpperBound constraints+=JvmUpperBoundAnded* |
	//	constraints+=JvmLowerBound constraints+=JvmLowerBoundAnded*)?;
	public XtypeGrammarAccess.JvmWildcardTypeReferenceElements getJvmWildcardTypeReferenceAccess() {
		return gaXbase.getJvmWildcardTypeReferenceAccess();
	}
	
	public ParserRule getJvmWildcardTypeReferenceRule() {
		return getJvmWildcardTypeReferenceAccess().getRule();
	}

	//JvmUpperBound:
	//	"extends" typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmUpperBoundElements getJvmUpperBoundAccess() {
		return gaXbase.getJvmUpperBoundAccess();
	}
	
	public ParserRule getJvmUpperBoundRule() {
		return getJvmUpperBoundAccess().getRule();
	}

	//JvmUpperBoundAnded returns JvmUpperBound:
	//	"&" typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmUpperBoundAndedElements getJvmUpperBoundAndedAccess() {
		return gaXbase.getJvmUpperBoundAndedAccess();
	}
	
	public ParserRule getJvmUpperBoundAndedRule() {
		return getJvmUpperBoundAndedAccess().getRule();
	}

	//JvmLowerBound:
	//	"super" typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmLowerBoundElements getJvmLowerBoundAccess() {
		return gaXbase.getJvmLowerBoundAccess();
	}
	
	public ParserRule getJvmLowerBoundRule() {
		return getJvmLowerBoundAccess().getRule();
	}

	//JvmLowerBoundAnded returns JvmLowerBound:
	//	"&" typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmLowerBoundAndedElements getJvmLowerBoundAndedAccess() {
		return gaXbase.getJvmLowerBoundAndedAccess();
	}
	
	public ParserRule getJvmLowerBoundAndedRule() {
		return getJvmLowerBoundAndedAccess().getRule();
	}

	//JvmTypeParameter:
	//	name=ValidID (constraints+=JvmUpperBound constraints+=JvmUpperBoundAnded*)?;
	public XtypeGrammarAccess.JvmTypeParameterElements getJvmTypeParameterAccess() {
		return gaXbase.getJvmTypeParameterAccess();
	}
	
	public ParserRule getJvmTypeParameterRule() {
		return getJvmTypeParameterAccess().getRule();
	}

	//QualifiedNameWithWildcard:
	//	QualifiedName "." "*";
	public XtypeGrammarAccess.QualifiedNameWithWildcardElements getQualifiedNameWithWildcardAccess() {
		return gaXbase.getQualifiedNameWithWildcardAccess();
	}
	
	public ParserRule getQualifiedNameWithWildcardRule() {
		return getQualifiedNameWithWildcardAccess().getRule();
	}

	//ValidID:
	//	ID;
	public XtypeGrammarAccess.ValidIDElements getValidIDAccess() {
		return gaXbase.getValidIDAccess();
	}
	
	public ParserRule getValidIDRule() {
		return getValidIDAccess().getRule();
	}

	//XImportSection:
	//	importDeclarations+=XImportDeclaration+;
	public XtypeGrammarAccess.XImportSectionElements getXImportSectionAccess() {
		return gaXbase.getXImportSectionAccess();
	}
	
	public ParserRule getXImportSectionRule() {
		return getXImportSectionAccess().getRule();
	}

	//XImportDeclaration:
	//	"import" (static?="static" extension?="extension"? importedType=[JvmDeclaredType|QualifiedNameInStaticImport]
	//	(wildcard?="*" | memberName=ValidID) | importedType=[JvmDeclaredType|QualifiedName] |
	//	importedNamespace=QualifiedNameWithWildcard) ";"?;
	public XtypeGrammarAccess.XImportDeclarationElements getXImportDeclarationAccess() {
		return gaXbase.getXImportDeclarationAccess();
	}
	
	public ParserRule getXImportDeclarationRule() {
		return getXImportDeclarationAccess().getRule();
	}

	//QualifiedNameInStaticImport:
	//	(ValidID ".")+;
	public XtypeGrammarAccess.QualifiedNameInStaticImportElements getQualifiedNameInStaticImportAccess() {
		return gaXbase.getQualifiedNameInStaticImportAccess();
	}
	
	public ParserRule getQualifiedNameInStaticImportRule() {
		return getQualifiedNameInStaticImportAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "$" | "_") ("a".."z" | "A".."Z" | "$" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaXbase.getIDRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" . / * ('b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\') * / | !("\\" | "\""))* "\""? | "\'" ("\\" .
	//	/ * ('b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\') * / | !("\\" | "\'"))* "\'"?;
	public TerminalRule getSTRINGRule() {
		return gaXbase.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaXbase.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaXbase.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaXbase.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaXbase.getANY_OTHERRule();
	} 
}
