import tools.vitruv.dsls.response.tests.simpleChangesTests.SimpleChangesTestsExecutionMonitor
import static tools.vitruv.dsls.response.tests.simpleChangesTests.SimpleChangesTestsExecutionMonitor.ChangeType.*;

import "http://tools.vitruv.tests.metamodels.allElementTypes" as minimal

reactions: simpleChangesTests
in reaction to changes in minimal 
execute actions in minimal

/*
 * UpdateSingleValuedEAttribute
 */
reaction ReplacedSingleValuedEAttribute {
	after value replaced for minimal.Root[singleValuedEAttribute]
	call replaceSingleValuedEAttribute(change.affectedEObject, change.newValue)
}

routine replaceSingleValuedEAttribute(minimal.Root root, Int value) {
	match {
		// The check statements do only test that multiple check statements work
		check { ^root != null }
		val targetElement = retrieve minimal.Root corresponding to root
		check { ^value != null }
	}
	action {
		update targetElement {
			targetElement.singleValuedEAttribute = value;
		}
		call {
			SimpleChangesTestsExecutionMonitor.instance.set(UpdateSingleValuedEAttribute);
		}
	} 
}

/*
 * UpdateSingleValuedEAttribute
 */
reaction ReplacedNonRootId {
	after value replaced for minimal.NonRoot[id]
	call replaceNonRootId(change.affectedEObject, change.newValue)
}

routine replaceNonRootId(minimal.NonRoot nonRoot, String value) {
	match {
		val targetElement = retrieve minimal.NonRoot corresponding to nonRoot
	}
	action {
		update targetElement {
			targetElement.id = value;
		}
	}
}

///*
// * UnsetSingleValuedEAttribute
// */
//reaction UnsetSingleValuedEAttribute
//after delete value of minimal.Root[singleValuedEAttribute] 
//action { update root minimal.Root corresponding to {
//	tools.vitruv.dsls.response.tests.simpleChangesTests.SimpleChangesTestsUtils.findTypeInContainmentHierarchy(change.newAffectedEObject, allElementTypes.Root);
//} execute {
//	targetElement.singleValuedEAttribute = null;
//	tools.vitruv.dsls.response.tests.simpleChangesTests.SimpleChangesTestsExecutionMonitor.instance.set(
//		tools.vitruv.dsls.response.tests.simpleChangesTests.SimpleChangesTestsExecutionMonitor.ChangeType.
//		UnsetEAttribute);
//}

/*
 * CreateNonRootEObjectInList
 */
reaction CreatedNonRootEObjectInList {
	after list entry created and inserted in minimal.Root[multiValuedContainmentEReference]
	call insertNonRoot(change.affectedEObject, change.newValue)
}

routine insertNonRoot(minimal.Root root, minimal.NonRoot insertedNonRoot) {
	match {
		val targetElement = retrieve minimal.Root corresponding to root
	}
	action {
		val newNonRoot = create minimal.NonRoot and initialize {
			newNonRoot.id = insertedNonRoot.id
		}
		update targetElement {
			targetElement.multiValuedContainmentEReference += newNonRoot;
		}
		add correspondence between newNonRoot and insertedNonRoot 
		call {
			SimpleChangesTestsExecutionMonitor.instance.set(CreateNonRootEObjectInList);
		}
	}
}

/*
 * DeleteNonRootEObjectInList
 */
reaction DeletedNonRootEObjectInList {
	after list entry deleted and removed in minimal.Root[multiValuedContainmentEReference]
	call removeNonRoot(change.oldValue)
}

routine removeNonRoot(minimal.NonRoot removedNonRoot) {
	match {
		val targetElement = retrieve minimal.NonRoot corresponding to removedNonRoot
	}
	action {
		call {
			SimpleChangesTestsExecutionMonitor.instance.set(DeleteNonRootEObjectInList);
		}
		delete targetElement
	}
}

/*
 * ReplaceNonRootEObjectSingle
 */
reaction ReplacedNonRootEObjectSingleResponse {
	after value replaced for minimal.Root[singleValuedContainmentEReference]
	call {
		if (change.fromNonDefaultValue) {
			deleteNonRootEObjectSingle(change.oldValue);
		}
		if (change.toNonDefaultValue) {
			createNonRootEObjectSingle(change.affectedEObject, change.newValue);
		}
	} 
}

routine deleteNonRootEObjectSingle(minimal.NonRoot containedObject) {
	match {
		val targetElement = retrieve minimal.NonRoot corresponding to containedObject
	}
	action {
		delete targetElement
		call {
			SimpleChangesTestsExecutionMonitor.instance.set(DeleteNonRootEObjectSingle);
		}
	}
}

routine createNonRootEObjectSingle(minimal.Root sourceRoot, minimal.NonRoot containedObject) {
	match {
		val targetElement = retrieve minimal.Root corresponding to sourceRoot
	}
	action {
		val newNonRoot = create minimal.NonRoot and initialize {
			newNonRoot.id = containedObject.id
		}
		update targetElement {
			targetElement.singleValuedContainmentEReference = newNonRoot;
		}
		add correspondence between newNonRoot and containedObject
		call {
			SimpleChangesTestsExecutionMonitor.instance.set(CreateNonRootEObjectSingle);
		}
	}
}

/*
 * UpdateSingleValuedNonContainmentEReference
 */
reaction ReplacedSingleValuedNonContainmentEReference {
	after value replaced for minimal.Root[singleValuedNonContainmentEReference]
	call replaceSingleValuedNonContainmentReference(change.affectedEObject, change.newValue)
}

routine replaceSingleValuedNonContainmentReference(minimal.Root root, minimal.NonRoot newReferencedElement) {
	match {
		val targetContainer = retrieve minimal.Root corresponding to root
		val targetElement = retrieve minimal.NonRoot corresponding to newReferencedElement
	}
	action {
		update targetContainer {
			targetContainer.singleValuedNonContainmentEReference = targetElement;
		}
		call {
			SimpleChangesTestsExecutionMonitor.instance.set(UpdateSingleValuedNonContainmentEReference);
		}
	}
}

///*
// * UnsetNonContainmentEReference
// */
//reaction UnsetNonContainmentEReference
//after delete value minimal.Root[singleValuedNonContainmentEReference] 
//action { update root minimal.Root corresponding to {
//	tools.vitruv.dsls.response.tests.simpleChangesTests.SimpleChangesTestsUtils.findTypeInContainmentHierarchy(change.newAffectedEObject, allElementTypes.Root);
//} 
//execute {
//	targetElement.singleValuedNonContainmentEReference = null; 
//	tools.vitruv.dsls.response.tests.simpleChangesTests.SimpleChangesTestsExecutionMonitor.instance.set(
//		tools.vitruv.dsls.response.tests.simpleChangesTests.SimpleChangesTestsExecutionMonitor.ChangeType.
//		UnsetNonContainmentEReference);
//}

/*
 * InsertEAttributeValue
 */
reaction InsertedEAttributeValue {
	after list entry created and inserted in minimal.Root[multiValuedEAttribute] 
	call insertEAttribute(change.affectedEObject, change.newValue)
}

routine insertEAttribute(minimal.Root root, Int attributeValue) {
	match {
		val targetElement = retrieve minimal.Root corresponding to root
	}
	action {
		update targetElement {
			targetElement.multiValuedEAttribute.add(attributeValue);
		}
		call {
			SimpleChangesTestsExecutionMonitor.instance.set(InsertEAttributeValue);
		}
	}
}

/*
 * RemoveEAttributeValue
 */
reaction RemovedEAttributeValue {
	after list entry deleted and removed in minimal.Root[multiValuedEAttribute] 
	call removeEAttribute(change.affectedEObject, change.oldValue)
}

routine removeEAttribute(minimal.Root root, Int removedAttributeValue) {
	match {
		val targetElement = retrieve minimal.Root corresponding to root
	}
	action {
		update targetElement {
			val sourceValueList = root.multiValuedEAttribute;
			targetElement.multiValuedEAttribute.removeIf[!sourceValueList.contains(it.intValue)];
		}
		call {
			SimpleChangesTestsExecutionMonitor.instance.set(RemoveEAttributeValue);
		}
	}
}

/*
 * InsertNonContainmentEReference
 */
reaction InsertedNonContainmentEReference {
	after list entry created and inserted in minimal.Root[multiValuedNonContainmentEReference] 
	call insertNonContainmentReference(change.affectedEObject, change.newValue)
}

routine insertNonContainmentReference(minimal.Root root, minimal.NonRoot insertedNonRoot) {
	match {
		val targetElement = retrieve minimal.Root corresponding to root
	}
	action {
		update targetElement {
			val addedNonRoot = targetElement.nonRootObjectContainerHelper.nonRootObjectsContainment.findFirst[it.id == insertedNonRoot.id];
			targetElement.multiValuedNonContainmentEReference.add(addedNonRoot);
		}
		call {
			SimpleChangesTestsExecutionMonitor.instance.set(InsertNonContainmentEReference);
		}
	}
}


/*
 * RemoveNonContainmentEReference
 */
reaction RemoveedNonContainmentEReference {
	after list entry deleted and removed in minimal.Root[multiValuedNonContainmentEReference] 
	call removeNonContainmentReference(change.affectedEObject, change.oldValue)
}

routine removeNonContainmentReference(minimal.Root root, minimal.NonRoot removedNonRoot) {
	match {
		val targetRoot = retrieve minimal.Root corresponding to root
	}
	action {
		update targetRoot {
			targetRoot.multiValuedNonContainmentEReference.removeIf[it.id == removedNonRoot.id];
		}
		call {
			SimpleChangesTestsExecutionMonitor.instance.set(RemoveNonContainmentEReference);
		}
	}
}

///*
// * ReplaceNonContainmentEReference
// */
//reaction ReplaceNonContainmentEReference
//after element update of minimal.Root[multiValuedNonContainmentEReference] 
//action { update root minimal.Root corresponding to {
//	tools.vitruv.dsls.response.tests.simpleChangesTests.SimpleChangesTestsUtils.findTypeInContainmentHierarchy(change.newAffectedEObject, allElementTypes.Root);
//} 
//execute {
//	tools.vitruv.dsls.response.tests.simpleChangesTests.SimpleChangesTestsExecutionMonitor.instance.set(
//		tools.vitruv.dsls.response.tests.simpleChangesTests.SimpleChangesTestsExecutionMonitor.ChangeType.
//		ReplaceNonContainmentEReference);
//}

///*
// * PermuteNonContainmentEReference
// */
//reaction after element old change PermuteNonContainmentEReferenceValues of minimal.Root[multiValuedNonContainmentEReference] 
//action { update root minimal.Root corresponding to {
//	tools.vitruv.dsls.response.tests.simpleChangesTests.SimpleChangesTestsUtils.findTypeInContainmentHierarchy(change.newAffectedEObject, allElementTypes.Root);
//} execute {
//	tools.vitruv.dsls.response.tests.simpleChangesTests.SimpleChangesTestsExecutionMonitor.instance.set(
//		tools.vitruv.dsls.response.tests.simpleChangesTests.SimpleChangesTestsExecutionMonitor.ChangeType.
//		PermuteNonContainmentEReference);
//}


routine createRoot(minimal.Root root) {
	action {
		val newRoot = create minimal.Root and initialize {
			newRoot.id = root.id;
		}
		add correspondence between newRoot and root
		call {
			persistProjectRelative(root, newRoot, "model/" + root.id.replace("Source", "Target"));
		}
	}
}

routine deleteRoot(minimal.Root root) {
	match {
		val oldModel = retrieve minimal.Root corresponding to root
	}
	action {
		delete oldModel
	}
}

/*
 * Creates the model for comparing the further test model with.
 */
reaction CreateRootTest {
	after root created and inserted minimal.Root
	call createRoot(change.newValue)
}

reaction DeleteRootTest {
	after root deleted and removed minimal.Root
	call deleteRoot(change.oldValue)
}

/**
 * Initializes the nonRootObjectContainer for second model
 */
reaction HelperResponseForNonRootObjectContainerInitialization {
	after value replaced for minimal.Root[nonRootObjectContainerHelper]
		with change.isToNonDefaultValue
	call createNonRootObjectContainer(change.affectedEObject, change.newValue)
}

routine createNonRootObjectContainer(minimal.Root root, minimal.NonRootObjectContainerHelper nonRootObjectContainer) {
	match {
		val targetElement = retrieve minimal.Root corresponding to root
	}
	action {
		val newNonRootContainer = create minimal.NonRootObjectContainerHelper and initialize {
			newNonRootContainer.id = nonRootObjectContainer.id;
		}
		update targetElement {
			targetElement.nonRootObjectContainerHelper = newNonRootContainer;
		}
		add correspondence between newNonRootContainer and nonRootObjectContainer
	}
}

/**
 * Initializes the nonRootObjectContainer for second model
 */
reaction HelperResponseForNonRootObjectContainerContentsInitialization {
	after list entry created and inserted in minimal.NonRootObjectContainerHelper[nonRootObjectsContainment]
	call createNonRootInContainer(change.affectedEObject, change.newValue)
}

routine createNonRootInContainer(minimal.NonRootObjectContainerHelper container, minimal.NonRoot insertedNonRoot) {
	match {
		val nonRootContainer = retrieve minimal.NonRootObjectContainerHelper corresponding to container
	}
	action {
		val newNonRoot = create minimal.NonRoot and initialize {
			newNonRoot.id = insertedNonRoot.id;
		}
		update nonRootContainer {
			nonRootContainer.nonRootObjectsContainment += newNonRoot;	
		}
		add correspondence between newNonRoot and insertedNonRoot
	}
}
