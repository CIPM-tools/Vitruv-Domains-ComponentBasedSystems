grammar tools.vitruv.dsls.response.ResponseLanguage with tools.vitruv.dsls.mirbase.MirBase
hidden(WS, SL_COMMENT)

generate responseLanguage "http://www.kit.edu/ipd/sdq/vitruvius/dsls/response/ResponseLanguage"

import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "http://www.kit.edu/ipd/sdq/vitruvius/dsls/mirbase/MirBase" as mirbase


ResponseFile:
	(namespaceImports=XImportSection)?
	MirBaseFile
	(responsesSegments+=ResponsesSegment)+;
	
ResponsesSegment:
	'reactions:' name=ValidID
	'in reaction to changes in' fromMetamodel=MetamodelReference 
	'execute actions in' toMetamodel=MetamodelReference
	(responses+=Response |
		routines+=Routine)*;

// *********************************
// *********** RESPONSES ***********
// *********************************

Response:
	(documentation=ML_COMMENT)?
	'reaction' (name=ValidID)? '{'
		trigger=Trigger
		callRoutine=ResponseReactionRoutineCall
	'}';
	
ResponseReactionRoutineCall:
	{ResponseReactionRoutineCall}
	RoutineCallBlock;

// *********** TRIGGER ***********

InvariantViolationEvent:
	'invariant' violation=[ecore::EClass|QualifiedName];

Trigger:
	// TODO HK Extend this by "before" executing the transformation before applying the change
	'after' (ModelChange | InvariantViolationEvent)
	('with' precondition=PreconditionCodeBlock)?;

ModelChange:
	ConcreteModelElementChange | ArbitraryModelElementChange;

ConcreteModelElementChange returns ConcreteModelElementChange:
	AtomicConcreteModelElementChange;

AtomicConcreteModelElementChange:
	AtomicRootObjectChange | AtomicFeatureChange;

AtomicRootObjectChange:
	('root created and inserted' {InsertRootChange} |
	'root deleted and removed' {RemoveRootChange})
//	TODO add new change types for root insertions or removals without creation or deletion similar to the following and rename above:
//	'root inserted' {InsertRootChange} |
//	'root removed' {RemoveRootChange})
	changedElement=ModelElement;

AtomicFeatureChange:
	(AtomicMultiValuedFeatureChange | AtomicSingleValuedFeatureChange)
	changedFeature=FeatureOfElement;

AtomicMultiValuedFeatureChange returns AtomicMultiValuedFeatureChange:
	'list entry created and inserted in' {MultiValuedFeatureInsertChange} |
	'list entry deleted and removed in' {MultiValuedFeatureRemoveChange} |
// TODO add change types for cases in which an entry was inserted without a creation or an entry was deleted without a removal
// TODO also add new change types only for creation or deletion of elements and roots similar to the comments above (next to root rules) and the following:
// 	'element' changedElement=ModelElement 'created' {ElementCreatedChange} |
// 	'element' changedElement=ModelElement 'deleted' {ElementDeletedChange} |
	'list permuted' {MultiValuedFeaturePermuteChange};

AtomicSingleValuedFeatureChange returns AtomicSingleValuedFeatureChange:
	//'create value' {SingleValuedFeatureCreate} | 'delete value' {SingleValuedFeatureDelete} | 
	'value replaced for' {SingleValuedFeatureReplace};

ArbitraryModelElementChange:
	{ArbitraryModelElementChange} 'any change';



// ***************************************
// *********** REPAIR ROUTINES ***********
// ***************************************

Routine:
	'routine' name=ValidID '(' input=RoutineInput ')' '{'
		matcher=Matcher?
		effect=Effect
		(return=ReturnStatement)?
	'}';

RoutineInput:
	{RoutineInput}
	 ((modelInputElements+=ClassicallyNamedModelElement | "plain" javaInputElements+=NamedJavaElement)
		(',' (modelInputElements+=ClassicallyNamedModelElement | "plain" javaInputElements+=NamedJavaElement))*)?;

// *********** MATCHER ***********

Matcher:
	{Matcher}
	'match' '{'
		(matcherStatements+=MatcherStatement)+
	'}';

MatcherStatement:
	RetrieveModelElementStatement | MatcherCheckStatement;

RetrieveModelElementStatement:
	{RetrieveModelElementStatement}
	// TODO remove uses of required property or set it to something like required?=!optional
	(('val' name=ValidID '= retrieve' optional?='optional') | abscence?='require absence of') 
	element=ModelElement 'corresponding to' correspondenceSource=CorrespondingObjectCodeBlock
	('tagged with' Taggable)? ('with' precondition=PreconditionCodeBlock)?;

MatcherCheckStatement:
	{MatcherCheckStatement}
	'check' CodeBlock;

// *********** EFFECTS ***********

Effect:
	{Effect}
	'action' '{'
		(effectStatements+=EffectStatement)+
	'}';

RoutineCallStatement returns RoutineCallStatement:
	{RoutineCallStatement}
	RoutineCallBlock;

EffectStatement:
	CreateElement | DeleteElement | UpdateElement | CreateCorrespondence | RemoveCorrespondence | ExecuteActionBlock | RoutineCallStatement;
	
CreateElement returns EffectStatement:
	{CreateElement}
	'val' name=ValidID '= create' element=ModelElement ("and initialize" initializationBlock=ExecutionCodeBlock)?;
	
DeleteElement returns EffectStatement:
	{DeleteElement}
	"delete" element=ExistingElementReference;

UpdateElement returns EffectStatement:
	{UpdateElement}
	"update" element=ExistingElementReference updateBlock=ExecutionCodeBlock;


CreateCorrespondence returns EffectStatement:
	{CreateCorrespondence}
	"add correspondence between" firstElement=ExistingElementReference "and" secondElement=ExistingElementReference
	('tag with' Taggable)?;
	
RemoveCorrespondence returns EffectStatement:
	{RemoveCorrespondence}
	"remove correspondence between" firstElement=ExistingElementReference "and" secondElement=ExistingElementReference;


// ****** CODE BLOCKS ******

fragment CodeBlock:
	code=XExpression;
	
fragment ExecuteActionBlock:
	'execute' CodeBlock;

fragment RoutineCallBlock:
// TODO move the variable declaration and assignment for routine returns inside the code block not before it!
	('val' name=ValidID '=')? 'call' CodeBlock;

fragment Taggable:
	tag=TagCodeBlock;

ExistingElementReference:
	CodeBlock;

TagCodeBlock returns TagCodeBlock:
	{TagCodeBlock}
	CodeBlock;

PreconditionCodeBlock returns PreconditionCodeBlock:
	{PreconditionCodeBlock}
	CodeBlock;

CorrespondingObjectCodeBlock returns CorrespondingObjectCodeBlock:
	{CorrespondingObjectCodeBlock}
	CodeBlock;

ExecutionCodeBlock returns ExecutionCodeBlock:
	{ExecutionCodeBlock}
	CodeBlock;
	
ReturnStatement returns ReturnStatement:
	{ReturnStatement}
	'return' element=ExistingElementReference;
