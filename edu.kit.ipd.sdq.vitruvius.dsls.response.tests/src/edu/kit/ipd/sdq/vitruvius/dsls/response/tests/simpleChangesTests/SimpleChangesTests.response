import edu.kit.ipd.sdq.vitruvius.dsls.response.tests.simpleChangesTests.SimpleChangesTestsExecutionMonitor
import static edu.kit.ipd.sdq.vitruvius.dsls.response.tests.simpleChangesTests.SimpleChangesTestsExecutionMonitor.ChangeType.*;

import "http://edu.kit.ipd.sdq.vitruvius.tests.metamodels.allElementTypes" as minimal

/*
 * UpdateSingleValuedEAttribute
 */
response: UpdateSingleValuedEAttribute
trigger: replace value minimal.Root[singleValuedEAttribute]
retrieve model element: targetElement of type minimal.Root corresponding to change.newAffectedEObject
execute: {
	targetElement.singleValuedEAttribute = change.newValue;
	SimpleChangesTestsExecutionMonitor.instance.set(UpdateSingleValuedEAttribute);
}


///*
// * UnsetSingleValuedEAttribute
// */
//response: UnsetSingleValuedEAttribute
//trigger: delete value of minimal.Root[singleValuedEAttribute] 
//effect: update root minimal.Root corresponding to {
//	edu.kit.ipd.sdq.vitruvius.dsls.response.tests.simpleChangesTests.SimpleChangesTestsUtils.findTypeInContainmentHierarchy(change.newAffectedEObject, allElementTypes.Root);
//} execute: {
//	targetElement.singleValuedEAttribute = null;
//	edu.kit.ipd.sdq.vitruvius.dsls.response.tests.simpleChangesTests.SimpleChangesTestsExecutionMonitor.instance.set(
//		edu.kit.ipd.sdq.vitruvius.dsls.response.tests.simpleChangesTests.SimpleChangesTestsExecutionMonitor.ChangeType.
//		UnsetEAttribute);
//}

/*
 * CreateNonRootEObjectInList
 */
response: CreateNonRootEObjectInList
trigger: insert in list minimal.Root[multiValuedContainmentEReference]
retrieve model element: targetElement of type minimal.Root corresponding to change.newAffectedEObject
create model element: newNonRoot of type minimal.NonRoot corresponding to change.newValue
execute: {
	newNonRoot.id = change.newValue.id
	targetElement.multiValuedContainmentEReference += newNonRoot;
	SimpleChangesTestsExecutionMonitor.instance.set(CreateNonRootEObjectInList);
}

/*
 * DeleteNonRootEObjectInList
 */
response: DeleteNonRootEObjectInList
trigger: remove from list minimal.Root[multiValuedContainmentEReference]
delete model element: targetElement of type minimal.NonRoot corresponding to change.oldValue
//delete model element: targetElement2 of type minimal.NonRoot corresponding to change.oldValue  
execute: {
	// It works, even if we remove element in the execute block and via effect as well
	org.eclipse.emf.ecore.util.EcoreUtil.remove(targetElement);
	SimpleChangesTestsExecutionMonitor.instance.set(DeleteNonRootEObjectInList);
}

/*
 * CreateNonRootEObjectSingle
 */
response: CreateNonRootEObjectSingleResponse
trigger: create value minimal.Root[singleValuedContainmentEReference] 
retrieve model element: targetElement of type minimal.Root corresponding to change.newAffectedEObject
create model element: newNonRoot of type minimal.NonRoot corresponding to change.newValue
execute: {
	newNonRoot.id = change.newValue.id;
	targetElement.singleValuedContainmentEReference = newNonRoot;
	SimpleChangesTestsExecutionMonitor.instance.set(CreateNonRootEObjectSingle);
}

/*
 * DeleteNonRootEObjectSingle
 */
response: DeleteNonRootEObjectSingleResponse
trigger: delete value minimal.Root[singleValuedContainmentEReference] 
retrieve model element: targetElement of type minimal.Root corresponding to change.newAffectedEObject
execute: {
	targetElement.singleValuedContainmentEReference = null;
	SimpleChangesTestsExecutionMonitor.instance.set(DeleteNonRootEObjectSingle);
}

/*
 * UpdateSingleValuedNonContainmentEReference
 */
response: UpdateSingleValuedNonContainmentEReference
trigger: replace value minimal.Root[singleValuedNonContainmentEReference] 
retrieve model element: targetContainer of type minimal.Root corresponding to change.newAffectedEObject
retrieve model element: targetElement of type minimal.NonRoot corresponding to change.newValue
execute: {
	targetContainer.singleValuedNonContainmentEReference = targetElement;    
	SimpleChangesTestsExecutionMonitor.instance.set(UpdateSingleValuedNonContainmentEReference);
}

///*
// * UnsetNonContainmentEReference
// */
//response: UnsetNonContainmentEReference
//trigger: delete value minimal.Root[singleValuedNonContainmentEReference] 
//effect: update root minimal.Root corresponding to {
//	edu.kit.ipd.sdq.vitruvius.dsls.response.tests.simpleChangesTests.SimpleChangesTestsUtils.findTypeInContainmentHierarchy(change.newAffectedEObject, allElementTypes.Root);
//} 
//execute: {
//	targetElement.singleValuedNonContainmentEReference = null; 
//	edu.kit.ipd.sdq.vitruvius.dsls.response.tests.simpleChangesTests.SimpleChangesTestsExecutionMonitor.instance.set(
//		edu.kit.ipd.sdq.vitruvius.dsls.response.tests.simpleChangesTests.SimpleChangesTestsExecutionMonitor.ChangeType.
//		UnsetNonContainmentEReference);
//}

/*
 * InsertEAttributeValue
 */
response: InsertEAttributeValue
trigger: insert in list minimal.Root[multiValuedEAttribute] 
retrieve model element: targetElement of type minimal.Root corresponding to change.newAffectedEObject
execute: {
	targetElement.multiValuedEAttribute.add(change.newValue);    
	SimpleChangesTestsExecutionMonitor.instance.set(InsertEAttributeValue);
}

/*
 * RemoveEAttributeValue
 */
response: RemoveEAttributeValue
trigger: remove from list minimal.Root[multiValuedEAttribute] 
retrieve model element: targetElement of type minimal.Root corresponding to change.newAffectedEObject
execute: {
	val sourceValueList = (change.newAffectedEObject as allElementTypes.Root).multiValuedEAttribute;
	targetElement.multiValuedEAttribute.removeIf[!sourceValueList.contains(it.intValue)];
	SimpleChangesTestsExecutionMonitor.instance.set(RemoveEAttributeValue);
}

/*
 * InsertNonContainmentEReference
 */
response: InsertNonContainmentEReference
trigger: insert in list minimal.Root[multiValuedNonContainmentEReference] 
retrieve model element: targetElement of type minimal.Root corresponding to change.newAffectedEObject
execute: {
	val addedNonRoot = targetElement.nonRootObjectContainerHelper.nonRootObjectsContainment.findFirst[it.id == change.newValue.id];
	targetElement.multiValuedNonContainmentEReference.add(addedNonRoot);    
	SimpleChangesTestsExecutionMonitor.instance.set(InsertNonContainmentEReference);
}

/*
 * RemoveNonContainmentEReference
 */
response: RemoveNonContainmentEReference
trigger: remove from list minimal.Root[multiValuedNonContainmentEReference] 
retrieve model element: targetRoot of type minimal.Root corresponding to change.newAffectedEObject
execute: {
	targetRoot.multiValuedNonContainmentEReference.removeIf[it.id == change.oldValue.id];
	SimpleChangesTestsExecutionMonitor.instance.set(RemoveNonContainmentEReference);
}

///*
// * ReplaceNonContainmentEReference
// */
//response: ReplaceNonContainmentEReference
//trigger: element update of minimal.Root[multiValuedNonContainmentEReference] 
//effect: update root minimal.Root corresponding to {
//	edu.kit.ipd.sdq.vitruvius.dsls.response.tests.simpleChangesTests.SimpleChangesTestsUtils.findTypeInContainmentHierarchy(change.newAffectedEObject, allElementTypes.Root);
//} 
//execute: {
//	edu.kit.ipd.sdq.vitruvius.dsls.response.tests.simpleChangesTests.SimpleChangesTestsExecutionMonitor.instance.set(
//		edu.kit.ipd.sdq.vitruvius.dsls.response.tests.simpleChangesTests.SimpleChangesTestsExecutionMonitor.ChangeType.
//		ReplaceNonContainmentEReference);
//}

///*
// * PermuteNonContainmentEReference
// */
//response: trigger: element old change PermuteNonContainmentEReferenceValues of minimal.Root[multiValuedNonContainmentEReference] 
//effect: update root minimal.Root corresponding to {
//	edu.kit.ipd.sdq.vitruvius.dsls.response.tests.simpleChangesTests.SimpleChangesTestsUtils.findTypeInContainmentHierarchy(change.newAffectedEObject, allElementTypes.Root);
//} execute: {
//	edu.kit.ipd.sdq.vitruvius.dsls.response.tests.simpleChangesTests.SimpleChangesTestsExecutionMonitor.instance.set(
//		edu.kit.ipd.sdq.vitruvius.dsls.response.tests.simpleChangesTests.SimpleChangesTestsExecutionMonitor.ChangeType.
//		PermuteNonContainmentEReference);
//}


/*
 * Creates the model for comparing the "TestModelSource", created in each test, with.
 */
response: HelperResponseForCreateSecondTestModel
trigger: insert root minimal.Root
precondition: change.newValue.id == "EachTestModelSource"
create root element: newRoot of type minimal.Root	corresponding to change.newValue
persist at project-relative location: "model/EachTestModelTarget"
execute: {
	newRoot.id = change.newValue.id
}

response: HelperResponseForDeleteSecondTestModel
trigger: remove root minimal.Root
precondition: change.oldValue.id == "EachTestModelSource"
delete model element: oldModel of type minimal.Root corresponding to change.oldValue

/*
 * Creates the model for comparing the further test model with.
 */
response: CreateRootTest
trigger: insert root minimal.Root
precondition: change.newValue.id == "Further_Source_Test_Model"
create root element: newRoot of type minimal.Root corresponding to change.newValue
persist at changed model relative location: "Further_Target_Test_Model"
execute: {
	newRoot.id = change.newValue.id
}
		
//effect: create root minimal.Root at "Further_Target_Test_Model" auto-delete corresponding to change.newValue

response: DeleteRootTest
trigger: remove root minimal.Root
precondition: change.oldValue.id == "Further_Source_Test_Model"
delete model element: oldModel of type minimal.Root corresponding to change.oldValue


response: DuplicateRootDelete
trigger: remove root minimal.Root
delete model element: oldModel of type minimal.Root corresponding to change.oldValue


/**
 * Initializes the nonRootObjectContainer for second model
 */
response: HelperResponseForNonRootObjectContainerInitialization
trigger: create value minimal.Root[nonRootObjectContainerHelper]
precondition: {
	change.newValue != null
}
retrieve model element: targetElement of type minimal.Root corresponding to change.newAffectedEObject
create model element: newNonRootContainer of type minimal.NonRootObjectContainerHelper corresponding to change.newValue
execute: {
	newNonRootContainer.id = change.newValue.id;
	targetElement.nonRootObjectContainerHelper = newNonRootContainer;
}

/**
 * Initializes the nonRootObjectContainer for second model
 */
response: HelperResponseForNonRootObjectContainerContentsInitialization
trigger: insert in list minimal.NonRootObjectContainerHelper[nonRootObjectsContainment]
retrieve model element: nonRootContainer of type minimal.NonRootObjectContainerHelper corresponding to change.newAffectedEObject
create model element: newNonRoot of type minimal.NonRoot corresponding to change.newValue
execute: {
	newNonRoot.id = change.newValue.id;
	nonRootContainer.nonRootObjectsContainment += newNonRoot;
}