import "http://edu.kit.ipd.sdq.vitruvius.tests.metamodels.allElementTypes" as minimal

response: DummyForCodeExecutionOnAnyEvent
trigger: model change in minimal
effect: update any minimal
execute: {
	println(change);
}

/*
 * UpdateSingleValuedEAttribute
 */
response: UpdateSingleValuedEAttribute
trigger: element update of minimal.Root[singleValuedEAttribute] 
effect: update root minimal.Root corresponding to {
	edu.kit.ipd.sdq.vitruvius.dsls.response.tests.simpleChangesTests.SimpleChangesTestsUtils.findTypeInContainmentHierarchy(change.newAffectedEObject, allElementTypes.Root);
}
execute: {
	if (change.newValue == null) {
		targetModel.singleValuedEAttribute = null;
	} else {
		targetModel.singleValuedEAttribute = change.newValue.intValue;
	}
	edu.kit.ipd.sdq.vitruvius.dsls.response.tests.simpleChangesTests.SimpleChangesTestsExecutionMonitor.instance.set(
		edu.kit.ipd.sdq.vitruvius.dsls.response.tests.simpleChangesTests.SimpleChangesTestsExecutionMonitor.ChangeType.
		UpdateSingleValuedEAttribute);
}


/*
 * UnsetSingleValuedEAttribute
 */
response: UnsetSingleValuedEAttribute
trigger: element delete of minimal.Root[singleValuedEAttribute] 
effect: update root minimal.Root corresponding to {
	edu.kit.ipd.sdq.vitruvius.dsls.response.tests.simpleChangesTests.SimpleChangesTestsUtils.findTypeInContainmentHierarchy(change.newAffectedEObject, allElementTypes.Root);
} execute: {
	targetModel.singleValuedEAttribute = null;
	edu.kit.ipd.sdq.vitruvius.dsls.response.tests.simpleChangesTests.SimpleChangesTestsExecutionMonitor.instance.set(
		edu.kit.ipd.sdq.vitruvius.dsls.response.tests.simpleChangesTests.SimpleChangesTestsExecutionMonitor.ChangeType.
		UnsetEAttribute);
}

/*
 * Creates the model for comparing the currently created one with.
 */
response: CreateCompareModel
trigger: element create of minimal.Root
effect: create root minimal.Root as "TestModel2"


response: CreateRootTest
trigger: element create of minimal.Root
precondition: { change.newValue.id == "CreateRootTestModelRoot" }
effect: create root minimal.Root as "ResponseToCreateRootModelRoot"

/*
 * CreateNonRootEObjectInList
 */
response: CreateNonRootEObjectInList
trigger: element create of minimal.Root[multiValuedContainmentEReference] 
effect: update root minimal.Root corresponding to {
	edu.kit.ipd.sdq.vitruvius.dsls.response.tests.simpleChangesTests.SimpleChangesTestsUtils.findTypeInContainmentHierarchy(change.newAffectedEObject, allElementTypes.Root);
} 
execute: {
	val newElement = allElementTypes.impl.AllElementTypesFactoryImpl.eINSTANCE.createNonRoot();
	newElement.id = change.newValue.id;
	targetModel.multiValuedContainmentEReference += newElement;
	edu.kit.ipd.sdq.vitruvius.dsls.response.tests.simpleChangesTests.SimpleChangesTestsExecutionMonitor.instance.set(
		edu.kit.ipd.sdq.vitruvius.dsls.response.tests.simpleChangesTests.SimpleChangesTestsExecutionMonitor.ChangeType.
		CreateNonRootEObjectInList);
}

/*
 * DeleteNonRootEObjectInList
 */
response: DeleteNonRootEObjectInList
trigger: element delete of minimal.Root[multiValuedContainmentEReference] 
effect: update root minimal.Root corresponding to {
	edu.kit.ipd.sdq.vitruvius.dsls.response.tests.simpleChangesTests.SimpleChangesTestsUtils.findTypeInContainmentHierarchy(change.newAffectedEObject, allElementTypes.Root);
} execute: {
	targetModel.multiValuedContainmentEReference.removeIf[it.id == change.oldValue.id];
	edu.kit.ipd.sdq.vitruvius.dsls.response.tests.simpleChangesTests.SimpleChangesTestsExecutionMonitor.instance.set(
		edu.kit.ipd.sdq.vitruvius.dsls.response.tests.simpleChangesTests.SimpleChangesTestsExecutionMonitor.ChangeType.
		DeleteNonRootEObjectInList);
}

/*
 * CreateNonRootEObjectSingle
 */
response: CreateNonRootEObjectSingle
trigger: element create of minimal.Root[singleValuedContainmentEReference] 
effect: update root minimal.Root corresponding to {
	edu.kit.ipd.sdq.vitruvius.dsls.response.tests.simpleChangesTests.SimpleChangesTestsUtils.findTypeInContainmentHierarchy(change.newAffectedEObject, allElementTypes.Root);
} execute: {
	val newElement = allElementTypes.impl.AllElementTypesFactoryImpl.eINSTANCE.createNonRoot();
	newElement.id = change.newValue.id;
	targetModel.singleValuedContainmentEReference = newElement;
	edu.kit.ipd.sdq.vitruvius.dsls.response.tests.simpleChangesTests.SimpleChangesTestsExecutionMonitor.instance.set(
		edu.kit.ipd.sdq.vitruvius.dsls.response.tests.simpleChangesTests.SimpleChangesTestsExecutionMonitor.ChangeType.
		CreateNonRootEObjectSingle);
}

/*
 * DeleteNonRootEObjectSingle
 */
response: DeleteNonRootEObjectSingle
trigger: element delete of minimal.Root[singleValuedContainmentEReference] 
effect: update root minimal.Root corresponding to {
	edu.kit.ipd.sdq.vitruvius.dsls.response.tests.simpleChangesTests.SimpleChangesTestsUtils.findTypeInContainmentHierarchy(change.newAffectedEObject, allElementTypes.Root);
} execute: {
	targetModel.singleValuedContainmentEReference = null;
	edu.kit.ipd.sdq.vitruvius.dsls.response.tests.simpleChangesTests.SimpleChangesTestsExecutionMonitor.instance.set(
		edu.kit.ipd.sdq.vitruvius.dsls.response.tests.simpleChangesTests.SimpleChangesTestsExecutionMonitor.ChangeType.
		DeleteNonRootEObjectSingle);
}

/*
 * UpdateSingleValuedNonContainmentEReference
 */
response: UpdateSingleValuedNonContainmentEReference
trigger: element create of minimal.Root[singleValuedNonContainmentEReference] 
effect: update root minimal.Root corresponding to {
	edu.kit.ipd.sdq.vitruvius.dsls.response.tests.simpleChangesTests.SimpleChangesTestsUtils.findTypeInContainmentHierarchy(change.newAffectedEObject, allElementTypes.Root);
} 
execute: {
	val addedNonRoot = targetModel.nonRootObjectContainerHelper.nonRootObjectsContainment.findFirst[it.id == change.newValue.id];
	targetModel.singleValuedNonContainmentEReference = addedNonRoot;    
	edu.kit.ipd.sdq.vitruvius.dsls.response.tests.simpleChangesTests.SimpleChangesTestsExecutionMonitor.instance.set(
		edu.kit.ipd.sdq.vitruvius.dsls.response.tests.simpleChangesTests.SimpleChangesTestsExecutionMonitor.ChangeType.
		UpdateSingleValuedNonContainmentEReference);
}

/*
 * UnsetNonContainmentEReference
 */
response: UnsetNonContainmentEReference
trigger: element delete of minimal.Root[singleValuedNonContainmentEReference] 
effect: update root minimal.Root corresponding to {
	edu.kit.ipd.sdq.vitruvius.dsls.response.tests.simpleChangesTests.SimpleChangesTestsUtils.findTypeInContainmentHierarchy(change.newAffectedEObject, allElementTypes.Root);
} 
execute: {
	targetModel.singleValuedNonContainmentEReference = null; 
	edu.kit.ipd.sdq.vitruvius.dsls.response.tests.simpleChangesTests.SimpleChangesTestsExecutionMonitor.instance.set(
		edu.kit.ipd.sdq.vitruvius.dsls.response.tests.simpleChangesTests.SimpleChangesTestsExecutionMonitor.ChangeType.
		UnsetNonContainmentEReference);
}

/*
 * InsertEAttributeValue
 */
response: InsertEAttributeValue
trigger: element create of minimal.Root[multiValuedEAttribute] 
effect: update root minimal.Root corresponding to {
	edu.kit.ipd.sdq.vitruvius.dsls.response.tests.simpleChangesTests.SimpleChangesTestsUtils.findTypeInContainmentHierarchy(change.newAffectedEObject, allElementTypes.Root);
} 
execute: {
	targetModel.multiValuedEAttribute.add(change.newValue);    
	edu.kit.ipd.sdq.vitruvius.dsls.response.tests.simpleChangesTests.SimpleChangesTestsExecutionMonitor.instance.set(
		edu.kit.ipd.sdq.vitruvius.dsls.response.tests.simpleChangesTests.SimpleChangesTestsExecutionMonitor.ChangeType.
		InsertEAttributeValue);
}

/*
 * RemoveEAttributeValue
 */
response: RemoveEAttributeValue
trigger: element delete of minimal.Root[multiValuedEAttribute] 
effect: update root minimal.Root corresponding to {
	edu.kit.ipd.sdq.vitruvius.dsls.response.tests.simpleChangesTests.SimpleChangesTestsUtils.findTypeInContainmentHierarchy(change.newAffectedEObject, allElementTypes.Root);
} 
execute: {
	val sourceValueList = (change.newAffectedEObject as allElementTypes.Root).multiValuedEAttribute;
	targetModel.multiValuedEAttribute.removeIf[!sourceValueList.contains(it.intValue)];
	edu.kit.ipd.sdq.vitruvius.dsls.response.tests.simpleChangesTests.SimpleChangesTestsExecutionMonitor.instance.set(
		edu.kit.ipd.sdq.vitruvius.dsls.response.tests.simpleChangesTests.SimpleChangesTestsExecutionMonitor.ChangeType.
		RemoveEAttributeValue);
}

/*
 * InsertNonContainmentEReference
 */
response: InsertNonContainmentEReference
trigger: element create of minimal.Root[multiValuedNonContainmentEReference] 
effect: update root minimal.Root corresponding to {
	edu.kit.ipd.sdq.vitruvius.dsls.response.tests.simpleChangesTests.SimpleChangesTestsUtils.findTypeInContainmentHierarchy(change.newAffectedEObject, allElementTypes.Root);
} 
execute: {
	val addedNonRoot = targetModel.nonRootObjectContainerHelper.nonRootObjectsContainment.findFirst[it.id == change.newValue.id];
	targetModel.multiValuedNonContainmentEReference.add(addedNonRoot);    
	edu.kit.ipd.sdq.vitruvius.dsls.response.tests.simpleChangesTests.SimpleChangesTestsExecutionMonitor.instance.set(
		edu.kit.ipd.sdq.vitruvius.dsls.response.tests.simpleChangesTests.SimpleChangesTestsExecutionMonitor.ChangeType.
		InsertNonContainmentEReference);
}

/*
 * RemoveNonContainmentEReference
 */
response: RemoveNonContainmentEReference
trigger: element delete of minimal.Root[multiValuedNonContainmentEReference] 
effect: update root minimal.Root corresponding to {
	edu.kit.ipd.sdq.vitruvius.dsls.response.tests.simpleChangesTests.SimpleChangesTestsUtils.findTypeInContainmentHierarchy(change.newAffectedEObject, allElementTypes.Root);
} 
execute: {
	targetModel.multiValuedNonContainmentEReference.removeIf[it.id == change.oldValue.id];
	edu.kit.ipd.sdq.vitruvius.dsls.response.tests.simpleChangesTests.SimpleChangesTestsExecutionMonitor.instance.set(
		edu.kit.ipd.sdq.vitruvius.dsls.response.tests.simpleChangesTests.SimpleChangesTestsExecutionMonitor.ChangeType.
		RemoveNonContainmentEReference);
}

/*
 * ReplaceNonContainmentEReference
 */
response: ReplaceNonContainmentEReference
trigger: element update of minimal.Root[multiValuedNonContainmentEReference] 
effect: update root minimal.Root corresponding to {
	edu.kit.ipd.sdq.vitruvius.dsls.response.tests.simpleChangesTests.SimpleChangesTestsUtils.findTypeInContainmentHierarchy(change.newAffectedEObject, allElementTypes.Root);
} 
execute: {
	edu.kit.ipd.sdq.vitruvius.dsls.response.tests.simpleChangesTests.SimpleChangesTestsExecutionMonitor.instance.set(
		edu.kit.ipd.sdq.vitruvius.dsls.response.tests.simpleChangesTests.SimpleChangesTestsExecutionMonitor.ChangeType.
		ReplaceNonContainmentEReference);
}

///*
// * PermuteNonContainmentEReference
// */
//response: trigger: element old change PermuteNonContainmentEReferenceValues of minimal.Root[multiValuedNonContainmentEReference] 
//effect: update root minimal.Root corresponding to {
//	edu.kit.ipd.sdq.vitruvius.dsls.response.tests.simpleChangesTests.SimpleChangesTestsUtils.findTypeInContainmentHierarchy(change.newAffectedEObject, allElementTypes.Root);
//} execute: {
//	edu.kit.ipd.sdq.vitruvius.dsls.response.tests.simpleChangesTests.SimpleChangesTestsExecutionMonitor.instance.set(
//		edu.kit.ipd.sdq.vitruvius.dsls.response.tests.simpleChangesTests.SimpleChangesTestsExecutionMonitor.ChangeType.
//		PermuteNonContainmentEReference);
//}
