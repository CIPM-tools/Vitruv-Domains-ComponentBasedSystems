import "http://edu.kit.ipd.sdq.vitruvius.tests.metamodels.allElementTypes" as minimal
//response: DummyForCodeExecutionOnAnyEvent
//trigger: model change in minimal
//effect: update any minimal
//execute: {
//	println(change);
//}


/*
 * UpdateSingleValuedEAttribute
 */
response: UpdateSingleValuedEAttribute
trigger: replace value minimal.Root[singleValuedEAttribute] 
update model: targetElement
	corresponding to: {
		edu.kit.ipd.sdq.vitruvius.dsls.response.tests.simpleChangesTests.SimpleChangesTestsUtils.findTypeInContainmentHierarchy(change.newAffectedEObject, allElementTypes.Root);
	}
	type: minimal.Root
execute: {
	if (change.newValue == null) {
		targetElement.singleValuedEAttribute = null;
	} else {
		targetElement.singleValuedEAttribute = change.newValue.intValue;
	}
	edu.kit.ipd.sdq.vitruvius.dsls.response.tests.simpleChangesTests.SimpleChangesTestsExecutionMonitor.instance.set(
		edu.kit.ipd.sdq.vitruvius.dsls.response.tests.simpleChangesTests.SimpleChangesTestsExecutionMonitor.ChangeType.
		UpdateSingleValuedEAttribute);
}


///*
// * UnsetSingleValuedEAttribute
// */
//response: UnsetSingleValuedEAttribute
//trigger: delete value of minimal.Root[singleValuedEAttribute] 
//effect: update root minimal.Root corresponding to {
//	edu.kit.ipd.sdq.vitruvius.dsls.response.tests.simpleChangesTests.SimpleChangesTestsUtils.findTypeInContainmentHierarchy(change.newAffectedEObject, allElementTypes.Root);
//} execute: {
//	targetElement.singleValuedEAttribute = null;
//	edu.kit.ipd.sdq.vitruvius.dsls.response.tests.simpleChangesTests.SimpleChangesTestsExecutionMonitor.instance.set(
//		edu.kit.ipd.sdq.vitruvius.dsls.response.tests.simpleChangesTests.SimpleChangesTestsExecutionMonitor.ChangeType.
//		UnsetEAttribute);
//}

/*
 * CreateNonRootEObjectInList
 */
response: CreateNonRootEObjectInList
trigger: insert in list minimal.Root[multiValuedContainmentEReference] 
update model: targetElement
	corresponding to: {
		edu.kit.ipd.sdq.vitruvius.dsls.response.tests.simpleChangesTests.SimpleChangesTestsUtils.findTypeInContainmentHierarchy(change.newAffectedEObject, allElementTypes.Root);
	}
	type: minimal.Root
	create element: newNonRoot
		corresponding to: change.newValue
		type: minimal.NonRoot
execute: {
	newNonRoot.id = change.newValue.id
	targetElement.multiValuedContainmentEReference += newNonRoot;
	edu.kit.ipd.sdq.vitruvius.dsls.response.tests.simpleChangesTests.SimpleChangesTestsExecutionMonitor.instance.set(
		edu.kit.ipd.sdq.vitruvius.dsls.response.tests.simpleChangesTests.SimpleChangesTestsExecutionMonitor.ChangeType.
		CreateNonRootEObjectInList);
}

/*
 * DeleteNonRootEObjectInList
 */
response: DeleteNonRootEObjectInList
trigger: remove from list minimal.Root[multiValuedContainmentEReference] 
update model: targetElement
	corresponding to: change.oldValue
		//{edu.kit.ipd.sdq.vitruvius.dsls.response.tests.simpleChangesTests.SimpleChangesTestsUtils.findTypeInContainmentHierarchy(change.newAffectedEObject, allElementTypes.Root);}
	type: minimal.NonRoot
execute: {
	org.eclipse.emf.ecore.util.EcoreUtil.remove(targetElement);
	//(targetElement.eContainer() as allElementTypes.Root).multiValuedContainmentEReference.removeIf[it.id == change.oldValue.id];
	//targetElement.multiValuedContainmentEReference.removeIf[it.id == change.oldValue.id];
	edu.kit.ipd.sdq.vitruvius.dsls.response.tests.simpleChangesTests.SimpleChangesTestsExecutionMonitor.instance.set(
		edu.kit.ipd.sdq.vitruvius.dsls.response.tests.simpleChangesTests.SimpleChangesTestsExecutionMonitor.ChangeType.
		DeleteNonRootEObjectInList);
}

/*
 * CreateNonRootEObjectSingle
 */
response: CreateNonRootEObjectSingleResponse
trigger: create value minimal.Root[singleValuedContainmentEReference] 
update model: targetElement
	corresponding to: change.newAffectedEObject
	type: minimal.Root
	create element: newNonRoot
		corresponding to: change.newValue
		type: minimal.NonRoot
execute: {
	newNonRoot.id = change.newValue.id;
	targetElement.singleValuedContainmentEReference = newNonRoot;
	edu.kit.ipd.sdq.vitruvius.dsls.response.tests.simpleChangesTests.SimpleChangesTestsExecutionMonitor.instance.set(
		edu.kit.ipd.sdq.vitruvius.dsls.response.tests.simpleChangesTests.SimpleChangesTestsExecutionMonitor.ChangeType.
		CreateNonRootEObjectSingle);
}

/*
 * DeleteNonRootEObjectSingle
 */
response: DeleteNonRootEObjectSingleResponse
trigger: delete value minimal.Root[singleValuedContainmentEReference] 
update model: targetElement
	corresponding to: change.newAffectedEObject
	type: minimal.Root
execute: {
	targetElement.singleValuedContainmentEReference = null;
	edu.kit.ipd.sdq.vitruvius.dsls.response.tests.simpleChangesTests.SimpleChangesTestsExecutionMonitor.instance.set(
		edu.kit.ipd.sdq.vitruvius.dsls.response.tests.simpleChangesTests.SimpleChangesTestsExecutionMonitor.ChangeType.
		DeleteNonRootEObjectSingle);
}

/*
 * UpdateSingleValuedNonContainmentEReference
 */
response: UpdateSingleValuedNonContainmentEReference
trigger: replace value minimal.Root[singleValuedNonContainmentEReference] 
update model: targetElement
	corresponding to: change.newAffectedEObject
	type: minimal.Root
execute: {
	val addedNonRoot = targetElement.nonRootObjectContainerHelper.nonRootObjectsContainment.findFirst[it.id == change.newValue.id];
	targetElement.singleValuedNonContainmentEReference = addedNonRoot;    
	edu.kit.ipd.sdq.vitruvius.dsls.response.tests.simpleChangesTests.SimpleChangesTestsExecutionMonitor.instance.set(
		edu.kit.ipd.sdq.vitruvius.dsls.response.tests.simpleChangesTests.SimpleChangesTestsExecutionMonitor.ChangeType.
		UpdateSingleValuedNonContainmentEReference);
}

///*
// * UnsetNonContainmentEReference
// */
//response: UnsetNonContainmentEReference
//trigger: delete value minimal.Root[singleValuedNonContainmentEReference] 
//effect: update root minimal.Root corresponding to {
//	edu.kit.ipd.sdq.vitruvius.dsls.response.tests.simpleChangesTests.SimpleChangesTestsUtils.findTypeInContainmentHierarchy(change.newAffectedEObject, allElementTypes.Root);
//} 
//execute: {
//	targetElement.singleValuedNonContainmentEReference = null; 
//	edu.kit.ipd.sdq.vitruvius.dsls.response.tests.simpleChangesTests.SimpleChangesTestsExecutionMonitor.instance.set(
//		edu.kit.ipd.sdq.vitruvius.dsls.response.tests.simpleChangesTests.SimpleChangesTestsExecutionMonitor.ChangeType.
//		UnsetNonContainmentEReference);
//}

/*
 * InsertEAttributeValue
 */
response: InsertEAttributeValue
trigger: insert in list minimal.Root[multiValuedEAttribute] 
update model: targetElement
	corresponding to: change.newAffectedEObject
	type: minimal.Root 
execute: {
	targetElement.multiValuedEAttribute.add(change.newValue);    
	edu.kit.ipd.sdq.vitruvius.dsls.response.tests.simpleChangesTests.SimpleChangesTestsExecutionMonitor.instance.set(
		edu.kit.ipd.sdq.vitruvius.dsls.response.tests.simpleChangesTests.SimpleChangesTestsExecutionMonitor.ChangeType.
		InsertEAttributeValue);
}

/*
 * RemoveEAttributeValue
 */
response: RemoveEAttributeValue
trigger: remove from list minimal.Root[multiValuedEAttribute] 
update model: targetElement
	corresponding to: change.newAffectedEObject
	type: minimal.Root
execute: {
	val sourceValueList = (change.newAffectedEObject as allElementTypes.Root).multiValuedEAttribute;
	targetElement.multiValuedEAttribute.removeIf[!sourceValueList.contains(it.intValue)];
	edu.kit.ipd.sdq.vitruvius.dsls.response.tests.simpleChangesTests.SimpleChangesTestsExecutionMonitor.instance.set(
		edu.kit.ipd.sdq.vitruvius.dsls.response.tests.simpleChangesTests.SimpleChangesTestsExecutionMonitor.ChangeType.
		RemoveEAttributeValue);
}

/*
 * InsertNonContainmentEReference
 */
response: InsertNonContainmentEReference
trigger: insert in list minimal.Root[multiValuedNonContainmentEReference] 
update model: targetElement
	corresponding to: change.newAffectedEObject
	type: minimal.Root
execute: {
	val addedNonRoot = targetElement.nonRootObjectContainerHelper.nonRootObjectsContainment.findFirst[it.id == change.newValue.id];
	targetElement.multiValuedNonContainmentEReference.add(addedNonRoot);    
	edu.kit.ipd.sdq.vitruvius.dsls.response.tests.simpleChangesTests.SimpleChangesTestsExecutionMonitor.instance.set(
		edu.kit.ipd.sdq.vitruvius.dsls.response.tests.simpleChangesTests.SimpleChangesTestsExecutionMonitor.ChangeType.
		InsertNonContainmentEReference);
}

/*
 * RemoveNonContainmentEReference
 */
response: RemoveNonContainmentEReference
trigger: remove from list minimal.Root[multiValuedNonContainmentEReference] 
update model: targetRoot
	corresponding to: change.newAffectedEObject
	type: minimal.Root
execute: {
	targetRoot.multiValuedNonContainmentEReference.removeIf[it.id == change.oldValue.id];
	edu.kit.ipd.sdq.vitruvius.dsls.response.tests.simpleChangesTests.SimpleChangesTestsExecutionMonitor.instance.set(
		edu.kit.ipd.sdq.vitruvius.dsls.response.tests.simpleChangesTests.SimpleChangesTestsExecutionMonitor.ChangeType.
		RemoveNonContainmentEReference);
}

///*
// * ReplaceNonContainmentEReference
// */
//response: ReplaceNonContainmentEReference
//trigger: element update of minimal.Root[multiValuedNonContainmentEReference] 
//effect: update root minimal.Root corresponding to {
//	edu.kit.ipd.sdq.vitruvius.dsls.response.tests.simpleChangesTests.SimpleChangesTestsUtils.findTypeInContainmentHierarchy(change.newAffectedEObject, allElementTypes.Root);
//} 
//execute: {
//	edu.kit.ipd.sdq.vitruvius.dsls.response.tests.simpleChangesTests.SimpleChangesTestsExecutionMonitor.instance.set(
//		edu.kit.ipd.sdq.vitruvius.dsls.response.tests.simpleChangesTests.SimpleChangesTestsExecutionMonitor.ChangeType.
//		ReplaceNonContainmentEReference);
//}

///*
// * PermuteNonContainmentEReference
// */
//response: trigger: element old change PermuteNonContainmentEReferenceValues of minimal.Root[multiValuedNonContainmentEReference] 
//effect: update root minimal.Root corresponding to {
//	edu.kit.ipd.sdq.vitruvius.dsls.response.tests.simpleChangesTests.SimpleChangesTestsUtils.findTypeInContainmentHierarchy(change.newAffectedEObject, allElementTypes.Root);
//} execute: {
//	edu.kit.ipd.sdq.vitruvius.dsls.response.tests.simpleChangesTests.SimpleChangesTestsExecutionMonitor.instance.set(
//		edu.kit.ipd.sdq.vitruvius.dsls.response.tests.simpleChangesTests.SimpleChangesTestsExecutionMonitor.ChangeType.
//		PermuteNonContainmentEReference);
//}


/*
 * Creates the model for comparing the "TestModelSource", created in each test, with.
 */
response: HelperResponseForCreateSecondTestModel
trigger: insert root minimal.Root
precondition: change.newValue.id == "EachTestModelSource"
create model: newRoot
	corresponding to: change.newValue
	type: minimal.Root
	path relative from changed model: "EachTestModelTarget"

response: HelperResponseForDeleteSecondTestModel
trigger: remove root minimal.Root
precondition: change.oldValue.id == "EachTestModelSource"
delete model: oldModel
	corresponding to: change.oldValue
	type: minimal.Root

/*
 * Creates the model for comparing the further test model with.
 */
response: CreateRootTest
trigger: insert root minimal.Root
precondition: change.newValue.id == "Further_Source_Test_Model"
create model: newRoot
	corresponding to: change.newValue
	type: minimal.Root
	path relative from changed model: "Further_Target_Test_Model"
		
//effect: create root minimal.Root at "Further_Target_Test_Model" auto-delete corresponding to change.newValue

response: DeleteRootTest
trigger: remove root minimal.Root
precondition: change.oldValue.id == "Further_Source_Test_Model"
delete model: oldModel
	corresponding to: change.oldValue
	type: minimal.Root

/**
 * Initializes the nonRootObjectContainer for second model
 */
response: HelperResponseForNonRootObjectContainerInitialization
trigger: create value minimal.Root[nonRootObjectContainerHelper]
precondition: {
	change.newValue != null
}
update model: targetElement
	corresponding to: change.newAffectedEObject
	type: minimal.Root
	create element: newNonRootContainer
		corresponding to: change.newValue
		type: minimal.NonRootObjectContainerHelper
execute: {
	newNonRootContainer.id = change.newValue.id;
	targetElement.nonRootObjectContainerHelper = newNonRootContainer;
}

/**
 * Initializes the nonRootObjectContainer for second model
 */
response: HelperResponseForNonRootObjectContainerContentsInitialization
trigger: insert in list minimal.NonRootObjectContainerHelper[nonRootObjectsContainment]
update model: nonRootContainer
	corresponding to: change.newAffectedEObject
	type: minimal.NonRootObjectContainerHelper
	create element: newNonRoot
		corresponding to: change.newValue
		type: minimal.NonRoot
execute: {
	newNonRoot.id = change.newValue.id;
	nonRootContainer.nonRootObjectsContainment += newNonRoot;
}