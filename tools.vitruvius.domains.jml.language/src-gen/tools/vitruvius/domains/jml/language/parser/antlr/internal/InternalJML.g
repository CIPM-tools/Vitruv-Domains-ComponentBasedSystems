/*
 * generated by Xtext
 */
grammar InternalJML;

options {
	superClass=AbstractInternalAntlrParser;
	backtrack=true;
	
}

@lexer::header {
package tools.vitruvius.domains.jml.language.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package tools.vitruvius.domains.jml.language.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import tools.vitruvius.domains.jml.language.services.JMLGrammarAccess;

}

@parser::members {

/*
  This grammar contains a lot of empty actions to work around a bug in ANTLR.
  Otherwise the ANTLR tool will create synpreds that cannot be compiled in some rare cases.
*/
 
 	private JMLGrammarAccess grammarAccess;
 	
    public InternalJMLParser(TokenStream input, JMLGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "CompilationUnit";	
   	}
   	
   	@Override
   	protected JMLGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleCompilationUnit
entryRuleCompilationUnit returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getCompilationUnitRule()); }
	 iv_ruleCompilationUnit=ruleCompilationUnit 
	 { $current=$iv_ruleCompilationUnit.current; } 
	 EOF 
;

// Rule CompilationUnit
ruleCompilationUnit returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getCompilationUnitAccess().getCompilationUnitAction_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getCompilationUnitAccess().getPackagedeclarationPackageDeclarationParserRuleCall_1_0()); 
	    }
		lv_packagedeclaration_1_0=rulePackageDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCompilationUnitRule());
	        }
       		set(
       			$current, 
       			"packagedeclaration",
        		lv_packagedeclaration_1_0, 
        		"tools.vitruvius.domains.jml.language.JML.PackageDeclaration");
	        afterParserOrEnumRuleCall();
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getCompilationUnitAccess().getImportdeclarationImportDeclarationParserRuleCall_2_0()); 
	    }
		lv_importdeclaration_2_0=ruleImportDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCompilationUnitRule());
	        }
       		add(
       			$current, 
       			"importdeclaration",
        		lv_importdeclaration_2_0, 
        		"tools.vitruvius.domains.jml.language.JML.ImportDeclaration");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		{ 
	        newCompositeNode(grammarAccess.getCompilationUnitAccess().getTypedeclarationClassifierDeclarationWithModifierParserRuleCall_3_0()); 
	    }
		lv_typedeclaration_3_0=ruleClassifierDeclarationWithModifier		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCompilationUnitRule());
	        }
       		add(
       			$current, 
       			"typedeclaration",
        		lv_typedeclaration_3_0, 
        		"tools.vitruvius.domains.jml.language.JML.ClassifierDeclarationWithModifier");
	        afterParserOrEnumRuleCall();
	    }

)
)*)
;





// Entry rule entryRulePackageDeclaration
entryRulePackageDeclaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPackageDeclarationRule()); }
	 iv_rulePackageDeclaration=rulePackageDeclaration 
	 { $current=$iv_rulePackageDeclaration.current; } 
	 EOF 
;

// Rule PackageDeclaration
rulePackageDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='package' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getPackageDeclarationAccess().getPackageKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPackageDeclarationAccess().getQualifiednameQualifiedNameParserRuleCall_1_0()); 
	    }
		lv_qualifiedname_1_0=ruleQualifiedName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPackageDeclarationRule());
	        }
       		set(
       			$current, 
       			"qualifiedname",
        		lv_qualifiedname_1_0, 
        		"tools.vitruvius.domains.jml.language.JML.QualifiedName");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2=';' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getPackageDeclarationAccess().getSemicolonKeyword_2());
    }
)
;





// Entry rule entryRuleImportDeclaration
entryRuleImportDeclaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getImportDeclarationRule()); }
	 iv_ruleImportDeclaration=ruleImportDeclaration 
	 { $current=$iv_ruleImportDeclaration.current; } 
	 EOF 
;

// Rule ImportDeclaration
ruleImportDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='import' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getImportDeclarationAccess().getImportKeyword_0());
    }
(
(
		lv_static_1_0=	'static' 
    {
        newLeafNode(lv_static_1_0, grammarAccess.getImportDeclarationAccess().getStaticStaticKeyword_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getImportDeclarationRule());
	        }
       		setWithLastConsumed($current, "static", true, "static");
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getImportDeclarationAccess().getQualifiednameQualifiedNameParserRuleCall_2_0()); 
	    }
		lv_qualifiedname_2_0=ruleQualifiedName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getImportDeclarationRule());
	        }
       		set(
       			$current, 
       			"qualifiedname",
        		lv_qualifiedname_2_0, 
        		"tools.vitruvius.domains.jml.language.JML.QualifiedName");
	        afterParserOrEnumRuleCall();
	    }

)
)(((	'.' 
)=>	otherlv_3='.' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getImportDeclarationAccess().getFullStopKeyword_3_0());
    }
)(
(
		lv_wildcard_4_0=	'*' 
    {
        newLeafNode(lv_wildcard_4_0, grammarAccess.getImportDeclarationAccess().getWildcardAsteriskKeyword_3_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getImportDeclarationRule());
	        }
       		setWithLastConsumed($current, "wildcard", true, "*");
	    }

)
))?	otherlv_5=';' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getImportDeclarationAccess().getSemicolonKeyword_4());
    }
)
;





// Entry rule entryRuleClassifierDeclarationWithModifier
entryRuleClassifierDeclarationWithModifier returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getClassifierDeclarationWithModifierRule()); }
	 iv_ruleClassifierDeclarationWithModifier=ruleClassifierDeclarationWithModifier 
	 { $current=$iv_ruleClassifierDeclarationWithModifier.current; } 
	 EOF 
;

// Rule ClassifierDeclarationWithModifier
ruleClassifierDeclarationWithModifier returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getClassifierDeclarationWithModifierAccess().getModifiersModifierParserRuleCall_0_0()); 
	    }
		lv_modifiers_0_0=ruleModifier		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getClassifierDeclarationWithModifierRule());
	        }
       		add(
       			$current, 
       			"modifiers",
        		lv_modifiers_0_0, 
        		"tools.vitruvius.domains.jml.language.JML.Modifier");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		{ 
	        newCompositeNode(grammarAccess.getClassifierDeclarationWithModifierAccess().getClassOrInterfaceDeclarationClassOrInterfaceDeclarationParserRuleCall_1_0()); 
	    }
		lv_classOrInterfaceDeclaration_1_0=ruleClassOrInterfaceDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getClassifierDeclarationWithModifierRule());
	        }
       		set(
       			$current, 
       			"classOrInterfaceDeclaration",
        		lv_classOrInterfaceDeclaration_1_0, 
        		"tools.vitruvius.domains.jml.language.JML.ClassOrInterfaceDeclaration");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleClassOrInterfaceDeclaration
entryRuleClassOrInterfaceDeclaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getClassOrInterfaceDeclarationRule()); }
	 iv_ruleClassOrInterfaceDeclaration=ruleClassOrInterfaceDeclaration 
	 { $current=$iv_ruleClassOrInterfaceDeclaration.current; } 
	 EOF 
;

// Rule ClassOrInterfaceDeclaration
ruleClassOrInterfaceDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getClassOrInterfaceDeclarationAccess().getClassDeclarationParserRuleCall_0()); 
    }
    this_ClassDeclaration_0=ruleClassDeclaration
    { 
        $current = $this_ClassDeclaration_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getClassOrInterfaceDeclarationAccess().getInterfaceDeclarationParserRuleCall_1()); 
    }
    this_InterfaceDeclaration_1=ruleInterfaceDeclaration
    { 
        $current = $this_InterfaceDeclaration_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleModifier
entryRuleModifier returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getModifierRule()); }
	 iv_ruleModifier=ruleModifier 
	 { $current=$iv_ruleModifier.current; } 
	 EOF 
;

// Rule Modifier
ruleModifier returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getModifierAccess().getAnnotationParserRuleCall_0()); 
    }
    this_Annotation_0=ruleAnnotation
    { 
        $current = $this_Annotation_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getModifierAccess().getRegularModifierParserRuleCall_1()); 
    }
    this_RegularModifier_1=ruleRegularModifier
    { 
        $current = $this_RegularModifier_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleRegularModifier
entryRuleRegularModifier returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRegularModifierRule()); }
	 iv_ruleRegularModifier=ruleRegularModifier 
	 { $current=$iv_ruleRegularModifier.current; } 
	 EOF 
;

// Rule RegularModifier
ruleRegularModifier returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getRegularModifierAccess().getModifierModifierValueEnumRuleCall_0()); 
	    }
		lv_modifier_0_0=ruleModifierValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRegularModifierRule());
	        }
       		set(
       			$current, 
       			"modifier",
        		lv_modifier_0_0, 
        		"tools.vitruvius.domains.jml.language.JML.ModifierValue");
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRuleClassDeclaration
entryRuleClassDeclaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getClassDeclarationRule()); }
	 iv_ruleClassDeclaration=ruleClassDeclaration 
	 { $current=$iv_ruleClassDeclaration.current; } 
	 EOF 
;

// Rule ClassDeclaration
ruleClassDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getClassDeclarationAccess().getNormalClassDeclarationParserRuleCall_0()); 
    }
    this_NormalClassDeclaration_0=ruleNormalClassDeclaration
    { 
        $current = $this_NormalClassDeclaration_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getClassDeclarationAccess().getEnumDeclarationParserRuleCall_1()); 
    }
    this_EnumDeclaration_1=ruleEnumDeclaration
    { 
        $current = $this_EnumDeclaration_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleNormalClassDeclaration
entryRuleNormalClassDeclaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNormalClassDeclarationRule()); }
	 iv_ruleNormalClassDeclaration=ruleNormalClassDeclaration 
	 { $current=$iv_ruleNormalClassDeclaration.current; } 
	 EOF 
;

// Rule NormalClassDeclaration
ruleNormalClassDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='class' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getNormalClassDeclarationAccess().getClassKeyword_0());
    }
(
(
		lv_identifier_1_0=RULE_ID
		{
			newLeafNode(lv_identifier_1_0, grammarAccess.getNormalClassDeclarationAccess().getIdentifierIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getNormalClassDeclarationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"identifier",
        		lv_identifier_1_0, 
        		"org.eclipse.xtext.xbase.Xtype.ID");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getNormalClassDeclarationAccess().getTypeparametersTypeParametersParserRuleCall_2_0()); 
	    }
		lv_typeparameters_2_0=ruleTypeParameters		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNormalClassDeclarationRule());
	        }
       		set(
       			$current, 
       			"typeparameters",
        		lv_typeparameters_2_0, 
        		"tools.vitruvius.domains.jml.language.JML.TypeParameters");
	        afterParserOrEnumRuleCall();
	    }

)
)?(	otherlv_3='extends' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getNormalClassDeclarationAccess().getExtendsKeyword_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getNormalClassDeclarationAccess().getSuperTypeTypeParserRuleCall_3_1_0()); 
	    }
		lv_superType_4_0=ruleType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNormalClassDeclarationRule());
	        }
       		set(
       			$current, 
       			"superType",
        		lv_superType_4_0, 
        		"tools.vitruvius.domains.jml.language.JML.Type");
	        afterParserOrEnumRuleCall();
	    }

)
))?(	otherlv_5='implements' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getNormalClassDeclarationAccess().getImplementsKeyword_4_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getNormalClassDeclarationAccess().getImplementedTypesTypeParserRuleCall_4_1_0()); 
	    }
		lv_implementedTypes_6_0=ruleType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNormalClassDeclarationRule());
	        }
       		add(
       			$current, 
       			"implementedTypes",
        		lv_implementedTypes_6_0, 
        		"tools.vitruvius.domains.jml.language.JML.Type");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_7=',' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getNormalClassDeclarationAccess().getCommaKeyword_4_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getNormalClassDeclarationAccess().getImplementedTypesTypeParserRuleCall_4_2_1_0()); 
	    }
		lv_implementedTypes_8_0=ruleType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNormalClassDeclarationRule());
	        }
       		add(
       			$current, 
       			"implementedTypes",
        		lv_implementedTypes_8_0, 
        		"tools.vitruvius.domains.jml.language.JML.Type");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?	otherlv_9='{' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getNormalClassDeclarationAccess().getLeftCurlyBracketKeyword_5());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getNormalClassDeclarationAccess().getBodyDeclarationsClassBodyDeclarationParserRuleCall_6_0()); 
	    }
		lv_bodyDeclarations_10_0=ruleClassBodyDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNormalClassDeclarationRule());
	        }
       		add(
       			$current, 
       			"bodyDeclarations",
        		lv_bodyDeclarations_10_0, 
        		"tools.vitruvius.domains.jml.language.JML.ClassBodyDeclaration");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_11='}' 
    {
    	newLeafNode(otherlv_11, grammarAccess.getNormalClassDeclarationAccess().getRightCurlyBracketKeyword_7());
    }
)
;





// Entry rule entryRuleTypeParameters
entryRuleTypeParameters returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTypeParametersRule()); }
	 iv_ruleTypeParameters=ruleTypeParameters 
	 { $current=$iv_ruleTypeParameters.current; } 
	 EOF 
;

// Rule TypeParameters
ruleTypeParameters returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='<' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getTypeParametersAccess().getLessThanSignKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTypeParametersAccess().getTypeparameterTypeParameterParserRuleCall_1_0()); 
	    }
		lv_typeparameter_1_0=ruleTypeParameter		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTypeParametersRule());
	        }
       		add(
       			$current, 
       			"typeparameter",
        		lv_typeparameter_1_0, 
        		"tools.vitruvius.domains.jml.language.JML.TypeParameter");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_2=',' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getTypeParametersAccess().getCommaKeyword_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTypeParametersAccess().getTypeparameterTypeParameterParserRuleCall_2_1_0()); 
	    }
		lv_typeparameter_3_0=ruleTypeParameter		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTypeParametersRule());
	        }
       		add(
       			$current, 
       			"typeparameter",
        		lv_typeparameter_3_0, 
        		"tools.vitruvius.domains.jml.language.JML.TypeParameter");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_4='>' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getTypeParametersAccess().getGreaterThanSignKeyword_3());
    }
)
;





// Entry rule entryRuleTypeParameter
entryRuleTypeParameter returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTypeParameterRule()); }
	 iv_ruleTypeParameter=ruleTypeParameter 
	 { $current=$iv_ruleTypeParameter.current; } 
	 EOF 
;

// Rule TypeParameter
ruleTypeParameter returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getTypeParameterAccess().getTypeParameterAction_0(),
            $current);
    }
)(
(
		lv_identifier_1_0=RULE_ID
		{
			newLeafNode(lv_identifier_1_0, grammarAccess.getTypeParameterAccess().getIdentifierIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTypeParameterRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"identifier",
        		lv_identifier_1_0, 
        		"org.eclipse.xtext.xbase.Xtype.ID");
	    }

)
)(	otherlv_2='extends' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getTypeParameterAccess().getExtendsKeyword_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTypeParameterAccess().getTypeboundTypeBoundParserRuleCall_2_1_0()); 
	    }
		lv_typebound_3_0=ruleTypeBound		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTypeParameterRule());
	        }
       		set(
       			$current, 
       			"typebound",
        		lv_typebound_3_0, 
        		"tools.vitruvius.domains.jml.language.JML.TypeBound");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleTypeBound
entryRuleTypeBound returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTypeBoundRule()); }
	 iv_ruleTypeBound=ruleTypeBound 
	 { $current=$iv_ruleTypeBound.current; } 
	 EOF 
;

// Rule TypeBound
ruleTypeBound returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getTypeBoundAccess().getTypeTypeParserRuleCall_0_0()); 
	    }
		lv_type_0_0=ruleType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTypeBoundRule());
	        }
       		add(
       			$current, 
       			"type",
        		lv_type_0_0, 
        		"tools.vitruvius.domains.jml.language.JML.Type");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_1='&' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getTypeBoundAccess().getAmpersandKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTypeBoundAccess().getTypeTypeParserRuleCall_1_1_0()); 
	    }
		lv_type_2_0=ruleType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTypeBoundRule());
	        }
       		add(
       			$current, 
       			"type",
        		lv_type_2_0, 
        		"tools.vitruvius.domains.jml.language.JML.Type");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleEnumDeclaration
entryRuleEnumDeclaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getEnumDeclarationRule()); }
	 iv_ruleEnumDeclaration=ruleEnumDeclaration 
	 { $current=$iv_ruleEnumDeclaration.current; } 
	 EOF 
;

// Rule EnumDeclaration
ruleEnumDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='enum' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getEnumDeclarationAccess().getEnumKeyword_0());
    }
(
(
		lv_identifier_1_0=RULE_ID
		{
			newLeafNode(lv_identifier_1_0, grammarAccess.getEnumDeclarationAccess().getIdentifierIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getEnumDeclarationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"identifier",
        		lv_identifier_1_0, 
        		"org.eclipse.xtext.xbase.Xtype.ID");
	    }

)
)(	otherlv_2='implements' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getEnumDeclarationAccess().getImplementsKeyword_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getEnumDeclarationAccess().getImplementedTypesTypeParserRuleCall_2_1_0()); 
	    }
		lv_implementedTypes_3_0=ruleType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEnumDeclarationRule());
	        }
       		add(
       			$current, 
       			"implementedTypes",
        		lv_implementedTypes_3_0, 
        		"tools.vitruvius.domains.jml.language.JML.Type");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_4=',' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getEnumDeclarationAccess().getCommaKeyword_2_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getEnumDeclarationAccess().getImplementedTypesTypeParserRuleCall_2_2_1_0()); 
	    }
		lv_implementedTypes_5_0=ruleType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEnumDeclarationRule());
	        }
       		add(
       			$current, 
       			"implementedTypes",
        		lv_implementedTypes_5_0, 
        		"tools.vitruvius.domains.jml.language.JML.Type");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?	otherlv_6='{' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getEnumDeclarationAccess().getLeftCurlyBracketKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getEnumDeclarationAccess().getEnumconstantsEnumConstantsParserRuleCall_4_0()); 
	    }
		lv_enumconstants_7_0=ruleEnumConstants		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEnumDeclarationRule());
	        }
       		set(
       			$current, 
       			"enumconstants",
        		lv_enumconstants_7_0, 
        		"tools.vitruvius.domains.jml.language.JML.EnumConstants");
	        afterParserOrEnumRuleCall();
	    }

)
)?(	otherlv_8=',' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getEnumDeclarationAccess().getCommaKeyword_5());
    }
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getEnumDeclarationAccess().getBodyDeclarationsEnumBodyDeclarationsParserRuleCall_6_0()); 
	    }
		lv_bodyDeclarations_9_0=ruleEnumBodyDeclarations		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEnumDeclarationRule());
	        }
       		set(
       			$current, 
       			"bodyDeclarations",
        		lv_bodyDeclarations_9_0, 
        		"tools.vitruvius.domains.jml.language.JML.EnumBodyDeclarations");
	        afterParserOrEnumRuleCall();
	    }

)
)?	otherlv_10='}' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getEnumDeclarationAccess().getRightCurlyBracketKeyword_7());
    }
)
;





// Entry rule entryRuleEnumConstants
entryRuleEnumConstants returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getEnumConstantsRule()); }
	 iv_ruleEnumConstants=ruleEnumConstants 
	 { $current=$iv_ruleEnumConstants.current; } 
	 EOF 
;

// Rule EnumConstants
ruleEnumConstants returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getEnumConstantsAccess().getEnumconstantEnumConstantParserRuleCall_0_0()); 
	    }
		lv_enumconstant_0_0=ruleEnumConstant		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEnumConstantsRule());
	        }
       		add(
       			$current, 
       			"enumconstant",
        		lv_enumconstant_0_0, 
        		"tools.vitruvius.domains.jml.language.JML.EnumConstant");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_1=',' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getEnumConstantsAccess().getCommaKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getEnumConstantsAccess().getEnumconstantEnumConstantParserRuleCall_1_1_0()); 
	    }
		lv_enumconstant_2_0=ruleEnumConstant		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEnumConstantsRule());
	        }
       		add(
       			$current, 
       			"enumconstant",
        		lv_enumconstant_2_0, 
        		"tools.vitruvius.domains.jml.language.JML.EnumConstant");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleEnumConstant
entryRuleEnumConstant returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getEnumConstantRule()); }
	 iv_ruleEnumConstant=ruleEnumConstant 
	 { $current=$iv_ruleEnumConstant.current; } 
	 EOF 
;

// Rule EnumConstant
ruleEnumConstant returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getEnumConstantAccess().getEnumConstantAction_0(),
            $current);
    }
)((
(
		{ 
	        newCompositeNode(grammarAccess.getEnumConstantAccess().getAnnotationsAnnotationsParserRuleCall_1_0_0()); 
	    }
		lv_annotations_1_0=ruleAnnotations		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEnumConstantRule());
	        }
       		set(
       			$current, 
       			"annotations",
        		lv_annotations_1_0, 
        		"tools.vitruvius.domains.jml.language.JML.Annotations");
	        afterParserOrEnumRuleCall();
	    }

)
)?(
(
		lv_identifier_2_0=RULE_ID
		{
			newLeafNode(lv_identifier_2_0, grammarAccess.getEnumConstantAccess().getIdentifierIDTerminalRuleCall_1_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getEnumConstantRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"identifier",
        		lv_identifier_2_0, 
        		"org.eclipse.xtext.xbase.Xtype.ID");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getEnumConstantAccess().getArgumentsArgumentsParserRuleCall_1_2_0()); 
	    }
		lv_arguments_3_0=ruleArguments		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEnumConstantRule());
	        }
       		set(
       			$current, 
       			"arguments",
        		lv_arguments_3_0, 
        		"tools.vitruvius.domains.jml.language.JML.Arguments");
	        afterParserOrEnumRuleCall();
	    }

)
)?(	otherlv_4='{' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getEnumConstantAccess().getLeftCurlyBracketKeyword_1_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getEnumConstantAccess().getClassbodydeclarationClassBodyDeclarationParserRuleCall_1_3_1_0()); 
	    }
		lv_classbodydeclaration_5_0=ruleClassBodyDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEnumConstantRule());
	        }
       		add(
       			$current, 
       			"classbodydeclaration",
        		lv_classbodydeclaration_5_0, 
        		"tools.vitruvius.domains.jml.language.JML.ClassBodyDeclaration");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_6='}' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getEnumConstantAccess().getRightCurlyBracketKeyword_1_3_2());
    }
)?))
;





// Entry rule entryRuleEnumBodyDeclarations
entryRuleEnumBodyDeclarations returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getEnumBodyDeclarationsRule()); }
	 iv_ruleEnumBodyDeclarations=ruleEnumBodyDeclarations 
	 { $current=$iv_ruleEnumBodyDeclarations.current; } 
	 EOF 
;

// Rule EnumBodyDeclarations
ruleEnumBodyDeclarations returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getEnumBodyDeclarationsAccess().getEnumBodyDeclarationsAction_0(),
            $current);
    }
)	otherlv_1=';' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getEnumBodyDeclarationsAccess().getSemicolonKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getEnumBodyDeclarationsAccess().getClassbodydeclarationClassBodyDeclarationParserRuleCall_2_0()); 
	    }
		lv_classbodydeclaration_2_0=ruleClassBodyDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEnumBodyDeclarationsRule());
	        }
       		add(
       			$current, 
       			"classbodydeclaration",
        		lv_classbodydeclaration_2_0, 
        		"tools.vitruvius.domains.jml.language.JML.ClassBodyDeclaration");
	        afterParserOrEnumRuleCall();
	    }

)
)*)
;





// Entry rule entryRuleArguments
entryRuleArguments returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getArgumentsRule()); }
	 iv_ruleArguments=ruleArguments 
	 { $current=$iv_ruleArguments.current; } 
	 EOF 
;

// Rule Arguments
ruleArguments returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getArgumentsAccess().getArgumentsAction_0(),
            $current);
    }
)	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getArgumentsAccess().getLeftParenthesisKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getArgumentsAccess().getExpressionsExpressionParserRuleCall_2_0()); 
	    }
		lv_expressions_2_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getArgumentsRule());
	        }
       		add(
       			$current, 
       			"expressions",
        		lv_expressions_2_0, 
        		"tools.vitruvius.domains.jml.language.JML.Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getArgumentsAccess().getCommaKeyword_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getArgumentsAccess().getExpressionsExpressionParserRuleCall_3_1_0()); 
	    }
		lv_expressions_4_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getArgumentsRule());
	        }
       		add(
       			$current, 
       			"expressions",
        		lv_expressions_4_0, 
        		"tools.vitruvius.domains.jml.language.JML.Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))	otherlv_5=')' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getArgumentsAccess().getRightParenthesisKeyword_4());
    }
)
;





// Entry rule entryRuleInterfaceDeclaration
entryRuleInterfaceDeclaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getInterfaceDeclarationRule()); }
	 iv_ruleInterfaceDeclaration=ruleInterfaceDeclaration 
	 { $current=$iv_ruleInterfaceDeclaration.current; } 
	 EOF 
;

// Rule InterfaceDeclaration
ruleInterfaceDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getInterfaceDeclarationAccess().getNormalInterfaceDeclarationParserRuleCall_0()); 
    }
    this_NormalInterfaceDeclaration_0=ruleNormalInterfaceDeclaration
    { 
        $current = $this_NormalInterfaceDeclaration_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getInterfaceDeclarationAccess().getAnnotationTypeDeclarationParserRuleCall_1()); 
    }
    this_AnnotationTypeDeclaration_1=ruleAnnotationTypeDeclaration
    { 
        $current = $this_AnnotationTypeDeclaration_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleNormalInterfaceDeclaration
entryRuleNormalInterfaceDeclaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNormalInterfaceDeclarationRule()); }
	 iv_ruleNormalInterfaceDeclaration=ruleNormalInterfaceDeclaration 
	 { $current=$iv_ruleNormalInterfaceDeclaration.current; } 
	 EOF 
;

// Rule NormalInterfaceDeclaration
ruleNormalInterfaceDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='interface' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getNormalInterfaceDeclarationAccess().getInterfaceKeyword_0());
    }
(
(
		lv_identifier_1_0=RULE_ID
		{
			newLeafNode(lv_identifier_1_0, grammarAccess.getNormalInterfaceDeclarationAccess().getIdentifierIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getNormalInterfaceDeclarationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"identifier",
        		lv_identifier_1_0, 
        		"org.eclipse.xtext.xbase.Xtype.ID");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getNormalInterfaceDeclarationAccess().getTypeparametersTypeParametersParserRuleCall_2_0()); 
	    }
		lv_typeparameters_2_0=ruleTypeParameters		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNormalInterfaceDeclarationRule());
	        }
       		set(
       			$current, 
       			"typeparameters",
        		lv_typeparameters_2_0, 
        		"tools.vitruvius.domains.jml.language.JML.TypeParameters");
	        afterParserOrEnumRuleCall();
	    }

)
)?(	otherlv_3='extends' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getNormalInterfaceDeclarationAccess().getExtendsKeyword_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getNormalInterfaceDeclarationAccess().getImplementedTypesTypeParserRuleCall_3_1_0()); 
	    }
		lv_implementedTypes_4_0=ruleType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNormalInterfaceDeclarationRule());
	        }
       		add(
       			$current, 
       			"implementedTypes",
        		lv_implementedTypes_4_0, 
        		"tools.vitruvius.domains.jml.language.JML.Type");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_5=',' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getNormalInterfaceDeclarationAccess().getCommaKeyword_3_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getNormalInterfaceDeclarationAccess().getImplementedTypesTypeParserRuleCall_3_2_1_0()); 
	    }
		lv_implementedTypes_6_0=ruleType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNormalInterfaceDeclarationRule());
	        }
       		add(
       			$current, 
       			"implementedTypes",
        		lv_implementedTypes_6_0, 
        		"tools.vitruvius.domains.jml.language.JML.Type");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?	otherlv_7='{' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getNormalInterfaceDeclarationAccess().getLeftCurlyBracketKeyword_4());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getNormalInterfaceDeclarationAccess().getBodyDeclarationsClassBodyDeclarationParserRuleCall_5_0()); 
	    }
		lv_bodyDeclarations_8_0=ruleClassBodyDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNormalInterfaceDeclarationRule());
	        }
       		add(
       			$current, 
       			"bodyDeclarations",
        		lv_bodyDeclarations_8_0, 
        		"tools.vitruvius.domains.jml.language.JML.ClassBodyDeclaration");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_9='}' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getNormalInterfaceDeclarationAccess().getRightCurlyBracketKeyword_6());
    }
)
;





// Entry rule entryRuleClassBodyDeclaration
entryRuleClassBodyDeclaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getClassBodyDeclarationRule()); }
	 iv_ruleClassBodyDeclaration=ruleClassBodyDeclaration 
	 { $current=$iv_ruleClassBodyDeclaration.current; } 
	 EOF 
;

// Rule ClassBodyDeclaration
ruleClassBodyDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getClassBodyDeclarationAccess().getClassBodyDeclarationAction_0_0(),
            $current);
    }
)	otherlv_1=';' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getClassBodyDeclarationAccess().getSemicolonKeyword_0_1());
    }
)
    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getClassBodyDeclarationAccess().getStaticBlockParserRuleCall_1()); 
    }
    this_StaticBlock_2=ruleStaticBlock
    { 
        $current = $this_StaticBlock_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getClassBodyDeclarationAccess().getJMLSpecifiedElementParserRuleCall_2()); 
    }
    this_JMLSpecifiedElement_3=ruleJMLSpecifiedElement
    { 
        $current = $this_JMLSpecifiedElement_3.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleStaticBlock
entryRuleStaticBlock returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStaticBlockRule()); }
	 iv_ruleStaticBlock=ruleStaticBlock 
	 { $current=$iv_ruleStaticBlock.current; } 
	 EOF 
;

// Rule StaticBlock
ruleStaticBlock returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_static_0_0=	'static' 
    {
        newLeafNode(lv_static_0_0, grammarAccess.getStaticBlockAccess().getStaticStaticKeyword_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getStaticBlockRule());
	        }
       		setWithLastConsumed($current, "static", true, "static");
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getStaticBlockAccess().getBlockBlockParserRuleCall_1_0()); 
	    }
		lv_block_1_0=ruleBlock		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStaticBlockRule());
	        }
       		set(
       			$current, 
       			"block",
        		lv_block_1_0, 
        		"tools.vitruvius.domains.jml.language.JML.Block");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleJMLSpecifiedElement
entryRuleJMLSpecifiedElement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getJMLSpecifiedElementRule()); }
	 iv_ruleJMLSpecifiedElement=ruleJMLSpecifiedElement 
	 { $current=$iv_ruleJMLSpecifiedElement.current; } 
	 EOF 
;

// Rule JMLSpecifiedElement
ruleJMLSpecifiedElement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getJMLSpecifiedElementAccess().getJMLMultilineSpecParserRuleCall_0()); 
    }
    this_JMLMultilineSpec_0=ruleJMLMultilineSpec
    { 
        $current = $this_JMLMultilineSpec_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getJMLSpecifiedElementAccess().getJMLSinglelineSpecParserRuleCall_1()); 
    }
    this_JMLSinglelineSpec_1=ruleJMLSinglelineSpec
    { 
        $current = $this_JMLSinglelineSpec_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleJMLMultilineSpec
entryRuleJMLMultilineSpec returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getJMLMultilineSpecRule()); }
	 iv_ruleJMLMultilineSpec=ruleJMLMultilineSpec 
	 { $current=$iv_ruleJMLMultilineSpec.current; } 
	 EOF 
;

// Rule JMLMultilineSpec
ruleJMLMultilineSpec returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getJMLMultilineSpecAccess().getJMLMultilineSpecCommentStartParserRuleCall_0()); 
    }
ruleJMLMultilineSpecCommentStart
    { 
        afterParserOrEnumRuleCall();
    }
(((
(
		{ 
	        newCompositeNode(grammarAccess.getJMLMultilineSpecAccess().getJmlTypeSpecificationsJMLTypeExpressionWithModifierParserRuleCall_1_0_0_0()); 
	    }
		lv_jmlTypeSpecifications_1_0=ruleJMLTypeExpressionWithModifier		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getJMLMultilineSpecRule());
	        }
       		add(
       			$current, 
       			"jmlTypeSpecifications",
        		lv_jmlTypeSpecifications_1_0, 
        		"tools.vitruvius.domains.jml.language.JML.JMLTypeExpressionWithModifier");
	        afterParserOrEnumRuleCall();
	    }

)
)+
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getJMLMultilineSpecAccess().getJMLMultilineSpecCommentEndParserRuleCall_1_0_1()); 
    }
ruleJMLMultilineSpecCommentEnd
    { 
        afterParserOrEnumRuleCall();
    }
)
    |((
(
		{ 
	        newCompositeNode(grammarAccess.getJMLMultilineSpecAccess().getJmlSpecificationsJMLMethodSpecificationWithModifierParserRuleCall_1_1_0_0()); 
	    }
		lv_jmlSpecifications_3_0=ruleJMLMethodSpecificationWithModifier		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getJMLMultilineSpecRule());
	        }
       		add(
       			$current, 
       			"jmlSpecifications",
        		lv_jmlSpecifications_3_0, 
        		"tools.vitruvius.domains.jml.language.JML.JMLMethodSpecificationWithModifier");
	        afterParserOrEnumRuleCall();
	    }

)
)*(((
(
		{ 
	        newCompositeNode(grammarAccess.getJMLMultilineSpecAccess().getModelElementJMLSpecificationOnlyElementWithModifierParserRuleCall_1_1_1_0_0_0()); 
	    }
		lv_modelElement_4_0=ruleJMLSpecificationOnlyElementWithModifier		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getJMLMultilineSpecRule());
	        }
       		set(
       			$current, 
       			"modelElement",
        		lv_modelElement_4_0, 
        		"tools.vitruvius.domains.jml.language.JML.JMLSpecificationOnlyElementWithModifier");
	        afterParserOrEnumRuleCall();
	    }

)
)
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getJMLMultilineSpecAccess().getJMLMultilineSpecCommentEndParserRuleCall_1_1_1_0_1()); 
    }
ruleJMLMultilineSpecCommentEnd
    { 
        afterParserOrEnumRuleCall();
    }
)
    |(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getJMLMultilineSpecAccess().getJMLMultilineSpecCommentEndParserRuleCall_1_1_1_1_0()); 
    }
ruleJMLMultilineSpecCommentEnd
    { 
        afterParserOrEnumRuleCall();
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getJMLMultilineSpecAccess().getElementMemberDeclWithModifierRegularParserRuleCall_1_1_1_1_1_0()); 
	    }
		lv_element_7_0=ruleMemberDeclWithModifierRegular		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getJMLMultilineSpecRule());
	        }
       		set(
       			$current, 
       			"element",
        		lv_element_7_0, 
        		"tools.vitruvius.domains.jml.language.JML.MemberDeclWithModifierRegular");
	        afterParserOrEnumRuleCall();
	    }

)
))))))
;





// Entry rule entryRuleJMLSinglelineSpec
entryRuleJMLSinglelineSpec returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getJMLSinglelineSpecRule()); }
	 iv_ruleJMLSinglelineSpec=ruleJMLSinglelineSpec 
	 { $current=$iv_ruleJMLSinglelineSpec.current; } 
	 EOF 
;

// Rule JMLSinglelineSpec
ruleJMLSinglelineSpec returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getJMLSinglelineSpecAccess().getElementMemberDeclWithModifierRegularParserRuleCall_0_0()); 
	    }
		lv_element_0_0=ruleMemberDeclWithModifierRegular		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getJMLSinglelineSpecRule());
	        }
       		set(
       			$current, 
       			"element",
        		lv_element_0_0, 
        		"tools.vitruvius.domains.jml.language.JML.MemberDeclWithModifierRegular");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(	otherlv_1='//@' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getJMLSinglelineSpecAccess().getSolidusSolidusCommercialAtKeyword_1_0());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getJMLSinglelineSpecAccess().getJmlTypeSpecificationsJMLTypeExpressionWithModifierParserRuleCall_1_1_0_0()); 
	    }
		lv_jmlTypeSpecifications_2_0=ruleJMLTypeExpressionWithModifier		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getJMLSinglelineSpecRule());
	        }
       		add(
       			$current, 
       			"jmlTypeSpecifications",
        		lv_jmlTypeSpecifications_2_0, 
        		"tools.vitruvius.domains.jml.language.JML.JMLTypeExpressionWithModifier");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |((
(
		{ 
	        newCompositeNode(grammarAccess.getJMLSinglelineSpecAccess().getJmlSpecificationsJMLMethodSpecificationWithModifierParserRuleCall_1_1_1_0_0()); 
	    }
		lv_jmlSpecifications_3_0=ruleJMLMethodSpecificationWithModifier		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getJMLSinglelineSpecRule());
	        }
       		add(
       			$current, 
       			"jmlSpecifications",
        		lv_jmlSpecifications_3_0, 
        		"tools.vitruvius.domains.jml.language.JML.JMLMethodSpecificationWithModifier");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_4='//@' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getJMLSinglelineSpecAccess().getSolidusSolidusCommercialAtKeyword_1_1_1_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getJMLSinglelineSpecAccess().getJmlSpecificationsJMLMethodSpecificationWithModifierParserRuleCall_1_1_1_1_1_0()); 
	    }
		lv_jmlSpecifications_5_0=ruleJMLMethodSpecificationWithModifier		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getJMLSinglelineSpecRule());
	        }
       		add(
       			$current, 
       			"jmlSpecifications",
        		lv_jmlSpecifications_5_0, 
        		"tools.vitruvius.domains.jml.language.JML.JMLMethodSpecificationWithModifier");
	        afterParserOrEnumRuleCall();
	    }

)
))*(
(
		{ 
	        newCompositeNode(grammarAccess.getJMLSinglelineSpecAccess().getElementMemberDeclWithModifierRegularParserRuleCall_1_1_1_2_0()); 
	    }
		lv_element_6_0=ruleMemberDeclWithModifierRegular		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getJMLSinglelineSpecRule());
	        }
       		set(
       			$current, 
       			"element",
        		lv_element_6_0, 
        		"tools.vitruvius.domains.jml.language.JML.MemberDeclWithModifierRegular");
	        afterParserOrEnumRuleCall();
	    }

)
)))))
;







// Entry rule entryRuleVisiblityModifier
entryRuleVisiblityModifier returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getVisiblityModifierRule()); }
	 iv_ruleVisiblityModifier=ruleVisiblityModifier 
	 { $current=$iv_ruleVisiblityModifier.current; } 
	 EOF 
;

// Rule VisiblityModifier
ruleVisiblityModifier returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getVisiblityModifierAccess().getModifierVisibilityModifierValueEnumRuleCall_0()); 
	    }
		lv_modifier_0_0=ruleVisibilityModifierValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getVisiblityModifierRule());
	        }
       		set(
       			$current, 
       			"modifier",
        		lv_modifier_0_0, 
        		"tools.vitruvius.domains.jml.language.JML.VisibilityModifierValue");
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRuleJMLMethodSpecificationWithModifier
entryRuleJMLMethodSpecificationWithModifier returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getJMLMethodSpecificationWithModifierRule()); }
	 iv_ruleJMLMethodSpecificationWithModifier=ruleJMLMethodSpecificationWithModifier 
	 { $current=$iv_ruleJMLMethodSpecificationWithModifier.current; } 
	 EOF 
;

// Rule JMLMethodSpecificationWithModifier
ruleJMLMethodSpecificationWithModifier returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getJMLMethodSpecificationWithModifierAccess().getJMLMethodSpecificationWithModifierRegularParserRuleCall_0()); 
    }
    this_JMLMethodSpecificationWithModifierRegular_0=ruleJMLMethodSpecificationWithModifierRegular
    { 
        $current = $this_JMLMethodSpecificationWithModifierRegular_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getJMLMethodSpecificationWithModifierAccess().getJMLMethodSpecificationWithModifierExtendedParserRuleCall_1()); 
    }
    this_JMLMethodSpecificationWithModifierExtended_1=ruleJMLMethodSpecificationWithModifierExtended
    { 
        $current = $this_JMLMethodSpecificationWithModifierExtended_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleJMLMethodSpecificationWithModifierRegular
entryRuleJMLMethodSpecificationWithModifierRegular returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getJMLMethodSpecificationWithModifierRegularRule()); }
	 iv_ruleJMLMethodSpecificationWithModifierRegular=ruleJMLMethodSpecificationWithModifierRegular 
	 { $current=$iv_ruleJMLMethodSpecificationWithModifierRegular.current; } 
	 EOF 
;

// Rule JMLMethodSpecificationWithModifierRegular
ruleJMLMethodSpecificationWithModifierRegular returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getJMLMethodSpecificationWithModifierRegularAccess().getModifierVisiblityModifierParserRuleCall_0_0()); 
	    }
		lv_modifier_0_0=ruleVisiblityModifier		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getJMLMethodSpecificationWithModifierRegularRule());
	        }
       		add(
       			$current, 
       			"modifier",
        		lv_modifier_0_0, 
        		"tools.vitruvius.domains.jml.language.JML.VisiblityModifier");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		{ 
	        newCompositeNode(grammarAccess.getJMLMethodSpecificationWithModifierRegularAccess().getSpecJMLMethodSpecificationParserRuleCall_1_0()); 
	    }
		lv_spec_1_0=ruleJMLMethodSpecification		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getJMLMethodSpecificationWithModifierRegularRule());
	        }
       		set(
       			$current, 
       			"spec",
        		lv_spec_1_0, 
        		"tools.vitruvius.domains.jml.language.JML.JMLMethodSpecification");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleJMLMethodSpecificationWithModifierExtended
entryRuleJMLMethodSpecificationWithModifierExtended returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getJMLMethodSpecificationWithModifierExtendedRule()); }
	 iv_ruleJMLMethodSpecificationWithModifierExtended=ruleJMLMethodSpecificationWithModifierExtended 
	 { $current=$iv_ruleJMLMethodSpecificationWithModifierExtended.current; } 
	 EOF 
;

// Rule JMLMethodSpecificationWithModifierExtended
ruleJMLMethodSpecificationWithModifierExtended returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='also' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getJMLMethodSpecificationWithModifierExtendedAccess().getAlsoKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getJMLMethodSpecificationWithModifierExtendedAccess().getModifierVisiblityModifierParserRuleCall_1_0()); 
	    }
		lv_modifier_1_0=ruleVisiblityModifier		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getJMLMethodSpecificationWithModifierExtendedRule());
	        }
       		add(
       			$current, 
       			"modifier",
        		lv_modifier_1_0, 
        		"tools.vitruvius.domains.jml.language.JML.VisiblityModifier");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		{ 
	        newCompositeNode(grammarAccess.getJMLMethodSpecificationWithModifierExtendedAccess().getSpecJMLMethodSpecificationParserRuleCall_2_0()); 
	    }
		lv_spec_2_0=ruleJMLMethodSpecification		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getJMLMethodSpecificationWithModifierExtendedRule());
	        }
       		set(
       			$current, 
       			"spec",
        		lv_spec_2_0, 
        		"tools.vitruvius.domains.jml.language.JML.JMLMethodSpecification");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleJMLMethodSpecification
entryRuleJMLMethodSpecification returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getJMLMethodSpecificationRule()); }
	 iv_ruleJMLMethodSpecification=ruleJMLMethodSpecification 
	 { $current=$iv_ruleJMLMethodSpecification.current; } 
	 EOF 
;

// Rule JMLMethodSpecification
ruleJMLMethodSpecification returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getJMLMethodSpecificationAccess().getJMLMethodExpressionParserRuleCall_0()); 
    }
    this_JMLMethodExpression_0=ruleJMLMethodExpression
    { 
        $current = $this_JMLMethodExpression_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getJMLMethodSpecificationAccess().getJMLMethodBehaviorParserRuleCall_1()); 
    }
    this_JMLMethodBehavior_1=ruleJMLMethodBehavior
    { 
        $current = $this_JMLMethodBehavior_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleJMLMethodBehavior
entryRuleJMLMethodBehavior returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getJMLMethodBehaviorRule()); }
	 iv_ruleJMLMethodBehavior=ruleJMLMethodBehavior 
	 { $current=$iv_ruleJMLMethodBehavior.current; } 
	 EOF 
;

// Rule JMLMethodBehavior
ruleJMLMethodBehavior returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getJMLMethodBehaviorAccess().getJMLExceptionalBehaviorBlockParserRuleCall_0()); 
    }
    this_JMLExceptionalBehaviorBlock_0=ruleJMLExceptionalBehaviorBlock
    { 
        $current = $this_JMLExceptionalBehaviorBlock_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getJMLMethodBehaviorAccess().getJMLNormalBehaviorBlockParserRuleCall_1()); 
    }
    this_JMLNormalBehaviorBlock_1=ruleJMLNormalBehaviorBlock
    { 
        $current = $this_JMLNormalBehaviorBlock_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getJMLMethodBehaviorAccess().getJMLBehaviorBlockParserRuleCall_2()); 
    }
    this_JMLBehaviorBlock_2=ruleJMLBehaviorBlock
    { 
        $current = $this_JMLBehaviorBlock_2.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleJMLExceptionalBehaviorBlock
entryRuleJMLExceptionalBehaviorBlock returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getJMLExceptionalBehaviorBlockRule()); }
	 iv_ruleJMLExceptionalBehaviorBlock=ruleJMLExceptionalBehaviorBlock 
	 { $current=$iv_ruleJMLExceptionalBehaviorBlock.current; } 
	 EOF 
;

// Rule JMLExceptionalBehaviorBlock
ruleJMLExceptionalBehaviorBlock returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='exceptional_behavior' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getJMLExceptionalBehaviorBlockAccess().getExceptional_behaviorKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getJMLExceptionalBehaviorBlockAccess().getSpecificationsJMLMethodExpressionParserRuleCall_1_0()); 
	    }
		lv_specifications_1_0=ruleJMLMethodExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getJMLExceptionalBehaviorBlockRule());
	        }
       		add(
       			$current, 
       			"specifications",
        		lv_specifications_1_0, 
        		"tools.vitruvius.domains.jml.language.JML.JMLMethodExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)+)
;





// Entry rule entryRuleJMLNormalBehaviorBlock
entryRuleJMLNormalBehaviorBlock returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getJMLNormalBehaviorBlockRule()); }
	 iv_ruleJMLNormalBehaviorBlock=ruleJMLNormalBehaviorBlock 
	 { $current=$iv_ruleJMLNormalBehaviorBlock.current; } 
	 EOF 
;

// Rule JMLNormalBehaviorBlock
ruleJMLNormalBehaviorBlock returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='normal_behavior' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getJMLNormalBehaviorBlockAccess().getNormal_behaviorKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getJMLNormalBehaviorBlockAccess().getSpecificationsJMLMethodExpressionParserRuleCall_1_0()); 
	    }
		lv_specifications_1_0=ruleJMLMethodExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getJMLNormalBehaviorBlockRule());
	        }
       		add(
       			$current, 
       			"specifications",
        		lv_specifications_1_0, 
        		"tools.vitruvius.domains.jml.language.JML.JMLMethodExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)+)
;





// Entry rule entryRuleJMLBehaviorBlock
entryRuleJMLBehaviorBlock returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getJMLBehaviorBlockRule()); }
	 iv_ruleJMLBehaviorBlock=ruleJMLBehaviorBlock 
	 { $current=$iv_ruleJMLBehaviorBlock.current; } 
	 EOF 
;

// Rule JMLBehaviorBlock
ruleJMLBehaviorBlock returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='behavior' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getJMLBehaviorBlockAccess().getBehaviorKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getJMLBehaviorBlockAccess().getSpecificationsJMLMethodExpressionParserRuleCall_1_0()); 
	    }
		lv_specifications_1_0=ruleJMLMethodExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getJMLBehaviorBlockRule());
	        }
       		add(
       			$current, 
       			"specifications",
        		lv_specifications_1_0, 
        		"tools.vitruvius.domains.jml.language.JML.JMLMethodExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)+)
;





// Entry rule entryRuleJMLMethodExpression
entryRuleJMLMethodExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getJMLMethodExpressionRule()); }
	 iv_ruleJMLMethodExpression=ruleJMLMethodExpression 
	 { $current=$iv_ruleJMLMethodExpression.current; } 
	 EOF 
;

// Rule JMLMethodExpression
ruleJMLMethodExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getJMLMethodExpressionAccess().getJMLEnsuresExpressionParserRuleCall_0_0()); 
    }
    this_JMLEnsuresExpression_0=ruleJMLEnsuresExpression
    { 
        $current = $this_JMLEnsuresExpression_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getJMLMethodExpressionAccess().getJMLRequiresExpressionParserRuleCall_0_1()); 
    }
    this_JMLRequiresExpression_1=ruleJMLRequiresExpression
    { 
        $current = $this_JMLRequiresExpression_1.current; 
        afterParserOrEnumRuleCall();
    }
)	otherlv_2=';' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getJMLMethodExpressionAccess().getSemicolonKeyword_1());
    }
)
;





// Entry rule entryRuleJMLEnsuresExpression
entryRuleJMLEnsuresExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getJMLEnsuresExpressionRule()); }
	 iv_ruleJMLEnsuresExpression=ruleJMLEnsuresExpression 
	 { $current=$iv_ruleJMLEnsuresExpression.current; } 
	 EOF 
;

// Rule JMLEnsuresExpression
ruleJMLEnsuresExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='ensures' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getJMLEnsuresExpressionAccess().getEnsuresKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getJMLEnsuresExpressionAccess().getExprExpressionParserRuleCall_1_0()); 
	    }
		lv_expr_1_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getJMLEnsuresExpressionRule());
	        }
       		set(
       			$current, 
       			"expr",
        		lv_expr_1_0, 
        		"tools.vitruvius.domains.jml.language.JML.Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleJMLRequiresExpression
entryRuleJMLRequiresExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getJMLRequiresExpressionRule()); }
	 iv_ruleJMLRequiresExpression=ruleJMLRequiresExpression 
	 { $current=$iv_ruleJMLRequiresExpression.current; } 
	 EOF 
;

// Rule JMLRequiresExpression
ruleJMLRequiresExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='requires' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getJMLRequiresExpressionAccess().getRequiresKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getJMLRequiresExpressionAccess().getExprExpressionParserRuleCall_1_0()); 
	    }
		lv_expr_1_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getJMLRequiresExpressionRule());
	        }
       		set(
       			$current, 
       			"expr",
        		lv_expr_1_0, 
        		"tools.vitruvius.domains.jml.language.JML.Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleJMLSpecificationOnlyElementWithModifier
entryRuleJMLSpecificationOnlyElementWithModifier returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getJMLSpecificationOnlyElementWithModifierRule()); }
	 iv_ruleJMLSpecificationOnlyElementWithModifier=ruleJMLSpecificationOnlyElementWithModifier 
	 { $current=$iv_ruleJMLSpecificationOnlyElementWithModifier.current; } 
	 EOF 
;

// Rule JMLSpecificationOnlyElementWithModifier
ruleJMLSpecificationOnlyElementWithModifier returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getJMLSpecificationOnlyElementWithModifierAccess().getModifierVisiblityModifierParserRuleCall_0_0()); 
	    }
		lv_modifier_0_0=ruleVisiblityModifier		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getJMLSpecificationOnlyElementWithModifierRule());
	        }
       		add(
       			$current, 
       			"modifier",
        		lv_modifier_0_0, 
        		"tools.vitruvius.domains.jml.language.JML.VisiblityModifier");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		{ 
	        newCompositeNode(grammarAccess.getJMLSpecificationOnlyElementWithModifierAccess().getElementJMLSpecificationOnlyElementParserRuleCall_1_0()); 
	    }
		lv_element_1_0=ruleJMLSpecificationOnlyElement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getJMLSpecificationOnlyElementWithModifierRule());
	        }
       		set(
       			$current, 
       			"element",
        		lv_element_1_0, 
        		"tools.vitruvius.domains.jml.language.JML.JMLSpecificationOnlyElement");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleJMLSpecificationOnlyElement
entryRuleJMLSpecificationOnlyElement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getJMLSpecificationOnlyElementRule()); }
	 iv_ruleJMLSpecificationOnlyElement=ruleJMLSpecificationOnlyElement 
	 { $current=$iv_ruleJMLSpecificationOnlyElement.current; } 
	 EOF 
;

// Rule JMLSpecificationOnlyElement
ruleJMLSpecificationOnlyElement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getJMLSpecificationOnlyElementAccess().getJMLGhostElementParserRuleCall_0()); 
    }
    this_JMLGhostElement_0=ruleJMLGhostElement
    { 
        $current = $this_JMLGhostElement_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getJMLSpecificationOnlyElementAccess().getJMLModelElementParserRuleCall_1()); 
    }
    this_JMLModelElement_1=ruleJMLModelElement
    { 
        $current = $this_JMLModelElement_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleJMLModelElement
entryRuleJMLModelElement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getJMLModelElementRule()); }
	 iv_ruleJMLModelElement=ruleJMLModelElement 
	 { $current=$iv_ruleJMLModelElement.current; } 
	 EOF 
;

// Rule JMLModelElement
ruleJMLModelElement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='model' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getJMLModelElementAccess().getModelKeyword_0());
    }
(
(
		lv_instance_1_0=	'instance' 
    {
        newLeafNode(lv_instance_1_0, grammarAccess.getJMLModelElementAccess().getInstanceInstanceKeyword_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getJMLModelElementRule());
	        }
       		setWithLastConsumed($current, "instance", true, "instance");
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getJMLModelElementAccess().getElementMemberDeclWithModifierSpecParserRuleCall_2_0()); 
	    }
		lv_element_2_0=ruleMemberDeclWithModifierSpec		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getJMLModelElementRule());
	        }
       		set(
       			$current, 
       			"element",
        		lv_element_2_0, 
        		"tools.vitruvius.domains.jml.language.JML.MemberDeclWithModifierSpec");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleJMLGhostElement
entryRuleJMLGhostElement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getJMLGhostElementRule()); }
	 iv_ruleJMLGhostElement=ruleJMLGhostElement 
	 { $current=$iv_ruleJMLGhostElement.current; } 
	 EOF 
;

// Rule JMLGhostElement
ruleJMLGhostElement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='ghost' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getJMLGhostElementAccess().getGhostKeyword_0());
    }
(
(
		lv_instance_1_0=	'instance' 
    {
        newLeafNode(lv_instance_1_0, grammarAccess.getJMLGhostElementAccess().getInstanceInstanceKeyword_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getJMLGhostElementRule());
	        }
       		setWithLastConsumed($current, "instance", true, "instance");
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getJMLGhostElementAccess().getElementMemberDeclWithModifierSpecParserRuleCall_2_0()); 
	    }
		lv_element_2_0=ruleMemberDeclWithModifierSpec		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getJMLGhostElementRule());
	        }
       		set(
       			$current, 
       			"element",
        		lv_element_2_0, 
        		"tools.vitruvius.domains.jml.language.JML.MemberDeclWithModifierSpec");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleJMLTypeExpressionWithModifier
entryRuleJMLTypeExpressionWithModifier returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getJMLTypeExpressionWithModifierRule()); }
	 iv_ruleJMLTypeExpressionWithModifier=ruleJMLTypeExpressionWithModifier 
	 { $current=$iv_ruleJMLTypeExpressionWithModifier.current; } 
	 EOF 
;

// Rule JMLTypeExpressionWithModifier
ruleJMLTypeExpressionWithModifier returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getJMLTypeExpressionWithModifierAccess().getModifierVisiblityModifierParserRuleCall_0_0()); 
	    }
		lv_modifier_0_0=ruleVisiblityModifier		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getJMLTypeExpressionWithModifierRule());
	        }
       		add(
       			$current, 
       			"modifier",
        		lv_modifier_0_0, 
        		"tools.vitruvius.domains.jml.language.JML.VisiblityModifier");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		{ 
	        newCompositeNode(grammarAccess.getJMLTypeExpressionWithModifierAccess().getSpecJMLTypeExpressionParserRuleCall_1_0()); 
	    }
		lv_spec_1_0=ruleJMLTypeExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getJMLTypeExpressionWithModifierRule());
	        }
       		set(
       			$current, 
       			"spec",
        		lv_spec_1_0, 
        		"tools.vitruvius.domains.jml.language.JML.JMLTypeExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleJMLTypeExpression
entryRuleJMLTypeExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getJMLTypeExpressionRule()); }
	 iv_ruleJMLTypeExpression=ruleJMLTypeExpression 
	 { $current=$iv_ruleJMLTypeExpression.current; } 
	 EOF 
;

// Rule JMLTypeExpression
ruleJMLTypeExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getJMLTypeExpressionAccess().getJMLInvariantExpressionParserRuleCall_0_0()); 
    }
    this_JMLInvariantExpression_0=ruleJMLInvariantExpression
    { 
        $current = $this_JMLInvariantExpression_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getJMLTypeExpressionAccess().getJMLConstraintExpressionParserRuleCall_0_1()); 
    }
    this_JMLConstraintExpression_1=ruleJMLConstraintExpression
    { 
        $current = $this_JMLConstraintExpression_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getJMLTypeExpressionAccess().getJMLAxiomExpressionParserRuleCall_0_2()); 
    }
    this_JMLAxiomExpression_2=ruleJMLAxiomExpression
    { 
        $current = $this_JMLAxiomExpression_2.current; 
        afterParserOrEnumRuleCall();
    }
)	otherlv_3=';' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getJMLTypeExpressionAccess().getSemicolonKeyword_1());
    }
)
;





// Entry rule entryRuleJMLInvariantExpression
entryRuleJMLInvariantExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getJMLInvariantExpressionRule()); }
	 iv_ruleJMLInvariantExpression=ruleJMLInvariantExpression 
	 { $current=$iv_ruleJMLInvariantExpression.current; } 
	 EOF 
;

// Rule JMLInvariantExpression
ruleJMLInvariantExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='invariant' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getJMLInvariantExpressionAccess().getInvariantKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getJMLInvariantExpressionAccess().getExprExpressionParserRuleCall_1_0()); 
	    }
		lv_expr_1_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getJMLInvariantExpressionRule());
	        }
       		set(
       			$current, 
       			"expr",
        		lv_expr_1_0, 
        		"tools.vitruvius.domains.jml.language.JML.Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleJMLConstraintExpression
entryRuleJMLConstraintExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getJMLConstraintExpressionRule()); }
	 iv_ruleJMLConstraintExpression=ruleJMLConstraintExpression 
	 { $current=$iv_ruleJMLConstraintExpression.current; } 
	 EOF 
;

// Rule JMLConstraintExpression
ruleJMLConstraintExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='constraint' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getJMLConstraintExpressionAccess().getConstraintKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getJMLConstraintExpressionAccess().getExprExpressionParserRuleCall_1_0()); 
	    }
		lv_expr_1_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getJMLConstraintExpressionRule());
	        }
       		set(
       			$current, 
       			"expr",
        		lv_expr_1_0, 
        		"tools.vitruvius.domains.jml.language.JML.Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleJMLAxiomExpression
entryRuleJMLAxiomExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getJMLAxiomExpressionRule()); }
	 iv_ruleJMLAxiomExpression=ruleJMLAxiomExpression 
	 { $current=$iv_ruleJMLAxiomExpression.current; } 
	 EOF 
;

// Rule JMLAxiomExpression
ruleJMLAxiomExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='axiom' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getJMLAxiomExpressionAccess().getAxiomKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getJMLAxiomExpressionAccess().getExprExpressionParserRuleCall_1_0()); 
	    }
		lv_expr_1_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getJMLAxiomExpressionRule());
	        }
       		set(
       			$current, 
       			"expr",
        		lv_expr_1_0, 
        		"tools.vitruvius.domains.jml.language.JML.Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleJMLMemberModifier
entryRuleJMLMemberModifier returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getJMLMemberModifierRule()); }
	 iv_ruleJMLMemberModifier=ruleJMLMemberModifier 
	 { $current=$iv_ruleJMLMemberModifier.current; } 
	 EOF 
;

// Rule JMLMemberModifier
ruleJMLMemberModifier returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getJMLMemberModifierAccess().getModifierJMLSpecMemberModifierEnumRuleCall_0()); 
	    }
		lv_modifier_0_0=ruleJMLSpecMemberModifier		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getJMLMemberModifierRule());
	        }
       		set(
       			$current, 
       			"modifier",
        		lv_modifier_0_0, 
        		"tools.vitruvius.domains.jml.language.JML.JMLSpecMemberModifier");
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRuleMemberDeclWithModifier
entryRuleMemberDeclWithModifier returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMemberDeclWithModifierRule()); }
	 iv_ruleMemberDeclWithModifier=ruleMemberDeclWithModifier 
	 { $current=$iv_ruleMemberDeclWithModifier.current; } 
	 EOF 
;

// Rule MemberDeclWithModifier
ruleMemberDeclWithModifier returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getMemberDeclWithModifierAccess().getMemberDeclWithModifierRegularParserRuleCall_0()); 
    }
    this_MemberDeclWithModifierRegular_0=ruleMemberDeclWithModifierRegular
    { 
        $current = $this_MemberDeclWithModifierRegular_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getMemberDeclWithModifierAccess().getMemberDeclWithModifierSpecParserRuleCall_1()); 
    }
    this_MemberDeclWithModifierSpec_1=ruleMemberDeclWithModifierSpec
    { 
        $current = $this_MemberDeclWithModifierSpec_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleMemberDeclWithModifierRegular
entryRuleMemberDeclWithModifierRegular returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMemberDeclWithModifierRegularRule()); }
	 iv_ruleMemberDeclWithModifierRegular=ruleMemberDeclWithModifierRegular 
	 { $current=$iv_ruleMemberDeclWithModifierRegular.current; } 
	 EOF 
;

// Rule MemberDeclWithModifierRegular
ruleMemberDeclWithModifierRegular returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getMemberDeclWithModifierRegularAccess().getModifiersModifierParserRuleCall_0_0()); 
	    }
		lv_modifiers_0_0=ruleModifier		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMemberDeclWithModifierRegularRule());
	        }
       		add(
       			$current, 
       			"modifiers",
        		lv_modifiers_0_0, 
        		"tools.vitruvius.domains.jml.language.JML.Modifier");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getMemberDeclWithModifierRegularAccess().getJMLMultilineSpecCommentStartParserRuleCall_1_0()); 
    }
ruleJMLMultilineSpecCommentStart
    { 
        afterParserOrEnumRuleCall();
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMemberDeclWithModifierRegularAccess().getJmlModifiersJMLMemberModifierParserRuleCall_1_1_0()); 
	    }
		lv_jmlModifiers_2_0=ruleJMLMemberModifier		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMemberDeclWithModifierRegularRule());
	        }
       		add(
       			$current, 
       			"jmlModifiers",
        		lv_jmlModifiers_2_0, 
        		"tools.vitruvius.domains.jml.language.JML.JMLMemberModifier");
	        afterParserOrEnumRuleCall();
	    }

)
)+
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getMemberDeclWithModifierRegularAccess().getJMLMultilineSpecCommentEndParserRuleCall_1_2()); 
    }
ruleJMLMultilineSpecCommentEnd
    { 
        afterParserOrEnumRuleCall();
    }
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getMemberDeclWithModifierRegularAccess().getMemberdeclMemberDeclParserRuleCall_2_0()); 
	    }
		lv_memberdecl_4_0=ruleMemberDecl		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMemberDeclWithModifierRegularRule());
	        }
       		set(
       			$current, 
       			"memberdecl",
        		lv_memberdecl_4_0, 
        		"tools.vitruvius.domains.jml.language.JML.MemberDecl");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleMemberDeclWithModifierSpec
entryRuleMemberDeclWithModifierSpec returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMemberDeclWithModifierSpecRule()); }
	 iv_ruleMemberDeclWithModifierSpec=ruleMemberDeclWithModifierSpec 
	 { $current=$iv_ruleMemberDeclWithModifierSpec.current; } 
	 EOF 
;

// Rule MemberDeclWithModifierSpec
ruleMemberDeclWithModifierSpec returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getMemberDeclWithModifierSpecAccess().getModifiersModifierParserRuleCall_0_0()); 
	    }
		lv_modifiers_0_0=ruleModifier		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMemberDeclWithModifierSpecRule());
	        }
       		add(
       			$current, 
       			"modifiers",
        		lv_modifiers_0_0, 
        		"tools.vitruvius.domains.jml.language.JML.Modifier");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		{ 
	        newCompositeNode(grammarAccess.getMemberDeclWithModifierSpecAccess().getJmlModifiersJMLMemberModifierParserRuleCall_1_0()); 
	    }
		lv_jmlModifiers_1_0=ruleJMLMemberModifier		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMemberDeclWithModifierSpecRule());
	        }
       		add(
       			$current, 
       			"jmlModifiers",
        		lv_jmlModifiers_1_0, 
        		"tools.vitruvius.domains.jml.language.JML.JMLMemberModifier");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		{ 
	        newCompositeNode(grammarAccess.getMemberDeclWithModifierSpecAccess().getMemberdeclMemberDeclParserRuleCall_2_0()); 
	    }
		lv_memberdecl_2_0=ruleMemberDecl		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMemberDeclWithModifierSpecRule());
	        }
       		set(
       			$current, 
       			"memberdecl",
        		lv_memberdecl_2_0, 
        		"tools.vitruvius.domains.jml.language.JML.MemberDecl");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleMemberDecl
entryRuleMemberDecl returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMemberDeclRule()); }
	 iv_ruleMemberDecl=ruleMemberDecl 
	 { $current=$iv_ruleMemberDecl.current; } 
	 EOF 
;

// Rule MemberDecl
ruleMemberDecl returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getMemberDeclAccess().getGenericMethodOrConstructorDeclParserRuleCall_0()); 
    }
    this_GenericMethodOrConstructorDecl_0=ruleGenericMethodOrConstructorDecl
    { 
        $current = $this_GenericMethodOrConstructorDecl_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getMemberDeclAccess().getMemberDeclarationParserRuleCall_1()); 
    }
    this_MemberDeclaration_1=ruleMemberDeclaration
    { 
        $current = $this_MemberDeclaration_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getMemberDeclAccess().getConstructorParserRuleCall_2()); 
    }
    this_Constructor_2=ruleConstructor
    { 
        $current = $this_Constructor_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getMemberDeclAccess().getInterfaceDeclarationParserRuleCall_3()); 
    }
    this_InterfaceDeclaration_3=ruleInterfaceDeclaration
    { 
        $current = $this_InterfaceDeclaration_3.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getMemberDeclAccess().getClassDeclarationParserRuleCall_4()); 
    }
    this_ClassDeclaration_4=ruleClassDeclaration
    { 
        $current = $this_ClassDeclaration_4.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleConstructor
entryRuleConstructor returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getConstructorRule()); }
	 iv_ruleConstructor=ruleConstructor 
	 { $current=$iv_ruleConstructor.current; } 
	 EOF 
;

// Rule Constructor
ruleConstructor returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_identifier_0_0=RULE_ID
		{
			newLeafNode(lv_identifier_0_0, grammarAccess.getConstructorAccess().getIdentifierIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getConstructorRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"identifier",
        		lv_identifier_0_0, 
        		"org.eclipse.xtext.xbase.Xtype.ID");
	    }

)
)	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getConstructorAccess().getLeftParenthesisKeyword_1());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getConstructorAccess().getParametersFormalParameterDeclParserRuleCall_2_0_0()); 
	    }
		lv_parameters_2_0=ruleFormalParameterDecl		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConstructorRule());
	        }
       		add(
       			$current, 
       			"parameters",
        		lv_parameters_2_0, 
        		"tools.vitruvius.domains.jml.language.JML.FormalParameterDecl");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getConstructorAccess().getCommaKeyword_2_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getConstructorAccess().getParametersFormalParameterDeclParserRuleCall_2_1_1_0()); 
	    }
		lv_parameters_4_0=ruleFormalParameterDecl		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConstructorRule());
	        }
       		add(
       			$current, 
       			"parameters",
        		lv_parameters_4_0, 
        		"tools.vitruvius.domains.jml.language.JML.FormalParameterDecl");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?	otherlv_5=')' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getConstructorAccess().getRightParenthesisKeyword_3());
    }
(	otherlv_6='throws' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getConstructorAccess().getThrowsKeyword_4_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getConstructorAccess().getExceptionsDeclaredExceptionParserRuleCall_4_1_0()); 
	    }
		lv_exceptions_7_0=ruleDeclaredException		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConstructorRule());
	        }
       		add(
       			$current, 
       			"exceptions",
        		lv_exceptions_7_0, 
        		"tools.vitruvius.domains.jml.language.JML.DeclaredException");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_8=',' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getConstructorAccess().getCommaKeyword_4_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getConstructorAccess().getExceptionsDeclaredExceptionParserRuleCall_4_2_1_0()); 
	    }
		lv_exceptions_9_0=ruleDeclaredException		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConstructorRule());
	        }
       		add(
       			$current, 
       			"exceptions",
        		lv_exceptions_9_0, 
        		"tools.vitruvius.domains.jml.language.JML.DeclaredException");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?((
(
		{ 
	        newCompositeNode(grammarAccess.getConstructorAccess().getConstructorbodyConstructorBodyParserRuleCall_5_0_0()); 
	    }
		lv_constructorbody_10_0=ruleConstructorBody		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConstructorRule());
	        }
       		set(
       			$current, 
       			"constructorbody",
        		lv_constructorbody_10_0, 
        		"tools.vitruvius.domains.jml.language.JML.ConstructorBody");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |	otherlv_11=';' 
    {
    	newLeafNode(otherlv_11, grammarAccess.getConstructorAccess().getSemicolonKeyword_5_1());
    }
))
;





// Entry rule entryRuleMemberDeclaration
entryRuleMemberDeclaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMemberDeclarationRule()); }
	 iv_ruleMemberDeclaration=ruleMemberDeclaration 
	 { $current=$iv_ruleMemberDeclaration.current; } 
	 EOF 
;

// Rule MemberDeclaration
ruleMemberDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
(
		{ 
	        newCompositeNode(grammarAccess.getMemberDeclarationAccess().getTypeTypeParserRuleCall_0_0_0()); 
	    }
		lv_type_0_0=ruleType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMemberDeclarationRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_0_0, 
        		"tools.vitruvius.domains.jml.language.JML.Type");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |	otherlv_1='void' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getMemberDeclarationAccess().getVoidKeyword_0_1());
    }
)((
(
		{ 
	        newCompositeNode(grammarAccess.getMemberDeclarationAccess().getMethodMethodDeclarationParserRuleCall_1_0_0()); 
	    }
		lv_method_2_0=ruleMethodDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMemberDeclarationRule());
	        }
       		set(
       			$current, 
       			"method",
        		lv_method_2_0, 
        		"tools.vitruvius.domains.jml.language.JML.MethodDeclaration");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getMemberDeclarationAccess().getFieldFieldDeclarationParserRuleCall_1_1_0()); 
	    }
		lv_field_3_0=ruleFieldDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMemberDeclarationRule());
	        }
       		set(
       			$current, 
       			"field",
        		lv_field_3_0, 
        		"tools.vitruvius.domains.jml.language.JML.FieldDeclaration");
	        afterParserOrEnumRuleCall();
	    }

)
)))
;







// Entry rule entryRuleGenericMethodOrConstructorDecl
entryRuleGenericMethodOrConstructorDecl returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getGenericMethodOrConstructorDeclRule()); }
	 iv_ruleGenericMethodOrConstructorDecl=ruleGenericMethodOrConstructorDecl 
	 { $current=$iv_ruleGenericMethodOrConstructorDecl.current; } 
	 EOF 
;

// Rule GenericMethodOrConstructorDecl
ruleGenericMethodOrConstructorDecl returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getGenericMethodOrConstructorDeclAccess().getTypeParametersTypeParametersParserRuleCall_0_0()); 
	    }
		lv_typeParameters_0_0=ruleTypeParameters		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getGenericMethodOrConstructorDeclRule());
	        }
       		set(
       			$current, 
       			"typeParameters",
        		lv_typeParameters_0_0, 
        		"tools.vitruvius.domains.jml.language.JML.TypeParameters");
	        afterParserOrEnumRuleCall();
	    }

)
)((((
(
		{ 
	        newCompositeNode(grammarAccess.getGenericMethodOrConstructorDeclAccess().getTypeTypeParserRuleCall_1_0_0_0_0()); 
	    }
		lv_type_1_0=ruleType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getGenericMethodOrConstructorDeclRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_1_0, 
        		"tools.vitruvius.domains.jml.language.JML.Type");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getGenericMethodOrConstructorDeclAccess().getMethodMethodDeclarationParserRuleCall_1_0_0_1_0()); 
	    }
		lv_method_2_0=ruleMethodDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getGenericMethodOrConstructorDeclRule());
	        }
       		set(
       			$current, 
       			"method",
        		lv_method_2_0, 
        		"tools.vitruvius.domains.jml.language.JML.MethodDeclaration");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |(	otherlv_3='void' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getGenericMethodOrConstructorDeclAccess().getVoidKeyword_1_0_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getGenericMethodOrConstructorDeclAccess().getMethodMethodDeclarationParserRuleCall_1_0_1_1_0()); 
	    }
		lv_method_4_0=ruleMethodDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getGenericMethodOrConstructorDeclRule());
	        }
       		set(
       			$current, 
       			"method",
        		lv_method_4_0, 
        		"tools.vitruvius.domains.jml.language.JML.MethodDeclaration");
	        afterParserOrEnumRuleCall();
	    }

)
)))
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getGenericMethodOrConstructorDeclAccess().getConstructorConstructorParserRuleCall_1_1_0()); 
	    }
		lv_constructor_5_0=ruleConstructor		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getGenericMethodOrConstructorDeclRule());
	        }
       		set(
       			$current, 
       			"constructor",
        		lv_constructor_5_0, 
        		"tools.vitruvius.domains.jml.language.JML.Constructor");
	        afterParserOrEnumRuleCall();
	    }

)
)))
;





// Entry rule entryRuleMethodDeclaration
entryRuleMethodDeclaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMethodDeclarationRule()); }
	 iv_ruleMethodDeclaration=ruleMethodDeclaration 
	 { $current=$iv_ruleMethodDeclaration.current; } 
	 EOF 
;

// Rule MethodDeclaration
ruleMethodDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_identifier_0_0=RULE_ID
		{
			newLeafNode(lv_identifier_0_0, grammarAccess.getMethodDeclarationAccess().getIdentifierIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getMethodDeclarationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"identifier",
        		lv_identifier_0_0, 
        		"org.eclipse.xtext.xbase.Xtype.ID");
	    }

)
)	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getMethodDeclarationAccess().getLeftParenthesisKeyword_1());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getMethodDeclarationAccess().getParametersFormalParameterDeclParserRuleCall_2_0_0()); 
	    }
		lv_parameters_2_0=ruleFormalParameterDecl		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMethodDeclarationRule());
	        }
       		add(
       			$current, 
       			"parameters",
        		lv_parameters_2_0, 
        		"tools.vitruvius.domains.jml.language.JML.FormalParameterDecl");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getMethodDeclarationAccess().getCommaKeyword_2_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMethodDeclarationAccess().getParametersFormalParameterDeclParserRuleCall_2_1_1_0()); 
	    }
		lv_parameters_4_0=ruleFormalParameterDecl		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMethodDeclarationRule());
	        }
       		add(
       			$current, 
       			"parameters",
        		lv_parameters_4_0, 
        		"tools.vitruvius.domains.jml.language.JML.FormalParameterDecl");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?	otherlv_5=')' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getMethodDeclarationAccess().getRightParenthesisKeyword_3());
    }
(	otherlv_6='throws' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getMethodDeclarationAccess().getThrowsKeyword_4_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMethodDeclarationAccess().getExceptionsDeclaredExceptionParserRuleCall_4_1_0()); 
	    }
		lv_exceptions_7_0=ruleDeclaredException		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMethodDeclarationRule());
	        }
       		add(
       			$current, 
       			"exceptions",
        		lv_exceptions_7_0, 
        		"tools.vitruvius.domains.jml.language.JML.DeclaredException");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_8=',' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getMethodDeclarationAccess().getCommaKeyword_4_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMethodDeclarationAccess().getExceptionsDeclaredExceptionParserRuleCall_4_2_1_0()); 
	    }
		lv_exceptions_9_0=ruleDeclaredException		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMethodDeclarationRule());
	        }
       		add(
       			$current, 
       			"exceptions",
        		lv_exceptions_9_0, 
        		"tools.vitruvius.domains.jml.language.JML.DeclaredException");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?((
(
		{ 
	        newCompositeNode(grammarAccess.getMethodDeclarationAccess().getMethodbodyMethodBodyParserRuleCall_5_0_0()); 
	    }
		lv_methodbody_10_0=ruleMethodBody		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMethodDeclarationRule());
	        }
       		set(
       			$current, 
       			"methodbody",
        		lv_methodbody_10_0, 
        		"tools.vitruvius.domains.jml.language.JML.MethodBody");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |	otherlv_11=';' 
    {
    	newLeafNode(otherlv_11, grammarAccess.getMethodDeclarationAccess().getSemicolonKeyword_5_1());
    }
))
;





// Entry rule entryRuleFieldDeclaration
entryRuleFieldDeclaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFieldDeclarationRule()); }
	 iv_ruleFieldDeclaration=ruleFieldDeclaration 
	 { $current=$iv_ruleFieldDeclaration.current; } 
	 EOF 
;

// Rule FieldDeclaration
ruleFieldDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getFieldDeclarationAccess().getVariabledeclaratorVariableDeclaratorParserRuleCall_0_0()); 
	    }
		lv_variabledeclarator_0_0=ruleVariableDeclarator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFieldDeclarationRule());
	        }
       		add(
       			$current, 
       			"variabledeclarator",
        		lv_variabledeclarator_0_0, 
        		"tools.vitruvius.domains.jml.language.JML.VariableDeclarator");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_1=',' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getFieldDeclarationAccess().getCommaKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFieldDeclarationAccess().getVariabledeclaratorVariableDeclaratorParserRuleCall_1_1_0()); 
	    }
		lv_variabledeclarator_2_0=ruleVariableDeclarator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFieldDeclarationRule());
	        }
       		add(
       			$current, 
       			"variabledeclarator",
        		lv_variabledeclarator_2_0, 
        		"tools.vitruvius.domains.jml.language.JML.VariableDeclarator");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_3=';' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getFieldDeclarationAccess().getSemicolonKeyword_2());
    }
)
;





// Entry rule entryRuleDeclaredException
entryRuleDeclaredException returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDeclaredExceptionRule()); }
	 iv_ruleDeclaredException=ruleDeclaredException 
	 { $current=$iv_ruleDeclaredException.current; } 
	 EOF 
;

// Rule DeclaredException
ruleDeclaredException returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getDeclaredExceptionAccess().getNameQualifiedNameParserRuleCall_0()); 
	    }
		lv_name_0_0=ruleQualifiedName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDeclaredExceptionRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"tools.vitruvius.domains.jml.language.JML.QualifiedName");
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRuleVariableDeclarator
entryRuleVariableDeclarator returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getVariableDeclaratorRule()); }
	 iv_ruleVariableDeclarator=ruleVariableDeclarator 
	 { $current=$iv_ruleVariableDeclarator.current; } 
	 EOF 
;

// Rule VariableDeclarator
ruleVariableDeclarator returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getVariableDeclaratorAccess().getVariableDeclaratorAction_0(),
            $current);
    }
)(
(
		lv_identifier_1_0=RULE_ID
		{
			newLeafNode(lv_identifier_1_0, grammarAccess.getVariableDeclaratorAccess().getIdentifierIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getVariableDeclaratorRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"identifier",
        		lv_identifier_1_0, 
        		"org.eclipse.xtext.xbase.Xtype.ID");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getVariableDeclaratorAccess().getBracketsBracketsParserRuleCall_2_0()); 
	    }
		lv_brackets_2_0=ruleBrackets		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getVariableDeclaratorRule());
	        }
       		add(
       			$current, 
       			"brackets",
        		lv_brackets_2_0, 
        		"tools.vitruvius.domains.jml.language.JML.Brackets");
	        afterParserOrEnumRuleCall();
	    }

)
)*(	otherlv_3='=' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getVariableDeclaratorAccess().getEqualsSignKeyword_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getVariableDeclaratorAccess().getExpressionExpressionParserRuleCall_3_1_0()); 
	    }
		lv_expression_4_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getVariableDeclaratorRule());
	        }
       		set(
       			$current, 
       			"expression",
        		lv_expression_4_0, 
        		"tools.vitruvius.domains.jml.language.JML.Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleType
entryRuleType returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTypeRule()); }
	 iv_ruleType=ruleType 
	 { $current=$iv_ruleType.current; } 
	 EOF 
;

// Rule Type
ruleType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getTypeAccess().getClassOrInterfaceTypeWithBracketsParserRuleCall_0()); 
    }
    this_ClassOrInterfaceTypeWithBrackets_0=ruleClassOrInterfaceTypeWithBrackets
    { 
        $current = $this_ClassOrInterfaceTypeWithBrackets_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getTypeAccess().getPrimitiveTypeWithBracketsParserRuleCall_1()); 
    }
    this_PrimitiveTypeWithBrackets_1=rulePrimitiveTypeWithBrackets
    { 
        $current = $this_PrimitiveTypeWithBrackets_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleClassOrInterfaceTypeWithBrackets
entryRuleClassOrInterfaceTypeWithBrackets returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getClassOrInterfaceTypeWithBracketsRule()); }
	 iv_ruleClassOrInterfaceTypeWithBrackets=ruleClassOrInterfaceTypeWithBrackets 
	 { $current=$iv_ruleClassOrInterfaceTypeWithBrackets.current; } 
	 EOF 
;

// Rule ClassOrInterfaceTypeWithBrackets
ruleClassOrInterfaceTypeWithBrackets returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getClassOrInterfaceTypeWithBracketsAccess().getTypeClassifierTypeParserRuleCall_0_0()); 
	    }
		lv_type_0_0=ruleClassifierType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getClassOrInterfaceTypeWithBracketsRule());
	        }
       		add(
       			$current, 
       			"type",
        		lv_type_0_0, 
        		"tools.vitruvius.domains.jml.language.JML.ClassifierType");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_1='.' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getClassOrInterfaceTypeWithBracketsAccess().getFullStopKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getClassOrInterfaceTypeWithBracketsAccess().getTypeClassifierTypeParserRuleCall_1_1_0()); 
	    }
		lv_type_2_0=ruleClassifierType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getClassOrInterfaceTypeWithBracketsRule());
	        }
       		add(
       			$current, 
       			"type",
        		lv_type_2_0, 
        		"tools.vitruvius.domains.jml.language.JML.ClassifierType");
	        afterParserOrEnumRuleCall();
	    }

)
))*(
(
		{ 
	        newCompositeNode(grammarAccess.getClassOrInterfaceTypeWithBracketsAccess().getBracketsBracketsParserRuleCall_2_0()); 
	    }
		lv_brackets_3_0=ruleBrackets		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getClassOrInterfaceTypeWithBracketsRule());
	        }
       		add(
       			$current, 
       			"brackets",
        		lv_brackets_3_0, 
        		"tools.vitruvius.domains.jml.language.JML.Brackets");
	        afterParserOrEnumRuleCall();
	    }

)
)*)
;





// Entry rule entryRulePrimitiveTypeWithBrackets
entryRulePrimitiveTypeWithBrackets returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPrimitiveTypeWithBracketsRule()); }
	 iv_rulePrimitiveTypeWithBrackets=rulePrimitiveTypeWithBrackets 
	 { $current=$iv_rulePrimitiveTypeWithBrackets.current; } 
	 EOF 
;

// Rule PrimitiveTypeWithBrackets
rulePrimitiveTypeWithBrackets returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getPrimitiveTypeWithBracketsAccess().getPrimitivetypePrimitiveTypeEnumRuleCall_0_0()); 
	    }
		lv_primitivetype_0_0=rulePrimitiveType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPrimitiveTypeWithBracketsRule());
	        }
       		set(
       			$current, 
       			"primitivetype",
        		lv_primitivetype_0_0, 
        		"tools.vitruvius.domains.jml.language.JML.PrimitiveType");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getPrimitiveTypeWithBracketsAccess().getBracketsBracketsParserRuleCall_1_0()); 
	    }
		lv_brackets_1_0=ruleBrackets		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPrimitiveTypeWithBracketsRule());
	        }
       		add(
       			$current, 
       			"brackets",
        		lv_brackets_1_0, 
        		"tools.vitruvius.domains.jml.language.JML.Brackets");
	        afterParserOrEnumRuleCall();
	    }

)
)*)
;





// Entry rule entryRuleBrackets
entryRuleBrackets returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBracketsRule()); }
	 iv_ruleBrackets=ruleBrackets 
	 { $current=$iv_ruleBrackets.current; } 
	 EOF 
;

// Rule Brackets
ruleBrackets returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getBracketsAccess().getBracketsAction_0(),
            $current);
    }
)	otherlv_1='[' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getBracketsAccess().getLeftSquareBracketKeyword_1());
    }
	otherlv_2=']' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getBracketsAccess().getRightSquareBracketKeyword_2());
    }
)
;







// Entry rule entryRuleClassifierType
entryRuleClassifierType returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getClassifierTypeRule()); }
	 iv_ruleClassifierType=ruleClassifierType 
	 { $current=$iv_ruleClassifierType.current; } 
	 EOF 
;

// Rule ClassifierType
ruleClassifierType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_identifier_0_0=RULE_ID
		{
			newLeafNode(lv_identifier_0_0, grammarAccess.getClassifierTypeAccess().getIdentifierIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getClassifierTypeRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"identifier",
        		lv_identifier_0_0, 
        		"org.eclipse.xtext.xbase.Xtype.ID");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getClassifierTypeAccess().getTypeargumentsTypeArgumentsParserRuleCall_1_0()); 
	    }
		lv_typearguments_1_0=ruleTypeArguments		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getClassifierTypeRule());
	        }
       		set(
       			$current, 
       			"typearguments",
        		lv_typearguments_1_0, 
        		"tools.vitruvius.domains.jml.language.JML.TypeArguments");
	        afterParserOrEnumRuleCall();
	    }

)
)?)
;





// Entry rule entryRuleTypeArguments
entryRuleTypeArguments returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTypeArgumentsRule()); }
	 iv_ruleTypeArguments=ruleTypeArguments 
	 { $current=$iv_ruleTypeArguments.current; } 
	 EOF 
;

// Rule TypeArguments
ruleTypeArguments returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='<' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getTypeArgumentsAccess().getLessThanSignKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTypeArgumentsAccess().getTypeargumentTypeArgumentParserRuleCall_1_0()); 
	    }
		lv_typeargument_1_0=ruleTypeArgument		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTypeArgumentsRule());
	        }
       		add(
       			$current, 
       			"typeargument",
        		lv_typeargument_1_0, 
        		"tools.vitruvius.domains.jml.language.JML.TypeArgument");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_2=',' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getTypeArgumentsAccess().getCommaKeyword_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTypeArgumentsAccess().getTypeargumentTypeArgumentParserRuleCall_2_1_0()); 
	    }
		lv_typeargument_3_0=ruleTypeArgument		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTypeArgumentsRule());
	        }
       		add(
       			$current, 
       			"typeargument",
        		lv_typeargument_3_0, 
        		"tools.vitruvius.domains.jml.language.JML.TypeArgument");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_4='>' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getTypeArgumentsAccess().getGreaterThanSignKeyword_3());
    }
)
;





// Entry rule entryRuleTypeArgument
entryRuleTypeArgument returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTypeArgumentRule()); }
	 iv_ruleTypeArgument=ruleTypeArgument 
	 { $current=$iv_ruleTypeArgument.current; } 
	 EOF 
;

// Rule TypeArgument
ruleTypeArgument returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getTypeArgumentAccess().getTypeArgumentAction_0(),
            $current);
    }
)((
(
		{ 
	        newCompositeNode(grammarAccess.getTypeArgumentAccess().getTypeTypeParserRuleCall_1_0_0()); 
	    }
		lv_type_1_0=ruleType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTypeArgumentRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_1_0, 
        		"tools.vitruvius.domains.jml.language.JML.Type");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |((
(
		lv_wildcard_2_0=	'?' 
    {
        newLeafNode(lv_wildcard_2_0, grammarAccess.getTypeArgumentAccess().getWildcardQuestionMarkKeyword_1_1_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTypeArgumentRule());
	        }
       		setWithLastConsumed($current, "wildcard", true, "?");
	    }

)
)(((
(
		lv_extends_3_0=	'extends' 
    {
        newLeafNode(lv_extends_3_0, grammarAccess.getTypeArgumentAccess().getExtendsExtendsKeyword_1_1_1_0_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTypeArgumentRule());
	        }
       		setWithLastConsumed($current, "extends", true, "extends");
	    }

)
)
    |(
(
		lv_super_4_0=	'super' 
    {
        newLeafNode(lv_super_4_0, grammarAccess.getTypeArgumentAccess().getSuperSuperKeyword_1_1_1_0_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTypeArgumentRule());
	        }
       		setWithLastConsumed($current, "super", true, "super");
	    }

)
))(
(
		{ 
	        newCompositeNode(grammarAccess.getTypeArgumentAccess().getTypeTypeParserRuleCall_1_1_1_1_0()); 
	    }
		lv_type_5_0=ruleType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTypeArgumentRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_5_0, 
        		"tools.vitruvius.domains.jml.language.JML.Type");
	        afterParserOrEnumRuleCall();
	    }

)
))?)))
;





// Entry rule entryRuleFormalParameterDecl
entryRuleFormalParameterDecl returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFormalParameterDeclRule()); }
	 iv_ruleFormalParameterDecl=ruleFormalParameterDecl 
	 { $current=$iv_ruleFormalParameterDecl.current; } 
	 EOF 
;

// Rule FormalParameterDecl
ruleFormalParameterDecl returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getFormalParameterDeclAccess().getModifiersModifierParserRuleCall_0_0()); 
	    }
		lv_modifiers_0_0=ruleModifier		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFormalParameterDeclRule());
	        }
       		add(
       			$current, 
       			"modifiers",
        		lv_modifiers_0_0, 
        		"tools.vitruvius.domains.jml.language.JML.Modifier");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		{ 
	        newCompositeNode(grammarAccess.getFormalParameterDeclAccess().getTypeTypeParserRuleCall_1_0()); 
	    }
		lv_type_1_0=ruleType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFormalParameterDeclRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_1_0, 
        		"tools.vitruvius.domains.jml.language.JML.Type");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		lv_varargs_2_0=	'...' 
    {
        newLeafNode(lv_varargs_2_0, grammarAccess.getFormalParameterDeclAccess().getVarargsFullStopFullStopFullStopKeyword_2_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFormalParameterDeclRule());
	        }
       		setWithLastConsumed($current, "varargs", true, "...");
	    }

)
)?(
(
		lv_identifier_3_0=RULE_ID
		{
			newLeafNode(lv_identifier_3_0, grammarAccess.getFormalParameterDeclAccess().getIdentifierIDTerminalRuleCall_3_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFormalParameterDeclRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"identifier",
        		lv_identifier_3_0, 
        		"org.eclipse.xtext.xbase.Xtype.ID");
	    }

)
))
;





// Entry rule entryRuleMethodBody
entryRuleMethodBody returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMethodBodyRule()); }
	 iv_ruleMethodBody=ruleMethodBody 
	 { $current=$iv_ruleMethodBody.current; } 
	 EOF 
;

// Rule MethodBody
ruleMethodBody returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getMethodBodyAccess().getBlockParserRuleCall()); 
    }
    this_Block_0=ruleBlock
    { 
        $current = $this_Block_0.current; 
        afterParserOrEnumRuleCall();
    }

;





// Entry rule entryRuleConstructorBody
entryRuleConstructorBody returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getConstructorBodyRule()); }
	 iv_ruleConstructorBody=ruleConstructorBody 
	 { $current=$iv_ruleConstructorBody.current; } 
	 EOF 
;

// Rule ConstructorBody
ruleConstructorBody returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getConstructorBodyAccess().getConstructorBodyAction_0(),
            $current);
    }
)	otherlv_1='{' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getConstructorBodyAccess().getLeftCurlyBracketKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getConstructorBodyAccess().getBlockstatementBlockStatementParserRuleCall_2_0()); 
	    }
		lv_blockstatement_2_0=ruleBlockStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConstructorBodyRule());
	        }
       		add(
       			$current, 
       			"blockstatement",
        		lv_blockstatement_2_0, 
        		"tools.vitruvius.domains.jml.language.JML.BlockStatement");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_3='}' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getConstructorBodyAccess().getRightCurlyBracketKeyword_3());
    }
)
;









// Entry rule entryRuleAnnotations
entryRuleAnnotations returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAnnotationsRule()); }
	 iv_ruleAnnotations=ruleAnnotations 
	 { $current=$iv_ruleAnnotations.current; } 
	 EOF 
;

// Rule Annotations
ruleAnnotations returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getAnnotationsAccess().getAnnotationAnnotationParserRuleCall_0()); 
	    }
		lv_annotation_0_0=ruleAnnotation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAnnotationsRule());
	        }
       		add(
       			$current, 
       			"annotation",
        		lv_annotation_0_0, 
        		"tools.vitruvius.domains.jml.language.JML.Annotation");
	        afterParserOrEnumRuleCall();
	    }

)
)+
;





// Entry rule entryRuleAnnotation
entryRuleAnnotation returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAnnotationRule()); }
	 iv_ruleAnnotation=ruleAnnotation 
	 { $current=$iv_ruleAnnotation.current; } 
	 EOF 
;

// Rule Annotation
ruleAnnotation returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getAnnotationAccess().getAnnotationAction_0(),
            $current);
    }
)	otherlv_1='@' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getAnnotationAccess().getCommercialAtKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAnnotationAccess().getAnnotationnameAnnotationNameParserRuleCall_2_0()); 
	    }
		lv_annotationname_2_0=ruleAnnotationName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAnnotationRule());
	        }
       		set(
       			$current, 
       			"annotationname",
        		lv_annotationname_2_0, 
        		"tools.vitruvius.domains.jml.language.JML.AnnotationName");
	        afterParserOrEnumRuleCall();
	    }

)
)(((	'(' 
)=>	otherlv_3='(' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getAnnotationAccess().getLeftParenthesisKeyword_3_0());
    }
)((
(
		{ 
	        newCompositeNode(grammarAccess.getAnnotationAccess().getElementvaluepairsElementValuePairsParserRuleCall_3_1_0_0()); 
	    }
		lv_elementvaluepairs_4_0=ruleElementValuePairs		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAnnotationRule());
	        }
       		set(
       			$current, 
       			"elementvaluepairs",
        		lv_elementvaluepairs_4_0, 
        		"tools.vitruvius.domains.jml.language.JML.ElementValuePairs");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getAnnotationAccess().getElementvalueElementValueParserRuleCall_3_1_1_0()); 
	    }
		lv_elementvalue_5_0=ruleElementValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAnnotationRule());
	        }
       		set(
       			$current, 
       			"elementvalue",
        		lv_elementvalue_5_0, 
        		"tools.vitruvius.domains.jml.language.JML.ElementValue");
	        afterParserOrEnumRuleCall();
	    }

)
))?	otherlv_6=')' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getAnnotationAccess().getRightParenthesisKeyword_3_2());
    }
)?)
;





// Entry rule entryRuleAnnotationName
entryRuleAnnotationName returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getAnnotationNameRule()); } 
	 iv_ruleAnnotationName=ruleAnnotationName 
	 { $current=$iv_ruleAnnotationName.current.getText(); }  
	 EOF 
;

// Rule AnnotationName
ruleAnnotationName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_ID_0=RULE_ID    {
		$current.merge(this_ID_0);
    }

    { 
    newLeafNode(this_ID_0, grammarAccess.getAnnotationNameAccess().getIDTerminalRuleCall_0()); 
    }
(((
	'.' 
)=>
	kw='.' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getAnnotationNameAccess().getFullStopKeyword_1_0()); 
    }
)    this_ID_2=RULE_ID    {
		$current.merge(this_ID_2);
    }

    { 
    newLeafNode(this_ID_2, grammarAccess.getAnnotationNameAccess().getIDTerminalRuleCall_1_1()); 
    }
)*)
    ;





// Entry rule entryRuleElementValuePairs
entryRuleElementValuePairs returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getElementValuePairsRule()); }
	 iv_ruleElementValuePairs=ruleElementValuePairs 
	 { $current=$iv_ruleElementValuePairs.current; } 
	 EOF 
;

// Rule ElementValuePairs
ruleElementValuePairs returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getElementValuePairsAccess().getElementvaluepairElementValuePairParserRuleCall_0_0()); 
	    }
		lv_elementvaluepair_0_0=ruleElementValuePair		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getElementValuePairsRule());
	        }
       		add(
       			$current, 
       			"elementvaluepair",
        		lv_elementvaluepair_0_0, 
        		"tools.vitruvius.domains.jml.language.JML.ElementValuePair");
	        afterParserOrEnumRuleCall();
	    }

)
)(((	',' 
)=>	otherlv_1=',' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getElementValuePairsAccess().getCommaKeyword_1_0());
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getElementValuePairsAccess().getElementvaluepairElementValuePairParserRuleCall_1_1_0()); 
	    }
		lv_elementvaluepair_2_0=ruleElementValuePair		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getElementValuePairsRule());
	        }
       		add(
       			$current, 
       			"elementvaluepair",
        		lv_elementvaluepair_2_0, 
        		"tools.vitruvius.domains.jml.language.JML.ElementValuePair");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleElementValuePair
entryRuleElementValuePair returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getElementValuePairRule()); }
	 iv_ruleElementValuePair=ruleElementValuePair 
	 { $current=$iv_ruleElementValuePair.current; } 
	 EOF 
;

// Rule ElementValuePair
ruleElementValuePair returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_identifier_0_0=RULE_ID
		{
			newLeafNode(lv_identifier_0_0, grammarAccess.getElementValuePairAccess().getIdentifierIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getElementValuePairRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"identifier",
        		lv_identifier_0_0, 
        		"org.eclipse.xtext.xbase.Xtype.ID");
	    }

)
)	otherlv_1='=' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getElementValuePairAccess().getEqualsSignKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getElementValuePairAccess().getElementvalueElementValueParserRuleCall_2_0()); 
	    }
		lv_elementvalue_2_0=ruleElementValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getElementValuePairRule());
	        }
       		set(
       			$current, 
       			"elementvalue",
        		lv_elementvalue_2_0, 
        		"tools.vitruvius.domains.jml.language.JML.ElementValue");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleElementValue
entryRuleElementValue returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getElementValueRule()); }
	 iv_ruleElementValue=ruleElementValue 
	 { $current=$iv_ruleElementValue.current; } 
	 EOF 
;

// Rule ElementValue
ruleElementValue returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getElementValueAccess().getAnnotationParserRuleCall_0()); 
    }
    this_Annotation_0=ruleAnnotation
    { 
        $current = $this_Annotation_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getElementValueAccess().getElementValueArrayInitializerParserRuleCall_1()); 
    }
    this_ElementValueArrayInitializer_1=ruleElementValueArrayInitializer
    { 
        $current = $this_ElementValueArrayInitializer_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleElementValueArrayInitializer
entryRuleElementValueArrayInitializer returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getElementValueArrayInitializerRule()); }
	 iv_ruleElementValueArrayInitializer=ruleElementValueArrayInitializer 
	 { $current=$iv_ruleElementValueArrayInitializer.current; } 
	 EOF 
;

// Rule ElementValueArrayInitializer
ruleElementValueArrayInitializer returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getElementValueArrayInitializerAccess().getElementValueArrayInitializerAction_0(),
            $current);
    }
)	otherlv_1='{' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getElementValueArrayInitializerAccess().getLeftCurlyBracketKeyword_1());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getElementValueArrayInitializerAccess().getElementvalueElementValueParserRuleCall_2_0_0()); 
	    }
		lv_elementvalue_2_0=ruleElementValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getElementValueArrayInitializerRule());
	        }
       		add(
       			$current, 
       			"elementvalue",
        		lv_elementvalue_2_0, 
        		"tools.vitruvius.domains.jml.language.JML.ElementValue");
	        afterParserOrEnumRuleCall();
	    }

)
)(((	',' 
)=>	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getElementValueArrayInitializerAccess().getCommaKeyword_2_1_0());
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getElementValueArrayInitializerAccess().getElementvalueElementValueParserRuleCall_2_1_1_0()); 
	    }
		lv_elementvalue_4_0=ruleElementValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getElementValueArrayInitializerRule());
	        }
       		add(
       			$current, 
       			"elementvalue",
        		lv_elementvalue_4_0, 
        		"tools.vitruvius.domains.jml.language.JML.ElementValue");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?((	',' 
)=>	otherlv_5=',' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getElementValueArrayInitializerAccess().getCommaKeyword_3());
    }
)?	otherlv_6='}' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getElementValueArrayInitializerAccess().getRightCurlyBracketKeyword_4());
    }
)
;





// Entry rule entryRuleAnnotationTypeDeclaration
entryRuleAnnotationTypeDeclaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAnnotationTypeDeclarationRule()); }
	 iv_ruleAnnotationTypeDeclaration=ruleAnnotationTypeDeclaration 
	 { $current=$iv_ruleAnnotationTypeDeclaration.current; } 
	 EOF 
;

// Rule AnnotationTypeDeclaration
ruleAnnotationTypeDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='@' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getAnnotationTypeDeclarationAccess().getCommercialAtKeyword_0());
    }
	otherlv_1='interface' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getAnnotationTypeDeclarationAccess().getInterfaceKeyword_1());
    }
(
(
		lv_identifier_2_0=RULE_ID
		{
			newLeafNode(lv_identifier_2_0, grammarAccess.getAnnotationTypeDeclarationAccess().getIdentifierIDTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAnnotationTypeDeclarationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"identifier",
        		lv_identifier_2_0, 
        		"org.eclipse.xtext.xbase.Xtype.ID");
	    }

)
)	otherlv_3='{' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getAnnotationTypeDeclarationAccess().getLeftCurlyBracketKeyword_3());
    }
((
(
ruleAnnotationTypeElementDeclaration
)
)=>
(
		{ 
	        newCompositeNode(grammarAccess.getAnnotationTypeDeclarationAccess().getAnnotationtypeelementdeclarationAnnotationTypeElementDeclarationParserRuleCall_4_0()); 
	    }
		lv_annotationtypeelementdeclaration_4_0=ruleAnnotationTypeElementDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAnnotationTypeDeclarationRule());
	        }
       		add(
       			$current, 
       			"annotationtypeelementdeclaration",
        		lv_annotationtypeelementdeclaration_4_0, 
        		"tools.vitruvius.domains.jml.language.JML.AnnotationTypeElementDeclaration");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_5='}' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getAnnotationTypeDeclarationAccess().getRightCurlyBracketKeyword_5());
    }
)
;





// Entry rule entryRuleAnnotationTypeElementDeclaration
entryRuleAnnotationTypeElementDeclaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAnnotationTypeElementDeclarationRule()); }
	 iv_ruleAnnotationTypeElementDeclaration=ruleAnnotationTypeElementDeclaration 
	 { $current=$iv_ruleAnnotationTypeElementDeclaration.current; } 
	 EOF 
;

// Rule AnnotationTypeElementDeclaration
ruleAnnotationTypeElementDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getAnnotationTypeElementDeclarationAccess().getModifiersModifierParserRuleCall_0_0()); 
	    }
		lv_modifiers_0_0=ruleModifier		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAnnotationTypeElementDeclarationRule());
	        }
       		add(
       			$current, 
       			"modifiers",
        		lv_modifiers_0_0, 
        		"tools.vitruvius.domains.jml.language.JML.Modifier");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		{ 
	        newCompositeNode(grammarAccess.getAnnotationTypeElementDeclarationAccess().getAnnotationtypeelementrestAnnotationTypeElementRestParserRuleCall_1_0()); 
	    }
		lv_annotationtypeelementrest_1_0=ruleAnnotationTypeElementRest		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAnnotationTypeElementDeclarationRule());
	        }
       		set(
       			$current, 
       			"annotationtypeelementrest",
        		lv_annotationtypeelementrest_1_0, 
        		"tools.vitruvius.domains.jml.language.JML.AnnotationTypeElementRest");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleAnnotationTypeElementRest
entryRuleAnnotationTypeElementRest returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAnnotationTypeElementRestRule()); }
	 iv_ruleAnnotationTypeElementRest=ruleAnnotationTypeElementRest 
	 { $current=$iv_ruleAnnotationTypeElementRest.current; } 
	 EOF 
;

// Rule AnnotationTypeElementRest
ruleAnnotationTypeElementRest returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getAnnotationTypeElementRestAccess().getAnnotationMethodOrConstantRestParserRuleCall_0_0()); 
    }
    this_AnnotationMethodOrConstantRest_0=ruleAnnotationMethodOrConstantRest
    { 
        $current = $this_AnnotationMethodOrConstantRest_0.current; 
        afterParserOrEnumRuleCall();
    }
	otherlv_1=';' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getAnnotationTypeElementRestAccess().getSemicolonKeyword_0_1());
    }
)
    |(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getAnnotationTypeElementRestAccess().getNormalClassDeclarationParserRuleCall_1_0()); 
    }
    this_NormalClassDeclaration_2=ruleNormalClassDeclaration
    { 
        $current = $this_NormalClassDeclaration_2.current; 
        afterParserOrEnumRuleCall();
    }
(	otherlv_3=';' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getAnnotationTypeElementRestAccess().getSemicolonKeyword_1_1());
    }
)?)
    |(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getAnnotationTypeElementRestAccess().getNormalInterfaceDeclarationParserRuleCall_2_0()); 
    }
    this_NormalInterfaceDeclaration_4=ruleNormalInterfaceDeclaration
    { 
        $current = $this_NormalInterfaceDeclaration_4.current; 
        afterParserOrEnumRuleCall();
    }
(	otherlv_5=';' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getAnnotationTypeElementRestAccess().getSemicolonKeyword_2_1());
    }
)?)
    |(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getAnnotationTypeElementRestAccess().getEnumDeclarationParserRuleCall_3_0()); 
    }
    this_EnumDeclaration_6=ruleEnumDeclaration
    { 
        $current = $this_EnumDeclaration_6.current; 
        afterParserOrEnumRuleCall();
    }
(	otherlv_7=';' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getAnnotationTypeElementRestAccess().getSemicolonKeyword_3_1());
    }
)?)
    |(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getAnnotationTypeElementRestAccess().getAnnotationTypeDeclarationParserRuleCall_4_0()); 
    }
    this_AnnotationTypeDeclaration_8=ruleAnnotationTypeDeclaration
    { 
        $current = $this_AnnotationTypeDeclaration_8.current; 
        afterParserOrEnumRuleCall();
    }
(	otherlv_9=';' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getAnnotationTypeElementRestAccess().getSemicolonKeyword_4_1());
    }
)?))
;





// Entry rule entryRuleAnnotationMethodOrConstantRest
entryRuleAnnotationMethodOrConstantRest returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAnnotationMethodOrConstantRestRule()); }
	 iv_ruleAnnotationMethodOrConstantRest=ruleAnnotationMethodOrConstantRest 
	 { $current=$iv_ruleAnnotationMethodOrConstantRest.current; } 
	 EOF 
;

// Rule AnnotationMethodOrConstantRest
ruleAnnotationMethodOrConstantRest returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getAnnotationMethodOrConstantRestAccess().getTypeTypeParserRuleCall_0_0()); 
	    }
		lv_type_0_0=ruleType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAnnotationMethodOrConstantRestRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_0_0, 
        		"tools.vitruvius.domains.jml.language.JML.Type");
	        afterParserOrEnumRuleCall();
	    }

)
)((
(
		{ 
	        newCompositeNode(grammarAccess.getAnnotationMethodOrConstantRestAccess().getMethodAnnotationMethodRestParserRuleCall_1_0_0()); 
	    }
		lv_method_1_0=ruleAnnotationMethodRest		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAnnotationMethodOrConstantRestRule());
	        }
       		set(
       			$current, 
       			"method",
        		lv_method_1_0, 
        		"tools.vitruvius.domains.jml.language.JML.AnnotationMethodRest");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getAnnotationMethodOrConstantRestAccess().getConstantAnnotationConstantRestParserRuleCall_1_1_0()); 
	    }
		lv_constant_2_0=ruleAnnotationConstantRest		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAnnotationMethodOrConstantRestRule());
	        }
       		set(
       			$current, 
       			"constant",
        		lv_constant_2_0, 
        		"tools.vitruvius.domains.jml.language.JML.AnnotationConstantRest");
	        afterParserOrEnumRuleCall();
	    }

)
)))
;





// Entry rule entryRuleAnnotationMethodRest
entryRuleAnnotationMethodRest returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAnnotationMethodRestRule()); }
	 iv_ruleAnnotationMethodRest=ruleAnnotationMethodRest 
	 { $current=$iv_ruleAnnotationMethodRest.current; } 
	 EOF 
;

// Rule AnnotationMethodRest
ruleAnnotationMethodRest returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getAnnotationMethodRestAccess().getAnnotationMethodRestAction_0(),
            $current);
    }
)((
(
		lv_identifier_1_0=RULE_ID
		{
			newLeafNode(lv_identifier_1_0, grammarAccess.getAnnotationMethodRestAccess().getIdentifierIDTerminalRuleCall_1_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAnnotationMethodRestRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"identifier",
        		lv_identifier_1_0, 
        		"org.eclipse.xtext.xbase.Xtype.ID");
	    }

)
)	otherlv_2='(' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getAnnotationMethodRestAccess().getLeftParenthesisKeyword_1_1());
    }
	otherlv_3=')' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getAnnotationMethodRestAccess().getRightParenthesisKeyword_1_2());
    }
((
(
ruleDefaultValue
)
)=>
(
		{ 
	        newCompositeNode(grammarAccess.getAnnotationMethodRestAccess().getDefaultvalueDefaultValueParserRuleCall_1_3_0()); 
	    }
		lv_defaultvalue_4_0=ruleDefaultValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAnnotationMethodRestRule());
	        }
       		set(
       			$current, 
       			"defaultvalue",
        		lv_defaultvalue_4_0, 
        		"tools.vitruvius.domains.jml.language.JML.DefaultValue");
	        afterParserOrEnumRuleCall();
	    }

)
)?))
;





// Entry rule entryRuleAnnotationConstantRest
entryRuleAnnotationConstantRest returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAnnotationConstantRestRule()); }
	 iv_ruleAnnotationConstantRest=ruleAnnotationConstantRest 
	 { $current=$iv_ruleAnnotationConstantRest.current; } 
	 EOF 
;

// Rule AnnotationConstantRest
ruleAnnotationConstantRest returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getAnnotationConstantRestAccess().getVariabledeclaratorVariableDeclaratorParserRuleCall_0_0()); 
	    }
		lv_variabledeclarator_0_0=ruleVariableDeclarator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAnnotationConstantRestRule());
	        }
       		add(
       			$current, 
       			"variabledeclarator",
        		lv_variabledeclarator_0_0, 
        		"tools.vitruvius.domains.jml.language.JML.VariableDeclarator");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_1=',' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getAnnotationConstantRestAccess().getCommaKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAnnotationConstantRestAccess().getVariabledeclaratorVariableDeclaratorParserRuleCall_1_1_0()); 
	    }
		lv_variabledeclarator_2_0=ruleVariableDeclarator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAnnotationConstantRestRule());
	        }
       		add(
       			$current, 
       			"variabledeclarator",
        		lv_variabledeclarator_2_0, 
        		"tools.vitruvius.domains.jml.language.JML.VariableDeclarator");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleDefaultValue
entryRuleDefaultValue returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDefaultValueRule()); }
	 iv_ruleDefaultValue=ruleDefaultValue 
	 { $current=$iv_ruleDefaultValue.current; } 
	 EOF 
;

// Rule DefaultValue
ruleDefaultValue returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='default' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getDefaultValueAccess().getDefaultKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDefaultValueAccess().getElementvalueElementValueParserRuleCall_1_0()); 
	    }
		lv_elementvalue_1_0=ruleElementValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDefaultValueRule());
	        }
       		set(
       			$current, 
       			"elementvalue",
        		lv_elementvalue_1_0, 
        		"tools.vitruvius.domains.jml.language.JML.ElementValue");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleBlock
entryRuleBlock returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBlockRule()); }
	 iv_ruleBlock=ruleBlock 
	 { $current=$iv_ruleBlock.current; } 
	 EOF 
;

// Rule Block
ruleBlock returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getBlockAccess().getBlockAction_0(),
            $current);
    }
)	otherlv_1='{' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getBlockAccess().getLeftCurlyBracketKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getBlockAccess().getBlockstatementBlockStatementParserRuleCall_2_0()); 
	    }
		lv_blockstatement_2_0=ruleBlockStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBlockRule());
	        }
       		add(
       			$current, 
       			"blockstatement",
        		lv_blockstatement_2_0, 
        		"tools.vitruvius.domains.jml.language.JML.BlockStatement");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_3='}' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getBlockAccess().getRightCurlyBracketKeyword_3());
    }
)
;





// Entry rule entryRuleBlockStatement
entryRuleBlockStatement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBlockStatementRule()); }
	 iv_ruleBlockStatement=ruleBlockStatement 
	 { $current=$iv_ruleBlockStatement.current; } 
	 EOF 
;

// Rule BlockStatement
ruleBlockStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getBlockStatementAccess().getClassifierDeclarationWithModifierParserRuleCall_0()); 
    }
    this_ClassifierDeclarationWithModifier_0=ruleClassifierDeclarationWithModifier
    { 
        $current = $this_ClassifierDeclarationWithModifier_0.current; 
        afterParserOrEnumRuleCall();
    }

    |(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getBlockStatementAccess().getExpressionParserRuleCall_1_0()); 
    }
    this_Expression_1=ruleExpression
    { 
        $current = $this_Expression_1.current; 
        afterParserOrEnumRuleCall();
    }
	otherlv_2=';' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getBlockStatementAccess().getSemicolonKeyword_1_1());
    }
))
;







// Entry rule entryRuleExpression
entryRuleExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExpressionRule()); }
	 iv_ruleExpression=ruleExpression 
	 { $current=$iv_ruleExpression.current; } 
	 EOF 
;

// Rule Expression
ruleExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getExpressionAccess().getAssignmentParserRuleCall()); 
    }
    this_Assignment_0=ruleAssignment
    { 
        $current = $this_Assignment_0.current; 
        afterParserOrEnumRuleCall();
    }

;





// Entry rule entryRuleAssignment
entryRuleAssignment returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAssignmentRule()); }
	 iv_ruleAssignment=ruleAssignment 
	 { $current=$iv_ruleAssignment.current; } 
	 EOF 
;

// Rule Assignment
ruleAssignment returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getAssignmentAccess().getAssignmentAction_0_0(),
            $current);
    }
)((
(
		{ 
	        newCompositeNode(grammarAccess.getAssignmentAccess().getTypeForVariableDeclarationValidIDParserRuleCall_0_1_0_0()); 
	    }
		lv_typeForVariableDeclaration_1_0=ruleValidID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAssignmentRule());
	        }
       		set(
       			$current, 
       			"typeForVariableDeclaration",
        		lv_typeForVariableDeclaration_1_0, 
        		"org.eclipse.xtext.xbase.Xtype.ValidID");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_2='[' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getAssignmentAccess().getLeftSquareBracketKeyword_0_1_1_0());
    }
	otherlv_3=']' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getAssignmentAccess().getRightSquareBracketKeyword_0_1_1_1());
    }
)*)?(
(
		{ 
	        newCompositeNode(grammarAccess.getAssignmentAccess().getFeatureFeatureCallIDParserRuleCall_0_2_0()); 
	    }
		lv_feature_4_0=ruleFeatureCallID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAssignmentRule());
	        }
       		set(
       			$current, 
       			"feature",
        		lv_feature_4_0, 
        		"tools.vitruvius.domains.jml.language.JML.FeatureCallID");
	        afterParserOrEnumRuleCall();
	    }

)
)
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getAssignmentAccess().getOpSingleAssignParserRuleCall_0_3()); 
    }
ruleOpSingleAssign
    { 
        afterParserOrEnumRuleCall();
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAssignmentAccess().getValueAssignmentParserRuleCall_0_4_0()); 
	    }
		lv_value_6_0=ruleAssignment		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAssignmentRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_6_0, 
        		"tools.vitruvius.domains.jml.language.JML.Assignment");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getAssignmentAccess().getOrExpressionParserRuleCall_1_0()); 
    }
    this_OrExpression_7=ruleOrExpression
    { 
        $current = $this_OrExpression_7.current; 
        afterParserOrEnumRuleCall();
    }
(((((
)(
(
ruleOpMultiAssign
)
)))=>((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getAssignmentAccess().getBinaryOperationLeftOperandAction_1_1_0_0_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getAssignmentAccess().getFeatureOpMultiAssignParserRuleCall_1_1_0_0_1_0()); 
	    }
		lv_feature_9_0=ruleOpMultiAssign		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAssignmentRule());
	        }
       		set(
       			$current, 
       			"feature",
        		lv_feature_9_0, 
        		"tools.vitruvius.domains.jml.language.JML.OpMultiAssign");
	        afterParserOrEnumRuleCall();
	    }

)
)))(
(
		{ 
	        newCompositeNode(grammarAccess.getAssignmentAccess().getRightOperandAssignmentParserRuleCall_1_1_1_0()); 
	    }
		lv_rightOperand_10_0=ruleAssignment		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAssignmentRule());
	        }
       		set(
       			$current, 
       			"rightOperand",
        		lv_rightOperand_10_0, 
        		"tools.vitruvius.domains.jml.language.JML.Assignment");
	        afterParserOrEnumRuleCall();
	    }

)
))?))
;





// Entry rule entryRuleOpSingleAssign
entryRuleOpSingleAssign returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getOpSingleAssignRule()); } 
	 iv_ruleOpSingleAssign=ruleOpSingleAssign 
	 { $current=$iv_ruleOpSingleAssign.current.getText(); }  
	 EOF 
;

// Rule OpSingleAssign
ruleOpSingleAssign returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	kw='=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOpSingleAssignAccess().getEqualsSignKeyword()); 
    }

    ;





// Entry rule entryRuleOpMultiAssign
entryRuleOpMultiAssign returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getOpMultiAssignRule()); } 
	 iv_ruleOpMultiAssign=ruleOpMultiAssign 
	 { $current=$iv_ruleOpMultiAssign.current.getText(); }  
	 EOF 
;

// Rule OpMultiAssign
ruleOpMultiAssign returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='+=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOpMultiAssignAccess().getPlusSignEqualsSignKeyword_0()); 
    }

    |
	kw='-=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOpMultiAssignAccess().getHyphenMinusEqualsSignKeyword_1()); 
    }

    |
	kw='*=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOpMultiAssignAccess().getAsteriskEqualsSignKeyword_2()); 
    }

    |
	kw='/=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOpMultiAssignAccess().getSolidusEqualsSignKeyword_3()); 
    }

    |
	kw='%=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOpMultiAssignAccess().getPercentSignEqualsSignKeyword_4()); 
    }

    |(
	kw='<' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOpMultiAssignAccess().getLessThanSignKeyword_5_0()); 
    }

	kw='<' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOpMultiAssignAccess().getLessThanSignKeyword_5_1()); 
    }

	kw='=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOpMultiAssignAccess().getEqualsSignKeyword_5_2()); 
    }
)
    |(
	kw='>' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOpMultiAssignAccess().getGreaterThanSignKeyword_6_0()); 
    }
(
	kw='>' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOpMultiAssignAccess().getGreaterThanSignKeyword_6_1()); 
    }
)?
	kw='>=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOpMultiAssignAccess().getGreaterThanSignEqualsSignKeyword_6_2()); 
    }
))
    ;





// Entry rule entryRuleOrExpression
entryRuleOrExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getOrExpressionRule()); }
	 iv_ruleOrExpression=ruleOrExpression 
	 { $current=$iv_ruleOrExpression.current; } 
	 EOF 
;

// Rule OrExpression
ruleOrExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getOrExpressionAccess().getAndExpressionParserRuleCall_0()); 
    }
    this_AndExpression_0=ruleAndExpression
    { 
        $current = $this_AndExpression_0.current; 
        afterParserOrEnumRuleCall();
    }
(((((
)(
(
ruleOpOr
)
)))=>((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getOrExpressionAccess().getBinaryOperationLeftOperandAction_1_0_0_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getOrExpressionAccess().getFeatureOpOrParserRuleCall_1_0_0_1_0()); 
	    }
		lv_feature_2_0=ruleOpOr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOrExpressionRule());
	        }
       		set(
       			$current, 
       			"feature",
        		lv_feature_2_0, 
        		"tools.vitruvius.domains.jml.language.JML.OpOr");
	        afterParserOrEnumRuleCall();
	    }

)
)))(
(
		{ 
	        newCompositeNode(grammarAccess.getOrExpressionAccess().getRightOperandAndExpressionParserRuleCall_1_1_0()); 
	    }
		lv_rightOperand_3_0=ruleAndExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOrExpressionRule());
	        }
       		set(
       			$current, 
       			"rightOperand",
        		lv_rightOperand_3_0, 
        		"tools.vitruvius.domains.jml.language.JML.AndExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleOpOr
entryRuleOpOr returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getOpOrRule()); } 
	 iv_ruleOpOr=ruleOpOr 
	 { $current=$iv_ruleOpOr.current.getText(); }  
	 EOF 
;

// Rule OpOr
ruleOpOr returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	kw='||' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOpOrAccess().getVerticalLineVerticalLineKeyword()); 
    }

    ;





// Entry rule entryRuleAndExpression
entryRuleAndExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAndExpressionRule()); }
	 iv_ruleAndExpression=ruleAndExpression 
	 { $current=$iv_ruleAndExpression.current; } 
	 EOF 
;

// Rule AndExpression
ruleAndExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getAndExpressionAccess().getEqualityExpressionParserRuleCall_0()); 
    }
    this_EqualityExpression_0=ruleEqualityExpression
    { 
        $current = $this_EqualityExpression_0.current; 
        afterParserOrEnumRuleCall();
    }
(((((
)(
(
ruleOpAnd
)
)))=>((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getAndExpressionAccess().getBinaryOperationLeftOperandAction_1_0_0_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getAndExpressionAccess().getFeatureOpAndParserRuleCall_1_0_0_1_0()); 
	    }
		lv_feature_2_0=ruleOpAnd		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAndExpressionRule());
	        }
       		set(
       			$current, 
       			"feature",
        		lv_feature_2_0, 
        		"tools.vitruvius.domains.jml.language.JML.OpAnd");
	        afterParserOrEnumRuleCall();
	    }

)
)))(
(
		{ 
	        newCompositeNode(grammarAccess.getAndExpressionAccess().getRightOperandEqualityExpressionParserRuleCall_1_1_0()); 
	    }
		lv_rightOperand_3_0=ruleEqualityExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAndExpressionRule());
	        }
       		set(
       			$current, 
       			"rightOperand",
        		lv_rightOperand_3_0, 
        		"tools.vitruvius.domains.jml.language.JML.EqualityExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleOpAnd
entryRuleOpAnd returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getOpAndRule()); } 
	 iv_ruleOpAnd=ruleOpAnd 
	 { $current=$iv_ruleOpAnd.current.getText(); }  
	 EOF 
;

// Rule OpAnd
ruleOpAnd returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	kw='&&' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOpAndAccess().getAmpersandAmpersandKeyword()); 
    }

    ;





// Entry rule entryRuleEqualityExpression
entryRuleEqualityExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getEqualityExpressionRule()); }
	 iv_ruleEqualityExpression=ruleEqualityExpression 
	 { $current=$iv_ruleEqualityExpression.current; } 
	 EOF 
;

// Rule EqualityExpression
ruleEqualityExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getEqualityExpressionAccess().getRelationalExpressionParserRuleCall_0()); 
    }
    this_RelationalExpression_0=ruleRelationalExpression
    { 
        $current = $this_RelationalExpression_0.current; 
        afterParserOrEnumRuleCall();
    }
(((((
)(
(
ruleOpEquality
)
)))=>((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getEqualityExpressionAccess().getBinaryOperationLeftOperandAction_1_0_0_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getEqualityExpressionAccess().getFeatureOpEqualityParserRuleCall_1_0_0_1_0()); 
	    }
		lv_feature_2_0=ruleOpEquality		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEqualityExpressionRule());
	        }
       		set(
       			$current, 
       			"feature",
        		lv_feature_2_0, 
        		"tools.vitruvius.domains.jml.language.JML.OpEquality");
	        afterParserOrEnumRuleCall();
	    }

)
)))(
(
		{ 
	        newCompositeNode(grammarAccess.getEqualityExpressionAccess().getRightOperandRelationalExpressionParserRuleCall_1_1_0()); 
	    }
		lv_rightOperand_3_0=ruleRelationalExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEqualityExpressionRule());
	        }
       		set(
       			$current, 
       			"rightOperand",
        		lv_rightOperand_3_0, 
        		"tools.vitruvius.domains.jml.language.JML.RelationalExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleOpEquality
entryRuleOpEquality returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getOpEqualityRule()); } 
	 iv_ruleOpEquality=ruleOpEquality 
	 { $current=$iv_ruleOpEquality.current.getText(); }  
	 EOF 
;

// Rule OpEquality
ruleOpEquality returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='==' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOpEqualityAccess().getEqualsSignEqualsSignKeyword_0()); 
    }

    |
	kw='!=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOpEqualityAccess().getExclamationMarkEqualsSignKeyword_1()); 
    }

    |
	kw='===' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOpEqualityAccess().getEqualsSignEqualsSignEqualsSignKeyword_2()); 
    }

    |
	kw='!==' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOpEqualityAccess().getExclamationMarkEqualsSignEqualsSignKeyword_3()); 
    }
)
    ;





// Entry rule entryRuleRelationalExpression
entryRuleRelationalExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRelationalExpressionRule()); }
	 iv_ruleRelationalExpression=ruleRelationalExpression 
	 { $current=$iv_ruleRelationalExpression.current; } 
	 EOF 
;

// Rule RelationalExpression
ruleRelationalExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getRelationalExpressionAccess().getOtherOperatorExpressionParserRuleCall_0()); 
    }
    this_OtherOperatorExpression_0=ruleOtherOperatorExpression
    { 
        $current = $this_OtherOperatorExpression_0.current; 
        afterParserOrEnumRuleCall();
    }
((((((
)	'instanceof' 
))=>((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getRelationalExpressionAccess().getInstanceOfExpressionExpressionAction_1_0_0_0_0(),
            $current);
    }
)	otherlv_2='instanceof' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getRelationalExpressionAccess().getInstanceofKeyword_1_0_0_0_1());
    }
))(
(
		{ 
	        newCompositeNode(grammarAccess.getRelationalExpressionAccess().getTypeTypeParserRuleCall_1_0_1_0()); 
	    }
		lv_type_3_0=ruleType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRelationalExpressionRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_3_0, 
        		"tools.vitruvius.domains.jml.language.JML.Type");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |(((((
)(
(
ruleOpCompare
)
)))=>((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getRelationalExpressionAccess().getBinaryOperationLeftOperandAction_1_1_0_0_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getRelationalExpressionAccess().getFeatureOpCompareParserRuleCall_1_1_0_0_1_0()); 
	    }
		lv_feature_5_0=ruleOpCompare		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRelationalExpressionRule());
	        }
       		set(
       			$current, 
       			"feature",
        		lv_feature_5_0, 
        		"tools.vitruvius.domains.jml.language.JML.OpCompare");
	        afterParserOrEnumRuleCall();
	    }

)
)))(
(
		{ 
	        newCompositeNode(grammarAccess.getRelationalExpressionAccess().getRightOperandOtherOperatorExpressionParserRuleCall_1_1_1_0()); 
	    }
		lv_rightOperand_6_0=ruleOtherOperatorExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRelationalExpressionRule());
	        }
       		set(
       			$current, 
       			"rightOperand",
        		lv_rightOperand_6_0, 
        		"tools.vitruvius.domains.jml.language.JML.OtherOperatorExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)))*)
;





// Entry rule entryRuleOpCompare
entryRuleOpCompare returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getOpCompareRule()); } 
	 iv_ruleOpCompare=ruleOpCompare 
	 { $current=$iv_ruleOpCompare.current.getText(); }  
	 EOF 
;

// Rule OpCompare
ruleOpCompare returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='>=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOpCompareAccess().getGreaterThanSignEqualsSignKeyword_0()); 
    }

    |(
	kw='<' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOpCompareAccess().getLessThanSignKeyword_1_0()); 
    }

	kw='=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOpCompareAccess().getEqualsSignKeyword_1_1()); 
    }
)
    |
	kw='>' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOpCompareAccess().getGreaterThanSignKeyword_2()); 
    }

    |
	kw='<' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOpCompareAccess().getLessThanSignKeyword_3()); 
    }
)
    ;





// Entry rule entryRuleOtherOperatorExpression
entryRuleOtherOperatorExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getOtherOperatorExpressionRule()); }
	 iv_ruleOtherOperatorExpression=ruleOtherOperatorExpression 
	 { $current=$iv_ruleOtherOperatorExpression.current; } 
	 EOF 
;

// Rule OtherOperatorExpression
ruleOtherOperatorExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getOtherOperatorExpressionAccess().getAdditiveExpressionParserRuleCall_0()); 
    }
    this_AdditiveExpression_0=ruleAdditiveExpression
    { 
        $current = $this_AdditiveExpression_0.current; 
        afterParserOrEnumRuleCall();
    }
(((((
)(
(
ruleOpOther
)
)))=>((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getOtherOperatorExpressionAccess().getBinaryOperationLeftOperandAction_1_0_0_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getOtherOperatorExpressionAccess().getFeatureOpOtherParserRuleCall_1_0_0_1_0()); 
	    }
		lv_feature_2_0=ruleOpOther		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOtherOperatorExpressionRule());
	        }
       		set(
       			$current, 
       			"feature",
        		lv_feature_2_0, 
        		"tools.vitruvius.domains.jml.language.JML.OpOther");
	        afterParserOrEnumRuleCall();
	    }

)
)))(
(
		{ 
	        newCompositeNode(grammarAccess.getOtherOperatorExpressionAccess().getRightOperandAdditiveExpressionParserRuleCall_1_1_0()); 
	    }
		lv_rightOperand_3_0=ruleAdditiveExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOtherOperatorExpressionRule());
	        }
       		set(
       			$current, 
       			"rightOperand",
        		lv_rightOperand_3_0, 
        		"tools.vitruvius.domains.jml.language.JML.AdditiveExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleOpOther
entryRuleOpOther returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getOpOtherRule()); } 
	 iv_ruleOpOther=ruleOpOther 
	 { $current=$iv_ruleOpOther.current.getText(); }  
	 EOF 
;

// Rule OpOther
ruleOpOther returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='->' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOpOtherAccess().getHyphenMinusGreaterThanSignKeyword_0()); 
    }

    |
	kw='..<' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOpOtherAccess().getFullStopFullStopLessThanSignKeyword_1()); 
    }

    |(
	kw='>' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOpOtherAccess().getGreaterThanSignKeyword_2_0()); 
    }

	kw='..' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOpOtherAccess().getFullStopFullStopKeyword_2_1()); 
    }
)
    |
	kw='..' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOpOtherAccess().getFullStopFullStopKeyword_3()); 
    }

    |
	kw='=>' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOpOtherAccess().getEqualsSignGreaterThanSignKeyword_4()); 
    }

    |(
	kw='>' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOpOtherAccess().getGreaterThanSignKeyword_5_0()); 
    }
((((
	'>' 

	'>' 
))=>(
	kw='>' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOpOtherAccess().getGreaterThanSignKeyword_5_1_0_0_0()); 
    }

	kw='>' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOpOtherAccess().getGreaterThanSignKeyword_5_1_0_0_1()); 
    }
))
    |
	kw='>' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOpOtherAccess().getGreaterThanSignKeyword_5_1_1()); 
    }
))
    |(
	kw='<' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOpOtherAccess().getLessThanSignKeyword_6_0()); 
    }
((((
	'<' 

	'<' 
))=>(
	kw='<' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOpOtherAccess().getLessThanSignKeyword_6_1_0_0_0()); 
    }

	kw='<' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOpOtherAccess().getLessThanSignKeyword_6_1_0_0_1()); 
    }
))
    |
	kw='<' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOpOtherAccess().getLessThanSignKeyword_6_1_1()); 
    }

    |
	kw='=>' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOpOtherAccess().getEqualsSignGreaterThanSignKeyword_6_1_2()); 
    }
))
    |
	kw='<>' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOpOtherAccess().getLessThanSignGreaterThanSignKeyword_7()); 
    }

    |
	kw='?:' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOpOtherAccess().getQuestionMarkColonKeyword_8()); 
    }
)
    ;





// Entry rule entryRuleAdditiveExpression
entryRuleAdditiveExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAdditiveExpressionRule()); }
	 iv_ruleAdditiveExpression=ruleAdditiveExpression 
	 { $current=$iv_ruleAdditiveExpression.current; } 
	 EOF 
;

// Rule AdditiveExpression
ruleAdditiveExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getAdditiveExpressionAccess().getMultiplicativeExpressionParserRuleCall_0()); 
    }
    this_MultiplicativeExpression_0=ruleMultiplicativeExpression
    { 
        $current = $this_MultiplicativeExpression_0.current; 
        afterParserOrEnumRuleCall();
    }
(((((
)(
(
ruleOpAdd
)
)))=>((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getAdditiveExpressionAccess().getBinaryOperationLeftOperandAction_1_0_0_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getAdditiveExpressionAccess().getFeatureOpAddParserRuleCall_1_0_0_1_0()); 
	    }
		lv_feature_2_0=ruleOpAdd		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAdditiveExpressionRule());
	        }
       		set(
       			$current, 
       			"feature",
        		lv_feature_2_0, 
        		"tools.vitruvius.domains.jml.language.JML.OpAdd");
	        afterParserOrEnumRuleCall();
	    }

)
)))(
(
		{ 
	        newCompositeNode(grammarAccess.getAdditiveExpressionAccess().getRightOperandMultiplicativeExpressionParserRuleCall_1_1_0()); 
	    }
		lv_rightOperand_3_0=ruleMultiplicativeExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAdditiveExpressionRule());
	        }
       		set(
       			$current, 
       			"rightOperand",
        		lv_rightOperand_3_0, 
        		"tools.vitruvius.domains.jml.language.JML.MultiplicativeExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleOpAdd
entryRuleOpAdd returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getOpAddRule()); } 
	 iv_ruleOpAdd=ruleOpAdd 
	 { $current=$iv_ruleOpAdd.current.getText(); }  
	 EOF 
;

// Rule OpAdd
ruleOpAdd returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='+' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOpAddAccess().getPlusSignKeyword_0()); 
    }

    |
	kw='-' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOpAddAccess().getHyphenMinusKeyword_1()); 
    }
)
    ;





// Entry rule entryRuleMultiplicativeExpression
entryRuleMultiplicativeExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMultiplicativeExpressionRule()); }
	 iv_ruleMultiplicativeExpression=ruleMultiplicativeExpression 
	 { $current=$iv_ruleMultiplicativeExpression.current; } 
	 EOF 
;

// Rule MultiplicativeExpression
ruleMultiplicativeExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getMultiplicativeExpressionAccess().getUnaryOperationParserRuleCall_0()); 
    }
    this_UnaryOperation_0=ruleUnaryOperation
    { 
        $current = $this_UnaryOperation_0.current; 
        afterParserOrEnumRuleCall();
    }
(((((
)(
(
ruleOpMulti
)
)))=>((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getMultiplicativeExpressionAccess().getBinaryOperationLeftOperandAction_1_0_0_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getMultiplicativeExpressionAccess().getFeatureOpMultiParserRuleCall_1_0_0_1_0()); 
	    }
		lv_feature_2_0=ruleOpMulti		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMultiplicativeExpressionRule());
	        }
       		set(
       			$current, 
       			"feature",
        		lv_feature_2_0, 
        		"tools.vitruvius.domains.jml.language.JML.OpMulti");
	        afterParserOrEnumRuleCall();
	    }

)
)))(
(
		{ 
	        newCompositeNode(grammarAccess.getMultiplicativeExpressionAccess().getRightOperandUnaryOperationParserRuleCall_1_1_0()); 
	    }
		lv_rightOperand_3_0=ruleUnaryOperation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMultiplicativeExpressionRule());
	        }
       		set(
       			$current, 
       			"rightOperand",
        		lv_rightOperand_3_0, 
        		"tools.vitruvius.domains.jml.language.JML.UnaryOperation");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleOpMulti
entryRuleOpMulti returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getOpMultiRule()); } 
	 iv_ruleOpMulti=ruleOpMulti 
	 { $current=$iv_ruleOpMulti.current.getText(); }  
	 EOF 
;

// Rule OpMulti
ruleOpMulti returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='*' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOpMultiAccess().getAsteriskKeyword_0()); 
    }

    |
	kw='**' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOpMultiAccess().getAsteriskAsteriskKeyword_1()); 
    }

    |
	kw='/' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOpMultiAccess().getSolidusKeyword_2()); 
    }

    |
	kw='%' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOpMultiAccess().getPercentSignKeyword_3()); 
    }
)
    ;





// Entry rule entryRuleUnaryOperation
entryRuleUnaryOperation returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getUnaryOperationRule()); }
	 iv_ruleUnaryOperation=ruleUnaryOperation 
	 { $current=$iv_ruleUnaryOperation.current; } 
	 EOF 
;

// Rule UnaryOperation
ruleUnaryOperation returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getUnaryOperationAccess().getUnaryOperationAction_0_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getUnaryOperationAccess().getFeatureOpUnaryParserRuleCall_0_1_0()); 
	    }
		lv_feature_1_0=ruleOpUnary		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUnaryOperationRule());
	        }
       		set(
       			$current, 
       			"feature",
        		lv_feature_1_0, 
        		"tools.vitruvius.domains.jml.language.JML.OpUnary");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getUnaryOperationAccess().getOperandUnaryOperationParserRuleCall_0_2_0()); 
	    }
		lv_operand_2_0=ruleUnaryOperation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUnaryOperationRule());
	        }
       		set(
       			$current, 
       			"operand",
        		lv_operand_2_0, 
        		"tools.vitruvius.domains.jml.language.JML.UnaryOperation");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getUnaryOperationAccess().getPostfixOperationParserRuleCall_1()); 
    }
    this_PostfixOperation_3=rulePostfixOperation
    { 
        $current = $this_PostfixOperation_3.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleOpUnary
entryRuleOpUnary returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getOpUnaryRule()); } 
	 iv_ruleOpUnary=ruleOpUnary 
	 { $current=$iv_ruleOpUnary.current.getText(); }  
	 EOF 
;

// Rule OpUnary
ruleOpUnary returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='!' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOpUnaryAccess().getExclamationMarkKeyword_0()); 
    }

    |
	kw='-' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOpUnaryAccess().getHyphenMinusKeyword_1()); 
    }

    |
	kw='+' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOpUnaryAccess().getPlusSignKeyword_2()); 
    }
)
    ;





// Entry rule entryRulePostfixOperation
entryRulePostfixOperation returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPostfixOperationRule()); }
	 iv_rulePostfixOperation=rulePostfixOperation 
	 { $current=$iv_rulePostfixOperation.current; } 
	 EOF 
;

// Rule PostfixOperation
rulePostfixOperation returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getPostfixOperationAccess().getMemberFeatureCallParserRuleCall_0()); 
    }
    this_MemberFeatureCall_0=ruleMemberFeatureCall
    { 
        $current = $this_MemberFeatureCall_0.current; 
        afterParserOrEnumRuleCall();
    }
((((
)(
(
ruleOpPostfix
)
)))=>((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getPostfixOperationAccess().getPostfixOperationOperandAction_1_0_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getPostfixOperationAccess().getFeatureOpPostfixParserRuleCall_1_0_1_0()); 
	    }
		lv_feature_2_0=ruleOpPostfix		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPostfixOperationRule());
	        }
       		set(
       			$current, 
       			"feature",
        		lv_feature_2_0, 
        		"tools.vitruvius.domains.jml.language.JML.OpPostfix");
	        afterParserOrEnumRuleCall();
	    }

)
)))?)
;





// Entry rule entryRuleOpPostfix
entryRuleOpPostfix returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getOpPostfixRule()); } 
	 iv_ruleOpPostfix=ruleOpPostfix 
	 { $current=$iv_ruleOpPostfix.current.getText(); }  
	 EOF 
;

// Rule OpPostfix
ruleOpPostfix returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='++' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOpPostfixAccess().getPlusSignPlusSignKeyword_0()); 
    }

    |
	kw='--' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOpPostfixAccess().getHyphenMinusHyphenMinusKeyword_1()); 
    }
)
    ;





// Entry rule entryRuleMemberFeatureCall
entryRuleMemberFeatureCall returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMemberFeatureCallRule()); }
	 iv_ruleMemberFeatureCall=ruleMemberFeatureCall 
	 { $current=$iv_ruleMemberFeatureCall.current; } 
	 EOF 
;

// Rule MemberFeatureCall
ruleMemberFeatureCall returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getMemberFeatureCallAccess().getPrimaryExpressionParserRuleCall_0()); 
    }
    this_PrimaryExpression_0=rulePrimaryExpression
    { 
        $current = $this_PrimaryExpression_0.current; 
        afterParserOrEnumRuleCall();
    }
((((((
)	'.' 
(
(
ruleFeatureCallID
)
)	ruleOpSingleAssign))=>((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getMemberFeatureCallAccess().getAssignmentAssignableAction_1_0_0_0_0(),
            $current);
    }
)	otherlv_2='.' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getMemberFeatureCallAccess().getFullStopKeyword_1_0_0_0_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMemberFeatureCallAccess().getFeatureFeatureCallIDParserRuleCall_1_0_0_0_2_0()); 
	    }
		lv_feature_3_0=ruleFeatureCallID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMemberFeatureCallRule());
	        }
       		set(
       			$current, 
       			"feature",
        		lv_feature_3_0, 
        		"tools.vitruvius.domains.jml.language.JML.FeatureCallID");
	        afterParserOrEnumRuleCall();
	    }

)
)
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getMemberFeatureCallAccess().getOpSingleAssignParserRuleCall_1_0_0_0_3()); 
    }
ruleOpSingleAssign
    { 
        afterParserOrEnumRuleCall();
    }
))(
(
		{ 
	        newCompositeNode(grammarAccess.getMemberFeatureCallAccess().getValueAssignmentParserRuleCall_1_0_1_0()); 
	    }
		lv_value_5_0=ruleAssignment		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMemberFeatureCallRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_5_0, 
        		"tools.vitruvius.domains.jml.language.JML.Assignment");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |(((((
)(	'.' 

    |(
(
	'?.' 
 

)
)
    |(
(
	'::' 
 

)
))))=>((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getMemberFeatureCallAccess().getMemberFeatureCallMemberCallTargetAction_1_1_0_0_0(),
            $current);
    }
)(	otherlv_7='.' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getMemberFeatureCallAccess().getFullStopKeyword_1_1_0_0_1_0());
    }

    |(
(
		lv_nullSafe_8_0=	'?.' 
    {
        newLeafNode(lv_nullSafe_8_0, grammarAccess.getMemberFeatureCallAccess().getNullSafeQuestionMarkFullStopKeyword_1_1_0_0_1_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getMemberFeatureCallRule());
	        }
       		setWithLastConsumed($current, "nullSafe", true, "?.");
	    }

)
)
    |(
(
		lv_explicitStatic_9_0=	'::' 
    {
        newLeafNode(lv_explicitStatic_9_0, grammarAccess.getMemberFeatureCallAccess().getExplicitStaticColonColonKeyword_1_1_0_0_1_2_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getMemberFeatureCallRule());
	        }
       		setWithLastConsumed($current, "explicitStatic", true, "::");
	    }

)
))))(	otherlv_10='<' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getMemberFeatureCallAccess().getLessThanSignKeyword_1_1_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMemberFeatureCallAccess().getTypeArgumentsJvmArgumentTypeReferenceParserRuleCall_1_1_1_1_0()); 
	    }
		lv_typeArguments_11_0=ruleJvmArgumentTypeReference		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMemberFeatureCallRule());
	        }
       		add(
       			$current, 
       			"typeArguments",
        		lv_typeArguments_11_0, 
        		"org.eclipse.xtext.xbase.Xtype.JvmArgumentTypeReference");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_12=',' 
    {
    	newLeafNode(otherlv_12, grammarAccess.getMemberFeatureCallAccess().getCommaKeyword_1_1_1_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMemberFeatureCallAccess().getTypeArgumentsJvmArgumentTypeReferenceParserRuleCall_1_1_1_2_1_0()); 
	    }
		lv_typeArguments_13_0=ruleJvmArgumentTypeReference		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMemberFeatureCallRule());
	        }
       		add(
       			$current, 
       			"typeArguments",
        		lv_typeArguments_13_0, 
        		"org.eclipse.xtext.xbase.Xtype.JvmArgumentTypeReference");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_14='>' 
    {
    	newLeafNode(otherlv_14, grammarAccess.getMemberFeatureCallAccess().getGreaterThanSignKeyword_1_1_1_3());
    }
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getMemberFeatureCallAccess().getFeatureIdOrSuperParserRuleCall_1_1_2_0()); 
	    }
		lv_feature_15_0=ruleIdOrSuper		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMemberFeatureCallRule());
	        }
       		set(
       			$current, 
       			"feature",
        		lv_feature_15_0, 
        		"tools.vitruvius.domains.jml.language.JML.IdOrSuper");
	        afterParserOrEnumRuleCall();
	    }

)
)(((
(
	'(' 
 

)
)=>
(
		lv_explicitOperationCall_16_0=	'(' 
    {
        newLeafNode(lv_explicitOperationCall_16_0, grammarAccess.getMemberFeatureCallAccess().getExplicitOperationCallLeftParenthesisKeyword_1_1_3_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getMemberFeatureCallRule());
	        }
       		setWithLastConsumed($current, "explicitOperationCall", true, "(");
	    }

)
)(((((
)((
(
ruleJvmFormalParameter
)
)(	',' 
(
(
ruleJvmFormalParameter
)
))*)?(
(
	'|' 
 

)
)))=>
(
		{ 
	        newCompositeNode(grammarAccess.getMemberFeatureCallAccess().getMemberCallArgumentsShortClosureParserRuleCall_1_1_3_1_0_0()); 
	    }
		lv_memberCallArguments_17_0=ruleShortClosure		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMemberFeatureCallRule());
	        }
       		add(
       			$current, 
       			"memberCallArguments",
        		lv_memberCallArguments_17_0, 
        		"tools.vitruvius.domains.jml.language.JML.ShortClosure");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |((
(
		{ 
	        newCompositeNode(grammarAccess.getMemberFeatureCallAccess().getMemberCallArgumentsExpressionParserRuleCall_1_1_3_1_1_0_0()); 
	    }
		lv_memberCallArguments_18_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMemberFeatureCallRule());
	        }
       		add(
       			$current, 
       			"memberCallArguments",
        		lv_memberCallArguments_18_0, 
        		"tools.vitruvius.domains.jml.language.JML.Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_19=',' 
    {
    	newLeafNode(otherlv_19, grammarAccess.getMemberFeatureCallAccess().getCommaKeyword_1_1_3_1_1_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMemberFeatureCallAccess().getMemberCallArgumentsExpressionParserRuleCall_1_1_3_1_1_1_1_0()); 
	    }
		lv_memberCallArguments_20_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMemberFeatureCallRule());
	        }
       		add(
       			$current, 
       			"memberCallArguments",
        		lv_memberCallArguments_20_0, 
        		"tools.vitruvius.domains.jml.language.JML.Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))*))?	otherlv_21=')' 
    {
    	newLeafNode(otherlv_21, grammarAccess.getMemberFeatureCallAccess().getRightParenthesisKeyword_1_1_3_2());
    }
)?((((
)	'[' 
))=>
(
		{ 
	        newCompositeNode(grammarAccess.getMemberFeatureCallAccess().getMemberCallArgumentsClosureParserRuleCall_1_1_4_0()); 
	    }
		lv_memberCallArguments_22_0=ruleClosure		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMemberFeatureCallRule());
	        }
       		add(
       			$current, 
       			"memberCallArguments",
        		lv_memberCallArguments_22_0, 
        		"tools.vitruvius.domains.jml.language.JML.Closure");
	        afterParserOrEnumRuleCall();
	    }

)
)?))*)
;





// Entry rule entryRulePrimaryExpression
entryRulePrimaryExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPrimaryExpressionRule()); }
	 iv_rulePrimaryExpression=rulePrimaryExpression 
	 { $current=$iv_rulePrimaryExpression.current; } 
	 EOF 
;

// Rule PrimaryExpression
rulePrimaryExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getConstructorCallParserRuleCall_0()); 
    }
    this_ConstructorCall_0=ruleConstructorCall
    { 
        $current = $this_ConstructorCall_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getBlockExpressionParserRuleCall_1()); 
    }
    this_BlockExpression_1=ruleBlockExpression
    { 
        $current = $this_BlockExpression_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getSwitchExpressionParserRuleCall_2()); 
    }
    this_SwitchExpression_2=ruleSwitchExpression
    { 
        $current = $this_SwitchExpression_2.current; 
        afterParserOrEnumRuleCall();
    }

    |((((
)	'synchronized' 
	'(' 
))=>
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getSynchronizedExpressionParserRuleCall_3()); 
    }
    this_SynchronizedExpression_3=ruleSynchronizedExpression
    { 
        $current = $this_SynchronizedExpression_3.current; 
        afterParserOrEnumRuleCall();
    }
)
    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getFeatureCallParserRuleCall_4()); 
    }
    this_FeatureCall_4=ruleFeatureCall
    { 
        $current = $this_FeatureCall_4.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getLiteralParserRuleCall_5()); 
    }
    this_Literal_5=ruleLiteral
    { 
        $current = $this_Literal_5.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getIfExpressionParserRuleCall_6()); 
    }
    this_IfExpression_6=ruleIfExpression
    { 
        $current = $this_IfExpression_6.current; 
        afterParserOrEnumRuleCall();
    }

    |((((
)	'for' 
	'(' 
(
(
ruleJvmFormalParameter
)
)	':' 
))=>
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getForLoopExpressionParserRuleCall_7()); 
    }
    this_ForLoopExpression_7=ruleForLoopExpression
    { 
        $current = $this_ForLoopExpression_7.current; 
        afterParserOrEnumRuleCall();
    }
)
    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getBasicForLoopExpressionParserRuleCall_8()); 
    }
    this_BasicForLoopExpression_8=ruleBasicForLoopExpression
    { 
        $current = $this_BasicForLoopExpression_8.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getWhileExpressionParserRuleCall_9()); 
    }
    this_WhileExpression_9=ruleWhileExpression
    { 
        $current = $this_WhileExpression_9.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getDoWhileExpressionParserRuleCall_10()); 
    }
    this_DoWhileExpression_10=ruleDoWhileExpression
    { 
        $current = $this_DoWhileExpression_10.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getThrowExpressionParserRuleCall_11()); 
    }
    this_ThrowExpression_11=ruleThrowExpression
    { 
        $current = $this_ThrowExpression_11.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getReturnExpressionParserRuleCall_12()); 
    }
    this_ReturnExpression_12=ruleReturnExpression
    { 
        $current = $this_ReturnExpression_12.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getTryCatchFinallyExpressionParserRuleCall_13()); 
    }
    this_TryCatchFinallyExpression_13=ruleTryCatchFinallyExpression
    { 
        $current = $this_TryCatchFinallyExpression_13.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getParenthesisExpressionParserRuleCall_14()); 
    }
    this_ParenthesisExpression_14=ruleParenthesisExpression
    { 
        $current = $this_ParenthesisExpression_14.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getJMLOldExpressionParserRuleCall_15()); 
    }
    this_JMLOldExpression_15=ruleJMLOldExpression
    { 
        $current = $this_JMLOldExpression_15.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getJMLFreshExpressionParserRuleCall_16()); 
    }
    this_JMLFreshExpression_16=ruleJMLFreshExpression
    { 
        $current = $this_JMLFreshExpression_16.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getJMLResultExpressionParserRuleCall_17()); 
    }
    this_JMLResultExpression_17=ruleJMLResultExpression
    { 
        $current = $this_JMLResultExpression_17.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleParenthesisExpression
entryRuleParenthesisExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getParenthesisExpressionRule()); }
	 iv_ruleParenthesisExpression=ruleParenthesisExpression 
	 { $current=$iv_ruleParenthesisExpression.current; } 
	 EOF 
;

// Rule ParenthesisExpression
ruleParenthesisExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='(' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getParenthesisExpressionAccess().getLeftParenthesisKeyword_0());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getParenthesisExpressionAccess().getExprParenthesizedExpressionParserRuleCall_1_0_0()); 
	    }
		lv_expr_1_0=ruleParenthesizedExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getParenthesisExpressionRule());
	        }
       		set(
       			$current, 
       			"expr",
        		lv_expr_1_0, 
        		"tools.vitruvius.domains.jml.language.JML.ParenthesizedExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getParenthesisExpressionAccess().getExprJMLForAllExpressionParserRuleCall_1_1_0()); 
	    }
		lv_expr_2_0=ruleJMLForAllExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getParenthesisExpressionRule());
	        }
       		set(
       			$current, 
       			"expr",
        		lv_expr_2_0, 
        		"tools.vitruvius.domains.jml.language.JML.JMLForAllExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)))
;





// Entry rule entryRuleJMLOldExpression
entryRuleJMLOldExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getJMLOldExpressionRule()); }
	 iv_ruleJMLOldExpression=ruleJMLOldExpression 
	 { $current=$iv_ruleJMLOldExpression.current; } 
	 EOF 
;

// Rule JMLOldExpression
ruleJMLOldExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getJMLOldExpressionAccess().getJMLOldExpressionAction_0(),
            $current);
    }
)	otherlv_1='\\old' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getJMLOldExpressionAccess().getOldKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getJMLOldExpressionAccess().getExprParenthesisExpressionParserRuleCall_2_0()); 
	    }
		lv_expr_2_0=ruleParenthesisExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getJMLOldExpressionRule());
	        }
       		set(
       			$current, 
       			"expr",
        		lv_expr_2_0, 
        		"tools.vitruvius.domains.jml.language.JML.ParenthesisExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleJMLFreshExpression
entryRuleJMLFreshExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getJMLFreshExpressionRule()); }
	 iv_ruleJMLFreshExpression=ruleJMLFreshExpression 
	 { $current=$iv_ruleJMLFreshExpression.current; } 
	 EOF 
;

// Rule JMLFreshExpression
ruleJMLFreshExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getJMLFreshExpressionAccess().getJMLFreshExpressionAction_0(),
            $current);
    }
)	otherlv_1='\\fresh' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getJMLFreshExpressionAccess().getFreshKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getJMLFreshExpressionAccess().getExprParenthesisExpressionParserRuleCall_2_0()); 
	    }
		lv_expr_2_0=ruleParenthesisExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getJMLFreshExpressionRule());
	        }
       		set(
       			$current, 
       			"expr",
        		lv_expr_2_0, 
        		"tools.vitruvius.domains.jml.language.JML.ParenthesisExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleJMLResultExpression
entryRuleJMLResultExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getJMLResultExpressionRule()); }
	 iv_ruleJMLResultExpression=ruleJMLResultExpression 
	 { $current=$iv_ruleJMLResultExpression.current; } 
	 EOF 
;

// Rule JMLResultExpression
ruleJMLResultExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getJMLResultExpressionAccess().getJMLResultExpressionAction_0(),
            $current);
    }
)	otherlv_1='\\result' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getJMLResultExpressionAccess().getResultKeyword_1());
    }
)
;





// Entry rule entryRuleJMLForAllExpression
entryRuleJMLForAllExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getJMLForAllExpressionRule()); }
	 iv_ruleJMLForAllExpression=ruleJMLForAllExpression 
	 { $current=$iv_ruleJMLForAllExpression.current; } 
	 EOF 
;

// Rule JMLForAllExpression
ruleJMLForAllExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getJMLForAllExpressionAccess().getJMLForAllExpressionAction_0(),
            $current);
    }
)	otherlv_1='\\forall' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getJMLForAllExpressionAccess().getForallKeyword_1());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getJMLForAllExpressionAccess().getInitExpressionsVarDeclParserRuleCall_2_0_0()); 
	    }
		lv_initExpressions_2_0=ruleVarDecl		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getJMLForAllExpressionRule());
	        }
       		add(
       			$current, 
       			"initExpressions",
        		lv_initExpressions_2_0, 
        		"tools.vitruvius.domains.jml.language.JML.VarDecl");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getJMLForAllExpressionAccess().getCommaKeyword_2_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getJMLForAllExpressionAccess().getInitExpressionsVarDeclParserRuleCall_2_1_1_0()); 
	    }
		lv_initExpressions_4_0=ruleVarDecl		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getJMLForAllExpressionRule());
	        }
       		add(
       			$current, 
       			"initExpressions",
        		lv_initExpressions_4_0, 
        		"tools.vitruvius.domains.jml.language.JML.VarDecl");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?	otherlv_5=';' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getJMLForAllExpressionAccess().getSemicolonKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getJMLForAllExpressionAccess().getExpressionExpressionParserRuleCall_4_0()); 
	    }
		lv_expression_6_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getJMLForAllExpressionRule());
	        }
       		set(
       			$current, 
       			"expression",
        		lv_expression_6_0, 
        		"tools.vitruvius.domains.jml.language.JML.Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)?	otherlv_7=';' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getJMLForAllExpressionAccess().getSemicolonKeyword_5());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getJMLForAllExpressionAccess().getUpdateExpressionsExpressionParserRuleCall_6_0_0()); 
	    }
		lv_updateExpressions_8_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getJMLForAllExpressionRule());
	        }
       		add(
       			$current, 
       			"updateExpressions",
        		lv_updateExpressions_8_0, 
        		"tools.vitruvius.domains.jml.language.JML.Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_9=',' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getJMLForAllExpressionAccess().getCommaKeyword_6_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getJMLForAllExpressionAccess().getUpdateExpressionsExpressionParserRuleCall_6_1_1_0()); 
	    }
		lv_updateExpressions_10_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getJMLForAllExpressionRule());
	        }
       		add(
       			$current, 
       			"updateExpressions",
        		lv_updateExpressions_10_0, 
        		"tools.vitruvius.domains.jml.language.JML.Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?	otherlv_11=')' 
    {
    	newLeafNode(otherlv_11, grammarAccess.getJMLForAllExpressionAccess().getRightParenthesisKeyword_7());
    }
)
;





// Entry rule entryRuleVarDecl
entryRuleVarDecl returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getVarDeclRule()); }
	 iv_ruleVarDecl=ruleVarDecl 
	 { $current=$iv_ruleVarDecl.current; } 
	 EOF 
;

// Rule VarDecl
ruleVarDecl returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((((((
(
ruleType
)
)(
(
ruleValidID
)
)))=>((
(
		{ 
	        newCompositeNode(grammarAccess.getVarDeclAccess().getTypeTypeParserRuleCall_0_0_0_0_0()); 
	    }
		lv_type_0_0=ruleType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getVarDeclRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_0_0, 
        		"tools.vitruvius.domains.jml.language.JML.Type");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getVarDeclAccess().getNameValidIDParserRuleCall_0_0_0_1_0()); 
	    }
		lv_name_1_0=ruleValidID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getVarDeclRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"org.eclipse.xtext.xbase.Xtype.ValidID");
	        afterParserOrEnumRuleCall();
	    }

)
)))
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getVarDeclAccess().getNameValidIDParserRuleCall_0_1_0()); 
	    }
		lv_name_2_0=ruleValidID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getVarDeclRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_2_0, 
        		"org.eclipse.xtext.xbase.Xtype.ValidID");
	        afterParserOrEnumRuleCall();
	    }

)
))(	otherlv_3='=' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getVarDeclAccess().getEqualsSignKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getVarDeclAccess().getRightExpressionParserRuleCall_1_1_0()); 
	    }
		lv_right_4_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getVarDeclRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_4_0, 
        		"tools.vitruvius.domains.jml.language.JML.Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleLiteral
entryRuleLiteral returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLiteralRule()); }
	 iv_ruleLiteral=ruleLiteral 
	 { $current=$iv_ruleLiteral.current; } 
	 EOF 
;

// Rule Literal
ruleLiteral returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getLiteralAccess().getCollectionLiteralParserRuleCall_0()); 
    }
    this_CollectionLiteral_0=ruleCollectionLiteral
    { 
        $current = $this_CollectionLiteral_0.current; 
        afterParserOrEnumRuleCall();
    }

    |((((
)	'[' 
))=>
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getLiteralAccess().getClosureParserRuleCall_1()); 
    }
    this_Closure_1=ruleClosure
    { 
        $current = $this_Closure_1.current; 
        afterParserOrEnumRuleCall();
    }
)
    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getLiteralAccess().getBooleanLiteralParserRuleCall_2()); 
    }
    this_BooleanLiteral_2=ruleBooleanLiteral
    { 
        $current = $this_BooleanLiteral_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getLiteralAccess().getNumberLiteralParserRuleCall_3()); 
    }
    this_NumberLiteral_3=ruleNumberLiteral
    { 
        $current = $this_NumberLiteral_3.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getLiteralAccess().getNullLiteralParserRuleCall_4()); 
    }
    this_NullLiteral_4=ruleNullLiteral
    { 
        $current = $this_NullLiteral_4.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getLiteralAccess().getStringLiteralParserRuleCall_5()); 
    }
    this_StringLiteral_5=ruleStringLiteral
    { 
        $current = $this_StringLiteral_5.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getLiteralAccess().getCharLiteralParserRuleCall_6()); 
    }
    this_CharLiteral_6=ruleCharLiteral
    { 
        $current = $this_CharLiteral_6.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleCollectionLiteral
entryRuleCollectionLiteral returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getCollectionLiteralRule()); }
	 iv_ruleCollectionLiteral=ruleCollectionLiteral 
	 { $current=$iv_ruleCollectionLiteral.current; } 
	 EOF 
;

// Rule CollectionLiteral
ruleCollectionLiteral returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getCollectionLiteralAccess().getSetLiteralParserRuleCall_0()); 
    }
    this_SetLiteral_0=ruleSetLiteral
    { 
        $current = $this_SetLiteral_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getCollectionLiteralAccess().getListLiteralParserRuleCall_1()); 
    }
    this_ListLiteral_1=ruleListLiteral
    { 
        $current = $this_ListLiteral_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleSetLiteral
entryRuleSetLiteral returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSetLiteralRule()); }
	 iv_ruleSetLiteral=ruleSetLiteral 
	 { $current=$iv_ruleSetLiteral.current; } 
	 EOF 
;

// Rule SetLiteral
ruleSetLiteral returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getSetLiteralAccess().getSetLiteralAction_0(),
            $current);
    }
)	otherlv_1='#' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getSetLiteralAccess().getNumberSignKeyword_1());
    }
	otherlv_2='{' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getSetLiteralAccess().getLeftCurlyBracketKeyword_2());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getSetLiteralAccess().getElementsExpressionParserRuleCall_3_0_0()); 
	    }
		lv_elements_3_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSetLiteralRule());
	        }
       		add(
       			$current, 
       			"elements",
        		lv_elements_3_0, 
        		"tools.vitruvius.domains.jml.language.JML.Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_4=',' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getSetLiteralAccess().getCommaKeyword_3_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSetLiteralAccess().getElementsExpressionParserRuleCall_3_1_1_0()); 
	    }
		lv_elements_5_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSetLiteralRule());
	        }
       		add(
       			$current, 
       			"elements",
        		lv_elements_5_0, 
        		"tools.vitruvius.domains.jml.language.JML.Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?	otherlv_6='}' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getSetLiteralAccess().getRightCurlyBracketKeyword_4());
    }
)
;





// Entry rule entryRuleListLiteral
entryRuleListLiteral returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getListLiteralRule()); }
	 iv_ruleListLiteral=ruleListLiteral 
	 { $current=$iv_ruleListLiteral.current; } 
	 EOF 
;

// Rule ListLiteral
ruleListLiteral returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getListLiteralAccess().getListLiteralAction_0(),
            $current);
    }
)	otherlv_1='#' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getListLiteralAccess().getNumberSignKeyword_1());
    }
	otherlv_2='[' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getListLiteralAccess().getLeftSquareBracketKeyword_2());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getListLiteralAccess().getElementsExpressionParserRuleCall_3_0_0()); 
	    }
		lv_elements_3_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getListLiteralRule());
	        }
       		add(
       			$current, 
       			"elements",
        		lv_elements_3_0, 
        		"tools.vitruvius.domains.jml.language.JML.Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_4=',' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getListLiteralAccess().getCommaKeyword_3_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getListLiteralAccess().getElementsExpressionParserRuleCall_3_1_1_0()); 
	    }
		lv_elements_5_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getListLiteralRule());
	        }
       		add(
       			$current, 
       			"elements",
        		lv_elements_5_0, 
        		"tools.vitruvius.domains.jml.language.JML.Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?	otherlv_6=']' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getListLiteralAccess().getRightSquareBracketKeyword_4());
    }
)
;





// Entry rule entryRuleClosure
entryRuleClosure returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getClosureRule()); }
	 iv_ruleClosure=ruleClosure 
	 { $current=$iv_ruleClosure.current; } 
	 EOF 
;

// Rule Closure
ruleClosure returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((((
)	'[' 
))=>((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getClosureAccess().getClosureAction_0_0_0(),
            $current);
    }
)	otherlv_1='[' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getClosureAccess().getLeftSquareBracketKeyword_0_0_1());
    }
))(((((
(
ruleJvmFormalParameter
)
)(	',' 
(
(
ruleJvmFormalParameter
)
))*)?(
(
	'|' 
 

)
)))=>(((
(
		{ 
	        newCompositeNode(grammarAccess.getClosureAccess().getDeclaredFormalParametersJvmFormalParameterParserRuleCall_1_0_0_0_0()); 
	    }
		lv_declaredFormalParameters_2_0=ruleJvmFormalParameter		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getClosureRule());
	        }
       		add(
       			$current, 
       			"declaredFormalParameters",
        		lv_declaredFormalParameters_2_0, 
        		"tools.vitruvius.domains.jml.language.JML.JvmFormalParameter");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getClosureAccess().getCommaKeyword_1_0_0_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getClosureAccess().getDeclaredFormalParametersJvmFormalParameterParserRuleCall_1_0_0_1_1_0()); 
	    }
		lv_declaredFormalParameters_4_0=ruleJvmFormalParameter		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getClosureRule());
	        }
       		add(
       			$current, 
       			"declaredFormalParameters",
        		lv_declaredFormalParameters_4_0, 
        		"tools.vitruvius.domains.jml.language.JML.JvmFormalParameter");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?(
(
		lv_explicitSyntax_5_0=	'|' 
    {
        newLeafNode(lv_explicitSyntax_5_0, grammarAccess.getClosureAccess().getExplicitSyntaxVerticalLineKeyword_1_0_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getClosureRule());
	        }
       		setWithLastConsumed($current, "explicitSyntax", true, "|");
	    }

)
)))?(
(
		{ 
	        newCompositeNode(grammarAccess.getClosureAccess().getExpressionExpressionInClosureParserRuleCall_2_0()); 
	    }
		lv_expression_6_0=ruleExpressionInClosure		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getClosureRule());
	        }
       		set(
       			$current, 
       			"expression",
        		lv_expression_6_0, 
        		"tools.vitruvius.domains.jml.language.JML.ExpressionInClosure");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_7=']' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getClosureAccess().getRightSquareBracketKeyword_3());
    }
)
;





// Entry rule entryRuleExpressionInClosure
entryRuleExpressionInClosure returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExpressionInClosureRule()); }
	 iv_ruleExpressionInClosure=ruleExpressionInClosure 
	 { $current=$iv_ruleExpressionInClosure.current; } 
	 EOF 
;

// Rule ExpressionInClosure
ruleExpressionInClosure returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getExpressionInClosureAccess().getBlockExpressionAction_0(),
            $current);
    }
)((
(
		{ 
	        newCompositeNode(grammarAccess.getExpressionInClosureAccess().getExpressionsExpressionOrVarDeclarationParserRuleCall_1_0_0()); 
	    }
		lv_expressions_1_0=ruleExpressionOrVarDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpressionInClosureRule());
	        }
       		add(
       			$current, 
       			"expressions",
        		lv_expressions_1_0, 
        		"tools.vitruvius.domains.jml.language.JML.ExpressionOrVarDeclaration");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_2=';' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getExpressionInClosureAccess().getSemicolonKeyword_1_1());
    }
)?)*)
;





// Entry rule entryRuleShortClosure
entryRuleShortClosure returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getShortClosureRule()); }
	 iv_ruleShortClosure=ruleShortClosure 
	 { $current=$iv_ruleShortClosure.current; } 
	 EOF 
;

// Rule ShortClosure
ruleShortClosure returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((((
)((
(
ruleJvmFormalParameter
)
)(	',' 
(
(
ruleJvmFormalParameter
)
))*)?(
(
	'|' 
 

)
)))=>((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getShortClosureAccess().getClosureAction_0_0_0(),
            $current);
    }
)((
(
		{ 
	        newCompositeNode(grammarAccess.getShortClosureAccess().getDeclaredFormalParametersJvmFormalParameterParserRuleCall_0_0_1_0_0()); 
	    }
		lv_declaredFormalParameters_1_0=ruleJvmFormalParameter		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getShortClosureRule());
	        }
       		add(
       			$current, 
       			"declaredFormalParameters",
        		lv_declaredFormalParameters_1_0, 
        		"tools.vitruvius.domains.jml.language.JML.JvmFormalParameter");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_2=',' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getShortClosureAccess().getCommaKeyword_0_0_1_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getShortClosureAccess().getDeclaredFormalParametersJvmFormalParameterParserRuleCall_0_0_1_1_1_0()); 
	    }
		lv_declaredFormalParameters_3_0=ruleJvmFormalParameter		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getShortClosureRule());
	        }
       		add(
       			$current, 
       			"declaredFormalParameters",
        		lv_declaredFormalParameters_3_0, 
        		"tools.vitruvius.domains.jml.language.JML.JvmFormalParameter");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?(
(
		lv_explicitSyntax_4_0=	'|' 
    {
        newLeafNode(lv_explicitSyntax_4_0, grammarAccess.getShortClosureAccess().getExplicitSyntaxVerticalLineKeyword_0_0_2_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getShortClosureRule());
	        }
       		setWithLastConsumed($current, "explicitSyntax", true, "|");
	    }

)
)))(
(
		{ 
	        newCompositeNode(grammarAccess.getShortClosureAccess().getExpressionExpressionParserRuleCall_1_0()); 
	    }
		lv_expression_5_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getShortClosureRule());
	        }
       		set(
       			$current, 
       			"expression",
        		lv_expression_5_0, 
        		"tools.vitruvius.domains.jml.language.JML.Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleParenthesizedExpression
entryRuleParenthesizedExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getParenthesizedExpressionRule()); }
	 iv_ruleParenthesizedExpression=ruleParenthesizedExpression 
	 { $current=$iv_ruleParenthesizedExpression.current; } 
	 EOF 
;

// Rule ParenthesizedExpression
ruleParenthesizedExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getParenthesizedExpressionAccess().getExpressionParserRuleCall_0()); 
    }
    this_Expression_0=ruleExpression
    { 
        $current = $this_Expression_0.current; 
        afterParserOrEnumRuleCall();
    }
	otherlv_1=')' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getParenthesizedExpressionAccess().getRightParenthesisKeyword_1());
    }
)
;





// Entry rule entryRuleIfExpression
entryRuleIfExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getIfExpressionRule()); }
	 iv_ruleIfExpression=ruleIfExpression 
	 { $current=$iv_ruleIfExpression.current; } 
	 EOF 
;

// Rule IfExpression
ruleIfExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getIfExpressionAccess().getIfExpressionAction_0(),
            $current);
    }
)	otherlv_1='if' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getIfExpressionAccess().getIfKeyword_1());
    }
	otherlv_2='(' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getIfExpressionAccess().getLeftParenthesisKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getIfExpressionAccess().getIfExpressionParserRuleCall_3_0()); 
	    }
		lv_if_3_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIfExpressionRule());
	        }
       		set(
       			$current, 
       			"if",
        		lv_if_3_0, 
        		"tools.vitruvius.domains.jml.language.JML.Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4=')' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getIfExpressionAccess().getRightParenthesisKeyword_4());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getIfExpressionAccess().getThenExpressionParserRuleCall_5_0()); 
	    }
		lv_then_5_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIfExpressionRule());
	        }
       		set(
       			$current, 
       			"then",
        		lv_then_5_0, 
        		"tools.vitruvius.domains.jml.language.JML.Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)(((	'else' 
)=>	otherlv_6='else' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getIfExpressionAccess().getElseKeyword_6_0());
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getIfExpressionAccess().getElseExpressionParserRuleCall_6_1_0()); 
	    }
		lv_else_7_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIfExpressionRule());
	        }
       		set(
       			$current, 
       			"else",
        		lv_else_7_0, 
        		"tools.vitruvius.domains.jml.language.JML.Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleSwitchExpression
entryRuleSwitchExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSwitchExpressionRule()); }
	 iv_ruleSwitchExpression=ruleSwitchExpression 
	 { $current=$iv_ruleSwitchExpression.current; } 
	 EOF 
;

// Rule SwitchExpression
ruleSwitchExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getSwitchExpressionAccess().getSwitchExpressionAction_0(),
            $current);
    }
)	otherlv_1='switch' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getSwitchExpressionAccess().getSwitchKeyword_1());
    }
(((((	'(' 
(
(
ruleJvmFormalParameter
)
)	':' 
))=>(	otherlv_2='(' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getSwitchExpressionAccess().getLeftParenthesisKeyword_2_0_0_0_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSwitchExpressionAccess().getDeclaredParamJvmFormalParameterParserRuleCall_2_0_0_0_1_0()); 
	    }
		lv_declaredParam_3_0=ruleJvmFormalParameter		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSwitchExpressionRule());
	        }
       		set(
       			$current, 
       			"declaredParam",
        		lv_declaredParam_3_0, 
        		"tools.vitruvius.domains.jml.language.JML.JvmFormalParameter");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4=':' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getSwitchExpressionAccess().getColonKeyword_2_0_0_0_2());
    }
))(
(
		{ 
	        newCompositeNode(grammarAccess.getSwitchExpressionAccess().getSwitchExpressionParserRuleCall_2_0_1_0()); 
	    }
		lv_switch_5_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSwitchExpressionRule());
	        }
       		set(
       			$current, 
       			"switch",
        		lv_switch_5_0, 
        		"tools.vitruvius.domains.jml.language.JML.Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_6=')' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getSwitchExpressionAccess().getRightParenthesisKeyword_2_0_2());
    }
)
    |(((((
(
ruleJvmFormalParameter
)
)	':' 
))=>((
(
		{ 
	        newCompositeNode(grammarAccess.getSwitchExpressionAccess().getDeclaredParamJvmFormalParameterParserRuleCall_2_1_0_0_0_0()); 
	    }
		lv_declaredParam_7_0=ruleJvmFormalParameter		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSwitchExpressionRule());
	        }
       		set(
       			$current, 
       			"declaredParam",
        		lv_declaredParam_7_0, 
        		"tools.vitruvius.domains.jml.language.JML.JvmFormalParameter");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_8=':' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getSwitchExpressionAccess().getColonKeyword_2_1_0_0_1());
    }
))?(
(
		{ 
	        newCompositeNode(grammarAccess.getSwitchExpressionAccess().getSwitchExpressionParserRuleCall_2_1_1_0()); 
	    }
		lv_switch_9_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSwitchExpressionRule());
	        }
       		set(
       			$current, 
       			"switch",
        		lv_switch_9_0, 
        		"tools.vitruvius.domains.jml.language.JML.Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)))	otherlv_10='{' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getSwitchExpressionAccess().getLeftCurlyBracketKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSwitchExpressionAccess().getCasesCasePartParserRuleCall_4_0()); 
	    }
		lv_cases_11_0=ruleCasePart		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSwitchExpressionRule());
	        }
       		add(
       			$current, 
       			"cases",
        		lv_cases_11_0, 
        		"tools.vitruvius.domains.jml.language.JML.CasePart");
	        afterParserOrEnumRuleCall();
	    }

)
)*(	otherlv_12='default' 
    {
    	newLeafNode(otherlv_12, grammarAccess.getSwitchExpressionAccess().getDefaultKeyword_5_0());
    }
	otherlv_13=':' 
    {
    	newLeafNode(otherlv_13, grammarAccess.getSwitchExpressionAccess().getColonKeyword_5_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSwitchExpressionAccess().getDefaultExpressionParserRuleCall_5_2_0()); 
	    }
		lv_default_14_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSwitchExpressionRule());
	        }
       		set(
       			$current, 
       			"default",
        		lv_default_14_0, 
        		"tools.vitruvius.domains.jml.language.JML.Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))?	otherlv_15='}' 
    {
    	newLeafNode(otherlv_15, grammarAccess.getSwitchExpressionAccess().getRightCurlyBracketKeyword_6());
    }
)
;





// Entry rule entryRuleCasePart
entryRuleCasePart returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getCasePartRule()); }
	 iv_ruleCasePart=ruleCasePart 
	 { $current=$iv_ruleCasePart.current; } 
	 EOF 
;

// Rule CasePart
ruleCasePart returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getCasePartAccess().getCasePartAction_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getCasePartAccess().getTypeGuardJvmTypeReferenceParserRuleCall_1_0()); 
	    }
		lv_typeGuard_1_0=ruleJvmTypeReference		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCasePartRule());
	        }
       		set(
       			$current, 
       			"typeGuard",
        		lv_typeGuard_1_0, 
        		"org.eclipse.xtext.xbase.Xtype.JvmTypeReference");
	        afterParserOrEnumRuleCall();
	    }

)
)?(	otherlv_2='case' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getCasePartAccess().getCaseKeyword_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getCasePartAccess().getCaseExpressionParserRuleCall_2_1_0()); 
	    }
		lv_case_3_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCasePartRule());
	        }
       		set(
       			$current, 
       			"case",
        		lv_case_3_0, 
        		"tools.vitruvius.domains.jml.language.JML.Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))?((	otherlv_4=':' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getCasePartAccess().getColonKeyword_3_0_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getCasePartAccess().getThenExpressionParserRuleCall_3_0_1_0()); 
	    }
		lv_then_5_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCasePartRule());
	        }
       		set(
       			$current, 
       			"then",
        		lv_then_5_0, 
        		"tools.vitruvius.domains.jml.language.JML.Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |	otherlv_6=',' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getCasePartAccess().getCommaKeyword_3_1());
    }
))
;





// Entry rule entryRuleForLoopExpression
entryRuleForLoopExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getForLoopExpressionRule()); }
	 iv_ruleForLoopExpression=ruleForLoopExpression 
	 { $current=$iv_ruleForLoopExpression.current; } 
	 EOF 
;

// Rule ForLoopExpression
ruleForLoopExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((((
)	'for' 
	'(' 
(
(
ruleJvmFormalParameter
)
)	':' 
))=>((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getForLoopExpressionAccess().getForLoopExpressionAction_0_0_0(),
            $current);
    }
)	otherlv_1='for' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getForLoopExpressionAccess().getForKeyword_0_0_1());
    }
	otherlv_2='(' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getForLoopExpressionAccess().getLeftParenthesisKeyword_0_0_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getForLoopExpressionAccess().getDeclaredParamJvmFormalParameterParserRuleCall_0_0_3_0()); 
	    }
		lv_declaredParam_3_0=ruleJvmFormalParameter		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getForLoopExpressionRule());
	        }
       		set(
       			$current, 
       			"declaredParam",
        		lv_declaredParam_3_0, 
        		"tools.vitruvius.domains.jml.language.JML.JvmFormalParameter");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4=':' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getForLoopExpressionAccess().getColonKeyword_0_0_4());
    }
))(
(
		{ 
	        newCompositeNode(grammarAccess.getForLoopExpressionAccess().getForExpressionExpressionParserRuleCall_1_0()); 
	    }
		lv_forExpression_5_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getForLoopExpressionRule());
	        }
       		set(
       			$current, 
       			"forExpression",
        		lv_forExpression_5_0, 
        		"tools.vitruvius.domains.jml.language.JML.Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_6=')' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getForLoopExpressionAccess().getRightParenthesisKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getForLoopExpressionAccess().getEachExpressionExpressionParserRuleCall_3_0()); 
	    }
		lv_eachExpression_7_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getForLoopExpressionRule());
	        }
       		set(
       			$current, 
       			"eachExpression",
        		lv_eachExpression_7_0, 
        		"tools.vitruvius.domains.jml.language.JML.Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleBasicForLoopExpression
entryRuleBasicForLoopExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBasicForLoopExpressionRule()); }
	 iv_ruleBasicForLoopExpression=ruleBasicForLoopExpression 
	 { $current=$iv_ruleBasicForLoopExpression.current; } 
	 EOF 
;

// Rule BasicForLoopExpression
ruleBasicForLoopExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getBasicForLoopExpressionAccess().getBasicForLoopExpressionAction_0(),
            $current);
    }
)	otherlv_1='for' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getBasicForLoopExpressionAccess().getForKeyword_1());
    }
	otherlv_2='(' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getBasicForLoopExpressionAccess().getLeftParenthesisKeyword_2());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getBasicForLoopExpressionAccess().getInitExpressionsExpressionOrVarDeclarationParserRuleCall_3_0_0()); 
	    }
		lv_initExpressions_3_0=ruleExpressionOrVarDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBasicForLoopExpressionRule());
	        }
       		add(
       			$current, 
       			"initExpressions",
        		lv_initExpressions_3_0, 
        		"tools.vitruvius.domains.jml.language.JML.ExpressionOrVarDeclaration");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_4=',' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getBasicForLoopExpressionAccess().getCommaKeyword_3_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getBasicForLoopExpressionAccess().getInitExpressionsExpressionOrVarDeclarationParserRuleCall_3_1_1_0()); 
	    }
		lv_initExpressions_5_0=ruleExpressionOrVarDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBasicForLoopExpressionRule());
	        }
       		add(
       			$current, 
       			"initExpressions",
        		lv_initExpressions_5_0, 
        		"tools.vitruvius.domains.jml.language.JML.ExpressionOrVarDeclaration");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?	otherlv_6=';' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getBasicForLoopExpressionAccess().getSemicolonKeyword_4());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getBasicForLoopExpressionAccess().getExpressionExpressionParserRuleCall_5_0()); 
	    }
		lv_expression_7_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBasicForLoopExpressionRule());
	        }
       		set(
       			$current, 
       			"expression",
        		lv_expression_7_0, 
        		"tools.vitruvius.domains.jml.language.JML.Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)?	otherlv_8=';' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getBasicForLoopExpressionAccess().getSemicolonKeyword_6());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getBasicForLoopExpressionAccess().getUpdateExpressionsExpressionParserRuleCall_7_0_0()); 
	    }
		lv_updateExpressions_9_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBasicForLoopExpressionRule());
	        }
       		add(
       			$current, 
       			"updateExpressions",
        		lv_updateExpressions_9_0, 
        		"tools.vitruvius.domains.jml.language.JML.Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_10=',' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getBasicForLoopExpressionAccess().getCommaKeyword_7_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getBasicForLoopExpressionAccess().getUpdateExpressionsExpressionParserRuleCall_7_1_1_0()); 
	    }
		lv_updateExpressions_11_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBasicForLoopExpressionRule());
	        }
       		add(
       			$current, 
       			"updateExpressions",
        		lv_updateExpressions_11_0, 
        		"tools.vitruvius.domains.jml.language.JML.Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?	otherlv_12=')' 
    {
    	newLeafNode(otherlv_12, grammarAccess.getBasicForLoopExpressionAccess().getRightParenthesisKeyword_8());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getBasicForLoopExpressionAccess().getEachExpressionExpressionParserRuleCall_9_0()); 
	    }
		lv_eachExpression_13_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBasicForLoopExpressionRule());
	        }
       		set(
       			$current, 
       			"eachExpression",
        		lv_eachExpression_13_0, 
        		"tools.vitruvius.domains.jml.language.JML.Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleWhileExpression
entryRuleWhileExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getWhileExpressionRule()); }
	 iv_ruleWhileExpression=ruleWhileExpression 
	 { $current=$iv_ruleWhileExpression.current; } 
	 EOF 
;

// Rule WhileExpression
ruleWhileExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getWhileExpressionAccess().getWhileExpressionAction_0(),
            $current);
    }
)	otherlv_1='while' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getWhileExpressionAccess().getWhileKeyword_1());
    }
	otherlv_2='(' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getWhileExpressionAccess().getLeftParenthesisKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getWhileExpressionAccess().getPredicateExpressionParserRuleCall_3_0()); 
	    }
		lv_predicate_3_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getWhileExpressionRule());
	        }
       		set(
       			$current, 
       			"predicate",
        		lv_predicate_3_0, 
        		"tools.vitruvius.domains.jml.language.JML.Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4=')' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getWhileExpressionAccess().getRightParenthesisKeyword_4());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getWhileExpressionAccess().getBodyExpressionParserRuleCall_5_0()); 
	    }
		lv_body_5_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getWhileExpressionRule());
	        }
       		set(
       			$current, 
       			"body",
        		lv_body_5_0, 
        		"tools.vitruvius.domains.jml.language.JML.Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleDoWhileExpression
entryRuleDoWhileExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDoWhileExpressionRule()); }
	 iv_ruleDoWhileExpression=ruleDoWhileExpression 
	 { $current=$iv_ruleDoWhileExpression.current; } 
	 EOF 
;

// Rule DoWhileExpression
ruleDoWhileExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getDoWhileExpressionAccess().getDoWhileExpressionAction_0(),
            $current);
    }
)	otherlv_1='do' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getDoWhileExpressionAccess().getDoKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDoWhileExpressionAccess().getBodyExpressionParserRuleCall_2_0()); 
	    }
		lv_body_2_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDoWhileExpressionRule());
	        }
       		set(
       			$current, 
       			"body",
        		lv_body_2_0, 
        		"tools.vitruvius.domains.jml.language.JML.Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3='while' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getDoWhileExpressionAccess().getWhileKeyword_3());
    }
	otherlv_4='(' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getDoWhileExpressionAccess().getLeftParenthesisKeyword_4());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDoWhileExpressionAccess().getPredicateExpressionParserRuleCall_5_0()); 
	    }
		lv_predicate_5_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDoWhileExpressionRule());
	        }
       		set(
       			$current, 
       			"predicate",
        		lv_predicate_5_0, 
        		"tools.vitruvius.domains.jml.language.JML.Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_6=')' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getDoWhileExpressionAccess().getRightParenthesisKeyword_6());
    }
)
;





// Entry rule entryRuleBlockExpression
entryRuleBlockExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBlockExpressionRule()); }
	 iv_ruleBlockExpression=ruleBlockExpression 
	 { $current=$iv_ruleBlockExpression.current; } 
	 EOF 
;

// Rule BlockExpression
ruleBlockExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getBlockExpressionAccess().getBlockExpressionAction_0(),
            $current);
    }
)	otherlv_1='{' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getBlockExpressionAccess().getLeftCurlyBracketKeyword_1());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getBlockExpressionAccess().getExpressionsExpressionOrVarDeclarationParserRuleCall_2_0_0()); 
	    }
		lv_expressions_2_0=ruleExpressionOrVarDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBlockExpressionRule());
	        }
       		add(
       			$current, 
       			"expressions",
        		lv_expressions_2_0, 
        		"tools.vitruvius.domains.jml.language.JML.ExpressionOrVarDeclaration");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getBlockExpressionAccess().getCommaKeyword_2_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getBlockExpressionAccess().getExpressionsExpressionOrVarDeclarationParserRuleCall_2_1_1_0()); 
	    }
		lv_expressions_4_0=ruleExpressionOrVarDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBlockExpressionRule());
	        }
       		add(
       			$current, 
       			"expressions",
        		lv_expressions_4_0, 
        		"tools.vitruvius.domains.jml.language.JML.ExpressionOrVarDeclaration");
	        afterParserOrEnumRuleCall();
	    }

)
))(	otherlv_5=';' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getBlockExpressionAccess().getSemicolonKeyword_2_2());
    }
)?)*	otherlv_6='}' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getBlockExpressionAccess().getRightCurlyBracketKeyword_3());
    }
)
;





// Entry rule entryRuleExpressionOrVarDeclaration
entryRuleExpressionOrVarDeclaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExpressionOrVarDeclarationRule()); }
	 iv_ruleExpressionOrVarDeclaration=ruleExpressionOrVarDeclaration 
	 { $current=$iv_ruleExpressionOrVarDeclaration.current; } 
	 EOF 
;

// Rule ExpressionOrVarDeclaration
ruleExpressionOrVarDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getExpressionOrVarDeclarationAccess().getExpressionParserRuleCall()); 
    }
    this_Expression_0=ruleExpression
    { 
        $current = $this_Expression_0.current; 
        afterParserOrEnumRuleCall();
    }

;





// Entry rule entryRuleJvmFormalParameter
entryRuleJvmFormalParameter returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getJvmFormalParameterRule()); }
	 iv_ruleJvmFormalParameter=ruleJvmFormalParameter 
	 { $current=$iv_ruleJvmFormalParameter.current; } 
	 EOF 
;

// Rule JvmFormalParameter
ruleJvmFormalParameter returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getJvmFormalParameterAccess().getParameterTypeValidIDParserRuleCall_0_0()); 
	    }
		lv_parameterType_0_0=ruleValidID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getJvmFormalParameterRule());
	        }
       		set(
       			$current, 
       			"parameterType",
        		lv_parameterType_0_0, 
        		"org.eclipse.xtext.xbase.Xtype.ValidID");
	        afterParserOrEnumRuleCall();
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getJvmFormalParameterAccess().getNameValidIDParserRuleCall_1_0()); 
	    }
		lv_name_1_0=ruleValidID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getJvmFormalParameterRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"org.eclipse.xtext.xbase.Xtype.ValidID");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleFullJvmFormalParameter
entryRuleFullJvmFormalParameter returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFullJvmFormalParameterRule()); }
	 iv_ruleFullJvmFormalParameter=ruleFullJvmFormalParameter 
	 { $current=$iv_ruleFullJvmFormalParameter.current; } 
	 EOF 
;

// Rule FullJvmFormalParameter
ruleFullJvmFormalParameter returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getFullJvmFormalParameterAccess().getParameterTypeValidIDParserRuleCall_0_0()); 
	    }
		lv_parameterType_0_0=ruleValidID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFullJvmFormalParameterRule());
	        }
       		set(
       			$current, 
       			"parameterType",
        		lv_parameterType_0_0, 
        		"org.eclipse.xtext.xbase.Xtype.ValidID");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getFullJvmFormalParameterAccess().getNameValidIDParserRuleCall_1_0()); 
	    }
		lv_name_1_0=ruleValidID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFullJvmFormalParameterRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"org.eclipse.xtext.xbase.Xtype.ValidID");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleFeatureCall
entryRuleFeatureCall returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFeatureCallRule()); }
	 iv_ruleFeatureCall=ruleFeatureCall 
	 { $current=$iv_ruleFeatureCall.current; } 
	 EOF 
;

// Rule FeatureCall
ruleFeatureCall returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getFeatureCallAccess().getFeatureCallAction_0(),
            $current);
    }
)(	otherlv_1='<' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getFeatureCallAccess().getLessThanSignKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFeatureCallAccess().getTypeArgumentsJvmArgumentTypeReferenceParserRuleCall_1_1_0()); 
	    }
		lv_typeArguments_2_0=ruleJvmArgumentTypeReference		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFeatureCallRule());
	        }
       		add(
       			$current, 
       			"typeArguments",
        		lv_typeArguments_2_0, 
        		"org.eclipse.xtext.xbase.Xtype.JvmArgumentTypeReference");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getFeatureCallAccess().getCommaKeyword_1_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFeatureCallAccess().getTypeArgumentsJvmArgumentTypeReferenceParserRuleCall_1_2_1_0()); 
	    }
		lv_typeArguments_4_0=ruleJvmArgumentTypeReference		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFeatureCallRule());
	        }
       		add(
       			$current, 
       			"typeArguments",
        		lv_typeArguments_4_0, 
        		"org.eclipse.xtext.xbase.Xtype.JvmArgumentTypeReference");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_5='>' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getFeatureCallAccess().getGreaterThanSignKeyword_1_3());
    }
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getFeatureCallAccess().getFeatureIdOrSuperParserRuleCall_2_0()); 
	    }
		lv_feature_6_0=ruleIdOrSuper		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFeatureCallRule());
	        }
       		set(
       			$current, 
       			"feature",
        		lv_feature_6_0, 
        		"tools.vitruvius.domains.jml.language.JML.IdOrSuper");
	        afterParserOrEnumRuleCall();
	    }

)
)(((
(
	'(' 
 

)
)=>
(
		lv_explicitOperationCall_7_0=	'(' 
    {
        newLeafNode(lv_explicitOperationCall_7_0, grammarAccess.getFeatureCallAccess().getExplicitOperationCallLeftParenthesisKeyword_3_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFeatureCallRule());
	        }
       		setWithLastConsumed($current, "explicitOperationCall", true, "(");
	    }

)
)(((((
)((
(
ruleJvmFormalParameter
)
)(	',' 
(
(
ruleJvmFormalParameter
)
))*)?(
(
	'|' 
 

)
)))=>
(
		{ 
	        newCompositeNode(grammarAccess.getFeatureCallAccess().getFeatureCallArgumentsShortClosureParserRuleCall_3_1_0_0()); 
	    }
		lv_featureCallArguments_8_0=ruleShortClosure		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFeatureCallRule());
	        }
       		add(
       			$current, 
       			"featureCallArguments",
        		lv_featureCallArguments_8_0, 
        		"tools.vitruvius.domains.jml.language.JML.ShortClosure");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |((
(
		{ 
	        newCompositeNode(grammarAccess.getFeatureCallAccess().getFeatureCallArgumentsExpressionParserRuleCall_3_1_1_0_0()); 
	    }
		lv_featureCallArguments_9_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFeatureCallRule());
	        }
       		add(
       			$current, 
       			"featureCallArguments",
        		lv_featureCallArguments_9_0, 
        		"tools.vitruvius.domains.jml.language.JML.Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_10=',' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getFeatureCallAccess().getCommaKeyword_3_1_1_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFeatureCallAccess().getFeatureCallArgumentsExpressionParserRuleCall_3_1_1_1_1_0()); 
	    }
		lv_featureCallArguments_11_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFeatureCallRule());
	        }
       		add(
       			$current, 
       			"featureCallArguments",
        		lv_featureCallArguments_11_0, 
        		"tools.vitruvius.domains.jml.language.JML.Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))*))?	otherlv_12=')' 
    {
    	newLeafNode(otherlv_12, grammarAccess.getFeatureCallAccess().getRightParenthesisKeyword_3_2());
    }
)?((((
)	'[' 
))=>
(
		{ 
	        newCompositeNode(grammarAccess.getFeatureCallAccess().getFeatureCallArgumentsClosureParserRuleCall_4_0()); 
	    }
		lv_featureCallArguments_13_0=ruleClosure		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFeatureCallRule());
	        }
       		add(
       			$current, 
       			"featureCallArguments",
        		lv_featureCallArguments_13_0, 
        		"tools.vitruvius.domains.jml.language.JML.Closure");
	        afterParserOrEnumRuleCall();
	    }

)
)?)
;





// Entry rule entryRuleFeatureCallID
entryRuleFeatureCallID returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getFeatureCallIDRule()); } 
	 iv_ruleFeatureCallID=ruleFeatureCallID 
	 { $current=$iv_ruleFeatureCallID.current.getText(); }  
	 EOF 
;

// Rule FeatureCallID
ruleFeatureCallID returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

    { 
        newCompositeNode(grammarAccess.getFeatureCallIDAccess().getValidIDParserRuleCall()); 
    }
    this_ValidID_0=ruleValidID    {
		$current.merge(this_ValidID_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    ;





// Entry rule entryRuleIdOrSuper
entryRuleIdOrSuper returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getIdOrSuperRule()); } 
	 iv_ruleIdOrSuper=ruleIdOrSuper 
	 { $current=$iv_ruleIdOrSuper.current.getText(); }  
	 EOF 
;

// Rule IdOrSuper
ruleIdOrSuper returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getIdOrSuperAccess().getFeatureCallIDParserRuleCall_0()); 
    }
    this_FeatureCallID_0=ruleFeatureCallID    {
		$current.merge(this_FeatureCallID_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
	kw='super' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getIdOrSuperAccess().getSuperKeyword_1()); 
    }

    |
	kw='class' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getIdOrSuperAccess().getClassKeyword_2()); 
    }
)
    ;





// Entry rule entryRuleConstructorCall
entryRuleConstructorCall returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getConstructorCallRule()); }
	 iv_ruleConstructorCall=ruleConstructorCall 
	 { $current=$iv_ruleConstructorCall.current; } 
	 EOF 
;

// Rule ConstructorCall
ruleConstructorCall returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getConstructorCallAccess().getConstructorCallAction_0(),
            $current);
    }
)	otherlv_1='new' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getConstructorCallAccess().getNewKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getConstructorCallAccess().getConstructorQualifiedNameParserRuleCall_2_0()); 
	    }
		lv_constructor_2_0=ruleQualifiedName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConstructorCallRule());
	        }
       		set(
       			$current, 
       			"constructor",
        		lv_constructor_2_0, 
        		"tools.vitruvius.domains.jml.language.JML.QualifiedName");
	        afterParserOrEnumRuleCall();
	    }

)
)(((	'<' 
)=>	otherlv_3='<' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getConstructorCallAccess().getLessThanSignKeyword_3_0());
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getConstructorCallAccess().getTypeArgumentsJvmArgumentTypeReferenceParserRuleCall_3_1_0()); 
	    }
		lv_typeArguments_4_0=ruleJvmArgumentTypeReference		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConstructorCallRule());
	        }
       		add(
       			$current, 
       			"typeArguments",
        		lv_typeArguments_4_0, 
        		"org.eclipse.xtext.xbase.Xtype.JvmArgumentTypeReference");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_5=',' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getConstructorCallAccess().getCommaKeyword_3_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getConstructorCallAccess().getTypeArgumentsJvmArgumentTypeReferenceParserRuleCall_3_2_1_0()); 
	    }
		lv_typeArguments_6_0=ruleJvmArgumentTypeReference		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConstructorCallRule());
	        }
       		add(
       			$current, 
       			"typeArguments",
        		lv_typeArguments_6_0, 
        		"org.eclipse.xtext.xbase.Xtype.JvmArgumentTypeReference");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_7='>' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getConstructorCallAccess().getGreaterThanSignKeyword_3_3());
    }
)?(((
(
	'(' 
 

)
)=>
(
		lv_explicitConstructorCall_8_0=	'(' 
    {
        newLeafNode(lv_explicitConstructorCall_8_0, grammarAccess.getConstructorCallAccess().getExplicitConstructorCallLeftParenthesisKeyword_4_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getConstructorCallRule());
	        }
       		setWithLastConsumed($current, "explicitConstructorCall", true, "(");
	    }

)
)(((((
)((
(
ruleJvmFormalParameter
)
)(	',' 
(
(
ruleJvmFormalParameter
)
))*)?(
(
	'|' 
 

)
)))=>
(
		{ 
	        newCompositeNode(grammarAccess.getConstructorCallAccess().getArgumentsShortClosureParserRuleCall_4_1_0_0()); 
	    }
		lv_arguments_9_0=ruleShortClosure		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConstructorCallRule());
	        }
       		add(
       			$current, 
       			"arguments",
        		lv_arguments_9_0, 
        		"tools.vitruvius.domains.jml.language.JML.ShortClosure");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |((
(
		{ 
	        newCompositeNode(grammarAccess.getConstructorCallAccess().getArgumentsExpressionParserRuleCall_4_1_1_0_0()); 
	    }
		lv_arguments_10_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConstructorCallRule());
	        }
       		add(
       			$current, 
       			"arguments",
        		lv_arguments_10_0, 
        		"tools.vitruvius.domains.jml.language.JML.Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_11=',' 
    {
    	newLeafNode(otherlv_11, grammarAccess.getConstructorCallAccess().getCommaKeyword_4_1_1_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getConstructorCallAccess().getArgumentsExpressionParserRuleCall_4_1_1_1_1_0()); 
	    }
		lv_arguments_12_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConstructorCallRule());
	        }
       		add(
       			$current, 
       			"arguments",
        		lv_arguments_12_0, 
        		"tools.vitruvius.domains.jml.language.JML.Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))*))?	otherlv_13=')' 
    {
    	newLeafNode(otherlv_13, grammarAccess.getConstructorCallAccess().getRightParenthesisKeyword_4_2());
    }
)?((((
)	'[' 
))=>
(
		{ 
	        newCompositeNode(grammarAccess.getConstructorCallAccess().getArgumentsClosureParserRuleCall_5_0()); 
	    }
		lv_arguments_14_0=ruleClosure		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConstructorCallRule());
	        }
       		add(
       			$current, 
       			"arguments",
        		lv_arguments_14_0, 
        		"tools.vitruvius.domains.jml.language.JML.Closure");
	        afterParserOrEnumRuleCall();
	    }

)
)?)
;





// Entry rule entryRuleBooleanLiteral
entryRuleBooleanLiteral returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBooleanLiteralRule()); }
	 iv_ruleBooleanLiteral=ruleBooleanLiteral 
	 { $current=$iv_ruleBooleanLiteral.current; } 
	 EOF 
;

// Rule BooleanLiteral
ruleBooleanLiteral returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getBooleanLiteralAccess().getBooleanLiteralAction_0(),
            $current);
    }
)(	otherlv_1='false' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getBooleanLiteralAccess().getFalseKeyword_1_0());
    }

    |(
(
		lv_isTrue_2_0=	'true' 
    {
        newLeafNode(lv_isTrue_2_0, grammarAccess.getBooleanLiteralAccess().getIsTrueTrueKeyword_1_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getBooleanLiteralRule());
	        }
       		setWithLastConsumed($current, "isTrue", true, "true");
	    }

)
)))
;





// Entry rule entryRuleNullLiteral
entryRuleNullLiteral returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNullLiteralRule()); }
	 iv_ruleNullLiteral=ruleNullLiteral 
	 { $current=$iv_ruleNullLiteral.current; } 
	 EOF 
;

// Rule NullLiteral
ruleNullLiteral returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getNullLiteralAccess().getNullLiteralAction_0(),
            $current);
    }
)	otherlv_1='null' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getNullLiteralAccess().getNullKeyword_1());
    }
)
;





// Entry rule entryRuleNumberLiteral
entryRuleNumberLiteral returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNumberLiteralRule()); }
	 iv_ruleNumberLiteral=ruleNumberLiteral 
	 { $current=$iv_ruleNumberLiteral.current; } 
	 EOF 
;

// Rule NumberLiteral
ruleNumberLiteral returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getNumberLiteralAccess().getNumberLiteralAction_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getNumberLiteralAccess().getValueNumberParserRuleCall_1_0()); 
	    }
		lv_value_1_0=ruleNumber		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNumberLiteralRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_1_0, 
        		"tools.vitruvius.domains.jml.language.JML.Number");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleStringLiteral
entryRuleStringLiteral returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStringLiteralRule()); }
	 iv_ruleStringLiteral=ruleStringLiteral 
	 { $current=$iv_ruleStringLiteral.current; } 
	 EOF 
;

// Rule StringLiteral
ruleStringLiteral returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getStringLiteralAccess().getStringLiteralAction_0(),
            $current);
    }
)(
(
		lv_value_1_0=RULE_STRING
		{
			newLeafNode(lv_value_1_0, grammarAccess.getStringLiteralAccess().getValueSTRINGTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getStringLiteralRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_1_0, 
        		"tools.vitruvius.domains.jml.language.JML.STRING");
	    }

)
))
;





// Entry rule entryRuleCharLiteral
entryRuleCharLiteral returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getCharLiteralRule()); }
	 iv_ruleCharLiteral=ruleCharLiteral 
	 { $current=$iv_ruleCharLiteral.current; } 
	 EOF 
;

// Rule CharLiteral
ruleCharLiteral returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getCharLiteralAccess().getCharLiteralAction_0(),
            $current);
    }
)(
(
		lv_value_1_0=RULE_CHAR
		{
			newLeafNode(lv_value_1_0, grammarAccess.getCharLiteralAccess().getValueCHARTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getCharLiteralRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_1_0, 
        		"tools.vitruvius.domains.jml.language.JML.CHAR");
	    }

)
))
;





// Entry rule entryRuleThrowExpression
entryRuleThrowExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getThrowExpressionRule()); }
	 iv_ruleThrowExpression=ruleThrowExpression 
	 { $current=$iv_ruleThrowExpression.current; } 
	 EOF 
;

// Rule ThrowExpression
ruleThrowExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getThrowExpressionAccess().getThrowExpressionAction_0(),
            $current);
    }
)	otherlv_1='throw' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getThrowExpressionAccess().getThrowKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getThrowExpressionAccess().getExpressionExpressionParserRuleCall_2_0()); 
	    }
		lv_expression_2_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getThrowExpressionRule());
	        }
       		set(
       			$current, 
       			"expression",
        		lv_expression_2_0, 
        		"tools.vitruvius.domains.jml.language.JML.Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleReturnExpression
entryRuleReturnExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getReturnExpressionRule()); }
	 iv_ruleReturnExpression=ruleReturnExpression 
	 { $current=$iv_ruleReturnExpression.current; } 
	 EOF 
;

// Rule ReturnExpression
ruleReturnExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getReturnExpressionAccess().getReturnExpressionAction_0(),
            $current);
    }
)	otherlv_1='return' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getReturnExpressionAccess().getReturnKeyword_1());
    }
((	'!' 
 | 	'-' 
 | 	'+' 
 | 	'new' 
 | 	'{' 
 | 	'switch' 
 | 	'synchronized' 
 | 	'<' 
 | 	'super' 
 | 	'class' 
 | 	'#' 
 | 	'[' 
 | 	'false' 
 | 	'true' 
 | 	'null' 
 | 	'if' 
 | 	'for' 
 | 	'while' 
 | 	'do' 
 | 	'throw' 
 | 	'return' 
 | 	'try' 
 | 	'(' 
 | 	'\\old' 
 | 	'\\fresh' 
 | 	'\\result' 
 | 	RULE_ID | 	RULE_HEX | 	RULE_INT | 	RULE_DECIMAL | 	RULE_STRING | 	RULE_CHAR)=>
(
		{ 
	        newCompositeNode(grammarAccess.getReturnExpressionAccess().getExpressionExpressionParserRuleCall_2_0()); 
	    }
		lv_expression_2_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getReturnExpressionRule());
	        }
       		set(
       			$current, 
       			"expression",
        		lv_expression_2_0, 
        		"tools.vitruvius.domains.jml.language.JML.Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)?)
;





// Entry rule entryRuleTryCatchFinallyExpression
entryRuleTryCatchFinallyExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTryCatchFinallyExpressionRule()); }
	 iv_ruleTryCatchFinallyExpression=ruleTryCatchFinallyExpression 
	 { $current=$iv_ruleTryCatchFinallyExpression.current; } 
	 EOF 
;

// Rule TryCatchFinallyExpression
ruleTryCatchFinallyExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getTryCatchFinallyExpressionAccess().getTryCatchFinallyExpressionAction_0(),
            $current);
    }
)	otherlv_1='try' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getTryCatchFinallyExpressionAccess().getTryKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTryCatchFinallyExpressionAccess().getExpressionExpressionParserRuleCall_2_0()); 
	    }
		lv_expression_2_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTryCatchFinallyExpressionRule());
	        }
       		set(
       			$current, 
       			"expression",
        		lv_expression_2_0, 
        		"tools.vitruvius.domains.jml.language.JML.Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)((((	'catch' 
)=>
(
		{ 
	        newCompositeNode(grammarAccess.getTryCatchFinallyExpressionAccess().getCatchClausesCatchClauseParserRuleCall_3_0_0_0()); 
	    }
		lv_catchClauses_3_0=ruleCatchClause		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTryCatchFinallyExpressionRule());
	        }
       		add(
       			$current, 
       			"catchClauses",
        		lv_catchClauses_3_0, 
        		"tools.vitruvius.domains.jml.language.JML.CatchClause");
	        afterParserOrEnumRuleCall();
	    }

)
)+(((	'finally' 
)=>	otherlv_4='finally' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getTryCatchFinallyExpressionAccess().getFinallyKeyword_3_0_1_0());
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getTryCatchFinallyExpressionAccess().getFinallyExpressionExpressionParserRuleCall_3_0_1_1_0()); 
	    }
		lv_finallyExpression_5_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTryCatchFinallyExpressionRule());
	        }
       		set(
       			$current, 
       			"finallyExpression",
        		lv_finallyExpression_5_0, 
        		"tools.vitruvius.domains.jml.language.JML.Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
    |(	otherlv_6='finally' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getTryCatchFinallyExpressionAccess().getFinallyKeyword_3_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTryCatchFinallyExpressionAccess().getFinallyExpressionExpressionParserRuleCall_3_1_1_0()); 
	    }
		lv_finallyExpression_7_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTryCatchFinallyExpressionRule());
	        }
       		set(
       			$current, 
       			"finallyExpression",
        		lv_finallyExpression_7_0, 
        		"tools.vitruvius.domains.jml.language.JML.Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))))
;





// Entry rule entryRuleSynchronizedExpression
entryRuleSynchronizedExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSynchronizedExpressionRule()); }
	 iv_ruleSynchronizedExpression=ruleSynchronizedExpression 
	 { $current=$iv_ruleSynchronizedExpression.current; } 
	 EOF 
;

// Rule SynchronizedExpression
ruleSynchronizedExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((((
)	'synchronized' 
	'(' 
))=>((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getSynchronizedExpressionAccess().getSynchronizedExpressionAction_0_0_0(),
            $current);
    }
)	otherlv_1='synchronized' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getSynchronizedExpressionAccess().getSynchronizedKeyword_0_0_1());
    }
	otherlv_2='(' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getSynchronizedExpressionAccess().getLeftParenthesisKeyword_0_0_2());
    }
))(
(
		{ 
	        newCompositeNode(grammarAccess.getSynchronizedExpressionAccess().getParamExpressionParserRuleCall_1_0()); 
	    }
		lv_param_3_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSynchronizedExpressionRule());
	        }
       		set(
       			$current, 
       			"param",
        		lv_param_3_0, 
        		"tools.vitruvius.domains.jml.language.JML.Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4=')' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getSynchronizedExpressionAccess().getRightParenthesisKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSynchronizedExpressionAccess().getExpressionExpressionParserRuleCall_3_0()); 
	    }
		lv_expression_5_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSynchronizedExpressionRule());
	        }
       		set(
       			$current, 
       			"expression",
        		lv_expression_5_0, 
        		"tools.vitruvius.domains.jml.language.JML.Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleCatchClause
entryRuleCatchClause returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getCatchClauseRule()); }
	 iv_ruleCatchClause=ruleCatchClause 
	 { $current=$iv_ruleCatchClause.current; } 
	 EOF 
;

// Rule CatchClause
ruleCatchClause returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((	'catch' 
)=>	otherlv_0='catch' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getCatchClauseAccess().getCatchKeyword_0());
    }
)	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getCatchClauseAccess().getLeftParenthesisKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getCatchClauseAccess().getDeclaredParamFullJvmFormalParameterParserRuleCall_2_0()); 
	    }
		lv_declaredParam_2_0=ruleFullJvmFormalParameter		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCatchClauseRule());
	        }
       		set(
       			$current, 
       			"declaredParam",
        		lv_declaredParam_2_0, 
        		"tools.vitruvius.domains.jml.language.JML.FullJvmFormalParameter");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=')' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getCatchClauseAccess().getRightParenthesisKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getCatchClauseAccess().getExpressionExpressionParserRuleCall_4_0()); 
	    }
		lv_expression_4_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCatchClauseRule());
	        }
       		set(
       			$current, 
       			"expression",
        		lv_expression_4_0, 
        		"tools.vitruvius.domains.jml.language.JML.Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleQualifiedName
entryRuleQualifiedName returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getQualifiedNameRule()); } 
	 iv_ruleQualifiedName=ruleQualifiedName 
	 { $current=$iv_ruleQualifiedName.current.getText(); }  
	 EOF 
;

// Rule QualifiedName
ruleQualifiedName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getQualifiedNameAccess().getValidIDParserRuleCall_0()); 
    }
    this_ValidID_0=ruleValidID    {
		$current.merge(this_ValidID_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }
(((
	'.' 
)=>
	kw='.' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getQualifiedNameAccess().getFullStopKeyword_1_0()); 
    }
)
    { 
        newCompositeNode(grammarAccess.getQualifiedNameAccess().getValidIDParserRuleCall_1_1()); 
    }
    this_ValidID_2=ruleValidID    {
		$current.merge(this_ValidID_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)*)
    ;





// Entry rule entryRuleNumber
entryRuleNumber returns [String current=null] 
	@init { 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
	}
	:
	{ newCompositeNode(grammarAccess.getNumberRule()); } 
	 iv_ruleNumber=ruleNumber 
	 { $current=$iv_ruleNumber.current.getText(); }  
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule Number
ruleNumber returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
    }
    @after { leaveRule(); }:
(    this_HEX_0=RULE_HEX    {
		$current.merge(this_HEX_0);
    }

    { 
    newLeafNode(this_HEX_0, grammarAccess.getNumberAccess().getHEXTerminalRuleCall_0()); 
    }

    |((    this_INT_1=RULE_INT    {
		$current.merge(this_INT_1);
    }

    { 
    newLeafNode(this_INT_1, grammarAccess.getNumberAccess().getINTTerminalRuleCall_1_0_0()); 
    }

    |    this_DECIMAL_2=RULE_DECIMAL    {
		$current.merge(this_DECIMAL_2);
    }

    { 
    newLeafNode(this_DECIMAL_2, grammarAccess.getNumberAccess().getDECIMALTerminalRuleCall_1_0_1()); 
    }
)(
	kw='.' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getNumberAccess().getFullStopKeyword_1_1_0()); 
    }
(    this_INT_4=RULE_INT    {
		$current.merge(this_INT_4);
    }

    { 
    newLeafNode(this_INT_4, grammarAccess.getNumberAccess().getINTTerminalRuleCall_1_1_1_0()); 
    }

    |    this_DECIMAL_5=RULE_DECIMAL    {
		$current.merge(this_DECIMAL_5);
    }

    { 
    newLeafNode(this_DECIMAL_5, grammarAccess.getNumberAccess().getDECIMALTerminalRuleCall_1_1_1_1()); 
    }
))?))
    ;
finally {
	myHiddenTokenState.restore();
}







// Entry rule entryRuleJMLMultilineSpecCommentStart
entryRuleJMLMultilineSpecCommentStart returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getJMLMultilineSpecCommentStartRule()); } 
	 iv_ruleJMLMultilineSpecCommentStart=ruleJMLMultilineSpecCommentStart 
	 { $current=$iv_ruleJMLMultilineSpecCommentStart.current.getText(); }  
	 EOF 
;

// Rule JMLMultilineSpecCommentStart
ruleJMLMultilineSpecCommentStart returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	kw='/*@' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getJMLMultilineSpecCommentStartAccess().getSolidusAsteriskCommercialAtKeyword()); 
    }

    ;





// Entry rule entryRuleJMLMultilineSpecCommentEnd
entryRuleJMLMultilineSpecCommentEnd returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getJMLMultilineSpecCommentEndRule()); } 
	 iv_ruleJMLMultilineSpecCommentEnd=ruleJMLMultilineSpecCommentEnd 
	 { $current=$iv_ruleJMLMultilineSpecCommentEnd.current.getText(); }  
	 EOF 
;

// Rule JMLMultilineSpecCommentEnd
ruleJMLMultilineSpecCommentEnd returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='*/' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getJMLMultilineSpecCommentEndAccess().getAsteriskSolidusKeyword_0()); 
    }

    |
	kw='@*/' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getJMLMultilineSpecCommentEndAccess().getCommercialAtAsteriskSolidusKeyword_1()); 
    }
)
    ;





// Entry rule entryRuleJvmTypeReference
entryRuleJvmTypeReference returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getJvmTypeReferenceRule()); }
	 iv_ruleJvmTypeReference=ruleJvmTypeReference 
	 { $current=$iv_ruleJvmTypeReference.current; } 
	 EOF 
;

// Rule JvmTypeReference
ruleJvmTypeReference returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getJvmTypeReferenceAccess().getJvmParameterizedTypeReferenceParserRuleCall_0_0()); 
    }
    this_JvmParameterizedTypeReference_0=ruleJvmParameterizedTypeReference
    { 
        $current = $this_JvmParameterizedTypeReference_0.current; 
        afterParserOrEnumRuleCall();
    }
((((
)	ruleArrayBrackets))=>((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getJvmTypeReferenceAccess().getJvmGenericArrayTypeReferenceComponentTypeAction_0_1_0_0(),
            $current);
    }
)
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getJvmTypeReferenceAccess().getArrayBracketsParserRuleCall_0_1_0_1()); 
    }
ruleArrayBrackets
    { 
        afterParserOrEnumRuleCall();
    }
))*)
    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getJvmTypeReferenceAccess().getXFunctionTypeRefParserRuleCall_1()); 
    }
    this_XFunctionTypeRef_3=ruleXFunctionTypeRef
    { 
        $current = $this_XFunctionTypeRef_3.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleArrayBrackets
entryRuleArrayBrackets returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getArrayBracketsRule()); } 
	 iv_ruleArrayBrackets=ruleArrayBrackets 
	 { $current=$iv_ruleArrayBrackets.current.getText(); }  
	 EOF 
;

// Rule ArrayBrackets
ruleArrayBrackets returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='[' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getArrayBracketsAccess().getLeftSquareBracketKeyword_0()); 
    }

	kw=']' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getArrayBracketsAccess().getRightSquareBracketKeyword_1()); 
    }
)
    ;





// Entry rule entryRuleXFunctionTypeRef
entryRuleXFunctionTypeRef returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getXFunctionTypeRefRule()); }
	 iv_ruleXFunctionTypeRef=ruleXFunctionTypeRef 
	 { $current=$iv_ruleXFunctionTypeRef.current; } 
	 EOF 
;

// Rule XFunctionTypeRef
ruleXFunctionTypeRef returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((	otherlv_0='(' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getXFunctionTypeRefAccess().getLeftParenthesisKeyword_0_0());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getXFunctionTypeRefAccess().getParamTypesJvmTypeReferenceParserRuleCall_0_1_0_0()); 
	    }
		lv_paramTypes_1_0=ruleJvmTypeReference		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXFunctionTypeRefRule());
	        }
       		add(
       			$current, 
       			"paramTypes",
        		lv_paramTypes_1_0, 
        		"org.eclipse.xtext.xbase.Xtype.JvmTypeReference");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_2=',' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getXFunctionTypeRefAccess().getCommaKeyword_0_1_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getXFunctionTypeRefAccess().getParamTypesJvmTypeReferenceParserRuleCall_0_1_1_1_0()); 
	    }
		lv_paramTypes_3_0=ruleJvmTypeReference		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXFunctionTypeRefRule());
	        }
       		add(
       			$current, 
       			"paramTypes",
        		lv_paramTypes_3_0, 
        		"org.eclipse.xtext.xbase.Xtype.JvmTypeReference");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?	otherlv_4=')' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getXFunctionTypeRefAccess().getRightParenthesisKeyword_0_2());
    }
)?	otherlv_5='=>' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getXFunctionTypeRefAccess().getEqualsSignGreaterThanSignKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getXFunctionTypeRefAccess().getReturnTypeJvmTypeReferenceParserRuleCall_2_0()); 
	    }
		lv_returnType_6_0=ruleJvmTypeReference		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXFunctionTypeRefRule());
	        }
       		set(
       			$current, 
       			"returnType",
        		lv_returnType_6_0, 
        		"org.eclipse.xtext.xbase.Xtype.JvmTypeReference");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleJvmParameterizedTypeReference
entryRuleJvmParameterizedTypeReference returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getJvmParameterizedTypeReferenceRule()); }
	 iv_ruleJvmParameterizedTypeReference=ruleJvmParameterizedTypeReference 
	 { $current=$iv_ruleJvmParameterizedTypeReference.current; } 
	 EOF 
;

// Rule JvmParameterizedTypeReference
ruleJvmParameterizedTypeReference returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getJvmParameterizedTypeReferenceRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getJvmParameterizedTypeReferenceAccess().getTypeJvmTypeCrossReference_0_0()); 
	    }
		ruleQualifiedName		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)(((	'<' 
)=>	otherlv_1='<' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getJvmParameterizedTypeReferenceAccess().getLessThanSignKeyword_1_0());
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getJvmParameterizedTypeReferenceAccess().getArgumentsJvmArgumentTypeReferenceParserRuleCall_1_1_0()); 
	    }
		lv_arguments_2_0=ruleJvmArgumentTypeReference		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getJvmParameterizedTypeReferenceRule());
	        }
       		add(
       			$current, 
       			"arguments",
        		lv_arguments_2_0, 
        		"org.eclipse.xtext.xbase.Xtype.JvmArgumentTypeReference");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getJvmParameterizedTypeReferenceAccess().getCommaKeyword_1_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getJvmParameterizedTypeReferenceAccess().getArgumentsJvmArgumentTypeReferenceParserRuleCall_1_2_1_0()); 
	    }
		lv_arguments_4_0=ruleJvmArgumentTypeReference		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getJvmParameterizedTypeReferenceRule());
	        }
       		add(
       			$current, 
       			"arguments",
        		lv_arguments_4_0, 
        		"org.eclipse.xtext.xbase.Xtype.JvmArgumentTypeReference");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_5='>' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getJvmParameterizedTypeReferenceAccess().getGreaterThanSignKeyword_1_3());
    }
(((((
)	'.' 
))=>((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getJvmParameterizedTypeReferenceAccess().getJvmInnerTypeReferenceOuterAction_1_4_0_0_0(),
            $current);
    }
)	otherlv_7='.' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getJvmParameterizedTypeReferenceAccess().getFullStopKeyword_1_4_0_0_1());
    }
))(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getJvmParameterizedTypeReferenceRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getJvmParameterizedTypeReferenceAccess().getTypeJvmTypeCrossReference_1_4_1_0()); 
	    }
		ruleValidID		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)(((	'<' 
)=>	otherlv_9='<' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getJvmParameterizedTypeReferenceAccess().getLessThanSignKeyword_1_4_2_0());
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getJvmParameterizedTypeReferenceAccess().getArgumentsJvmArgumentTypeReferenceParserRuleCall_1_4_2_1_0()); 
	    }
		lv_arguments_10_0=ruleJvmArgumentTypeReference		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getJvmParameterizedTypeReferenceRule());
	        }
       		add(
       			$current, 
       			"arguments",
        		lv_arguments_10_0, 
        		"org.eclipse.xtext.xbase.Xtype.JvmArgumentTypeReference");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_11=',' 
    {
    	newLeafNode(otherlv_11, grammarAccess.getJvmParameterizedTypeReferenceAccess().getCommaKeyword_1_4_2_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getJvmParameterizedTypeReferenceAccess().getArgumentsJvmArgumentTypeReferenceParserRuleCall_1_4_2_2_1_0()); 
	    }
		lv_arguments_12_0=ruleJvmArgumentTypeReference		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getJvmParameterizedTypeReferenceRule());
	        }
       		add(
       			$current, 
       			"arguments",
        		lv_arguments_12_0, 
        		"org.eclipse.xtext.xbase.Xtype.JvmArgumentTypeReference");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_13='>' 
    {
    	newLeafNode(otherlv_13, grammarAccess.getJvmParameterizedTypeReferenceAccess().getGreaterThanSignKeyword_1_4_2_3());
    }
)?)*)?)
;





// Entry rule entryRuleJvmArgumentTypeReference
entryRuleJvmArgumentTypeReference returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getJvmArgumentTypeReferenceRule()); }
	 iv_ruleJvmArgumentTypeReference=ruleJvmArgumentTypeReference 
	 { $current=$iv_ruleJvmArgumentTypeReference.current; } 
	 EOF 
;

// Rule JvmArgumentTypeReference
ruleJvmArgumentTypeReference returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getJvmArgumentTypeReferenceAccess().getJvmTypeReferenceParserRuleCall_0()); 
    }
    this_JvmTypeReference_0=ruleJvmTypeReference
    { 
        $current = $this_JvmTypeReference_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getJvmArgumentTypeReferenceAccess().getJvmWildcardTypeReferenceParserRuleCall_1()); 
    }
    this_JvmWildcardTypeReference_1=ruleJvmWildcardTypeReference
    { 
        $current = $this_JvmWildcardTypeReference_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleJvmWildcardTypeReference
entryRuleJvmWildcardTypeReference returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getJvmWildcardTypeReferenceRule()); }
	 iv_ruleJvmWildcardTypeReference=ruleJvmWildcardTypeReference 
	 { $current=$iv_ruleJvmWildcardTypeReference.current; } 
	 EOF 
;

// Rule JvmWildcardTypeReference
ruleJvmWildcardTypeReference returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getJvmWildcardTypeReferenceAccess().getJvmWildcardTypeReferenceAction_0(),
            $current);
    }
)	otherlv_1='?' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getJvmWildcardTypeReferenceAccess().getQuestionMarkKeyword_1());
    }
(((
(
		{ 
	        newCompositeNode(grammarAccess.getJvmWildcardTypeReferenceAccess().getConstraintsJvmUpperBoundParserRuleCall_2_0_0_0()); 
	    }
		lv_constraints_2_0=ruleJvmUpperBound		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getJvmWildcardTypeReferenceRule());
	        }
       		add(
       			$current, 
       			"constraints",
        		lv_constraints_2_0, 
        		"org.eclipse.xtext.xbase.Xtype.JvmUpperBound");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getJvmWildcardTypeReferenceAccess().getConstraintsJvmUpperBoundAndedParserRuleCall_2_0_1_0()); 
	    }
		lv_constraints_3_0=ruleJvmUpperBoundAnded		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getJvmWildcardTypeReferenceRule());
	        }
       		add(
       			$current, 
       			"constraints",
        		lv_constraints_3_0, 
        		"org.eclipse.xtext.xbase.Xtype.JvmUpperBoundAnded");
	        afterParserOrEnumRuleCall();
	    }

)
)*)
    |((
(
		{ 
	        newCompositeNode(grammarAccess.getJvmWildcardTypeReferenceAccess().getConstraintsJvmLowerBoundParserRuleCall_2_1_0_0()); 
	    }
		lv_constraints_4_0=ruleJvmLowerBound		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getJvmWildcardTypeReferenceRule());
	        }
       		add(
       			$current, 
       			"constraints",
        		lv_constraints_4_0, 
        		"org.eclipse.xtext.xbase.Xtype.JvmLowerBound");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getJvmWildcardTypeReferenceAccess().getConstraintsJvmLowerBoundAndedParserRuleCall_2_1_1_0()); 
	    }
		lv_constraints_5_0=ruleJvmLowerBoundAnded		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getJvmWildcardTypeReferenceRule());
	        }
       		add(
       			$current, 
       			"constraints",
        		lv_constraints_5_0, 
        		"org.eclipse.xtext.xbase.Xtype.JvmLowerBoundAnded");
	        afterParserOrEnumRuleCall();
	    }

)
)*))?)
;





// Entry rule entryRuleJvmUpperBound
entryRuleJvmUpperBound returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getJvmUpperBoundRule()); }
	 iv_ruleJvmUpperBound=ruleJvmUpperBound 
	 { $current=$iv_ruleJvmUpperBound.current; } 
	 EOF 
;

// Rule JvmUpperBound
ruleJvmUpperBound returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='extends' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getJvmUpperBoundAccess().getExtendsKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getJvmUpperBoundAccess().getTypeReferenceJvmTypeReferenceParserRuleCall_1_0()); 
	    }
		lv_typeReference_1_0=ruleJvmTypeReference		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getJvmUpperBoundRule());
	        }
       		set(
       			$current, 
       			"typeReference",
        		lv_typeReference_1_0, 
        		"org.eclipse.xtext.xbase.Xtype.JvmTypeReference");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleJvmUpperBoundAnded
entryRuleJvmUpperBoundAnded returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getJvmUpperBoundAndedRule()); }
	 iv_ruleJvmUpperBoundAnded=ruleJvmUpperBoundAnded 
	 { $current=$iv_ruleJvmUpperBoundAnded.current; } 
	 EOF 
;

// Rule JvmUpperBoundAnded
ruleJvmUpperBoundAnded returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='&' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getJvmUpperBoundAndedAccess().getAmpersandKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getJvmUpperBoundAndedAccess().getTypeReferenceJvmTypeReferenceParserRuleCall_1_0()); 
	    }
		lv_typeReference_1_0=ruleJvmTypeReference		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getJvmUpperBoundAndedRule());
	        }
       		set(
       			$current, 
       			"typeReference",
        		lv_typeReference_1_0, 
        		"org.eclipse.xtext.xbase.Xtype.JvmTypeReference");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleJvmLowerBound
entryRuleJvmLowerBound returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getJvmLowerBoundRule()); }
	 iv_ruleJvmLowerBound=ruleJvmLowerBound 
	 { $current=$iv_ruleJvmLowerBound.current; } 
	 EOF 
;

// Rule JvmLowerBound
ruleJvmLowerBound returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='super' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getJvmLowerBoundAccess().getSuperKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getJvmLowerBoundAccess().getTypeReferenceJvmTypeReferenceParserRuleCall_1_0()); 
	    }
		lv_typeReference_1_0=ruleJvmTypeReference		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getJvmLowerBoundRule());
	        }
       		set(
       			$current, 
       			"typeReference",
        		lv_typeReference_1_0, 
        		"org.eclipse.xtext.xbase.Xtype.JvmTypeReference");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleJvmLowerBoundAnded
entryRuleJvmLowerBoundAnded returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getJvmLowerBoundAndedRule()); }
	 iv_ruleJvmLowerBoundAnded=ruleJvmLowerBoundAnded 
	 { $current=$iv_ruleJvmLowerBoundAnded.current; } 
	 EOF 
;

// Rule JvmLowerBoundAnded
ruleJvmLowerBoundAnded returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='&' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getJvmLowerBoundAndedAccess().getAmpersandKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getJvmLowerBoundAndedAccess().getTypeReferenceJvmTypeReferenceParserRuleCall_1_0()); 
	    }
		lv_typeReference_1_0=ruleJvmTypeReference		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getJvmLowerBoundAndedRule());
	        }
       		set(
       			$current, 
       			"typeReference",
        		lv_typeReference_1_0, 
        		"org.eclipse.xtext.xbase.Xtype.JvmTypeReference");
	        afterParserOrEnumRuleCall();
	    }

)
))
;







// Entry rule entryRuleQualifiedNameWithWildcard
entryRuleQualifiedNameWithWildcard returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getQualifiedNameWithWildcardRule()); } 
	 iv_ruleQualifiedNameWithWildcard=ruleQualifiedNameWithWildcard 
	 { $current=$iv_ruleQualifiedNameWithWildcard.current.getText(); }  
	 EOF 
;

// Rule QualifiedNameWithWildcard
ruleQualifiedNameWithWildcard returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getQualifiedNameWithWildcardAccess().getQualifiedNameParserRuleCall_0()); 
    }
    this_QualifiedName_0=ruleQualifiedName    {
		$current.merge(this_QualifiedName_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw='.' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getQualifiedNameWithWildcardAccess().getFullStopKeyword_1()); 
    }

	kw='*' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getQualifiedNameWithWildcardAccess().getAsteriskKeyword_2()); 
    }
)
    ;





// Entry rule entryRuleValidID
entryRuleValidID returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getValidIDRule()); } 
	 iv_ruleValidID=ruleValidID 
	 { $current=$iv_ruleValidID.current.getText(); }  
	 EOF 
;

// Rule ValidID
ruleValidID returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
    this_ID_0=RULE_ID    {
		$current.merge(this_ID_0);
    }

    { 
    newLeafNode(this_ID_0, grammarAccess.getValidIDAccess().getIDTerminalRuleCall()); 
    }

    ;







// Entry rule entryRuleXImportDeclaration
entryRuleXImportDeclaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getXImportDeclarationRule()); }
	 iv_ruleXImportDeclaration=ruleXImportDeclaration 
	 { $current=$iv_ruleXImportDeclaration.current; } 
	 EOF 
;

// Rule XImportDeclaration
ruleXImportDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='import' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getXImportDeclarationAccess().getImportKeyword_0());
    }
(((
(
		lv_static_1_0=	'static' 
    {
        newLeafNode(lv_static_1_0, grammarAccess.getXImportDeclarationAccess().getStaticStaticKeyword_1_0_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getXImportDeclarationRule());
	        }
       		setWithLastConsumed($current, "static", true, "static");
	    }

)
)(
(
		lv_extension_2_0=	'extension' 
    {
        newLeafNode(lv_extension_2_0, grammarAccess.getXImportDeclarationAccess().getExtensionExtensionKeyword_1_0_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getXImportDeclarationRule());
	        }
       		setWithLastConsumed($current, "extension", true, "extension");
	    }

)
)?(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getXImportDeclarationRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getXImportDeclarationAccess().getImportedTypeJvmDeclaredTypeCrossReference_1_0_2_0()); 
	    }
		ruleQualifiedNameInStaticImport		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)((
(
		lv_wildcard_4_0=	'*' 
    {
        newLeafNode(lv_wildcard_4_0, grammarAccess.getXImportDeclarationAccess().getWildcardAsteriskKeyword_1_0_3_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getXImportDeclarationRule());
	        }
       		setWithLastConsumed($current, "wildcard", true, "*");
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getXImportDeclarationAccess().getMemberNameValidIDParserRuleCall_1_0_3_1_0()); 
	    }
		lv_memberName_5_0=ruleValidID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXImportDeclarationRule());
	        }
       		set(
       			$current, 
       			"memberName",
        		lv_memberName_5_0, 
        		"org.eclipse.xtext.xbase.Xtype.ValidID");
	        afterParserOrEnumRuleCall();
	    }

)
)))
    |(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getXImportDeclarationRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getXImportDeclarationAccess().getImportedTypeJvmDeclaredTypeCrossReference_1_1_0()); 
	    }
		ruleQualifiedName		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getXImportDeclarationAccess().getImportedNamespaceQualifiedNameWithWildcardParserRuleCall_1_2_0()); 
	    }
		lv_importedNamespace_7_0=ruleQualifiedNameWithWildcard		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXImportDeclarationRule());
	        }
       		set(
       			$current, 
       			"importedNamespace",
        		lv_importedNamespace_7_0, 
        		"org.eclipse.xtext.xbase.Xtype.QualifiedNameWithWildcard");
	        afterParserOrEnumRuleCall();
	    }

)
))(	otherlv_8=';' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getXImportDeclarationAccess().getSemicolonKeyword_2());
    }
)?)
;





// Entry rule entryRuleQualifiedNameInStaticImport
entryRuleQualifiedNameInStaticImport returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getQualifiedNameInStaticImportRule()); } 
	 iv_ruleQualifiedNameInStaticImport=ruleQualifiedNameInStaticImport 
	 { $current=$iv_ruleQualifiedNameInStaticImport.current.getText(); }  
	 EOF 
;

// Rule QualifiedNameInStaticImport
ruleQualifiedNameInStaticImport returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getQualifiedNameInStaticImportAccess().getValidIDParserRuleCall_0()); 
    }
    this_ValidID_0=ruleValidID    {
		$current.merge(this_ValidID_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw='.' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getQualifiedNameInStaticImportAccess().getFullStopKeyword_1()); 
    }
)+
    ;





// Rule ModifierValue
ruleModifierValue returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='public' 
	{
        $current = grammarAccess.getModifierValueAccess().getPUBLICEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getModifierValueAccess().getPUBLICEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='protected' 
	{
        $current = grammarAccess.getModifierValueAccess().getPROTECTEDEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getModifierValueAccess().getPROTECTEDEnumLiteralDeclaration_1()); 
    }
)
    |(	enumLiteral_2='private' 
	{
        $current = grammarAccess.getModifierValueAccess().getPRIVATEEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getModifierValueAccess().getPRIVATEEnumLiteralDeclaration_2()); 
    }
)
    |(	enumLiteral_3='static' 
	{
        $current = grammarAccess.getModifierValueAccess().getSTATICEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_3, grammarAccess.getModifierValueAccess().getSTATICEnumLiteralDeclaration_3()); 
    }
)
    |(	enumLiteral_4='abstract' 
	{
        $current = grammarAccess.getModifierValueAccess().getABSTRACTEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_4, grammarAccess.getModifierValueAccess().getABSTRACTEnumLiteralDeclaration_4()); 
    }
)
    |(	enumLiteral_5='final' 
	{
        $current = grammarAccess.getModifierValueAccess().getFINALEnumLiteralDeclaration_5().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_5, grammarAccess.getModifierValueAccess().getFINALEnumLiteralDeclaration_5()); 
    }
)
    |(	enumLiteral_6='native' 
	{
        $current = grammarAccess.getModifierValueAccess().getNATIVEEnumLiteralDeclaration_6().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_6, grammarAccess.getModifierValueAccess().getNATIVEEnumLiteralDeclaration_6()); 
    }
)
    |(	enumLiteral_7='synchronized' 
	{
        $current = grammarAccess.getModifierValueAccess().getSYNCHRONIZEDEnumLiteralDeclaration_7().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_7, grammarAccess.getModifierValueAccess().getSYNCHRONIZEDEnumLiteralDeclaration_7()); 
    }
)
    |(	enumLiteral_8='transient' 
	{
        $current = grammarAccess.getModifierValueAccess().getTRANSIENTEnumLiteralDeclaration_8().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_8, grammarAccess.getModifierValueAccess().getTRANSIENTEnumLiteralDeclaration_8()); 
    }
)
    |(	enumLiteral_9='volatile' 
	{
        $current = grammarAccess.getModifierValueAccess().getVOLATILEEnumLiteralDeclaration_9().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_9, grammarAccess.getModifierValueAccess().getVOLATILEEnumLiteralDeclaration_9()); 
    }
)
    |(	enumLiteral_10='strictfp' 
	{
        $current = grammarAccess.getModifierValueAccess().getSTRICTFPEnumLiteralDeclaration_10().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_10, grammarAccess.getModifierValueAccess().getSTRICTFPEnumLiteralDeclaration_10()); 
    }
));



// Rule VisibilityModifierValue
ruleVisibilityModifierValue returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='public' 
	{
        $current = grammarAccess.getVisibilityModifierValueAccess().getPUBLICEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getVisibilityModifierValueAccess().getPUBLICEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='protected' 
	{
        $current = grammarAccess.getVisibilityModifierValueAccess().getPROTECTEDEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getVisibilityModifierValueAccess().getPROTECTEDEnumLiteralDeclaration_1()); 
    }
)
    |(	enumLiteral_2='private' 
	{
        $current = grammarAccess.getVisibilityModifierValueAccess().getPRIVATEEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getVisibilityModifierValueAccess().getPRIVATEEnumLiteralDeclaration_2()); 
    }
)
    |(	enumLiteral_3='static' 
	{
        $current = grammarAccess.getVisibilityModifierValueAccess().getSTATICEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_3, grammarAccess.getVisibilityModifierValueAccess().getSTATICEnumLiteralDeclaration_3()); 
    }
));



// Rule JMLSpecMemberModifier
ruleJMLSpecMemberModifier returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='pure' 
	{
        $current = grammarAccess.getJMLSpecMemberModifierAccess().getPUREEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getJMLSpecMemberModifierAccess().getPUREEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='helper' 
	{
        $current = grammarAccess.getJMLSpecMemberModifierAccess().getHELPEREnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getJMLSpecMemberModifierAccess().getHELPEREnumLiteralDeclaration_1()); 
    }
)
    |(	enumLiteral_2='spec_public' 
	{
        $current = grammarAccess.getJMLSpecMemberModifierAccess().getPUBLICEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getJMLSpecMemberModifierAccess().getPUBLICEnumLiteralDeclaration_2()); 
    }
)
    |(	enumLiteral_3='spec_protected' 
	{
        $current = grammarAccess.getJMLSpecMemberModifierAccess().getPROTECTEDEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_3, grammarAccess.getJMLSpecMemberModifierAccess().getPROTECTEDEnumLiteralDeclaration_3()); 
    }
));



// Rule PrimitiveType
rulePrimitiveType returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='boolean' 
	{
        $current = grammarAccess.getPrimitiveTypeAccess().getBOOLEANEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getPrimitiveTypeAccess().getBOOLEANEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='char' 
	{
        $current = grammarAccess.getPrimitiveTypeAccess().getCHAREnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getPrimitiveTypeAccess().getCHAREnumLiteralDeclaration_1()); 
    }
)
    |(	enumLiteral_2='byte' 
	{
        $current = grammarAccess.getPrimitiveTypeAccess().getBYTEEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getPrimitiveTypeAccess().getBYTEEnumLiteralDeclaration_2()); 
    }
)
    |(	enumLiteral_3='short' 
	{
        $current = grammarAccess.getPrimitiveTypeAccess().getSHORTEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_3, grammarAccess.getPrimitiveTypeAccess().getSHORTEnumLiteralDeclaration_3()); 
    }
)
    |(	enumLiteral_4='int' 
	{
        $current = grammarAccess.getPrimitiveTypeAccess().getINTEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_4, grammarAccess.getPrimitiveTypeAccess().getINTEnumLiteralDeclaration_4()); 
    }
)
    |(	enumLiteral_5='long' 
	{
        $current = grammarAccess.getPrimitiveTypeAccess().getLONGEnumLiteralDeclaration_5().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_5, grammarAccess.getPrimitiveTypeAccess().getLONGEnumLiteralDeclaration_5()); 
    }
)
    |(	enumLiteral_6='float' 
	{
        $current = grammarAccess.getPrimitiveTypeAccess().getFLOATEnumLiteralDeclaration_6().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_6, grammarAccess.getPrimitiveTypeAccess().getFLOATEnumLiteralDeclaration_6()); 
    }
)
    |(	enumLiteral_7='double' 
	{
        $current = grammarAccess.getPrimitiveTypeAccess().getDOUBLEEnumLiteralDeclaration_7().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_7, grammarAccess.getPrimitiveTypeAccess().getDOUBLEEnumLiteralDeclaration_7()); 
    }
));



RULE_HEX : ('0x'|'0X') ('0'..'9'|'a'..'f'|'A'..'F'|'_')+ ('#' (('b'|'B') ('i'|'I')|('l'|'L')))?;

RULE_INT : '0'..'9' ('0'..'9'|'_')*;

RULE_DECIMAL : RULE_INT (('e'|'E') ('+'|'-')? RULE_INT)? (('b'|'B') ('i'|'I'|'d'|'D')|('l'|'L'|'d'|'D'|'f'|'F'))?;

RULE_ML_COMMENT : '/*' ~('@') ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~('@') ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_STRING : '"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"';

RULE_CHAR : '\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\''))) '\'';

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'$'|'_') ('a'..'z'|'A'..'Z'|'$'|'_'|'0'..'9')*;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


