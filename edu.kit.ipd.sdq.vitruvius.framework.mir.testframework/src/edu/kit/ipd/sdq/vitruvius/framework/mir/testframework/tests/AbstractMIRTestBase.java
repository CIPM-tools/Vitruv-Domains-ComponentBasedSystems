package edu.kit.ipd.sdq.vitruvius.framework.mir.testframework.tests;

import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertTrue;

import java.io.IOException;
import java.util.Collections;
import java.util.Set;
import java.util.function.Consumer;
import java.util.function.Function;
import java.util.function.Supplier;

import org.apache.log4j.Logger;
import org.eclipse.emf.common.util.URI;
import org.eclipse.emf.ecore.EClassifier;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.ocl.ParserException;
import org.eclipse.ocl.ecore.Constraint;
import org.eclipse.ocl.ecore.EcoreEnvironmentFactory;
import org.eclipse.ocl.ecore.OCL;
import org.eclipse.ocl.expressions.OCLExpression;
import org.eclipse.ocl.helper.OCLHelper;

import edu.kit.ipd.sdq.vitruvius.dsls.mapping.util.EclipseProjectHelper;
import edu.kit.ipd.sdq.vitruvius.framework.contracts.datatypes.FileChange.FileChangeKind;
import edu.kit.ipd.sdq.vitruvius.framework.contracts.datatypes.TUID;
import edu.kit.ipd.sdq.vitruvius.framework.contracts.datatypes.VURI;
import edu.kit.ipd.sdq.vitruvius.framework.contracts.interfaces.UserInteracting;
import edu.kit.ipd.sdq.vitruvius.framework.mir.executor.helpers.JavaHelper;
import edu.kit.ipd.sdq.vitruvius.framework.mir.executor.impl.AbstractMIRChange2CommandTransforming;
import edu.kit.ipd.sdq.vitruvius.framework.mir.executor.impl.AbstractMIRMappingRealization;
import edu.kit.ipd.sdq.vitruvius.framework.mir.executor.interfaces.MIRMappingRealization;
import edu.kit.ipd.sdq.vitruvius.framework.mir.testframework.util.ClaimableSingletonContainer;
import edu.kit.ipd.sdq.vitruvius.framework.run.changesynchronizer.ChangeSynchronizerImpl;
import edu.kit.ipd.sdq.vitruvius.framework.util.bridges.EcoreResourceBridge;
import edu.kit.ipd.sdq.vitruvius.framework.util.bridges.JavaBridge;
import edu.kit.ipd.sdq.vitruvius.tests.VitruviusEMFCasestudyTest;
import edu.kit.ipd.sdq.vitruvius.tests.util.TestUtil;

/**
 * Abstract test class for a mapping generated by MIR.
 * 
 * @author Dominik Werle
 */
public abstract class AbstractMIRTestBase extends VitruviusEMFCasestudyTest {
	private static final Logger LOGGER = Logger.getLogger(AbstractMIRTestBase.class);
	private static final String MODEL_PATH = TestUtil.PROJECT_URI + "/model";
	
	protected MappingLanguageTestUserInteracting userInteracting = new MappingLanguageTestUserInteracting();
	
	@Override
	protected void setUserInteractor(UserInteracting newUserInteracting, ChangeSynchronizerImpl changeSynchronizerImpl)
			throws Throwable {
		// not in MIR mappings
		// TODO: check if the correct type is inherited / rewrite
	}
	
	@Override
	public void setUpTest() throws Throwable {
		LOGGER.trace("generating project " + TestUtil.PROJECT_URI + " and MIR file...");
		EclipseProjectHelper eph = new EclipseProjectHelper(TestUtil.PROJECT_URI);
		eph.reinitializeXtextPluginProject();
		eph.getProject().getFolder("model").create(true, true, null);
		
		super.setUpTest();

		// The Change2CommandTransfomer class has to be loaded here to determine the
		// mappings for injection.
		@SuppressWarnings("unchecked")
		Set<MIRMappingRealization> mappings = Collections
				.checkedSet(JavaHelper.requireType(
						getChange2CommandTransformerClass()
								.getField(AbstractMIRChange2CommandTransforming.MAPPINGS_FIELD_NAME).get(null),
						Set.class), AbstractMIRMappingRealization.class);

		for (MIRMappingRealization mapping : mappings) {
			JavaBridge.setFieldInClass(AbstractMIRMappingRealization.class, "userInteracting", mapping,
					userInteracting);
		}
	}



}
