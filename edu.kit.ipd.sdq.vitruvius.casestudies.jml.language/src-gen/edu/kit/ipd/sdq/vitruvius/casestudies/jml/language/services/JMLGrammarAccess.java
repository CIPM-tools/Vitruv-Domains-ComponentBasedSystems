/*
* generated by Xtext
*/
package edu.kit.ipd.sdq.vitruvius.casestudies.jml.language.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.xbase.services.XtypeGrammarAccess;

@Singleton
public class JMLGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class CompilationUnitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CompilationUnit");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cCompilationUnitAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cPackagedeclarationAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPackagedeclarationPackageDeclarationParserRuleCall_1_0 = (RuleCall)cPackagedeclarationAssignment_1.eContents().get(0);
		private final Assignment cImportdeclarationAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cImportdeclarationImportDeclarationParserRuleCall_2_0 = (RuleCall)cImportdeclarationAssignment_2.eContents().get(0);
		private final Assignment cTypedeclarationAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTypedeclarationClassifierDeclarationWithModifierParserRuleCall_3_0 = (RuleCall)cTypedeclarationAssignment_3.eContents().get(0);
		
		//CompilationUnit:
		//	{CompilationUnit} packagedeclaration=PackageDeclaration? importdeclaration+=ImportDeclaration*
		//	typedeclaration+=ClassifierDeclarationWithModifier*;
		public ParserRule getRule() { return rule; }

		//{CompilationUnit} packagedeclaration=PackageDeclaration? importdeclaration+=ImportDeclaration*
		//typedeclaration+=ClassifierDeclarationWithModifier*
		public Group getGroup() { return cGroup; }

		//{CompilationUnit}
		public Action getCompilationUnitAction_0() { return cCompilationUnitAction_0; }

		//packagedeclaration=PackageDeclaration?
		public Assignment getPackagedeclarationAssignment_1() { return cPackagedeclarationAssignment_1; }

		//PackageDeclaration
		public RuleCall getPackagedeclarationPackageDeclarationParserRuleCall_1_0() { return cPackagedeclarationPackageDeclarationParserRuleCall_1_0; }

		//importdeclaration+=ImportDeclaration*
		public Assignment getImportdeclarationAssignment_2() { return cImportdeclarationAssignment_2; }

		//ImportDeclaration
		public RuleCall getImportdeclarationImportDeclarationParserRuleCall_2_0() { return cImportdeclarationImportDeclarationParserRuleCall_2_0; }

		//typedeclaration+=ClassifierDeclarationWithModifier*
		public Assignment getTypedeclarationAssignment_3() { return cTypedeclarationAssignment_3; }

		//ClassifierDeclarationWithModifier
		public RuleCall getTypedeclarationClassifierDeclarationWithModifierParserRuleCall_3_0() { return cTypedeclarationClassifierDeclarationWithModifierParserRuleCall_3_0; }
	}

	public class PackageDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PackageDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPackageKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cQualifiednameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cQualifiednameQualifiedNameParserRuleCall_1_0 = (RuleCall)cQualifiednameAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//PackageDeclaration:
		//	"package" qualifiedname=QualifiedName ";";
		public ParserRule getRule() { return rule; }

		//"package" qualifiedname=QualifiedName ";"
		public Group getGroup() { return cGroup; }

		//"package"
		public Keyword getPackageKeyword_0() { return cPackageKeyword_0; }

		//qualifiedname=QualifiedName
		public Assignment getQualifiednameAssignment_1() { return cQualifiednameAssignment_1; }

		//QualifiedName
		public RuleCall getQualifiednameQualifiedNameParserRuleCall_1_0() { return cQualifiednameQualifiedNameParserRuleCall_1_0; }

		//";"
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}

	public class ImportDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ImportDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cStaticAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cStaticStaticKeyword_1_0 = (Keyword)cStaticAssignment_1.eContents().get(0);
		private final Assignment cQualifiednameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cQualifiednameQualifiedNameParserRuleCall_2_0 = (RuleCall)cQualifiednameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cFullStopKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cWildcardAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final Keyword cWildcardAsteriskKeyword_3_1_0 = (Keyword)cWildcardAssignment_3_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//ImportDeclaration:
		//	"import" static?="static"? qualifiedname=QualifiedName ("." wildcard?="*")? ";";
		public ParserRule getRule() { return rule; }

		//"import" static?="static"? qualifiedname=QualifiedName ("." wildcard?="*")? ";"
		public Group getGroup() { return cGroup; }

		//"import"
		public Keyword getImportKeyword_0() { return cImportKeyword_0; }

		//static?="static"?
		public Assignment getStaticAssignment_1() { return cStaticAssignment_1; }

		//"static"
		public Keyword getStaticStaticKeyword_1_0() { return cStaticStaticKeyword_1_0; }

		//qualifiedname=QualifiedName
		public Assignment getQualifiednameAssignment_2() { return cQualifiednameAssignment_2; }

		//QualifiedName
		public RuleCall getQualifiednameQualifiedNameParserRuleCall_2_0() { return cQualifiednameQualifiedNameParserRuleCall_2_0; }

		//(=> "." wildcard?="*")?
		public Group getGroup_3() { return cGroup_3; }

		//=> "."
		public Keyword getFullStopKeyword_3_0() { return cFullStopKeyword_3_0; }

		//wildcard?="*"
		public Assignment getWildcardAssignment_3_1() { return cWildcardAssignment_3_1; }

		//"*"
		public Keyword getWildcardAsteriskKeyword_3_1_0() { return cWildcardAsteriskKeyword_3_1_0; }

		//";"
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}

	public class ClassifierDeclarationWithModifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ClassifierDeclarationWithModifier");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cModifiersAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cModifiersModifierParserRuleCall_0_0 = (RuleCall)cModifiersAssignment_0.eContents().get(0);
		private final Assignment cClassOrInterfaceDeclarationAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cClassOrInterfaceDeclarationClassOrInterfaceDeclarationParserRuleCall_1_0 = (RuleCall)cClassOrInterfaceDeclarationAssignment_1.eContents().get(0);
		
		//ClassifierDeclarationWithModifier:
		//	modifiers+=Modifier* classOrInterfaceDeclaration=ClassOrInterfaceDeclaration;
		public ParserRule getRule() { return rule; }

		//modifiers+=Modifier* classOrInterfaceDeclaration=ClassOrInterfaceDeclaration
		public Group getGroup() { return cGroup; }

		//modifiers+=Modifier*
		public Assignment getModifiersAssignment_0() { return cModifiersAssignment_0; }

		//Modifier
		public RuleCall getModifiersModifierParserRuleCall_0_0() { return cModifiersModifierParserRuleCall_0_0; }

		//classOrInterfaceDeclaration=ClassOrInterfaceDeclaration
		public Assignment getClassOrInterfaceDeclarationAssignment_1() { return cClassOrInterfaceDeclarationAssignment_1; }

		//ClassOrInterfaceDeclaration
		public RuleCall getClassOrInterfaceDeclarationClassOrInterfaceDeclarationParserRuleCall_1_0() { return cClassOrInterfaceDeclarationClassOrInterfaceDeclarationParserRuleCall_1_0; }
	}

	public class ClassOrInterfaceDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ClassOrInterfaceDeclaration");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cClassDeclarationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cInterfaceDeclarationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//ClassOrInterfaceDeclaration:
		//	ClassDeclaration | InterfaceDeclaration;
		public ParserRule getRule() { return rule; }

		//ClassDeclaration | InterfaceDeclaration
		public Alternatives getAlternatives() { return cAlternatives; }

		//ClassDeclaration
		public RuleCall getClassDeclarationParserRuleCall_0() { return cClassDeclarationParserRuleCall_0; }

		//InterfaceDeclaration
		public RuleCall getInterfaceDeclarationParserRuleCall_1() { return cInterfaceDeclarationParserRuleCall_1; }
	}

	public class ModifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Modifier");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAnnotationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cRegularModifierParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Modifier:
		//	Annotation | RegularModifier;
		public ParserRule getRule() { return rule; }

		//Annotation | RegularModifier
		public Alternatives getAlternatives() { return cAlternatives; }

		//Annotation
		public RuleCall getAnnotationParserRuleCall_0() { return cAnnotationParserRuleCall_0; }

		//RegularModifier
		public RuleCall getRegularModifierParserRuleCall_1() { return cRegularModifierParserRuleCall_1; }
	}

	public class RegularModifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RegularModifier");
		private final Assignment cModifierAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cModifierModifierValueEnumRuleCall_0 = (RuleCall)cModifierAssignment.eContents().get(0);
		
		//RegularModifier:
		//	modifier=ModifierValue;
		public ParserRule getRule() { return rule; }

		//modifier=ModifierValue
		public Assignment getModifierAssignment() { return cModifierAssignment; }

		//ModifierValue
		public RuleCall getModifierModifierValueEnumRuleCall_0() { return cModifierModifierValueEnumRuleCall_0; }
	}

	public class ClassDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ClassDeclaration");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cNormalClassDeclarationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cEnumDeclarationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//ClassDeclaration:
		//	NormalClassDeclaration | EnumDeclaration;
		public ParserRule getRule() { return rule; }

		//NormalClassDeclaration | EnumDeclaration
		public Alternatives getAlternatives() { return cAlternatives; }

		//NormalClassDeclaration
		public RuleCall getNormalClassDeclarationParserRuleCall_0() { return cNormalClassDeclarationParserRuleCall_0; }

		//EnumDeclaration
		public RuleCall getEnumDeclarationParserRuleCall_1() { return cEnumDeclarationParserRuleCall_1; }
	}

	public class NormalClassDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NormalClassDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cClassKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cIdentifierAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIdentifierIDTerminalRuleCall_1_0 = (RuleCall)cIdentifierAssignment_1.eContents().get(0);
		private final Assignment cTypeparametersAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeparametersTypeParametersParserRuleCall_2_0 = (RuleCall)cTypeparametersAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cExtendsKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cSuperTypeAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cSuperTypeTypeParserRuleCall_3_1_0 = (RuleCall)cSuperTypeAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cImplementsKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cImplementedTypesAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cImplementedTypesTypeParserRuleCall_4_1_0 = (RuleCall)cImplementedTypesAssignment_4_1.eContents().get(0);
		private final Group cGroup_4_2 = (Group)cGroup_4.eContents().get(2);
		private final Keyword cCommaKeyword_4_2_0 = (Keyword)cGroup_4_2.eContents().get(0);
		private final Assignment cImplementedTypesAssignment_4_2_1 = (Assignment)cGroup_4_2.eContents().get(1);
		private final RuleCall cImplementedTypesTypeParserRuleCall_4_2_1_0 = (RuleCall)cImplementedTypesAssignment_4_2_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cBodyDeclarationsAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cBodyDeclarationsClassBodyDeclarationParserRuleCall_6_0 = (RuleCall)cBodyDeclarationsAssignment_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//NormalClassDeclaration:
		//	"class" identifier=ID typeparameters=TypeParameters? ("extends" superType=Type)? ("implements" implementedTypes+=Type
		//	("," implementedTypes+=Type)*)? "{" bodyDeclarations+=ClassBodyDeclaration* "}";
		public ParserRule getRule() { return rule; }

		//"class" identifier=ID typeparameters=TypeParameters? ("extends" superType=Type)? ("implements" implementedTypes+=Type
		//("," implementedTypes+=Type)*)? "{" bodyDeclarations+=ClassBodyDeclaration* "}"
		public Group getGroup() { return cGroup; }

		//"class"
		public Keyword getClassKeyword_0() { return cClassKeyword_0; }

		//identifier=ID
		public Assignment getIdentifierAssignment_1() { return cIdentifierAssignment_1; }

		//ID
		public RuleCall getIdentifierIDTerminalRuleCall_1_0() { return cIdentifierIDTerminalRuleCall_1_0; }

		//typeparameters=TypeParameters?
		public Assignment getTypeparametersAssignment_2() { return cTypeparametersAssignment_2; }

		//TypeParameters
		public RuleCall getTypeparametersTypeParametersParserRuleCall_2_0() { return cTypeparametersTypeParametersParserRuleCall_2_0; }

		//("extends" superType=Type)?
		public Group getGroup_3() { return cGroup_3; }

		//"extends"
		public Keyword getExtendsKeyword_3_0() { return cExtendsKeyword_3_0; }

		//superType=Type
		public Assignment getSuperTypeAssignment_3_1() { return cSuperTypeAssignment_3_1; }

		//Type
		public RuleCall getSuperTypeTypeParserRuleCall_3_1_0() { return cSuperTypeTypeParserRuleCall_3_1_0; }

		//("implements" implementedTypes+=Type ("," implementedTypes+=Type)*)?
		public Group getGroup_4() { return cGroup_4; }

		//"implements"
		public Keyword getImplementsKeyword_4_0() { return cImplementsKeyword_4_0; }

		//implementedTypes+=Type
		public Assignment getImplementedTypesAssignment_4_1() { return cImplementedTypesAssignment_4_1; }

		//Type
		public RuleCall getImplementedTypesTypeParserRuleCall_4_1_0() { return cImplementedTypesTypeParserRuleCall_4_1_0; }

		//("," implementedTypes+=Type)*
		public Group getGroup_4_2() { return cGroup_4_2; }

		//","
		public Keyword getCommaKeyword_4_2_0() { return cCommaKeyword_4_2_0; }

		//implementedTypes+=Type
		public Assignment getImplementedTypesAssignment_4_2_1() { return cImplementedTypesAssignment_4_2_1; }

		//Type
		public RuleCall getImplementedTypesTypeParserRuleCall_4_2_1_0() { return cImplementedTypesTypeParserRuleCall_4_2_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_5() { return cLeftCurlyBracketKeyword_5; }

		//bodyDeclarations+=ClassBodyDeclaration*
		public Assignment getBodyDeclarationsAssignment_6() { return cBodyDeclarationsAssignment_6; }

		//ClassBodyDeclaration
		public RuleCall getBodyDeclarationsClassBodyDeclarationParserRuleCall_6_0() { return cBodyDeclarationsClassBodyDeclarationParserRuleCall_6_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}

	public class TypeParametersElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TypeParameters");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLessThanSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypeparameterAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeparameterTypeParameterParserRuleCall_1_0 = (RuleCall)cTypeparameterAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cTypeparameterAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cTypeparameterTypeParameterParserRuleCall_2_1_0 = (RuleCall)cTypeparameterAssignment_2_1.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//TypeParameters:
		//	"<" typeparameter+=TypeParameter ("," typeparameter+=TypeParameter)* ">";
		public ParserRule getRule() { return rule; }

		//"<" typeparameter+=TypeParameter ("," typeparameter+=TypeParameter)* ">"
		public Group getGroup() { return cGroup; }

		//"<"
		public Keyword getLessThanSignKeyword_0() { return cLessThanSignKeyword_0; }

		//typeparameter+=TypeParameter
		public Assignment getTypeparameterAssignment_1() { return cTypeparameterAssignment_1; }

		//TypeParameter
		public RuleCall getTypeparameterTypeParameterParserRuleCall_1_0() { return cTypeparameterTypeParameterParserRuleCall_1_0; }

		//("," typeparameter+=TypeParameter)*
		public Group getGroup_2() { return cGroup_2; }

		//","
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }

		//typeparameter+=TypeParameter
		public Assignment getTypeparameterAssignment_2_1() { return cTypeparameterAssignment_2_1; }

		//TypeParameter
		public RuleCall getTypeparameterTypeParameterParserRuleCall_2_1_0() { return cTypeparameterTypeParameterParserRuleCall_2_1_0; }

		//">"
		public Keyword getGreaterThanSignKeyword_3() { return cGreaterThanSignKeyword_3; }
	}

	public class TypeParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TypeParameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTypeParameterAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cIdentifierAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIdentifierIDTerminalRuleCall_1_0 = (RuleCall)cIdentifierAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cExtendsKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cTypeboundAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cTypeboundTypeBoundParserRuleCall_2_1_0 = (RuleCall)cTypeboundAssignment_2_1.eContents().get(0);
		
		//TypeParameter:
		//	{TypeParameter} identifier=ID ("extends" typebound=TypeBound)?;
		public ParserRule getRule() { return rule; }

		//{TypeParameter} identifier=ID ("extends" typebound=TypeBound)?
		public Group getGroup() { return cGroup; }

		//{TypeParameter}
		public Action getTypeParameterAction_0() { return cTypeParameterAction_0; }

		//identifier=ID
		public Assignment getIdentifierAssignment_1() { return cIdentifierAssignment_1; }

		//ID
		public RuleCall getIdentifierIDTerminalRuleCall_1_0() { return cIdentifierIDTerminalRuleCall_1_0; }

		//("extends" typebound=TypeBound)?
		public Group getGroup_2() { return cGroup_2; }

		//"extends"
		public Keyword getExtendsKeyword_2_0() { return cExtendsKeyword_2_0; }

		//typebound=TypeBound
		public Assignment getTypeboundAssignment_2_1() { return cTypeboundAssignment_2_1; }

		//TypeBound
		public RuleCall getTypeboundTypeBoundParserRuleCall_2_1_0() { return cTypeboundTypeBoundParserRuleCall_2_1_0; }
	}

	public class TypeBoundElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TypeBound");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeTypeParserRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cAmpersandKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cTypeAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cTypeTypeParserRuleCall_1_1_0 = (RuleCall)cTypeAssignment_1_1.eContents().get(0);
		
		//TypeBound:
		//	type+=Type ("&" type+=Type)*;
		public ParserRule getRule() { return rule; }

		//type+=Type ("&" type+=Type)*
		public Group getGroup() { return cGroup; }

		//type+=Type
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }

		//Type
		public RuleCall getTypeTypeParserRuleCall_0_0() { return cTypeTypeParserRuleCall_0_0; }

		//("&" type+=Type)*
		public Group getGroup_1() { return cGroup_1; }

		//"&"
		public Keyword getAmpersandKeyword_1_0() { return cAmpersandKeyword_1_0; }

		//type+=Type
		public Assignment getTypeAssignment_1_1() { return cTypeAssignment_1_1; }

		//Type
		public RuleCall getTypeTypeParserRuleCall_1_1_0() { return cTypeTypeParserRuleCall_1_1_0; }
	}

	public class EnumDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EnumDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEnumKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cIdentifierAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIdentifierIDTerminalRuleCall_1_0 = (RuleCall)cIdentifierAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cImplementsKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cImplementedTypesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cImplementedTypesTypeParserRuleCall_2_1_0 = (RuleCall)cImplementedTypesAssignment_2_1.eContents().get(0);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Keyword cCommaKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Assignment cImplementedTypesAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final RuleCall cImplementedTypesTypeParserRuleCall_2_2_1_0 = (RuleCall)cImplementedTypesAssignment_2_2_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cEnumconstantsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cEnumconstantsEnumConstantsParserRuleCall_4_0 = (RuleCall)cEnumconstantsAssignment_4.eContents().get(0);
		private final Keyword cCommaKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cBodyDeclarationsAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cBodyDeclarationsEnumBodyDeclarationsParserRuleCall_6_0 = (RuleCall)cBodyDeclarationsAssignment_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//EnumDeclaration:
		//	"enum" identifier=ID ("implements" implementedTypes+=Type ("," implementedTypes+=Type)*)? "{"
		//	enumconstants=EnumConstants? ","? bodyDeclarations=EnumBodyDeclarations? "}";
		public ParserRule getRule() { return rule; }

		//"enum" identifier=ID ("implements" implementedTypes+=Type ("," implementedTypes+=Type)*)? "{"
		//enumconstants=EnumConstants? ","? bodyDeclarations=EnumBodyDeclarations? "}"
		public Group getGroup() { return cGroup; }

		//"enum"
		public Keyword getEnumKeyword_0() { return cEnumKeyword_0; }

		//identifier=ID
		public Assignment getIdentifierAssignment_1() { return cIdentifierAssignment_1; }

		//ID
		public RuleCall getIdentifierIDTerminalRuleCall_1_0() { return cIdentifierIDTerminalRuleCall_1_0; }

		//("implements" implementedTypes+=Type ("," implementedTypes+=Type)*)?
		public Group getGroup_2() { return cGroup_2; }

		//"implements"
		public Keyword getImplementsKeyword_2_0() { return cImplementsKeyword_2_0; }

		//implementedTypes+=Type
		public Assignment getImplementedTypesAssignment_2_1() { return cImplementedTypesAssignment_2_1; }

		//Type
		public RuleCall getImplementedTypesTypeParserRuleCall_2_1_0() { return cImplementedTypesTypeParserRuleCall_2_1_0; }

		//("," implementedTypes+=Type)*
		public Group getGroup_2_2() { return cGroup_2_2; }

		//","
		public Keyword getCommaKeyword_2_2_0() { return cCommaKeyword_2_2_0; }

		//implementedTypes+=Type
		public Assignment getImplementedTypesAssignment_2_2_1() { return cImplementedTypesAssignment_2_2_1; }

		//Type
		public RuleCall getImplementedTypesTypeParserRuleCall_2_2_1_0() { return cImplementedTypesTypeParserRuleCall_2_2_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//enumconstants=EnumConstants?
		public Assignment getEnumconstantsAssignment_4() { return cEnumconstantsAssignment_4; }

		//EnumConstants
		public RuleCall getEnumconstantsEnumConstantsParserRuleCall_4_0() { return cEnumconstantsEnumConstantsParserRuleCall_4_0; }

		//","?
		public Keyword getCommaKeyword_5() { return cCommaKeyword_5; }

		//bodyDeclarations=EnumBodyDeclarations?
		public Assignment getBodyDeclarationsAssignment_6() { return cBodyDeclarationsAssignment_6; }

		//EnumBodyDeclarations
		public RuleCall getBodyDeclarationsEnumBodyDeclarationsParserRuleCall_6_0() { return cBodyDeclarationsEnumBodyDeclarationsParserRuleCall_6_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}

	public class EnumConstantsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EnumConstants");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cEnumconstantAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cEnumconstantEnumConstantParserRuleCall_0_0 = (RuleCall)cEnumconstantAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cEnumconstantAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cEnumconstantEnumConstantParserRuleCall_1_1_0 = (RuleCall)cEnumconstantAssignment_1_1.eContents().get(0);
		
		//EnumConstants:
		//	enumconstant+=EnumConstant ("," enumconstant+=EnumConstant)*;
		public ParserRule getRule() { return rule; }

		//enumconstant+=EnumConstant ("," enumconstant+=EnumConstant)*
		public Group getGroup() { return cGroup; }

		//enumconstant+=EnumConstant
		public Assignment getEnumconstantAssignment_0() { return cEnumconstantAssignment_0; }

		//EnumConstant
		public RuleCall getEnumconstantEnumConstantParserRuleCall_0_0() { return cEnumconstantEnumConstantParserRuleCall_0_0; }

		//("," enumconstant+=EnumConstant)*
		public Group getGroup_1() { return cGroup_1; }

		//","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }

		//enumconstant+=EnumConstant
		public Assignment getEnumconstantAssignment_1_1() { return cEnumconstantAssignment_1_1; }

		//EnumConstant
		public RuleCall getEnumconstantEnumConstantParserRuleCall_1_1_0() { return cEnumconstantEnumConstantParserRuleCall_1_1_0; }
	}

	public class EnumConstantElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EnumConstant");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cEnumConstantAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cAnnotationsAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cAnnotationsAnnotationsParserRuleCall_1_0_0 = (RuleCall)cAnnotationsAssignment_1_0.eContents().get(0);
		private final Assignment cIdentifierAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cIdentifierIDTerminalRuleCall_1_1_0 = (RuleCall)cIdentifierAssignment_1_1.eContents().get(0);
		private final Assignment cArgumentsAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cArgumentsArgumentsParserRuleCall_1_2_0 = (RuleCall)cArgumentsAssignment_1_2.eContents().get(0);
		private final Group cGroup_1_3 = (Group)cGroup_1.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_1_3_0 = (Keyword)cGroup_1_3.eContents().get(0);
		private final Assignment cClassbodydeclarationAssignment_1_3_1 = (Assignment)cGroup_1_3.eContents().get(1);
		private final RuleCall cClassbodydeclarationClassBodyDeclarationParserRuleCall_1_3_1_0 = (RuleCall)cClassbodydeclarationAssignment_1_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_1_3_2 = (Keyword)cGroup_1_3.eContents().get(2);
		
		//EnumConstant:
		//	{EnumConstant} (annotations=Annotations? identifier=ID arguments=Arguments? ("{"
		//	classbodydeclaration+=ClassBodyDeclaration* "}")?);
		public ParserRule getRule() { return rule; }

		//{EnumConstant} (annotations=Annotations? identifier=ID arguments=Arguments? ("{"
		//classbodydeclaration+=ClassBodyDeclaration* "}")?)
		public Group getGroup() { return cGroup; }

		//{EnumConstant}
		public Action getEnumConstantAction_0() { return cEnumConstantAction_0; }

		//annotations=Annotations? identifier=ID arguments=Arguments? ("{" classbodydeclaration+=ClassBodyDeclaration* "}")?
		public Group getGroup_1() { return cGroup_1; }

		//annotations=Annotations?
		public Assignment getAnnotationsAssignment_1_0() { return cAnnotationsAssignment_1_0; }

		//Annotations
		public RuleCall getAnnotationsAnnotationsParserRuleCall_1_0_0() { return cAnnotationsAnnotationsParserRuleCall_1_0_0; }

		//identifier=ID
		public Assignment getIdentifierAssignment_1_1() { return cIdentifierAssignment_1_1; }

		//ID
		public RuleCall getIdentifierIDTerminalRuleCall_1_1_0() { return cIdentifierIDTerminalRuleCall_1_1_0; }

		//arguments=Arguments?
		public Assignment getArgumentsAssignment_1_2() { return cArgumentsAssignment_1_2; }

		//Arguments
		public RuleCall getArgumentsArgumentsParserRuleCall_1_2_0() { return cArgumentsArgumentsParserRuleCall_1_2_0; }

		//("{" classbodydeclaration+=ClassBodyDeclaration* "}")?
		public Group getGroup_1_3() { return cGroup_1_3; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1_3_0() { return cLeftCurlyBracketKeyword_1_3_0; }

		//classbodydeclaration+=ClassBodyDeclaration*
		public Assignment getClassbodydeclarationAssignment_1_3_1() { return cClassbodydeclarationAssignment_1_3_1; }

		//ClassBodyDeclaration
		public RuleCall getClassbodydeclarationClassBodyDeclarationParserRuleCall_1_3_1_0() { return cClassbodydeclarationClassBodyDeclarationParserRuleCall_1_3_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_1_3_2() { return cRightCurlyBracketKeyword_1_3_2; }
	}

	public class EnumBodyDeclarationsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EnumBodyDeclarations");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cEnumBodyDeclarationsAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cSemicolonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cClassbodydeclarationAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cClassbodydeclarationClassBodyDeclarationParserRuleCall_2_0 = (RuleCall)cClassbodydeclarationAssignment_2.eContents().get(0);
		
		//EnumBodyDeclarations:
		//	{EnumBodyDeclarations} ";" classbodydeclaration+=ClassBodyDeclaration*;
		public ParserRule getRule() { return rule; }

		//{EnumBodyDeclarations} ";" classbodydeclaration+=ClassBodyDeclaration*
		public Group getGroup() { return cGroup; }

		//{EnumBodyDeclarations}
		public Action getEnumBodyDeclarationsAction_0() { return cEnumBodyDeclarationsAction_0; }

		//";"
		public Keyword getSemicolonKeyword_1() { return cSemicolonKeyword_1; }

		//classbodydeclaration+=ClassBodyDeclaration*
		public Assignment getClassbodydeclarationAssignment_2() { return cClassbodydeclarationAssignment_2; }

		//ClassBodyDeclaration
		public RuleCall getClassbodydeclarationClassBodyDeclarationParserRuleCall_2_0() { return cClassbodydeclarationClassBodyDeclarationParserRuleCall_2_0; }
	}

	public class ArgumentsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Arguments");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cArgumentsAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpressionsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpressionsExpressionParserRuleCall_2_0 = (RuleCall)cExpressionsAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cExpressionsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cExpressionsExpressionParserRuleCall_3_1_0 = (RuleCall)cExpressionsAssignment_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Arguments:
		//	{Arguments} "(" expressions+=Expression ("," expressions+=Expression) ")";
		public ParserRule getRule() { return rule; }

		//{Arguments} "(" expressions+=Expression ("," expressions+=Expression) ")"
		public Group getGroup() { return cGroup; }

		//{Arguments}
		public Action getArgumentsAction_0() { return cArgumentsAction_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//expressions+=Expression
		public Assignment getExpressionsAssignment_2() { return cExpressionsAssignment_2; }

		//Expression
		public RuleCall getExpressionsExpressionParserRuleCall_2_0() { return cExpressionsExpressionParserRuleCall_2_0; }

		//"," expressions+=Expression
		public Group getGroup_3() { return cGroup_3; }

		//","
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }

		//expressions+=Expression
		public Assignment getExpressionsAssignment_3_1() { return cExpressionsAssignment_3_1; }

		//Expression
		public RuleCall getExpressionsExpressionParserRuleCall_3_1_0() { return cExpressionsExpressionParserRuleCall_3_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}

	public class InterfaceDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "InterfaceDeclaration");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cNormalInterfaceDeclarationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cAnnotationTypeDeclarationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//InterfaceDeclaration:
		//	NormalInterfaceDeclaration | AnnotationTypeDeclaration;
		public ParserRule getRule() { return rule; }

		//NormalInterfaceDeclaration | AnnotationTypeDeclaration
		public Alternatives getAlternatives() { return cAlternatives; }

		//NormalInterfaceDeclaration
		public RuleCall getNormalInterfaceDeclarationParserRuleCall_0() { return cNormalInterfaceDeclarationParserRuleCall_0; }

		//AnnotationTypeDeclaration
		public RuleCall getAnnotationTypeDeclarationParserRuleCall_1() { return cAnnotationTypeDeclarationParserRuleCall_1; }
	}

	public class NormalInterfaceDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NormalInterfaceDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cInterfaceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cIdentifierAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIdentifierIDTerminalRuleCall_1_0 = (RuleCall)cIdentifierAssignment_1.eContents().get(0);
		private final Assignment cTypeparametersAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeparametersTypeParametersParserRuleCall_2_0 = (RuleCall)cTypeparametersAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cExtendsKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cImplementedTypesAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cImplementedTypesTypeParserRuleCall_3_1_0 = (RuleCall)cImplementedTypesAssignment_3_1.eContents().get(0);
		private final Group cGroup_3_2 = (Group)cGroup_3.eContents().get(2);
		private final Keyword cCommaKeyword_3_2_0 = (Keyword)cGroup_3_2.eContents().get(0);
		private final Assignment cImplementedTypesAssignment_3_2_1 = (Assignment)cGroup_3_2.eContents().get(1);
		private final RuleCall cImplementedTypesTypeParserRuleCall_3_2_1_0 = (RuleCall)cImplementedTypesAssignment_3_2_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cBodyDeclarationsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cBodyDeclarationsClassBodyDeclarationParserRuleCall_5_0 = (RuleCall)cBodyDeclarationsAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//NormalInterfaceDeclaration:
		//	"interface" identifier=ID typeparameters=TypeParameters? ("extends" implementedTypes+=Type (","
		//	implementedTypes+=Type)*)? "{" bodyDeclarations+=ClassBodyDeclaration* "}";
		public ParserRule getRule() { return rule; }

		//"interface" identifier=ID typeparameters=TypeParameters? ("extends" implementedTypes+=Type (","
		//implementedTypes+=Type)*)? "{" bodyDeclarations+=ClassBodyDeclaration* "}"
		public Group getGroup() { return cGroup; }

		//"interface"
		public Keyword getInterfaceKeyword_0() { return cInterfaceKeyword_0; }

		//identifier=ID
		public Assignment getIdentifierAssignment_1() { return cIdentifierAssignment_1; }

		//ID
		public RuleCall getIdentifierIDTerminalRuleCall_1_0() { return cIdentifierIDTerminalRuleCall_1_0; }

		//typeparameters=TypeParameters?
		public Assignment getTypeparametersAssignment_2() { return cTypeparametersAssignment_2; }

		//TypeParameters
		public RuleCall getTypeparametersTypeParametersParserRuleCall_2_0() { return cTypeparametersTypeParametersParserRuleCall_2_0; }

		//("extends" implementedTypes+=Type ("," implementedTypes+=Type)*)?
		public Group getGroup_3() { return cGroup_3; }

		//"extends"
		public Keyword getExtendsKeyword_3_0() { return cExtendsKeyword_3_0; }

		//implementedTypes+=Type
		public Assignment getImplementedTypesAssignment_3_1() { return cImplementedTypesAssignment_3_1; }

		//Type
		public RuleCall getImplementedTypesTypeParserRuleCall_3_1_0() { return cImplementedTypesTypeParserRuleCall_3_1_0; }

		//("," implementedTypes+=Type)*
		public Group getGroup_3_2() { return cGroup_3_2; }

		//","
		public Keyword getCommaKeyword_3_2_0() { return cCommaKeyword_3_2_0; }

		//implementedTypes+=Type
		public Assignment getImplementedTypesAssignment_3_2_1() { return cImplementedTypesAssignment_3_2_1; }

		//Type
		public RuleCall getImplementedTypesTypeParserRuleCall_3_2_1_0() { return cImplementedTypesTypeParserRuleCall_3_2_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }

		//bodyDeclarations+=ClassBodyDeclaration*
		public Assignment getBodyDeclarationsAssignment_5() { return cBodyDeclarationsAssignment_5; }

		//ClassBodyDeclaration
		public RuleCall getBodyDeclarationsClassBodyDeclarationParserRuleCall_5_0() { return cBodyDeclarationsClassBodyDeclarationParserRuleCall_5_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}

	public class ClassBodyDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ClassBodyDeclaration");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cClassBodyDeclarationAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final RuleCall cStaticBlockParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cJMLSpecifiedElementParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//ClassBodyDeclaration:
		//	{ClassBodyDeclaration} ";" | StaticBlock | JMLSpecifiedElement;
		public ParserRule getRule() { return rule; }

		//{ClassBodyDeclaration} ";" | StaticBlock | JMLSpecifiedElement
		public Alternatives getAlternatives() { return cAlternatives; }

		//{ClassBodyDeclaration} ";"
		public Group getGroup_0() { return cGroup_0; }

		//{ClassBodyDeclaration}
		public Action getClassBodyDeclarationAction_0_0() { return cClassBodyDeclarationAction_0_0; }

		//";"
		public Keyword getSemicolonKeyword_0_1() { return cSemicolonKeyword_0_1; }

		//StaticBlock
		public RuleCall getStaticBlockParserRuleCall_1() { return cStaticBlockParserRuleCall_1; }

		//JMLSpecifiedElement
		public RuleCall getJMLSpecifiedElementParserRuleCall_2() { return cJMLSpecifiedElementParserRuleCall_2; }
	}

	public class StaticBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StaticBlock");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cStaticAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cStaticStaticKeyword_0_0 = (Keyword)cStaticAssignment_0.eContents().get(0);
		private final Assignment cBlockAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cBlockBlockParserRuleCall_1_0 = (RuleCall)cBlockAssignment_1.eContents().get(0);
		
		//StaticBlock:
		//	static?="static"? block=Block;
		public ParserRule getRule() { return rule; }

		//static?="static"? block=Block
		public Group getGroup() { return cGroup; }

		//static?="static"?
		public Assignment getStaticAssignment_0() { return cStaticAssignment_0; }

		//"static"
		public Keyword getStaticStaticKeyword_0_0() { return cStaticStaticKeyword_0_0; }

		//block=Block
		public Assignment getBlockAssignment_1() { return cBlockAssignment_1; }

		//Block
		public RuleCall getBlockBlockParserRuleCall_1_0() { return cBlockBlockParserRuleCall_1_0; }
	}

	public class JMLSpecifiedElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "JMLSpecifiedElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cJMLMultilineSpecParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cJMLSinglelineSpecParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//JMLSpecifiedElement:
		//	JMLMultilineSpec | JMLSinglelineSpec;
		public ParserRule getRule() { return rule; }

		//JMLMultilineSpec | JMLSinglelineSpec
		public Alternatives getAlternatives() { return cAlternatives; }

		//JMLMultilineSpec
		public RuleCall getJMLMultilineSpecParserRuleCall_0() { return cJMLMultilineSpecParserRuleCall_0; }

		//JMLSinglelineSpec
		public RuleCall getJMLSinglelineSpecParserRuleCall_1() { return cJMLSinglelineSpecParserRuleCall_1; }
	}

	public class JMLMultilineSpecElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "JMLMultilineSpec");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cJMLMultilineSpecCommentStartParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Assignment cJmlTypeSpecificationsAssignment_1_0_0 = (Assignment)cGroup_1_0.eContents().get(0);
		private final RuleCall cJmlTypeSpecificationsJMLTypeExpressionWithModifierParserRuleCall_1_0_0_0 = (RuleCall)cJmlTypeSpecificationsAssignment_1_0_0.eContents().get(0);
		private final RuleCall cJMLMultilineSpecCommentEndParserRuleCall_1_0_1 = (RuleCall)cGroup_1_0.eContents().get(1);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Assignment cJmlSpecificationsAssignment_1_1_0 = (Assignment)cGroup_1_1.eContents().get(0);
		private final RuleCall cJmlSpecificationsJMLMethodSpecificationWithModifierParserRuleCall_1_1_0_0 = (RuleCall)cJmlSpecificationsAssignment_1_1_0.eContents().get(0);
		private final Alternatives cAlternatives_1_1_1 = (Alternatives)cGroup_1_1.eContents().get(1);
		private final Group cGroup_1_1_1_0 = (Group)cAlternatives_1_1_1.eContents().get(0);
		private final Assignment cModelElementAssignment_1_1_1_0_0 = (Assignment)cGroup_1_1_1_0.eContents().get(0);
		private final RuleCall cModelElementJMLSpecificationOnlyElementWithModifierParserRuleCall_1_1_1_0_0_0 = (RuleCall)cModelElementAssignment_1_1_1_0_0.eContents().get(0);
		private final RuleCall cJMLMultilineSpecCommentEndParserRuleCall_1_1_1_0_1 = (RuleCall)cGroup_1_1_1_0.eContents().get(1);
		private final Group cGroup_1_1_1_1 = (Group)cAlternatives_1_1_1.eContents().get(1);
		private final RuleCall cJMLMultilineSpecCommentEndParserRuleCall_1_1_1_1_0 = (RuleCall)cGroup_1_1_1_1.eContents().get(0);
		private final Assignment cElementAssignment_1_1_1_1_1 = (Assignment)cGroup_1_1_1_1.eContents().get(1);
		private final RuleCall cElementMemberDeclWithModifierRegularParserRuleCall_1_1_1_1_1_0 = (RuleCall)cElementAssignment_1_1_1_1_1.eContents().get(0);
		
		//// requires look ahead because of the modifiers
		//JMLMultilineSpec:
		//	JMLMultilineSpecCommentStart (jmlTypeSpecifications+=JMLTypeExpressionWithModifier+ JMLMultilineSpecCommentEnd |
		//	jmlSpecifications+=JMLMethodSpecificationWithModifier* (modelElement=JMLSpecificationOnlyElementWithModifier
		//	JMLMultilineSpecCommentEnd | JMLMultilineSpecCommentEnd element=MemberDeclWithModifierRegular));
		public ParserRule getRule() { return rule; }

		//JMLMultilineSpecCommentStart (jmlTypeSpecifications+=JMLTypeExpressionWithModifier+ JMLMultilineSpecCommentEnd |
		//jmlSpecifications+=JMLMethodSpecificationWithModifier* (modelElement=JMLSpecificationOnlyElementWithModifier
		//JMLMultilineSpecCommentEnd | JMLMultilineSpecCommentEnd element=MemberDeclWithModifierRegular))
		public Group getGroup() { return cGroup; }

		//JMLMultilineSpecCommentStart
		public RuleCall getJMLMultilineSpecCommentStartParserRuleCall_0() { return cJMLMultilineSpecCommentStartParserRuleCall_0; }

		//jmlTypeSpecifications+=JMLTypeExpressionWithModifier+ JMLMultilineSpecCommentEnd |
		//jmlSpecifications+=JMLMethodSpecificationWithModifier* (modelElement=JMLSpecificationOnlyElementWithModifier
		//JMLMultilineSpecCommentEnd | JMLMultilineSpecCommentEnd element=MemberDeclWithModifierRegular)
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//jmlTypeSpecifications+=JMLTypeExpressionWithModifier+ JMLMultilineSpecCommentEnd
		public Group getGroup_1_0() { return cGroup_1_0; }

		//jmlTypeSpecifications+=JMLTypeExpressionWithModifier+
		public Assignment getJmlTypeSpecificationsAssignment_1_0_0() { return cJmlTypeSpecificationsAssignment_1_0_0; }

		//JMLTypeExpressionWithModifier
		public RuleCall getJmlTypeSpecificationsJMLTypeExpressionWithModifierParserRuleCall_1_0_0_0() { return cJmlTypeSpecificationsJMLTypeExpressionWithModifierParserRuleCall_1_0_0_0; }

		//JMLMultilineSpecCommentEnd
		public RuleCall getJMLMultilineSpecCommentEndParserRuleCall_1_0_1() { return cJMLMultilineSpecCommentEndParserRuleCall_1_0_1; }

		//jmlSpecifications+=JMLMethodSpecificationWithModifier* (modelElement=JMLSpecificationOnlyElementWithModifier
		//JMLMultilineSpecCommentEnd | JMLMultilineSpecCommentEnd element=MemberDeclWithModifierRegular)
		public Group getGroup_1_1() { return cGroup_1_1; }

		//jmlSpecifications+=JMLMethodSpecificationWithModifier*
		public Assignment getJmlSpecificationsAssignment_1_1_0() { return cJmlSpecificationsAssignment_1_1_0; }

		//JMLMethodSpecificationWithModifier
		public RuleCall getJmlSpecificationsJMLMethodSpecificationWithModifierParserRuleCall_1_1_0_0() { return cJmlSpecificationsJMLMethodSpecificationWithModifierParserRuleCall_1_1_0_0; }

		//modelElement=JMLSpecificationOnlyElementWithModifier JMLMultilineSpecCommentEnd | JMLMultilineSpecCommentEnd
		//element=MemberDeclWithModifierRegular
		public Alternatives getAlternatives_1_1_1() { return cAlternatives_1_1_1; }

		//modelElement=JMLSpecificationOnlyElementWithModifier JMLMultilineSpecCommentEnd
		public Group getGroup_1_1_1_0() { return cGroup_1_1_1_0; }

		//modelElement=JMLSpecificationOnlyElementWithModifier
		public Assignment getModelElementAssignment_1_1_1_0_0() { return cModelElementAssignment_1_1_1_0_0; }

		//JMLSpecificationOnlyElementWithModifier
		public RuleCall getModelElementJMLSpecificationOnlyElementWithModifierParserRuleCall_1_1_1_0_0_0() { return cModelElementJMLSpecificationOnlyElementWithModifierParserRuleCall_1_1_1_0_0_0; }

		//JMLMultilineSpecCommentEnd
		public RuleCall getJMLMultilineSpecCommentEndParserRuleCall_1_1_1_0_1() { return cJMLMultilineSpecCommentEndParserRuleCall_1_1_1_0_1; }

		//JMLMultilineSpecCommentEnd element=MemberDeclWithModifierRegular
		public Group getGroup_1_1_1_1() { return cGroup_1_1_1_1; }

		//JMLMultilineSpecCommentEnd
		public RuleCall getJMLMultilineSpecCommentEndParserRuleCall_1_1_1_1_0() { return cJMLMultilineSpecCommentEndParserRuleCall_1_1_1_1_0; }

		//element=MemberDeclWithModifierRegular
		public Assignment getElementAssignment_1_1_1_1_1() { return cElementAssignment_1_1_1_1_1; }

		//MemberDeclWithModifierRegular
		public RuleCall getElementMemberDeclWithModifierRegularParserRuleCall_1_1_1_1_1_0() { return cElementMemberDeclWithModifierRegularParserRuleCall_1_1_1_1_1_0; }
	}

	public class JMLSinglelineSpecElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "JMLSinglelineSpec");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cElementAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cElementMemberDeclWithModifierRegularParserRuleCall_0_0 = (RuleCall)cElementAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cSolidusSolidusCommercialAtKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Alternatives cAlternatives_1_1 = (Alternatives)cGroup_1.eContents().get(1);
		private final Assignment cJmlTypeSpecificationsAssignment_1_1_0 = (Assignment)cAlternatives_1_1.eContents().get(0);
		private final RuleCall cJmlTypeSpecificationsJMLTypeExpressionWithModifierParserRuleCall_1_1_0_0 = (RuleCall)cJmlTypeSpecificationsAssignment_1_1_0.eContents().get(0);
		private final Group cGroup_1_1_1 = (Group)cAlternatives_1_1.eContents().get(1);
		private final Assignment cJmlSpecificationsAssignment_1_1_1_0 = (Assignment)cGroup_1_1_1.eContents().get(0);
		private final RuleCall cJmlSpecificationsJMLMethodSpecificationWithModifierParserRuleCall_1_1_1_0_0 = (RuleCall)cJmlSpecificationsAssignment_1_1_1_0.eContents().get(0);
		private final Group cGroup_1_1_1_1 = (Group)cGroup_1_1_1.eContents().get(1);
		private final Keyword cSolidusSolidusCommercialAtKeyword_1_1_1_1_0 = (Keyword)cGroup_1_1_1_1.eContents().get(0);
		private final Assignment cJmlSpecificationsAssignment_1_1_1_1_1 = (Assignment)cGroup_1_1_1_1.eContents().get(1);
		private final RuleCall cJmlSpecificationsJMLMethodSpecificationWithModifierParserRuleCall_1_1_1_1_1_0 = (RuleCall)cJmlSpecificationsAssignment_1_1_1_1_1.eContents().get(0);
		private final Assignment cElementAssignment_1_1_1_2 = (Assignment)cGroup_1_1_1.eContents().get(2);
		private final RuleCall cElementMemberDeclWithModifierRegularParserRuleCall_1_1_1_2_0 = (RuleCall)cElementAssignment_1_1_1_2.eContents().get(0);
		
		//JMLSinglelineSpec:
		//	element=MemberDeclWithModifierRegular | "//@" (jmlTypeSpecifications+=JMLTypeExpressionWithModifier |
		//	jmlSpecifications+=JMLMethodSpecificationWithModifier ("//@" jmlSpecifications+=JMLMethodSpecificationWithModifier)*
		//	element=MemberDeclWithModifierRegular);
		public ParserRule getRule() { return rule; }

		//element=MemberDeclWithModifierRegular | "//@" (jmlTypeSpecifications+=JMLTypeExpressionWithModifier |
		//jmlSpecifications+=JMLMethodSpecificationWithModifier ("//@" jmlSpecifications+=JMLMethodSpecificationWithModifier)*
		//element=MemberDeclWithModifierRegular)
		public Alternatives getAlternatives() { return cAlternatives; }

		//element=MemberDeclWithModifierRegular
		public Assignment getElementAssignment_0() { return cElementAssignment_0; }

		//MemberDeclWithModifierRegular
		public RuleCall getElementMemberDeclWithModifierRegularParserRuleCall_0_0() { return cElementMemberDeclWithModifierRegularParserRuleCall_0_0; }

		//"//@" (jmlTypeSpecifications+=JMLTypeExpressionWithModifier | jmlSpecifications+=JMLMethodSpecificationWithModifier
		//("//@" jmlSpecifications+=JMLMethodSpecificationWithModifier)* element=MemberDeclWithModifierRegular)
		public Group getGroup_1() { return cGroup_1; }

		//"//@"
		public Keyword getSolidusSolidusCommercialAtKeyword_1_0() { return cSolidusSolidusCommercialAtKeyword_1_0; }

		//jmlTypeSpecifications+=JMLTypeExpressionWithModifier | jmlSpecifications+=JMLMethodSpecificationWithModifier ("//@"
		//jmlSpecifications+=JMLMethodSpecificationWithModifier)* element=MemberDeclWithModifierRegular
		public Alternatives getAlternatives_1_1() { return cAlternatives_1_1; }

		//jmlTypeSpecifications+=JMLTypeExpressionWithModifier
		public Assignment getJmlTypeSpecificationsAssignment_1_1_0() { return cJmlTypeSpecificationsAssignment_1_1_0; }

		//JMLTypeExpressionWithModifier
		public RuleCall getJmlTypeSpecificationsJMLTypeExpressionWithModifierParserRuleCall_1_1_0_0() { return cJmlTypeSpecificationsJMLTypeExpressionWithModifierParserRuleCall_1_1_0_0; }

		//jmlSpecifications+=JMLMethodSpecificationWithModifier ("//@" jmlSpecifications+=JMLMethodSpecificationWithModifier)*
		//element=MemberDeclWithModifierRegular
		public Group getGroup_1_1_1() { return cGroup_1_1_1; }

		//jmlSpecifications+=JMLMethodSpecificationWithModifier
		public Assignment getJmlSpecificationsAssignment_1_1_1_0() { return cJmlSpecificationsAssignment_1_1_1_0; }

		//JMLMethodSpecificationWithModifier
		public RuleCall getJmlSpecificationsJMLMethodSpecificationWithModifierParserRuleCall_1_1_1_0_0() { return cJmlSpecificationsJMLMethodSpecificationWithModifierParserRuleCall_1_1_1_0_0; }

		//("//@" jmlSpecifications+=JMLMethodSpecificationWithModifier)*
		public Group getGroup_1_1_1_1() { return cGroup_1_1_1_1; }

		//"//@"
		public Keyword getSolidusSolidusCommercialAtKeyword_1_1_1_1_0() { return cSolidusSolidusCommercialAtKeyword_1_1_1_1_0; }

		//jmlSpecifications+=JMLMethodSpecificationWithModifier
		public Assignment getJmlSpecificationsAssignment_1_1_1_1_1() { return cJmlSpecificationsAssignment_1_1_1_1_1; }

		//JMLMethodSpecificationWithModifier
		public RuleCall getJmlSpecificationsJMLMethodSpecificationWithModifierParserRuleCall_1_1_1_1_1_0() { return cJmlSpecificationsJMLMethodSpecificationWithModifierParserRuleCall_1_1_1_1_1_0; }

		//element=MemberDeclWithModifierRegular
		public Assignment getElementAssignment_1_1_1_2() { return cElementAssignment_1_1_1_2; }

		//MemberDeclWithModifierRegular
		public RuleCall getElementMemberDeclWithModifierRegularParserRuleCall_1_1_1_2_0() { return cElementMemberDeclWithModifierRegularParserRuleCall_1_1_1_2_0; }
	}

	public class JMLExpressionHavingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "JMLExpressionHaving");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cJMLMethodExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cJMLTypeExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//JMLExpressionHaving:
		//	JMLMethodExpression | JMLTypeExpression;
		public ParserRule getRule() { return rule; }

		//JMLMethodExpression | JMLTypeExpression
		public Alternatives getAlternatives() { return cAlternatives; }

		//JMLMethodExpression
		public RuleCall getJMLMethodExpressionParserRuleCall_0() { return cJMLMethodExpressionParserRuleCall_0; }

		//JMLTypeExpression
		public RuleCall getJMLTypeExpressionParserRuleCall_1() { return cJMLTypeExpressionParserRuleCall_1; }
	}

	public class VisiblityModifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VisiblityModifier");
		private final Assignment cModifierAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cModifierVisibilityModifierValueEnumRuleCall_0 = (RuleCall)cModifierAssignment.eContents().get(0);
		
		//VisiblityModifier:
		//	modifier=VisibilityModifierValue;
		public ParserRule getRule() { return rule; }

		//modifier=VisibilityModifierValue
		public Assignment getModifierAssignment() { return cModifierAssignment; }

		//VisibilityModifierValue
		public RuleCall getModifierVisibilityModifierValueEnumRuleCall_0() { return cModifierVisibilityModifierValueEnumRuleCall_0; }
	}

	public class JMLMethodSpecificationWithModifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "JMLMethodSpecificationWithModifier");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cJMLMethodSpecificationWithModifierRegularParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cJMLMethodSpecificationWithModifierExtendedParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//JMLMethodSpecificationWithModifier:
		//	JMLMethodSpecificationWithModifierRegular | JMLMethodSpecificationWithModifierExtended;
		public ParserRule getRule() { return rule; }

		//JMLMethodSpecificationWithModifierRegular | JMLMethodSpecificationWithModifierExtended
		public Alternatives getAlternatives() { return cAlternatives; }

		//JMLMethodSpecificationWithModifierRegular
		public RuleCall getJMLMethodSpecificationWithModifierRegularParserRuleCall_0() { return cJMLMethodSpecificationWithModifierRegularParserRuleCall_0; }

		//JMLMethodSpecificationWithModifierExtended
		public RuleCall getJMLMethodSpecificationWithModifierExtendedParserRuleCall_1() { return cJMLMethodSpecificationWithModifierExtendedParserRuleCall_1; }
	}

	public class JMLMethodSpecificationWithModifierRegularElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "JMLMethodSpecificationWithModifierRegular");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cModifierAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cModifierVisiblityModifierParserRuleCall_0_0 = (RuleCall)cModifierAssignment_0.eContents().get(0);
		private final Assignment cSpecAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSpecJMLMethodSpecificationParserRuleCall_1_0 = (RuleCall)cSpecAssignment_1.eContents().get(0);
		
		//JMLMethodSpecificationWithModifierRegular:
		//	modifier+=VisiblityModifier* spec=JMLMethodSpecification;
		public ParserRule getRule() { return rule; }

		//modifier+=VisiblityModifier* spec=JMLMethodSpecification
		public Group getGroup() { return cGroup; }

		//modifier+=VisiblityModifier*
		public Assignment getModifierAssignment_0() { return cModifierAssignment_0; }

		//VisiblityModifier
		public RuleCall getModifierVisiblityModifierParserRuleCall_0_0() { return cModifierVisiblityModifierParserRuleCall_0_0; }

		//spec=JMLMethodSpecification
		public Assignment getSpecAssignment_1() { return cSpecAssignment_1; }

		//JMLMethodSpecification
		public RuleCall getSpecJMLMethodSpecificationParserRuleCall_1_0() { return cSpecJMLMethodSpecificationParserRuleCall_1_0; }
	}

	public class JMLMethodSpecificationWithModifierExtendedElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "JMLMethodSpecificationWithModifierExtended");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAlsoKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cModifierAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cModifierVisiblityModifierParserRuleCall_1_0 = (RuleCall)cModifierAssignment_1.eContents().get(0);
		private final Assignment cSpecAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cSpecJMLMethodSpecificationParserRuleCall_2_0 = (RuleCall)cSpecAssignment_2.eContents().get(0);
		
		//JMLMethodSpecificationWithModifierExtended:
		//	"also" modifier+=VisiblityModifier* spec=JMLMethodSpecification;
		public ParserRule getRule() { return rule; }

		//"also" modifier+=VisiblityModifier* spec=JMLMethodSpecification
		public Group getGroup() { return cGroup; }

		//"also"
		public Keyword getAlsoKeyword_0() { return cAlsoKeyword_0; }

		//modifier+=VisiblityModifier*
		public Assignment getModifierAssignment_1() { return cModifierAssignment_1; }

		//VisiblityModifier
		public RuleCall getModifierVisiblityModifierParserRuleCall_1_0() { return cModifierVisiblityModifierParserRuleCall_1_0; }

		//spec=JMLMethodSpecification
		public Assignment getSpecAssignment_2() { return cSpecAssignment_2; }

		//JMLMethodSpecification
		public RuleCall getSpecJMLMethodSpecificationParserRuleCall_2_0() { return cSpecJMLMethodSpecificationParserRuleCall_2_0; }
	}

	public class JMLMethodSpecificationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "JMLMethodSpecification");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cJMLMethodExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cJMLMethodBehaviorParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//JMLMethodSpecification:
		//	JMLMethodExpression | JMLMethodBehavior;
		public ParserRule getRule() { return rule; }

		//JMLMethodExpression | JMLMethodBehavior
		public Alternatives getAlternatives() { return cAlternatives; }

		//JMLMethodExpression
		public RuleCall getJMLMethodExpressionParserRuleCall_0() { return cJMLMethodExpressionParserRuleCall_0; }

		//JMLMethodBehavior
		public RuleCall getJMLMethodBehaviorParserRuleCall_1() { return cJMLMethodBehaviorParserRuleCall_1; }
	}

	public class JMLMethodBehaviorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "JMLMethodBehavior");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cJMLExceptionalBehaviorBlockParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cJMLNormalBehaviorBlockParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cJMLBehaviorBlockParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//JMLMethodBehavior:
		//	JMLExceptionalBehaviorBlock | JMLNormalBehaviorBlock | JMLBehaviorBlock;
		public ParserRule getRule() { return rule; }

		//JMLExceptionalBehaviorBlock | JMLNormalBehaviorBlock | JMLBehaviorBlock
		public Alternatives getAlternatives() { return cAlternatives; }

		//JMLExceptionalBehaviorBlock
		public RuleCall getJMLExceptionalBehaviorBlockParserRuleCall_0() { return cJMLExceptionalBehaviorBlockParserRuleCall_0; }

		//JMLNormalBehaviorBlock
		public RuleCall getJMLNormalBehaviorBlockParserRuleCall_1() { return cJMLNormalBehaviorBlockParserRuleCall_1; }

		//JMLBehaviorBlock
		public RuleCall getJMLBehaviorBlockParserRuleCall_2() { return cJMLBehaviorBlockParserRuleCall_2; }
	}

	public class JMLExceptionalBehaviorBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "JMLExceptionalBehaviorBlock");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cExceptional_behaviorKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cSpecificationsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSpecificationsJMLMethodExpressionParserRuleCall_1_0 = (RuleCall)cSpecificationsAssignment_1.eContents().get(0);
		
		//JMLExceptionalBehaviorBlock:
		//	"exceptional_behavior" specifications+=JMLMethodExpression+;
		public ParserRule getRule() { return rule; }

		//"exceptional_behavior" specifications+=JMLMethodExpression+
		public Group getGroup() { return cGroup; }

		//"exceptional_behavior"
		public Keyword getExceptional_behaviorKeyword_0() { return cExceptional_behaviorKeyword_0; }

		//specifications+=JMLMethodExpression+
		public Assignment getSpecificationsAssignment_1() { return cSpecificationsAssignment_1; }

		//JMLMethodExpression
		public RuleCall getSpecificationsJMLMethodExpressionParserRuleCall_1_0() { return cSpecificationsJMLMethodExpressionParserRuleCall_1_0; }
	}

	public class JMLNormalBehaviorBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "JMLNormalBehaviorBlock");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNormal_behaviorKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cSpecificationsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSpecificationsJMLMethodExpressionParserRuleCall_1_0 = (RuleCall)cSpecificationsAssignment_1.eContents().get(0);
		
		//JMLNormalBehaviorBlock:
		//	"normal_behavior" specifications+=JMLMethodExpression+;
		public ParserRule getRule() { return rule; }

		//"normal_behavior" specifications+=JMLMethodExpression+
		public Group getGroup() { return cGroup; }

		//"normal_behavior"
		public Keyword getNormal_behaviorKeyword_0() { return cNormal_behaviorKeyword_0; }

		//specifications+=JMLMethodExpression+
		public Assignment getSpecificationsAssignment_1() { return cSpecificationsAssignment_1; }

		//JMLMethodExpression
		public RuleCall getSpecificationsJMLMethodExpressionParserRuleCall_1_0() { return cSpecificationsJMLMethodExpressionParserRuleCall_1_0; }
	}

	public class JMLBehaviorBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "JMLBehaviorBlock");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cBehaviorKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cSpecificationsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSpecificationsJMLMethodExpressionParserRuleCall_1_0 = (RuleCall)cSpecificationsAssignment_1.eContents().get(0);
		
		//JMLBehaviorBlock:
		//	"behavior" specifications+=JMLMethodExpression+;
		public ParserRule getRule() { return rule; }

		//"behavior" specifications+=JMLMethodExpression+
		public Group getGroup() { return cGroup; }

		//"behavior"
		public Keyword getBehaviorKeyword_0() { return cBehaviorKeyword_0; }

		//specifications+=JMLMethodExpression+
		public Assignment getSpecificationsAssignment_1() { return cSpecificationsAssignment_1; }

		//JMLMethodExpression
		public RuleCall getSpecificationsJMLMethodExpressionParserRuleCall_1_0() { return cSpecificationsJMLMethodExpressionParserRuleCall_1_0; }
	}

	public class JMLMethodExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "JMLMethodExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final RuleCall cJMLEnsuresExpressionParserRuleCall_0_0 = (RuleCall)cAlternatives_0.eContents().get(0);
		private final RuleCall cJMLRequiresExpressionParserRuleCall_0_1 = (RuleCall)cAlternatives_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//JMLMethodExpression:
		//	(JMLEnsuresExpression | JMLRequiresExpression) ";";
		public ParserRule getRule() { return rule; }

		//(JMLEnsuresExpression | JMLRequiresExpression) ";"
		public Group getGroup() { return cGroup; }

		//JMLEnsuresExpression | JMLRequiresExpression
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//JMLEnsuresExpression
		public RuleCall getJMLEnsuresExpressionParserRuleCall_0_0() { return cJMLEnsuresExpressionParserRuleCall_0_0; }

		//JMLRequiresExpression
		public RuleCall getJMLRequiresExpressionParserRuleCall_0_1() { return cJMLRequiresExpressionParserRuleCall_0_1; }

		//";"
		public Keyword getSemicolonKeyword_1() { return cSemicolonKeyword_1; }
	}

	public class JMLEnsuresExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "JMLEnsuresExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEnsuresKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExprAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExprExpressionParserRuleCall_1_0 = (RuleCall)cExprAssignment_1.eContents().get(0);
		
		//JMLEnsuresExpression:
		//	"ensures" expr=Expression;
		public ParserRule getRule() { return rule; }

		//"ensures" expr=Expression
		public Group getGroup() { return cGroup; }

		//"ensures"
		public Keyword getEnsuresKeyword_0() { return cEnsuresKeyword_0; }

		//expr=Expression
		public Assignment getExprAssignment_1() { return cExprAssignment_1; }

		//Expression
		public RuleCall getExprExpressionParserRuleCall_1_0() { return cExprExpressionParserRuleCall_1_0; }
	}

	public class JMLRequiresExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "JMLRequiresExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRequiresKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExprAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExprExpressionParserRuleCall_1_0 = (RuleCall)cExprAssignment_1.eContents().get(0);
		
		//JMLRequiresExpression:
		//	"requires" expr=Expression;
		public ParserRule getRule() { return rule; }

		//"requires" expr=Expression
		public Group getGroup() { return cGroup; }

		//"requires"
		public Keyword getRequiresKeyword_0() { return cRequiresKeyword_0; }

		//expr=Expression
		public Assignment getExprAssignment_1() { return cExprAssignment_1; }

		//Expression
		public RuleCall getExprExpressionParserRuleCall_1_0() { return cExprExpressionParserRuleCall_1_0; }
	}

	public class JMLSpecificationOnlyElementWithModifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "JMLSpecificationOnlyElementWithModifier");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cModifierAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cModifierVisiblityModifierParserRuleCall_0_0 = (RuleCall)cModifierAssignment_0.eContents().get(0);
		private final Assignment cElementAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cElementJMLSpecificationOnlyElementParserRuleCall_1_0 = (RuleCall)cElementAssignment_1.eContents().get(0);
		
		//JMLSpecificationOnlyElementWithModifier:
		//	modifier+=VisiblityModifier* element=JMLSpecificationOnlyElement;
		public ParserRule getRule() { return rule; }

		//modifier+=VisiblityModifier* element=JMLSpecificationOnlyElement
		public Group getGroup() { return cGroup; }

		//modifier+=VisiblityModifier*
		public Assignment getModifierAssignment_0() { return cModifierAssignment_0; }

		//VisiblityModifier
		public RuleCall getModifierVisiblityModifierParserRuleCall_0_0() { return cModifierVisiblityModifierParserRuleCall_0_0; }

		//element=JMLSpecificationOnlyElement
		public Assignment getElementAssignment_1() { return cElementAssignment_1; }

		//JMLSpecificationOnlyElement
		public RuleCall getElementJMLSpecificationOnlyElementParserRuleCall_1_0() { return cElementJMLSpecificationOnlyElementParserRuleCall_1_0; }
	}

	public class JMLSpecificationOnlyElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "JMLSpecificationOnlyElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cJMLGhostElementParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cJMLModelElementParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//JMLSpecificationOnlyElement:
		//	JMLGhostElement | JMLModelElement;
		public ParserRule getRule() { return rule; }

		//JMLGhostElement | JMLModelElement
		public Alternatives getAlternatives() { return cAlternatives; }

		//JMLGhostElement
		public RuleCall getJMLGhostElementParserRuleCall_0() { return cJMLGhostElementParserRuleCall_0; }

		//JMLModelElement
		public RuleCall getJMLModelElementParserRuleCall_1() { return cJMLModelElementParserRuleCall_1; }
	}

	public class JMLModelElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "JMLModelElement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cModelKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cInstanceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cInstanceInstanceKeyword_1_0 = (Keyword)cInstanceAssignment_1.eContents().get(0);
		private final Assignment cElementAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cElementMemberDeclWithModifierSpecParserRuleCall_2_0 = (RuleCall)cElementAssignment_2.eContents().get(0);
		
		//JMLModelElement:
		//	"model" instance?="instance"? element=MemberDeclWithModifierSpec;
		public ParserRule getRule() { return rule; }

		//"model" instance?="instance"? element=MemberDeclWithModifierSpec
		public Group getGroup() { return cGroup; }

		//"model"
		public Keyword getModelKeyword_0() { return cModelKeyword_0; }

		//instance?="instance"?
		public Assignment getInstanceAssignment_1() { return cInstanceAssignment_1; }

		//"instance"
		public Keyword getInstanceInstanceKeyword_1_0() { return cInstanceInstanceKeyword_1_0; }

		//element=MemberDeclWithModifierSpec
		public Assignment getElementAssignment_2() { return cElementAssignment_2; }

		//MemberDeclWithModifierSpec
		public RuleCall getElementMemberDeclWithModifierSpecParserRuleCall_2_0() { return cElementMemberDeclWithModifierSpecParserRuleCall_2_0; }
	}

	public class JMLGhostElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "JMLGhostElement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGhostKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cInstanceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cInstanceInstanceKeyword_1_0 = (Keyword)cInstanceAssignment_1.eContents().get(0);
		private final Assignment cElementAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cElementMemberDeclWithModifierSpecParserRuleCall_2_0 = (RuleCall)cElementAssignment_2.eContents().get(0);
		
		//JMLGhostElement:
		//	"ghost" instance?="instance"? element=MemberDeclWithModifierSpec;
		public ParserRule getRule() { return rule; }

		//"ghost" instance?="instance"? element=MemberDeclWithModifierSpec
		public Group getGroup() { return cGroup; }

		//"ghost"
		public Keyword getGhostKeyword_0() { return cGhostKeyword_0; }

		//instance?="instance"?
		public Assignment getInstanceAssignment_1() { return cInstanceAssignment_1; }

		//"instance"
		public Keyword getInstanceInstanceKeyword_1_0() { return cInstanceInstanceKeyword_1_0; }

		//element=MemberDeclWithModifierSpec
		public Assignment getElementAssignment_2() { return cElementAssignment_2; }

		//MemberDeclWithModifierSpec
		public RuleCall getElementMemberDeclWithModifierSpecParserRuleCall_2_0() { return cElementMemberDeclWithModifierSpecParserRuleCall_2_0; }
	}

	public class JMLTypeExpressionWithModifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "JMLTypeExpressionWithModifier");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cModifierAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cModifierVisiblityModifierParserRuleCall_0_0 = (RuleCall)cModifierAssignment_0.eContents().get(0);
		private final Assignment cSpecAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSpecJMLTypeExpressionParserRuleCall_1_0 = (RuleCall)cSpecAssignment_1.eContents().get(0);
		
		//JMLTypeExpressionWithModifier:
		//	modifier+=VisiblityModifier* spec=JMLTypeExpression;
		public ParserRule getRule() { return rule; }

		//modifier+=VisiblityModifier* spec=JMLTypeExpression
		public Group getGroup() { return cGroup; }

		//modifier+=VisiblityModifier*
		public Assignment getModifierAssignment_0() { return cModifierAssignment_0; }

		//VisiblityModifier
		public RuleCall getModifierVisiblityModifierParserRuleCall_0_0() { return cModifierVisiblityModifierParserRuleCall_0_0; }

		//spec=JMLTypeExpression
		public Assignment getSpecAssignment_1() { return cSpecAssignment_1; }

		//JMLTypeExpression
		public RuleCall getSpecJMLTypeExpressionParserRuleCall_1_0() { return cSpecJMLTypeExpressionParserRuleCall_1_0; }
	}

	public class JMLTypeExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "JMLTypeExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final RuleCall cJMLInvariantExpressionParserRuleCall_0_0 = (RuleCall)cAlternatives_0.eContents().get(0);
		private final RuleCall cJMLConstraintExpressionParserRuleCall_0_1 = (RuleCall)cAlternatives_0.eContents().get(1);
		private final RuleCall cJMLAxiomExpressionParserRuleCall_0_2 = (RuleCall)cAlternatives_0.eContents().get(2);
		private final Keyword cSemicolonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//JMLTypeExpression:
		//	(JMLInvariantExpression | JMLConstraintExpression | JMLAxiomExpression) ";";
		public ParserRule getRule() { return rule; }

		//(JMLInvariantExpression | JMLConstraintExpression | JMLAxiomExpression) ";"
		public Group getGroup() { return cGroup; }

		//JMLInvariantExpression | JMLConstraintExpression | JMLAxiomExpression
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//JMLInvariantExpression
		public RuleCall getJMLInvariantExpressionParserRuleCall_0_0() { return cJMLInvariantExpressionParserRuleCall_0_0; }

		//JMLConstraintExpression
		public RuleCall getJMLConstraintExpressionParserRuleCall_0_1() { return cJMLConstraintExpressionParserRuleCall_0_1; }

		//JMLAxiomExpression
		public RuleCall getJMLAxiomExpressionParserRuleCall_0_2() { return cJMLAxiomExpressionParserRuleCall_0_2; }

		//";"
		public Keyword getSemicolonKeyword_1() { return cSemicolonKeyword_1; }
	}

	public class JMLInvariantExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "JMLInvariantExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cInvariantKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExprAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExprExpressionParserRuleCall_1_0 = (RuleCall)cExprAssignment_1.eContents().get(0);
		
		//JMLInvariantExpression:
		//	"invariant" expr=Expression;
		public ParserRule getRule() { return rule; }

		//"invariant" expr=Expression
		public Group getGroup() { return cGroup; }

		//"invariant"
		public Keyword getInvariantKeyword_0() { return cInvariantKeyword_0; }

		//expr=Expression
		public Assignment getExprAssignment_1() { return cExprAssignment_1; }

		//Expression
		public RuleCall getExprExpressionParserRuleCall_1_0() { return cExprExpressionParserRuleCall_1_0; }
	}

	public class JMLConstraintExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "JMLConstraintExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cConstraintKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExprAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExprExpressionParserRuleCall_1_0 = (RuleCall)cExprAssignment_1.eContents().get(0);
		
		//JMLConstraintExpression:
		//	"constraint" expr=Expression;
		public ParserRule getRule() { return rule; }

		//"constraint" expr=Expression
		public Group getGroup() { return cGroup; }

		//"constraint"
		public Keyword getConstraintKeyword_0() { return cConstraintKeyword_0; }

		//expr=Expression
		public Assignment getExprAssignment_1() { return cExprAssignment_1; }

		//Expression
		public RuleCall getExprExpressionParserRuleCall_1_0() { return cExprExpressionParserRuleCall_1_0; }
	}

	public class JMLAxiomExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "JMLAxiomExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAxiomKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExprAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExprExpressionParserRuleCall_1_0 = (RuleCall)cExprAssignment_1.eContents().get(0);
		
		//JMLAxiomExpression:
		//	"axiom" expr=Expression;
		public ParserRule getRule() { return rule; }

		//"axiom" expr=Expression
		public Group getGroup() { return cGroup; }

		//"axiom"
		public Keyword getAxiomKeyword_0() { return cAxiomKeyword_0; }

		//expr=Expression
		public Assignment getExprAssignment_1() { return cExprAssignment_1; }

		//Expression
		public RuleCall getExprExpressionParserRuleCall_1_0() { return cExprExpressionParserRuleCall_1_0; }
	}

	public class JMLMemberModifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "JMLMemberModifier");
		private final Assignment cModifierAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cModifierJMLSpecMemberModifierEnumRuleCall_0 = (RuleCall)cModifierAssignment.eContents().get(0);
		
		////JMLMemberModifierContainer:
		////	// the jml comments are required for regular elements, but forbidden for model elements...
		////	'/ *@'? modifiers+=JMLMemberModifier (',' + modifiers+=JMLMemberModifier)* '* /'?
		////;
		//JMLMemberModifier:
		//	modifier=JMLSpecMemberModifier;
		public ParserRule getRule() { return rule; }

		//modifier=JMLSpecMemberModifier
		public Assignment getModifierAssignment() { return cModifierAssignment; }

		//JMLSpecMemberModifier
		public RuleCall getModifierJMLSpecMemberModifierEnumRuleCall_0() { return cModifierJMLSpecMemberModifierEnumRuleCall_0; }
	}

	public class MemberDeclWithModifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MemberDeclWithModifier");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cMemberDeclWithModifierRegularParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cMemberDeclWithModifierSpecParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//MemberDeclWithModifier:
		//	MemberDeclWithModifierRegular | MemberDeclWithModifierSpec;
		public ParserRule getRule() { return rule; }

		//MemberDeclWithModifierRegular | MemberDeclWithModifierSpec
		public Alternatives getAlternatives() { return cAlternatives; }

		//MemberDeclWithModifierRegular
		public RuleCall getMemberDeclWithModifierRegularParserRuleCall_0() { return cMemberDeclWithModifierRegularParserRuleCall_0; }

		//MemberDeclWithModifierSpec
		public RuleCall getMemberDeclWithModifierSpecParserRuleCall_1() { return cMemberDeclWithModifierSpecParserRuleCall_1; }
	}

	public class MemberDeclWithModifierRegularElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MemberDeclWithModifierRegular");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cModifiersAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cModifiersModifierParserRuleCall_0_0 = (RuleCall)cModifiersAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final RuleCall cJMLMultilineSpecCommentStartParserRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Assignment cJmlModifiersAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cJmlModifiersJMLMemberModifierParserRuleCall_1_1_0 = (RuleCall)cJmlModifiersAssignment_1_1.eContents().get(0);
		private final RuleCall cJMLMultilineSpecCommentEndParserRuleCall_1_2 = (RuleCall)cGroup_1.eContents().get(2);
		private final Assignment cMemberdeclAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cMemberdeclMemberDeclParserRuleCall_2_0 = (RuleCall)cMemberdeclAssignment_2.eContents().get(0);
		
		//MemberDeclWithModifierRegular:
		//	modifiers+=Modifier* (JMLMultilineSpecCommentStart jmlModifiers+=JMLMemberModifier+ JMLMultilineSpecCommentEnd)?
		//	/ *jmlModifiers=JMLMemberModifierContainer?* / memberdecl=MemberDecl;
		public ParserRule getRule() { return rule; }

		//modifiers+=Modifier* (JMLMultilineSpecCommentStart jmlModifiers+=JMLMemberModifier+ JMLMultilineSpecCommentEnd)?
		/// *jmlModifiers=JMLMemberModifierContainer?* / memberdecl=MemberDecl
		public Group getGroup() { return cGroup; }

		//modifiers+=Modifier*
		public Assignment getModifiersAssignment_0() { return cModifiersAssignment_0; }

		//Modifier
		public RuleCall getModifiersModifierParserRuleCall_0_0() { return cModifiersModifierParserRuleCall_0_0; }

		//(JMLMultilineSpecCommentStart jmlModifiers+=JMLMemberModifier+ JMLMultilineSpecCommentEnd)?
		public Group getGroup_1() { return cGroup_1; }

		//JMLMultilineSpecCommentStart
		public RuleCall getJMLMultilineSpecCommentStartParserRuleCall_1_0() { return cJMLMultilineSpecCommentStartParserRuleCall_1_0; }

		//jmlModifiers+=JMLMemberModifier+
		public Assignment getJmlModifiersAssignment_1_1() { return cJmlModifiersAssignment_1_1; }

		//JMLMemberModifier
		public RuleCall getJmlModifiersJMLMemberModifierParserRuleCall_1_1_0() { return cJmlModifiersJMLMemberModifierParserRuleCall_1_1_0; }

		//JMLMultilineSpecCommentEnd
		public RuleCall getJMLMultilineSpecCommentEndParserRuleCall_1_2() { return cJMLMultilineSpecCommentEndParserRuleCall_1_2; }

		/// *jmlModifiers=JMLMemberModifierContainer?* / memberdecl=MemberDecl
		public Assignment getMemberdeclAssignment_2() { return cMemberdeclAssignment_2; }

		//MemberDecl
		public RuleCall getMemberdeclMemberDeclParserRuleCall_2_0() { return cMemberdeclMemberDeclParserRuleCall_2_0; }
	}

	public class MemberDeclWithModifierSpecElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MemberDeclWithModifierSpec");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cModifiersAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cModifiersModifierParserRuleCall_0_0 = (RuleCall)cModifiersAssignment_0.eContents().get(0);
		private final Assignment cJmlModifiersAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cJmlModifiersJMLMemberModifierParserRuleCall_1_0 = (RuleCall)cJmlModifiersAssignment_1.eContents().get(0);
		private final Assignment cMemberdeclAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cMemberdeclMemberDeclParserRuleCall_2_0 = (RuleCall)cMemberdeclAssignment_2.eContents().get(0);
		
		//MemberDeclWithModifierSpec:
		//	modifiers+=Modifier* jmlModifiers+=JMLMemberModifier* memberdecl=MemberDecl;
		public ParserRule getRule() { return rule; }

		//modifiers+=Modifier* jmlModifiers+=JMLMemberModifier* memberdecl=MemberDecl
		public Group getGroup() { return cGroup; }

		//modifiers+=Modifier*
		public Assignment getModifiersAssignment_0() { return cModifiersAssignment_0; }

		//Modifier
		public RuleCall getModifiersModifierParserRuleCall_0_0() { return cModifiersModifierParserRuleCall_0_0; }

		//jmlModifiers+=JMLMemberModifier*
		public Assignment getJmlModifiersAssignment_1() { return cJmlModifiersAssignment_1; }

		//JMLMemberModifier
		public RuleCall getJmlModifiersJMLMemberModifierParserRuleCall_1_0() { return cJmlModifiersJMLMemberModifierParserRuleCall_1_0; }

		//memberdecl=MemberDecl
		public Assignment getMemberdeclAssignment_2() { return cMemberdeclAssignment_2; }

		//MemberDecl
		public RuleCall getMemberdeclMemberDeclParserRuleCall_2_0() { return cMemberdeclMemberDeclParserRuleCall_2_0; }
	}

	public class MemberDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MemberDecl");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cGenericMethodOrConstructorDeclParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cMemberDeclarationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cConstructorParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cInterfaceDeclarationParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cClassDeclarationParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//MemberDecl:
		//	GenericMethodOrConstructorDecl / *| VoidMethod * / | MemberDeclaration | Constructor | InterfaceDeclaration |
		//	ClassDeclaration;
		public ParserRule getRule() { return rule; }

		//GenericMethodOrConstructorDecl / *| VoidMethod * / | MemberDeclaration | Constructor | InterfaceDeclaration |
		//ClassDeclaration
		public Alternatives getAlternatives() { return cAlternatives; }

		//GenericMethodOrConstructorDecl
		public RuleCall getGenericMethodOrConstructorDeclParserRuleCall_0() { return cGenericMethodOrConstructorDeclParserRuleCall_0; }

		//MemberDeclaration
		public RuleCall getMemberDeclarationParserRuleCall_1() { return cMemberDeclarationParserRuleCall_1; }

		//Constructor
		public RuleCall getConstructorParserRuleCall_2() { return cConstructorParserRuleCall_2; }

		//InterfaceDeclaration
		public RuleCall getInterfaceDeclarationParserRuleCall_3() { return cInterfaceDeclarationParserRuleCall_3; }

		//ClassDeclaration
		public RuleCall getClassDeclarationParserRuleCall_4() { return cClassDeclarationParserRuleCall_4; }
	}

	public class ConstructorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Constructor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIdentifierAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cIdentifierIDTerminalRuleCall_0_0 = (RuleCall)cIdentifierAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cParametersAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cParametersFormalParameterDeclParserRuleCall_2_0_0 = (RuleCall)cParametersAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cParametersAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cParametersFormalParameterDeclParserRuleCall_2_1_1_0 = (RuleCall)cParametersAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cThrowsKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cExceptionsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cExceptionsDeclaredExceptionParserRuleCall_4_1_0 = (RuleCall)cExceptionsAssignment_4_1.eContents().get(0);
		private final Group cGroup_4_2 = (Group)cGroup_4.eContents().get(2);
		private final Keyword cCommaKeyword_4_2_0 = (Keyword)cGroup_4_2.eContents().get(0);
		private final Assignment cExceptionsAssignment_4_2_1 = (Assignment)cGroup_4_2.eContents().get(1);
		private final RuleCall cExceptionsDeclaredExceptionParserRuleCall_4_2_1_0 = (RuleCall)cExceptionsAssignment_4_2_1.eContents().get(0);
		private final Alternatives cAlternatives_5 = (Alternatives)cGroup.eContents().get(5);
		private final Assignment cConstructorbodyAssignment_5_0 = (Assignment)cAlternatives_5.eContents().get(0);
		private final RuleCall cConstructorbodyConstructorBodyParserRuleCall_5_0_0 = (RuleCall)cConstructorbodyAssignment_5_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_5_1 = (Keyword)cAlternatives_5.eContents().get(1);
		
		//Constructor:
		//	identifier=ID "(" (parameters+=FormalParameterDecl ("," parameters+=FormalParameterDecl)*)? ")" ("throws"
		//	exceptions+=DeclaredException ("," exceptions+=DeclaredException)*)? (constructorbody=ConstructorBody | ";");
		public ParserRule getRule() { return rule; }

		//identifier=ID "(" (parameters+=FormalParameterDecl ("," parameters+=FormalParameterDecl)*)? ")" ("throws"
		//exceptions+=DeclaredException ("," exceptions+=DeclaredException)*)? (constructorbody=ConstructorBody | ";")
		public Group getGroup() { return cGroup; }

		//identifier=ID
		public Assignment getIdentifierAssignment_0() { return cIdentifierAssignment_0; }

		//ID
		public RuleCall getIdentifierIDTerminalRuleCall_0_0() { return cIdentifierIDTerminalRuleCall_0_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//(parameters+=FormalParameterDecl ("," parameters+=FormalParameterDecl)*)?
		public Group getGroup_2() { return cGroup_2; }

		//parameters+=FormalParameterDecl
		public Assignment getParametersAssignment_2_0() { return cParametersAssignment_2_0; }

		//FormalParameterDecl
		public RuleCall getParametersFormalParameterDeclParserRuleCall_2_0_0() { return cParametersFormalParameterDeclParserRuleCall_2_0_0; }

		//("," parameters+=FormalParameterDecl)*
		public Group getGroup_2_1() { return cGroup_2_1; }

		//","
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }

		//parameters+=FormalParameterDecl
		public Assignment getParametersAssignment_2_1_1() { return cParametersAssignment_2_1_1; }

		//FormalParameterDecl
		public RuleCall getParametersFormalParameterDeclParserRuleCall_2_1_1_0() { return cParametersFormalParameterDeclParserRuleCall_2_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }

		//("throws" exceptions+=DeclaredException ("," exceptions+=DeclaredException)*)?
		public Group getGroup_4() { return cGroup_4; }

		//"throws"
		public Keyword getThrowsKeyword_4_0() { return cThrowsKeyword_4_0; }

		//exceptions+=DeclaredException
		public Assignment getExceptionsAssignment_4_1() { return cExceptionsAssignment_4_1; }

		//DeclaredException
		public RuleCall getExceptionsDeclaredExceptionParserRuleCall_4_1_0() { return cExceptionsDeclaredExceptionParserRuleCall_4_1_0; }

		//("," exceptions+=DeclaredException)*
		public Group getGroup_4_2() { return cGroup_4_2; }

		//","
		public Keyword getCommaKeyword_4_2_0() { return cCommaKeyword_4_2_0; }

		//exceptions+=DeclaredException
		public Assignment getExceptionsAssignment_4_2_1() { return cExceptionsAssignment_4_2_1; }

		//DeclaredException
		public RuleCall getExceptionsDeclaredExceptionParserRuleCall_4_2_1_0() { return cExceptionsDeclaredExceptionParserRuleCall_4_2_1_0; }

		//constructorbody=ConstructorBody | ";"
		public Alternatives getAlternatives_5() { return cAlternatives_5; }

		//constructorbody=ConstructorBody
		public Assignment getConstructorbodyAssignment_5_0() { return cConstructorbodyAssignment_5_0; }

		//ConstructorBody
		public RuleCall getConstructorbodyConstructorBodyParserRuleCall_5_0_0() { return cConstructorbodyConstructorBodyParserRuleCall_5_0_0; }

		//";"
		public Keyword getSemicolonKeyword_5_1() { return cSemicolonKeyword_5_1; }
	}

	public class MemberDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MemberDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_0_0 = (Assignment)cAlternatives_0.eContents().get(0);
		private final RuleCall cTypeTypeParserRuleCall_0_0_0 = (RuleCall)cTypeAssignment_0_0.eContents().get(0);
		private final Keyword cVoidKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cMethodAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cMethodMethodDeclarationParserRuleCall_1_0_0 = (RuleCall)cMethodAssignment_1_0.eContents().get(0);
		private final Assignment cFieldAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cFieldFieldDeclarationParserRuleCall_1_1_0 = (RuleCall)cFieldAssignment_1_1.eContents().get(0);
		
		//MemberDeclaration:
		//	(type=Type // this enables void fields but I don't care :D
		//	| "void") (method=MethodDeclaration | field=FieldDeclaration);
		public ParserRule getRule() { return rule; }

		//(type=Type // this enables void fields but I don't care :D
		//| "void") (method=MethodDeclaration | field=FieldDeclaration)
		public Group getGroup() { return cGroup; }

		//type=Type // this enables void fields but I don't care :D
		//| "void"
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//type=Type
		public Assignment getTypeAssignment_0_0() { return cTypeAssignment_0_0; }

		//Type
		public RuleCall getTypeTypeParserRuleCall_0_0_0() { return cTypeTypeParserRuleCall_0_0_0; }

		//"void"
		public Keyword getVoidKeyword_0_1() { return cVoidKeyword_0_1; }

		//method=MethodDeclaration | field=FieldDeclaration
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//method=MethodDeclaration
		public Assignment getMethodAssignment_1_0() { return cMethodAssignment_1_0; }

		//MethodDeclaration
		public RuleCall getMethodMethodDeclarationParserRuleCall_1_0_0() { return cMethodMethodDeclarationParserRuleCall_1_0_0; }

		//field=FieldDeclaration
		public Assignment getFieldAssignment_1_1() { return cFieldAssignment_1_1; }

		//FieldDeclaration
		public RuleCall getFieldFieldDeclarationParserRuleCall_1_1_0() { return cFieldFieldDeclarationParserRuleCall_1_1_0; }
	}

	public class GenericMethodOrConstructorDeclOldElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "GenericMethodOrConstructorDeclOld");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final RuleCall cTypeParametersParserRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final Alternatives cAlternatives_0_1 = (Alternatives)cGroup_0.eContents().get(1);
		private final Assignment cTypeAssignment_0_1_0 = (Assignment)cAlternatives_0_1.eContents().get(0);
		private final RuleCall cTypeTypeParserRuleCall_0_1_0_0 = (RuleCall)cTypeAssignment_0_1_0.eContents().get(0);
		private final Keyword cVoidKeyword_0_1_1 = (Keyword)cAlternatives_0_1.eContents().get(1);
		private final Assignment cIdentifierAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cIdentifierIDTerminalRuleCall_0_2_0 = (RuleCall)cIdentifierAssignment_0_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_3 = (Keyword)cGroup_0.eContents().get(3);
		private final Group cGroup_0_4 = (Group)cGroup_0.eContents().get(4);
		private final Assignment cParametersAssignment_0_4_0 = (Assignment)cGroup_0_4.eContents().get(0);
		private final RuleCall cParametersFormalParameterDeclParserRuleCall_0_4_0_0 = (RuleCall)cParametersAssignment_0_4_0.eContents().get(0);
		private final Group cGroup_0_4_1 = (Group)cGroup_0_4.eContents().get(1);
		private final Keyword cCommaKeyword_0_4_1_0 = (Keyword)cGroup_0_4_1.eContents().get(0);
		private final Assignment cParametersAssignment_0_4_1_1 = (Assignment)cGroup_0_4_1.eContents().get(1);
		private final RuleCall cParametersFormalParameterDeclParserRuleCall_0_4_1_1_0 = (RuleCall)cParametersAssignment_0_4_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_0_5 = (Keyword)cGroup_0.eContents().get(5);
		private final Group cGroup_0_6 = (Group)cGroup_0.eContents().get(6);
		private final Keyword cThrowsKeyword_0_6_0 = (Keyword)cGroup_0_6.eContents().get(0);
		private final Assignment cExceptionsAssignment_0_6_1 = (Assignment)cGroup_0_6.eContents().get(1);
		private final RuleCall cExceptionsDeclaredExceptionParserRuleCall_0_6_1_0 = (RuleCall)cExceptionsAssignment_0_6_1.eContents().get(0);
		private final Group cGroup_0_6_2 = (Group)cGroup_0_6.eContents().get(2);
		private final Keyword cCommaKeyword_0_6_2_0 = (Keyword)cGroup_0_6_2.eContents().get(0);
		private final Assignment cExceptionsAssignment_0_6_2_1 = (Assignment)cGroup_0_6_2.eContents().get(1);
		private final RuleCall cExceptionsDeclaredExceptionParserRuleCall_0_6_2_1_0 = (RuleCall)cExceptionsAssignment_0_6_2_1.eContents().get(0);
		private final Alternatives cAlternatives_0_7 = (Alternatives)cGroup_0.eContents().get(7);
		private final Assignment cMethodbodyAssignment_0_7_0 = (Assignment)cAlternatives_0_7.eContents().get(0);
		private final RuleCall cMethodbodyMethodBodyParserRuleCall_0_7_0_0 = (RuleCall)cMethodbodyAssignment_0_7_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_0_7_1 = (Keyword)cAlternatives_0_7.eContents().get(1);
		private final Assignment cConstructorAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cConstructorConstructorParserRuleCall_1_0 = (RuleCall)cConstructorAssignment_1.eContents().get(0);
		
		//GenericMethodOrConstructorDeclOld:
		//	TypeParameters (type=Type | "void") identifier=ID "(" (parameters+=FormalParameterDecl (","
		//	parameters+=FormalParameterDecl)*)? ")" / *brackets+=Brackets** / ("throws" exceptions+=DeclaredException (","
		//	exceptions+=DeclaredException)*)? (methodbody=MethodBody | ";") | constructor=Constructor;
		public ParserRule getRule() { return rule; }

		//TypeParameters (type=Type | "void") identifier=ID "(" (parameters+=FormalParameterDecl (","
		//parameters+=FormalParameterDecl)*)? ")" / *brackets+=Brackets** / ("throws" exceptions+=DeclaredException (","
		//exceptions+=DeclaredException)*)? (methodbody=MethodBody | ";") | constructor=Constructor
		public Alternatives getAlternatives() { return cAlternatives; }

		//TypeParameters (type=Type | "void") identifier=ID "(" (parameters+=FormalParameterDecl (","
		//parameters+=FormalParameterDecl)*)? ")" / *brackets+=Brackets** / ("throws" exceptions+=DeclaredException (","
		//exceptions+=DeclaredException)*)? (methodbody=MethodBody | ";")
		public Group getGroup_0() { return cGroup_0; }

		//TypeParameters
		public RuleCall getTypeParametersParserRuleCall_0_0() { return cTypeParametersParserRuleCall_0_0; }

		//type=Type | "void"
		public Alternatives getAlternatives_0_1() { return cAlternatives_0_1; }

		//type=Type
		public Assignment getTypeAssignment_0_1_0() { return cTypeAssignment_0_1_0; }

		//Type
		public RuleCall getTypeTypeParserRuleCall_0_1_0_0() { return cTypeTypeParserRuleCall_0_1_0_0; }

		//"void"
		public Keyword getVoidKeyword_0_1_1() { return cVoidKeyword_0_1_1; }

		//identifier=ID
		public Assignment getIdentifierAssignment_0_2() { return cIdentifierAssignment_0_2; }

		//ID
		public RuleCall getIdentifierIDTerminalRuleCall_0_2_0() { return cIdentifierIDTerminalRuleCall_0_2_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_0_3() { return cLeftParenthesisKeyword_0_3; }

		//(parameters+=FormalParameterDecl ("," parameters+=FormalParameterDecl)*)?
		public Group getGroup_0_4() { return cGroup_0_4; }

		//parameters+=FormalParameterDecl
		public Assignment getParametersAssignment_0_4_0() { return cParametersAssignment_0_4_0; }

		//FormalParameterDecl
		public RuleCall getParametersFormalParameterDeclParserRuleCall_0_4_0_0() { return cParametersFormalParameterDeclParserRuleCall_0_4_0_0; }

		//("," parameters+=FormalParameterDecl)*
		public Group getGroup_0_4_1() { return cGroup_0_4_1; }

		//","
		public Keyword getCommaKeyword_0_4_1_0() { return cCommaKeyword_0_4_1_0; }

		//parameters+=FormalParameterDecl
		public Assignment getParametersAssignment_0_4_1_1() { return cParametersAssignment_0_4_1_1; }

		//FormalParameterDecl
		public RuleCall getParametersFormalParameterDeclParserRuleCall_0_4_1_1_0() { return cParametersFormalParameterDeclParserRuleCall_0_4_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_0_5() { return cRightParenthesisKeyword_0_5; }

		//("throws" exceptions+=DeclaredException ("," exceptions+=DeclaredException)*)?
		public Group getGroup_0_6() { return cGroup_0_6; }

		//"throws"
		public Keyword getThrowsKeyword_0_6_0() { return cThrowsKeyword_0_6_0; }

		//exceptions+=DeclaredException
		public Assignment getExceptionsAssignment_0_6_1() { return cExceptionsAssignment_0_6_1; }

		//DeclaredException
		public RuleCall getExceptionsDeclaredExceptionParserRuleCall_0_6_1_0() { return cExceptionsDeclaredExceptionParserRuleCall_0_6_1_0; }

		//("," exceptions+=DeclaredException)*
		public Group getGroup_0_6_2() { return cGroup_0_6_2; }

		//","
		public Keyword getCommaKeyword_0_6_2_0() { return cCommaKeyword_0_6_2_0; }

		//exceptions+=DeclaredException
		public Assignment getExceptionsAssignment_0_6_2_1() { return cExceptionsAssignment_0_6_2_1; }

		//DeclaredException
		public RuleCall getExceptionsDeclaredExceptionParserRuleCall_0_6_2_1_0() { return cExceptionsDeclaredExceptionParserRuleCall_0_6_2_1_0; }

		//methodbody=MethodBody | ";"
		public Alternatives getAlternatives_0_7() { return cAlternatives_0_7; }

		//methodbody=MethodBody
		public Assignment getMethodbodyAssignment_0_7_0() { return cMethodbodyAssignment_0_7_0; }

		//MethodBody
		public RuleCall getMethodbodyMethodBodyParserRuleCall_0_7_0_0() { return cMethodbodyMethodBodyParserRuleCall_0_7_0_0; }

		//";"
		public Keyword getSemicolonKeyword_0_7_1() { return cSemicolonKeyword_0_7_1; }

		//constructor=Constructor
		public Assignment getConstructorAssignment_1() { return cConstructorAssignment_1; }

		//Constructor
		public RuleCall getConstructorConstructorParserRuleCall_1_0() { return cConstructorConstructorParserRuleCall_1_0; }
	}

	public class GenericMethodOrConstructorDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "GenericMethodOrConstructorDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeParametersAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeParametersTypeParametersParserRuleCall_0_0 = (RuleCall)cTypeParametersAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cAlternatives_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cAlternatives_1_0.eContents().get(0);
		private final Assignment cTypeAssignment_1_0_0_0 = (Assignment)cGroup_1_0_0.eContents().get(0);
		private final RuleCall cTypeTypeParserRuleCall_1_0_0_0_0 = (RuleCall)cTypeAssignment_1_0_0_0.eContents().get(0);
		private final Assignment cMethodAssignment_1_0_0_1 = (Assignment)cGroup_1_0_0.eContents().get(1);
		private final RuleCall cMethodMethodDeclarationParserRuleCall_1_0_0_1_0 = (RuleCall)cMethodAssignment_1_0_0_1.eContents().get(0);
		private final Group cGroup_1_0_1 = (Group)cAlternatives_1_0.eContents().get(1);
		private final Keyword cVoidKeyword_1_0_1_0 = (Keyword)cGroup_1_0_1.eContents().get(0);
		private final Assignment cMethodAssignment_1_0_1_1 = (Assignment)cGroup_1_0_1.eContents().get(1);
		private final RuleCall cMethodMethodDeclarationParserRuleCall_1_0_1_1_0 = (RuleCall)cMethodAssignment_1_0_1_1.eContents().get(0);
		private final Assignment cConstructorAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cConstructorConstructorParserRuleCall_1_1_0 = (RuleCall)cConstructorAssignment_1_1.eContents().get(0);
		
		//GenericMethodOrConstructorDecl:
		//	typeParameters=TypeParameters ((type=Type method=MethodDeclaration | "void" method=MethodDeclaration) |
		//	constructor=Constructor);
		public ParserRule getRule() { return rule; }

		//typeParameters=TypeParameters ((type=Type method=MethodDeclaration | "void" method=MethodDeclaration) |
		//constructor=Constructor)
		public Group getGroup() { return cGroup; }

		//typeParameters=TypeParameters
		public Assignment getTypeParametersAssignment_0() { return cTypeParametersAssignment_0; }

		//TypeParameters
		public RuleCall getTypeParametersTypeParametersParserRuleCall_0_0() { return cTypeParametersTypeParametersParserRuleCall_0_0; }

		//(type=Type method=MethodDeclaration | "void" method=MethodDeclaration) | constructor=Constructor
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//type=Type method=MethodDeclaration | "void" method=MethodDeclaration
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }

		//type=Type method=MethodDeclaration
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//type=Type
		public Assignment getTypeAssignment_1_0_0_0() { return cTypeAssignment_1_0_0_0; }

		//Type
		public RuleCall getTypeTypeParserRuleCall_1_0_0_0_0() { return cTypeTypeParserRuleCall_1_0_0_0_0; }

		//method=MethodDeclaration
		public Assignment getMethodAssignment_1_0_0_1() { return cMethodAssignment_1_0_0_1; }

		//MethodDeclaration
		public RuleCall getMethodMethodDeclarationParserRuleCall_1_0_0_1_0() { return cMethodMethodDeclarationParserRuleCall_1_0_0_1_0; }

		//"void" method=MethodDeclaration
		public Group getGroup_1_0_1() { return cGroup_1_0_1; }

		//"void"
		public Keyword getVoidKeyword_1_0_1_0() { return cVoidKeyword_1_0_1_0; }

		//method=MethodDeclaration
		public Assignment getMethodAssignment_1_0_1_1() { return cMethodAssignment_1_0_1_1; }

		//MethodDeclaration
		public RuleCall getMethodMethodDeclarationParserRuleCall_1_0_1_1_0() { return cMethodMethodDeclarationParserRuleCall_1_0_1_1_0; }

		//constructor=Constructor
		public Assignment getConstructorAssignment_1_1() { return cConstructorAssignment_1_1; }

		//Constructor
		public RuleCall getConstructorConstructorParserRuleCall_1_1_0() { return cConstructorConstructorParserRuleCall_1_1_0; }
	}

	public class MethodDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MethodDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIdentifierAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cIdentifierIDTerminalRuleCall_0_0 = (RuleCall)cIdentifierAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cParametersAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cParametersFormalParameterDeclParserRuleCall_2_0_0 = (RuleCall)cParametersAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cParametersAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cParametersFormalParameterDeclParserRuleCall_2_1_1_0 = (RuleCall)cParametersAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cThrowsKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cExceptionsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cExceptionsDeclaredExceptionParserRuleCall_4_1_0 = (RuleCall)cExceptionsAssignment_4_1.eContents().get(0);
		private final Group cGroup_4_2 = (Group)cGroup_4.eContents().get(2);
		private final Keyword cCommaKeyword_4_2_0 = (Keyword)cGroup_4_2.eContents().get(0);
		private final Assignment cExceptionsAssignment_4_2_1 = (Assignment)cGroup_4_2.eContents().get(1);
		private final RuleCall cExceptionsDeclaredExceptionParserRuleCall_4_2_1_0 = (RuleCall)cExceptionsAssignment_4_2_1.eContents().get(0);
		private final Alternatives cAlternatives_5 = (Alternatives)cGroup.eContents().get(5);
		private final Assignment cMethodbodyAssignment_5_0 = (Assignment)cAlternatives_5.eContents().get(0);
		private final RuleCall cMethodbodyMethodBodyParserRuleCall_5_0_0 = (RuleCall)cMethodbodyAssignment_5_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_5_1 = (Keyword)cAlternatives_5.eContents().get(1);
		
		//MethodDeclaration:
		//	identifier=ID "(" (parameters+=FormalParameterDecl ("," parameters+=FormalParameterDecl)*)? ")"
		//	/ *brackets+=Brackets** / ("throws" exceptions+=DeclaredException ("," exceptions+=DeclaredException)*)?
		//	(methodbody=MethodBody | ";");
		public ParserRule getRule() { return rule; }

		//identifier=ID "(" (parameters+=FormalParameterDecl ("," parameters+=FormalParameterDecl)*)? ")" / *brackets+=Brackets** /
		//("throws" exceptions+=DeclaredException ("," exceptions+=DeclaredException)*)? (methodbody=MethodBody | ";")
		public Group getGroup() { return cGroup; }

		//identifier=ID
		public Assignment getIdentifierAssignment_0() { return cIdentifierAssignment_0; }

		//ID
		public RuleCall getIdentifierIDTerminalRuleCall_0_0() { return cIdentifierIDTerminalRuleCall_0_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//(parameters+=FormalParameterDecl ("," parameters+=FormalParameterDecl)*)?
		public Group getGroup_2() { return cGroup_2; }

		//parameters+=FormalParameterDecl
		public Assignment getParametersAssignment_2_0() { return cParametersAssignment_2_0; }

		//FormalParameterDecl
		public RuleCall getParametersFormalParameterDeclParserRuleCall_2_0_0() { return cParametersFormalParameterDeclParserRuleCall_2_0_0; }

		//("," parameters+=FormalParameterDecl)*
		public Group getGroup_2_1() { return cGroup_2_1; }

		//","
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }

		//parameters+=FormalParameterDecl
		public Assignment getParametersAssignment_2_1_1() { return cParametersAssignment_2_1_1; }

		//FormalParameterDecl
		public RuleCall getParametersFormalParameterDeclParserRuleCall_2_1_1_0() { return cParametersFormalParameterDeclParserRuleCall_2_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }

		//("throws" exceptions+=DeclaredException ("," exceptions+=DeclaredException)*)?
		public Group getGroup_4() { return cGroup_4; }

		//"throws"
		public Keyword getThrowsKeyword_4_0() { return cThrowsKeyword_4_0; }

		//exceptions+=DeclaredException
		public Assignment getExceptionsAssignment_4_1() { return cExceptionsAssignment_4_1; }

		//DeclaredException
		public RuleCall getExceptionsDeclaredExceptionParserRuleCall_4_1_0() { return cExceptionsDeclaredExceptionParserRuleCall_4_1_0; }

		//("," exceptions+=DeclaredException)*
		public Group getGroup_4_2() { return cGroup_4_2; }

		//","
		public Keyword getCommaKeyword_4_2_0() { return cCommaKeyword_4_2_0; }

		//exceptions+=DeclaredException
		public Assignment getExceptionsAssignment_4_2_1() { return cExceptionsAssignment_4_2_1; }

		//DeclaredException
		public RuleCall getExceptionsDeclaredExceptionParserRuleCall_4_2_1_0() { return cExceptionsDeclaredExceptionParserRuleCall_4_2_1_0; }

		//methodbody=MethodBody | ";"
		public Alternatives getAlternatives_5() { return cAlternatives_5; }

		//methodbody=MethodBody
		public Assignment getMethodbodyAssignment_5_0() { return cMethodbodyAssignment_5_0; }

		//MethodBody
		public RuleCall getMethodbodyMethodBodyParserRuleCall_5_0_0() { return cMethodbodyMethodBodyParserRuleCall_5_0_0; }

		//";"
		public Keyword getSemicolonKeyword_5_1() { return cSemicolonKeyword_5_1; }
	}

	public class FieldDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FieldDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVariabledeclaratorAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cVariabledeclaratorVariableDeclaratorParserRuleCall_0_0 = (RuleCall)cVariabledeclaratorAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cVariabledeclaratorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cVariabledeclaratorVariableDeclaratorParserRuleCall_1_1_0 = (RuleCall)cVariabledeclaratorAssignment_1_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//FieldDeclaration:
		//	variabledeclarator+=VariableDeclarator ("," variabledeclarator+=VariableDeclarator)* ";";
		public ParserRule getRule() { return rule; }

		//variabledeclarator+=VariableDeclarator ("," variabledeclarator+=VariableDeclarator)* ";"
		public Group getGroup() { return cGroup; }

		//variabledeclarator+=VariableDeclarator
		public Assignment getVariabledeclaratorAssignment_0() { return cVariabledeclaratorAssignment_0; }

		//VariableDeclarator
		public RuleCall getVariabledeclaratorVariableDeclaratorParserRuleCall_0_0() { return cVariabledeclaratorVariableDeclaratorParserRuleCall_0_0; }

		//("," variabledeclarator+=VariableDeclarator)*
		public Group getGroup_1() { return cGroup_1; }

		//","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }

		//variabledeclarator+=VariableDeclarator
		public Assignment getVariabledeclaratorAssignment_1_1() { return cVariabledeclaratorAssignment_1_1; }

		//VariableDeclarator
		public RuleCall getVariabledeclaratorVariableDeclaratorParserRuleCall_1_1_0() { return cVariabledeclaratorVariableDeclaratorParserRuleCall_1_1_0; }

		//";"
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}

	public class DeclaredExceptionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DeclaredException");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameQualifiedNameParserRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//DeclaredException:
		//	name=QualifiedName;
		public ParserRule getRule() { return rule; }

		//name=QualifiedName
		public Assignment getNameAssignment() { return cNameAssignment; }

		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_0() { return cNameQualifiedNameParserRuleCall_0; }
	}

	public class VariableDeclaratorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VariableDeclarator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cVariableDeclaratorAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cIdentifierAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIdentifierIDTerminalRuleCall_1_0 = (RuleCall)cIdentifierAssignment_1.eContents().get(0);
		private final Assignment cBracketsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cBracketsBracketsParserRuleCall_2_0 = (RuleCall)cBracketsAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cEqualsSignKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cExpressionAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_3_1_0 = (RuleCall)cExpressionAssignment_3_1.eContents().get(0);
		
		//VariableDeclarator:
		//	{VariableDeclarator} identifier=ID brackets+=Brackets* ("=" expression=Expression)?;
		public ParserRule getRule() { return rule; }

		//{VariableDeclarator} identifier=ID brackets+=Brackets* ("=" expression=Expression)?
		public Group getGroup() { return cGroup; }

		//{VariableDeclarator}
		public Action getVariableDeclaratorAction_0() { return cVariableDeclaratorAction_0; }

		//identifier=ID
		public Assignment getIdentifierAssignment_1() { return cIdentifierAssignment_1; }

		//ID
		public RuleCall getIdentifierIDTerminalRuleCall_1_0() { return cIdentifierIDTerminalRuleCall_1_0; }

		//brackets+=Brackets*
		public Assignment getBracketsAssignment_2() { return cBracketsAssignment_2; }

		//Brackets
		public RuleCall getBracketsBracketsParserRuleCall_2_0() { return cBracketsBracketsParserRuleCall_2_0; }

		//("=" expression=Expression)?
		public Group getGroup_3() { return cGroup_3; }

		//"="
		public Keyword getEqualsSignKeyword_3_0() { return cEqualsSignKeyword_3_0; }

		//expression=Expression
		public Assignment getExpressionAssignment_3_1() { return cExpressionAssignment_3_1; }

		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_3_1_0() { return cExpressionExpressionParserRuleCall_3_1_0; }
	}

	public class TypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Type");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cClassOrInterfaceTypeWithBracketsParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cPrimitiveTypeWithBracketsParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Type:
		//	ClassOrInterfaceTypeWithBrackets | PrimitiveTypeWithBrackets;
		public ParserRule getRule() { return rule; }

		//ClassOrInterfaceTypeWithBrackets | PrimitiveTypeWithBrackets
		public Alternatives getAlternatives() { return cAlternatives; }

		//ClassOrInterfaceTypeWithBrackets
		public RuleCall getClassOrInterfaceTypeWithBracketsParserRuleCall_0() { return cClassOrInterfaceTypeWithBracketsParserRuleCall_0; }

		//PrimitiveTypeWithBrackets
		public RuleCall getPrimitiveTypeWithBracketsParserRuleCall_1() { return cPrimitiveTypeWithBracketsParserRuleCall_1; }
	}

	public class ClassOrInterfaceTypeWithBracketsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ClassOrInterfaceTypeWithBrackets");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeClassifierTypeParserRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cTypeAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cTypeClassifierTypeParserRuleCall_1_1_0 = (RuleCall)cTypeAssignment_1_1.eContents().get(0);
		private final Assignment cBracketsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cBracketsBracketsParserRuleCall_2_0 = (RuleCall)cBracketsAssignment_2.eContents().get(0);
		
		//ClassOrInterfaceTypeWithBrackets:
		//	type+=ClassifierType ("." type+=ClassifierType)* brackets+=Brackets*;
		public ParserRule getRule() { return rule; }

		//type+=ClassifierType ("." type+=ClassifierType)* brackets+=Brackets*
		public Group getGroup() { return cGroup; }

		//type+=ClassifierType
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }

		//ClassifierType
		public RuleCall getTypeClassifierTypeParserRuleCall_0_0() { return cTypeClassifierTypeParserRuleCall_0_0; }

		//("." type+=ClassifierType)*
		public Group getGroup_1() { return cGroup_1; }

		//"."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//type+=ClassifierType
		public Assignment getTypeAssignment_1_1() { return cTypeAssignment_1_1; }

		//ClassifierType
		public RuleCall getTypeClassifierTypeParserRuleCall_1_1_0() { return cTypeClassifierTypeParserRuleCall_1_1_0; }

		//brackets+=Brackets*
		public Assignment getBracketsAssignment_2() { return cBracketsAssignment_2; }

		//Brackets
		public RuleCall getBracketsBracketsParserRuleCall_2_0() { return cBracketsBracketsParserRuleCall_2_0; }
	}

	public class PrimitiveTypeWithBracketsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PrimitiveTypeWithBrackets");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPrimitivetypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cPrimitivetypePrimitiveTypeEnumRuleCall_0_0 = (RuleCall)cPrimitivetypeAssignment_0.eContents().get(0);
		private final Assignment cBracketsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cBracketsBracketsParserRuleCall_1_0 = (RuleCall)cBracketsAssignment_1.eContents().get(0);
		
		//PrimitiveTypeWithBrackets:
		//	primitivetype=PrimitiveType brackets+=Brackets*;
		public ParserRule getRule() { return rule; }

		//primitivetype=PrimitiveType brackets+=Brackets*
		public Group getGroup() { return cGroup; }

		//primitivetype=PrimitiveType
		public Assignment getPrimitivetypeAssignment_0() { return cPrimitivetypeAssignment_0; }

		//PrimitiveType
		public RuleCall getPrimitivetypePrimitiveTypeEnumRuleCall_0_0() { return cPrimitivetypePrimitiveTypeEnumRuleCall_0_0; }

		//brackets+=Brackets*
		public Assignment getBracketsAssignment_1() { return cBracketsAssignment_1; }

		//Brackets
		public RuleCall getBracketsBracketsParserRuleCall_1_0() { return cBracketsBracketsParserRuleCall_1_0; }
	}

	public class BracketsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Brackets");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBracketsAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cRightSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Brackets:
		//	{Brackets} "[" "]";
		public ParserRule getRule() { return rule; }

		//{Brackets} "[" "]"
		public Group getGroup() { return cGroup; }

		//{Brackets}
		public Action getBracketsAction_0() { return cBracketsAction_0; }

		//"["
		public Keyword getLeftSquareBracketKeyword_1() { return cLeftSquareBracketKeyword_1; }

		//"]"
		public Keyword getRightSquareBracketKeyword_2() { return cRightSquareBracketKeyword_2; }
	}

	public class ClassOrInterfaceTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ClassOrInterfaceType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cClassOrInterfaceTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeClassifierTypeParserRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cFullStopKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cTypeAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cTypeClassifierTypeParserRuleCall_2_1_0 = (RuleCall)cTypeAssignment_2_1.eContents().get(0);
		
		//ClassOrInterfaceType:
		//	{ClassOrInterfaceType} type+=ClassifierType ("." type+=ClassifierType)*;
		public ParserRule getRule() { return rule; }

		//{ClassOrInterfaceType} type+=ClassifierType ("." type+=ClassifierType)*
		public Group getGroup() { return cGroup; }

		//{ClassOrInterfaceType}
		public Action getClassOrInterfaceTypeAction_0() { return cClassOrInterfaceTypeAction_0; }

		//type+=ClassifierType
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }

		//ClassifierType
		public RuleCall getTypeClassifierTypeParserRuleCall_1_0() { return cTypeClassifierTypeParserRuleCall_1_0; }

		//("." type+=ClassifierType)*
		public Group getGroup_2() { return cGroup_2; }

		//"."
		public Keyword getFullStopKeyword_2_0() { return cFullStopKeyword_2_0; }

		//type+=ClassifierType
		public Assignment getTypeAssignment_2_1() { return cTypeAssignment_2_1; }

		//ClassifierType
		public RuleCall getTypeClassifierTypeParserRuleCall_2_1_0() { return cTypeClassifierTypeParserRuleCall_2_1_0; }
	}

	public class ClassifierTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ClassifierType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIdentifierAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cIdentifierIDTerminalRuleCall_0_0 = (RuleCall)cIdentifierAssignment_0.eContents().get(0);
		private final Assignment cTypeargumentsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeargumentsTypeArgumentsParserRuleCall_1_0 = (RuleCall)cTypeargumentsAssignment_1.eContents().get(0);
		
		//ClassifierType:
		//	identifier=ID typearguments=TypeArguments?;
		public ParserRule getRule() { return rule; }

		//identifier=ID typearguments=TypeArguments?
		public Group getGroup() { return cGroup; }

		//identifier=ID
		public Assignment getIdentifierAssignment_0() { return cIdentifierAssignment_0; }

		//ID
		public RuleCall getIdentifierIDTerminalRuleCall_0_0() { return cIdentifierIDTerminalRuleCall_0_0; }

		//typearguments=TypeArguments?
		public Assignment getTypeargumentsAssignment_1() { return cTypeargumentsAssignment_1; }

		//TypeArguments
		public RuleCall getTypeargumentsTypeArgumentsParserRuleCall_1_0() { return cTypeargumentsTypeArgumentsParserRuleCall_1_0; }
	}

	public class TypeArgumentsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TypeArguments");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLessThanSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypeargumentAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeargumentTypeArgumentParserRuleCall_1_0 = (RuleCall)cTypeargumentAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cTypeargumentAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cTypeargumentTypeArgumentParserRuleCall_2_1_0 = (RuleCall)cTypeargumentAssignment_2_1.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//TypeArguments:
		//	"<" typeargument+=TypeArgument ("," typeargument+=TypeArgument)* ">";
		public ParserRule getRule() { return rule; }

		//"<" typeargument+=TypeArgument ("," typeargument+=TypeArgument)* ">"
		public Group getGroup() { return cGroup; }

		//"<"
		public Keyword getLessThanSignKeyword_0() { return cLessThanSignKeyword_0; }

		//typeargument+=TypeArgument
		public Assignment getTypeargumentAssignment_1() { return cTypeargumentAssignment_1; }

		//TypeArgument
		public RuleCall getTypeargumentTypeArgumentParserRuleCall_1_0() { return cTypeargumentTypeArgumentParserRuleCall_1_0; }

		//("," typeargument+=TypeArgument)*
		public Group getGroup_2() { return cGroup_2; }

		//","
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }

		//typeargument+=TypeArgument
		public Assignment getTypeargumentAssignment_2_1() { return cTypeargumentAssignment_2_1; }

		//TypeArgument
		public RuleCall getTypeargumentTypeArgumentParserRuleCall_2_1_0() { return cTypeargumentTypeArgumentParserRuleCall_2_1_0; }

		//">"
		public Keyword getGreaterThanSignKeyword_3() { return cGreaterThanSignKeyword_3; }
	}

	public class TypeArgumentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TypeArgument");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTypeArgumentAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cTypeTypeParserRuleCall_1_0_0 = (RuleCall)cTypeAssignment_1_0.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Assignment cWildcardAssignment_1_1_0 = (Assignment)cGroup_1_1.eContents().get(0);
		private final Keyword cWildcardQuestionMarkKeyword_1_1_0_0 = (Keyword)cWildcardAssignment_1_1_0.eContents().get(0);
		private final Group cGroup_1_1_1 = (Group)cGroup_1_1.eContents().get(1);
		private final Alternatives cAlternatives_1_1_1_0 = (Alternatives)cGroup_1_1_1.eContents().get(0);
		private final Assignment cExtendsAssignment_1_1_1_0_0 = (Assignment)cAlternatives_1_1_1_0.eContents().get(0);
		private final Keyword cExtendsExtendsKeyword_1_1_1_0_0_0 = (Keyword)cExtendsAssignment_1_1_1_0_0.eContents().get(0);
		private final Assignment cSuperAssignment_1_1_1_0_1 = (Assignment)cAlternatives_1_1_1_0.eContents().get(1);
		private final Keyword cSuperSuperKeyword_1_1_1_0_1_0 = (Keyword)cSuperAssignment_1_1_1_0_1.eContents().get(0);
		private final Assignment cTypeAssignment_1_1_1_1 = (Assignment)cGroup_1_1_1.eContents().get(1);
		private final RuleCall cTypeTypeParserRuleCall_1_1_1_1_0 = (RuleCall)cTypeAssignment_1_1_1_1.eContents().get(0);
		
		//TypeArgument:
		//	{TypeArgument} (type=Type | wildcard?="?" ((extends?="extends" | super?="super") type=Type)?);
		public ParserRule getRule() { return rule; }

		//{TypeArgument} (type=Type | wildcard?="?" ((extends?="extends" | super?="super") type=Type)?)
		public Group getGroup() { return cGroup; }

		//{TypeArgument}
		public Action getTypeArgumentAction_0() { return cTypeArgumentAction_0; }

		//type=Type | wildcard?="?" ((extends?="extends" | super?="super") type=Type)?
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//type=Type
		public Assignment getTypeAssignment_1_0() { return cTypeAssignment_1_0; }

		//Type
		public RuleCall getTypeTypeParserRuleCall_1_0_0() { return cTypeTypeParserRuleCall_1_0_0; }

		//wildcard?="?" ((extends?="extends" | super?="super") type=Type)?
		public Group getGroup_1_1() { return cGroup_1_1; }

		//wildcard?="?"
		public Assignment getWildcardAssignment_1_1_0() { return cWildcardAssignment_1_1_0; }

		//"?"
		public Keyword getWildcardQuestionMarkKeyword_1_1_0_0() { return cWildcardQuestionMarkKeyword_1_1_0_0; }

		//((extends?="extends" | super?="super") type=Type)?
		public Group getGroup_1_1_1() { return cGroup_1_1_1; }

		//extends?="extends" | super?="super"
		public Alternatives getAlternatives_1_1_1_0() { return cAlternatives_1_1_1_0; }

		//extends?="extends"
		public Assignment getExtendsAssignment_1_1_1_0_0() { return cExtendsAssignment_1_1_1_0_0; }

		//"extends"
		public Keyword getExtendsExtendsKeyword_1_1_1_0_0_0() { return cExtendsExtendsKeyword_1_1_1_0_0_0; }

		//super?="super"
		public Assignment getSuperAssignment_1_1_1_0_1() { return cSuperAssignment_1_1_1_0_1; }

		//"super"
		public Keyword getSuperSuperKeyword_1_1_1_0_1_0() { return cSuperSuperKeyword_1_1_1_0_1_0; }

		//type=Type
		public Assignment getTypeAssignment_1_1_1_1() { return cTypeAssignment_1_1_1_1; }

		//Type
		public RuleCall getTypeTypeParserRuleCall_1_1_1_1_0() { return cTypeTypeParserRuleCall_1_1_1_1_0; }
	}

	public class FormalParameterDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FormalParameterDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cModifiersAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cModifiersModifierParserRuleCall_0_0 = (RuleCall)cModifiersAssignment_0.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeTypeParserRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		private final Assignment cVarargsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cVarargsFullStopFullStopFullStopKeyword_2_0 = (Keyword)cVarargsAssignment_2.eContents().get(0);
		private final Assignment cIdentifierAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cIdentifierIDTerminalRuleCall_3_0 = (RuleCall)cIdentifierAssignment_3.eContents().get(0);
		
		//FormalParameterDecl: // this is just to ease the access to parameters, invalid java syntax can be produced...
		//// correct handling is given in FormalParameterDecls
		//	modifiers+=Modifier* type=Type varargs?="..."? identifier= / *brackets+=Brackets** / ID;
		public ParserRule getRule() { return rule; }

		//// this is just to ease the access to parameters, invalid java syntax can be produced...
		//// correct handling is given in FormalParameterDecls
		//modifiers+=Modifier* type=Type varargs?="..."? identifier= / *brackets+=Brackets** / ID
		public Group getGroup() { return cGroup; }

		//// this is just to ease the access to parameters, invalid java syntax can be produced...
		//// correct handling is given in FormalParameterDecls
		//modifiers+=Modifier*
		public Assignment getModifiersAssignment_0() { return cModifiersAssignment_0; }

		//Modifier
		public RuleCall getModifiersModifierParserRuleCall_0_0() { return cModifiersModifierParserRuleCall_0_0; }

		//type=Type
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }

		//Type
		public RuleCall getTypeTypeParserRuleCall_1_0() { return cTypeTypeParserRuleCall_1_0; }

		//varargs?="..."?
		public Assignment getVarargsAssignment_2() { return cVarargsAssignment_2; }

		//"..."
		public Keyword getVarargsFullStopFullStopFullStopKeyword_2_0() { return cVarargsFullStopFullStopFullStopKeyword_2_0; }

		//identifier= / *brackets+=Brackets** / ID
		public Assignment getIdentifierAssignment_3() { return cIdentifierAssignment_3; }

		/// *brackets+=Brackets** / ID
		public RuleCall getIdentifierIDTerminalRuleCall_3_0() { return cIdentifierIDTerminalRuleCall_3_0; }
	}

	public class MethodBodyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MethodBody");
		private final RuleCall cBlockParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//MethodBody:
		//	Block;
		public ParserRule getRule() { return rule; }

		//Block
		public RuleCall getBlockParserRuleCall() { return cBlockParserRuleCall; }
	}

	public class ConstructorBodyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ConstructorBody");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cConstructorBodyAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cBlockstatementAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cBlockstatementBlockStatementParserRuleCall_2_0 = (RuleCall)cBlockstatementAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ConstructorBody:
		//	{ConstructorBody} / *=> explicitconstructorinvocation=ExplicitConstructorInvocation? => * / "{"
		//	blockstatement+=BlockStatement* "}";
		public ParserRule getRule() { return rule; }

		//{ConstructorBody} / *=> explicitconstructorinvocation=ExplicitConstructorInvocation? => * / "{"
		//blockstatement+=BlockStatement* "}"
		public Group getGroup() { return cGroup; }

		//{ConstructorBody}
		public Action getConstructorBodyAction_0() { return cConstructorBodyAction_0; }

		/// *=> explicitconstructorinvocation=ExplicitConstructorInvocation? => * / "{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//blockstatement+=BlockStatement*
		public Assignment getBlockstatementAssignment_2() { return cBlockstatementAssignment_2; }

		//BlockStatement
		public RuleCall getBlockstatementBlockStatementParserRuleCall_2_0() { return cBlockstatementBlockStatementParserRuleCall_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}

	public class ModifiableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Modifiable");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cClassifierDeclarationWithModifierParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cMemberDeclWithModifierParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cAnnotationTypeElementDeclarationParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cFormalParameterDeclParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		////ExplicitConstructorInvocation:   
		////	(NonWildcardTypeArguments? ('this' | 'super') arguments=Arguments ';'
		////    | primary=Primary '.' NonWildcardTypeArguments=NonWildcardTypeArguments? 'super' arguments=Arguments ';')
		////;
		//Modifiable:
		//	ClassifierDeclarationWithModifier | MemberDeclWithModifier | AnnotationTypeElementDeclaration | FormalParameterDecl;
		public ParserRule getRule() { return rule; }

		//ClassifierDeclarationWithModifier | MemberDeclWithModifier | AnnotationTypeElementDeclaration | FormalParameterDecl
		public Alternatives getAlternatives() { return cAlternatives; }

		//ClassifierDeclarationWithModifier
		public RuleCall getClassifierDeclarationWithModifierParserRuleCall_0() { return cClassifierDeclarationWithModifierParserRuleCall_0; }

		//MemberDeclWithModifier
		public RuleCall getMemberDeclWithModifierParserRuleCall_1() { return cMemberDeclWithModifierParserRuleCall_1; }

		//AnnotationTypeElementDeclaration
		public RuleCall getAnnotationTypeElementDeclarationParserRuleCall_2() { return cAnnotationTypeElementDeclarationParserRuleCall_2; }

		//FormalParameterDecl
		public RuleCall getFormalParameterDeclParserRuleCall_3() { return cFormalParameterDeclParserRuleCall_3; }
	}

	public class TypedElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Typed");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAnnotationMethodOrConstantRestParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cMemberDeclarationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cFormalParameterDeclParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Typed:
		//	AnnotationMethodOrConstantRest | MemberDeclaration | FormalParameterDecl;
		public ParserRule getRule() { return rule; }

		//AnnotationMethodOrConstantRest | MemberDeclaration | FormalParameterDecl
		public Alternatives getAlternatives() { return cAlternatives; }

		//AnnotationMethodOrConstantRest
		public RuleCall getAnnotationMethodOrConstantRestParserRuleCall_0() { return cAnnotationMethodOrConstantRestParserRuleCall_0; }

		//MemberDeclaration
		public RuleCall getMemberDeclarationParserRuleCall_1() { return cMemberDeclarationParserRuleCall_1; }

		//FormalParameterDecl
		public RuleCall getFormalParameterDeclParserRuleCall_2() { return cFormalParameterDeclParserRuleCall_2; }
	}

	public class AnnotationsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Annotations");
		private final Assignment cAnnotationAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cAnnotationAnnotationParserRuleCall_0 = (RuleCall)cAnnotationAssignment.eContents().get(0);
		
		//// ================================================================
		//// Annotations
		//// ================================================================
		//Annotations:
		//	annotation+=Annotation+;
		public ParserRule getRule() { return rule; }

		//annotation+=Annotation+
		public Assignment getAnnotationAssignment() { return cAnnotationAssignment; }

		//Annotation
		public RuleCall getAnnotationAnnotationParserRuleCall_0() { return cAnnotationAnnotationParserRuleCall_0; }
	}

	public class AnnotationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Annotation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAnnotationAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cCommercialAtKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cAnnotationnameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAnnotationnameAnnotationNameParserRuleCall_2_0 = (RuleCall)cAnnotationnameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLeftParenthesisKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Alternatives cAlternatives_3_1 = (Alternatives)cGroup_3.eContents().get(1);
		private final Assignment cElementvaluepairsAssignment_3_1_0 = (Assignment)cAlternatives_3_1.eContents().get(0);
		private final RuleCall cElementvaluepairsElementValuePairsParserRuleCall_3_1_0_0 = (RuleCall)cElementvaluepairsAssignment_3_1_0.eContents().get(0);
		private final Assignment cElementvalueAssignment_3_1_1 = (Assignment)cAlternatives_3_1.eContents().get(1);
		private final RuleCall cElementvalueElementValueParserRuleCall_3_1_1_0 = (RuleCall)cElementvalueAssignment_3_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		
		//Annotation:
		//	{Annotation} "@" annotationname=AnnotationName ("(" (elementvaluepairs=ElementValuePairs |
		//	elementvalue=ElementValue)? ")")?;
		public ParserRule getRule() { return rule; }

		//{Annotation} "@" annotationname=AnnotationName ("(" (elementvaluepairs=ElementValuePairs | elementvalue=ElementValue)?
		//")")?
		public Group getGroup() { return cGroup; }

		//{Annotation}
		public Action getAnnotationAction_0() { return cAnnotationAction_0; }

		//"@"
		public Keyword getCommercialAtKeyword_1() { return cCommercialAtKeyword_1; }

		//annotationname=AnnotationName
		public Assignment getAnnotationnameAssignment_2() { return cAnnotationnameAssignment_2; }

		//AnnotationName
		public RuleCall getAnnotationnameAnnotationNameParserRuleCall_2_0() { return cAnnotationnameAnnotationNameParserRuleCall_2_0; }

		//(=> "(" (elementvaluepairs=ElementValuePairs | elementvalue=ElementValue)? ")")?
		public Group getGroup_3() { return cGroup_3; }

		//=> "("
		public Keyword getLeftParenthesisKeyword_3_0() { return cLeftParenthesisKeyword_3_0; }

		//(elementvaluepairs=ElementValuePairs | elementvalue=ElementValue)?
		public Alternatives getAlternatives_3_1() { return cAlternatives_3_1; }

		//elementvaluepairs=ElementValuePairs
		public Assignment getElementvaluepairsAssignment_3_1_0() { return cElementvaluepairsAssignment_3_1_0; }

		//ElementValuePairs
		public RuleCall getElementvaluepairsElementValuePairsParserRuleCall_3_1_0_0() { return cElementvaluepairsElementValuePairsParserRuleCall_3_1_0_0; }

		//elementvalue=ElementValue
		public Assignment getElementvalueAssignment_3_1_1() { return cElementvalueAssignment_3_1_1; }

		//ElementValue
		public RuleCall getElementvalueElementValueParserRuleCall_3_1_1_0() { return cElementvalueElementValueParserRuleCall_3_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3_2() { return cRightParenthesisKeyword_3_2; }
	}

	public class AnnotationNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AnnotationName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//AnnotationName:
		//	ID ("." ID)*;
		public ParserRule getRule() { return rule; }

		//ID ("." ID)*
		public Group getGroup() { return cGroup; }

		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }

		//(=> "." ID)*
		public Group getGroup_1() { return cGroup_1; }

		//=> "."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}

	public class ElementValuePairsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ElementValuePairs");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cElementvaluepairAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cElementvaluepairElementValuePairParserRuleCall_0_0 = (RuleCall)cElementvaluepairAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cElementvaluepairAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cElementvaluepairElementValuePairParserRuleCall_1_1_0 = (RuleCall)cElementvaluepairAssignment_1_1.eContents().get(0);
		
		//ElementValuePairs:
		//	elementvaluepair+=ElementValuePair ("," elementvaluepair+=ElementValuePair)*;
		public ParserRule getRule() { return rule; }

		//elementvaluepair+=ElementValuePair ("," elementvaluepair+=ElementValuePair)*
		public Group getGroup() { return cGroup; }

		//elementvaluepair+=ElementValuePair
		public Assignment getElementvaluepairAssignment_0() { return cElementvaluepairAssignment_0; }

		//ElementValuePair
		public RuleCall getElementvaluepairElementValuePairParserRuleCall_0_0() { return cElementvaluepairElementValuePairParserRuleCall_0_0; }

		//(=> "," elementvaluepair+=ElementValuePair)*
		public Group getGroup_1() { return cGroup_1; }

		//=> ","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }

		//elementvaluepair+=ElementValuePair
		public Assignment getElementvaluepairAssignment_1_1() { return cElementvaluepairAssignment_1_1; }

		//ElementValuePair
		public RuleCall getElementvaluepairElementValuePairParserRuleCall_1_1_0() { return cElementvaluepairElementValuePairParserRuleCall_1_1_0; }
	}

	public class ElementValuePairElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ElementValuePair");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIdentifierAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cIdentifierIDTerminalRuleCall_0_0 = (RuleCall)cIdentifierAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cElementvalueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cElementvalueElementValueParserRuleCall_2_0 = (RuleCall)cElementvalueAssignment_2.eContents().get(0);
		
		//ElementValuePair:
		//	identifier=ID "=" elementvalue=ElementValue;
		public ParserRule getRule() { return rule; }

		//identifier=ID "=" elementvalue=ElementValue
		public Group getGroup() { return cGroup; }

		//identifier=ID
		public Assignment getIdentifierAssignment_0() { return cIdentifierAssignment_0; }

		//ID
		public RuleCall getIdentifierIDTerminalRuleCall_0_0() { return cIdentifierIDTerminalRuleCall_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//elementvalue=ElementValue
		public Assignment getElementvalueAssignment_2() { return cElementvalueAssignment_2; }

		//ElementValue
		public RuleCall getElementvalueElementValueParserRuleCall_2_0() { return cElementvalueElementValueParserRuleCall_2_0; }
	}

	public class ElementValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ElementValue");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAnnotationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cElementValueArrayInitializerParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//ElementValue: / *ConditionalExpression |* / Annotation | ElementValueArrayInitializer;
		public ParserRule getRule() { return rule; }

		/// *ConditionalExpression |* / Annotation | ElementValueArrayInitializer
		public Alternatives getAlternatives() { return cAlternatives; }

		/// *ConditionalExpression |* / Annotation
		public RuleCall getAnnotationParserRuleCall_0() { return cAnnotationParserRuleCall_0; }

		//ElementValueArrayInitializer
		public RuleCall getElementValueArrayInitializerParserRuleCall_1() { return cElementValueArrayInitializerParserRuleCall_1; }
	}

	public class ElementValueArrayInitializerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ElementValueArrayInitializer");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cElementValueArrayInitializerAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cElementvalueAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cElementvalueElementValueParserRuleCall_2_0_0 = (RuleCall)cElementvalueAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cElementvalueAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cElementvalueElementValueParserRuleCall_2_1_1_0 = (RuleCall)cElementvalueAssignment_2_1_1.eContents().get(0);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//ElementValueArrayInitializer:
		//	{ElementValueArrayInitializer} "{" (elementvalue+=ElementValue ("," elementvalue+=ElementValue)*)? => ","? "}";
		public ParserRule getRule() { return rule; }

		//{ElementValueArrayInitializer} "{" (elementvalue+=ElementValue ("," elementvalue+=ElementValue)*)? => ","? "}"
		public Group getGroup() { return cGroup; }

		//{ElementValueArrayInitializer}
		public Action getElementValueArrayInitializerAction_0() { return cElementValueArrayInitializerAction_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//(elementvalue+=ElementValue ("," elementvalue+=ElementValue)*)?
		public Group getGroup_2() { return cGroup_2; }

		//elementvalue+=ElementValue
		public Assignment getElementvalueAssignment_2_0() { return cElementvalueAssignment_2_0; }

		//ElementValue
		public RuleCall getElementvalueElementValueParserRuleCall_2_0_0() { return cElementvalueElementValueParserRuleCall_2_0_0; }

		//(=> "," elementvalue+=ElementValue)*
		public Group getGroup_2_1() { return cGroup_2_1; }

		//=> ","
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }

		//elementvalue+=ElementValue
		public Assignment getElementvalueAssignment_2_1_1() { return cElementvalueAssignment_2_1_1; }

		//ElementValue
		public RuleCall getElementvalueElementValueParserRuleCall_2_1_1_0() { return cElementvalueElementValueParserRuleCall_2_1_1_0; }

		//=> ","?
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class AnnotationTypeDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AnnotationTypeDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCommercialAtKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cInterfaceKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cIdentifierAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cIdentifierIDTerminalRuleCall_2_0 = (RuleCall)cIdentifierAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cAnnotationtypeelementdeclarationAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cAnnotationtypeelementdeclarationAnnotationTypeElementDeclarationParserRuleCall_4_0 = (RuleCall)cAnnotationtypeelementdeclarationAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//AnnotationTypeDeclaration:
		//	"@" "interface" identifier=ID "{" => annotationtypeelementdeclaration+=AnnotationTypeElementDeclaration* "}";
		public ParserRule getRule() { return rule; }

		//"@" "interface" identifier=ID "{" => annotationtypeelementdeclaration+=AnnotationTypeElementDeclaration* "}"
		public Group getGroup() { return cGroup; }

		//"@"
		public Keyword getCommercialAtKeyword_0() { return cCommercialAtKeyword_0; }

		//"interface"
		public Keyword getInterfaceKeyword_1() { return cInterfaceKeyword_1; }

		//identifier=ID
		public Assignment getIdentifierAssignment_2() { return cIdentifierAssignment_2; }

		//ID
		public RuleCall getIdentifierIDTerminalRuleCall_2_0() { return cIdentifierIDTerminalRuleCall_2_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//=> annotationtypeelementdeclaration+=AnnotationTypeElementDeclaration*
		public Assignment getAnnotationtypeelementdeclarationAssignment_4() { return cAnnotationtypeelementdeclarationAssignment_4; }

		//AnnotationTypeElementDeclaration
		public RuleCall getAnnotationtypeelementdeclarationAnnotationTypeElementDeclarationParserRuleCall_4_0() { return cAnnotationtypeelementdeclarationAnnotationTypeElementDeclarationParserRuleCall_4_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class AnnotationTypeElementDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AnnotationTypeElementDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cModifiersAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cModifiersModifierParserRuleCall_0_0 = (RuleCall)cModifiersAssignment_0.eContents().get(0);
		private final Assignment cAnnotationtypeelementrestAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAnnotationtypeelementrestAnnotationTypeElementRestParserRuleCall_1_0 = (RuleCall)cAnnotationtypeelementrestAssignment_1.eContents().get(0);
		
		//AnnotationTypeElementDeclaration:
		//	modifiers+=Modifier* annotationtypeelementrest=AnnotationTypeElementRest;
		public ParserRule getRule() { return rule; }

		//modifiers+=Modifier* annotationtypeelementrest=AnnotationTypeElementRest
		public Group getGroup() { return cGroup; }

		//modifiers+=Modifier*
		public Assignment getModifiersAssignment_0() { return cModifiersAssignment_0; }

		//Modifier
		public RuleCall getModifiersModifierParserRuleCall_0_0() { return cModifiersModifierParserRuleCall_0_0; }

		//annotationtypeelementrest=AnnotationTypeElementRest
		public Assignment getAnnotationtypeelementrestAssignment_1() { return cAnnotationtypeelementrestAssignment_1; }

		//AnnotationTypeElementRest
		public RuleCall getAnnotationtypeelementrestAnnotationTypeElementRestParserRuleCall_1_0() { return cAnnotationtypeelementrestAnnotationTypeElementRestParserRuleCall_1_0; }
	}

	public class AnnotationTypeElementRestElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AnnotationTypeElementRest");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final RuleCall cAnnotationMethodOrConstantRestParserRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final RuleCall cNormalClassDeclarationParserRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final RuleCall cNormalInterfaceDeclarationParserRuleCall_2_0 = (RuleCall)cGroup_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final RuleCall cEnumDeclarationParserRuleCall_3_0 = (RuleCall)cGroup_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final RuleCall cAnnotationTypeDeclarationParserRuleCall_4_0 = (RuleCall)cGroup_4.eContents().get(0);
		private final Keyword cSemicolonKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		
		//AnnotationTypeElementRest:
		//	AnnotationMethodOrConstantRest ";" | NormalClassDeclaration ";"? | NormalInterfaceDeclaration ";"? | EnumDeclaration
		//	";"? | AnnotationTypeDeclaration ";"?;
		public ParserRule getRule() { return rule; }

		//AnnotationMethodOrConstantRest ";" | NormalClassDeclaration ";"? | NormalInterfaceDeclaration ";"? | EnumDeclaration
		//";"? | AnnotationTypeDeclaration ";"?
		public Alternatives getAlternatives() { return cAlternatives; }

		//AnnotationMethodOrConstantRest ";"
		public Group getGroup_0() { return cGroup_0; }

		//AnnotationMethodOrConstantRest
		public RuleCall getAnnotationMethodOrConstantRestParserRuleCall_0_0() { return cAnnotationMethodOrConstantRestParserRuleCall_0_0; }

		//";"
		public Keyword getSemicolonKeyword_0_1() { return cSemicolonKeyword_0_1; }

		//NormalClassDeclaration ";"?
		public Group getGroup_1() { return cGroup_1; }

		//NormalClassDeclaration
		public RuleCall getNormalClassDeclarationParserRuleCall_1_0() { return cNormalClassDeclarationParserRuleCall_1_0; }

		//";"?
		public Keyword getSemicolonKeyword_1_1() { return cSemicolonKeyword_1_1; }

		//NormalInterfaceDeclaration ";"?
		public Group getGroup_2() { return cGroup_2; }

		//NormalInterfaceDeclaration
		public RuleCall getNormalInterfaceDeclarationParserRuleCall_2_0() { return cNormalInterfaceDeclarationParserRuleCall_2_0; }

		//";"?
		public Keyword getSemicolonKeyword_2_1() { return cSemicolonKeyword_2_1; }

		//EnumDeclaration ";"?
		public Group getGroup_3() { return cGroup_3; }

		//EnumDeclaration
		public RuleCall getEnumDeclarationParserRuleCall_3_0() { return cEnumDeclarationParserRuleCall_3_0; }

		//";"?
		public Keyword getSemicolonKeyword_3_1() { return cSemicolonKeyword_3_1; }

		//AnnotationTypeDeclaration ";"?
		public Group getGroup_4() { return cGroup_4; }

		//AnnotationTypeDeclaration
		public RuleCall getAnnotationTypeDeclarationParserRuleCall_4_0() { return cAnnotationTypeDeclarationParserRuleCall_4_0; }

		//";"?
		public Keyword getSemicolonKeyword_4_1() { return cSemicolonKeyword_4_1; }
	}

	public class AnnotationMethodOrConstantRestElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AnnotationMethodOrConstantRest");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeTypeParserRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cMethodAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cMethodAnnotationMethodRestParserRuleCall_1_0_0 = (RuleCall)cMethodAssignment_1_0.eContents().get(0);
		private final Assignment cConstantAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cConstantAnnotationConstantRestParserRuleCall_1_1_0 = (RuleCall)cConstantAssignment_1_1.eContents().get(0);
		
		//AnnotationMethodOrConstantRest:
		//	type=Type (method=AnnotationMethodRest | constant=AnnotationConstantRest);
		public ParserRule getRule() { return rule; }

		//type=Type (method=AnnotationMethodRest | constant=AnnotationConstantRest)
		public Group getGroup() { return cGroup; }

		//type=Type
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }

		//Type
		public RuleCall getTypeTypeParserRuleCall_0_0() { return cTypeTypeParserRuleCall_0_0; }

		//method=AnnotationMethodRest | constant=AnnotationConstantRest
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//method=AnnotationMethodRest
		public Assignment getMethodAssignment_1_0() { return cMethodAssignment_1_0; }

		//AnnotationMethodRest
		public RuleCall getMethodAnnotationMethodRestParserRuleCall_1_0_0() { return cMethodAnnotationMethodRestParserRuleCall_1_0_0; }

		//constant=AnnotationConstantRest
		public Assignment getConstantAssignment_1_1() { return cConstantAssignment_1_1; }

		//AnnotationConstantRest
		public RuleCall getConstantAnnotationConstantRestParserRuleCall_1_1_0() { return cConstantAnnotationConstantRestParserRuleCall_1_1_0; }
	}

	public class AnnotationMethodRestElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AnnotationMethodRest");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAnnotationMethodRestAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cIdentifierAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cIdentifierIDTerminalRuleCall_1_0_0 = (RuleCall)cIdentifierAssignment_1_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cDefaultvalueAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cDefaultvalueDefaultValueParserRuleCall_1_3_0 = (RuleCall)cDefaultvalueAssignment_1_3.eContents().get(0);
		
		//AnnotationMethodRest:
		//	{AnnotationMethodRest} (identifier=ID "(" ")" => defaultvalue=DefaultValue?);
		public ParserRule getRule() { return rule; }

		//{AnnotationMethodRest} (identifier=ID "(" ")" => defaultvalue=DefaultValue?)
		public Group getGroup() { return cGroup; }

		//{AnnotationMethodRest}
		public Action getAnnotationMethodRestAction_0() { return cAnnotationMethodRestAction_0; }

		//identifier=ID "(" ")" => defaultvalue=DefaultValue?
		public Group getGroup_1() { return cGroup_1; }

		//identifier=ID
		public Assignment getIdentifierAssignment_1_0() { return cIdentifierAssignment_1_0; }

		//ID
		public RuleCall getIdentifierIDTerminalRuleCall_1_0_0() { return cIdentifierIDTerminalRuleCall_1_0_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_1() { return cLeftParenthesisKeyword_1_1; }

		//")"
		public Keyword getRightParenthesisKeyword_1_2() { return cRightParenthesisKeyword_1_2; }

		//=> defaultvalue=DefaultValue?
		public Assignment getDefaultvalueAssignment_1_3() { return cDefaultvalueAssignment_1_3; }

		//DefaultValue
		public RuleCall getDefaultvalueDefaultValueParserRuleCall_1_3_0() { return cDefaultvalueDefaultValueParserRuleCall_1_3_0; }
	}

	public class AnnotationConstantRestElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AnnotationConstantRest");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVariabledeclaratorAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cVariabledeclaratorVariableDeclaratorParserRuleCall_0_0 = (RuleCall)cVariabledeclaratorAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cVariabledeclaratorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cVariabledeclaratorVariableDeclaratorParserRuleCall_1_1_0 = (RuleCall)cVariabledeclaratorAssignment_1_1.eContents().get(0);
		
		//AnnotationConstantRest:
		//	variabledeclarator+=VariableDeclarator ("," variabledeclarator+=VariableDeclarator)*;
		public ParserRule getRule() { return rule; }

		//variabledeclarator+=VariableDeclarator ("," variabledeclarator+=VariableDeclarator)*
		public Group getGroup() { return cGroup; }

		//variabledeclarator+=VariableDeclarator
		public Assignment getVariabledeclaratorAssignment_0() { return cVariabledeclaratorAssignment_0; }

		//VariableDeclarator
		public RuleCall getVariabledeclaratorVariableDeclaratorParserRuleCall_0_0() { return cVariabledeclaratorVariableDeclaratorParserRuleCall_0_0; }

		//("," variabledeclarator+=VariableDeclarator)*
		public Group getGroup_1() { return cGroup_1; }

		//","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }

		//variabledeclarator+=VariableDeclarator
		public Assignment getVariabledeclaratorAssignment_1_1() { return cVariabledeclaratorAssignment_1_1; }

		//VariableDeclarator
		public RuleCall getVariabledeclaratorVariableDeclaratorParserRuleCall_1_1_0() { return cVariabledeclaratorVariableDeclaratorParserRuleCall_1_1_0; }
	}

	public class DefaultValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DefaultValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDefaultKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cElementvalueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cElementvalueElementValueParserRuleCall_1_0 = (RuleCall)cElementvalueAssignment_1.eContents().get(0);
		
		//DefaultValue:
		//	"default" elementvalue=ElementValue;
		public ParserRule getRule() { return rule; }

		//"default" elementvalue=ElementValue
		public Group getGroup() { return cGroup; }

		//"default"
		public Keyword getDefaultKeyword_0() { return cDefaultKeyword_0; }

		//elementvalue=ElementValue
		public Assignment getElementvalueAssignment_1() { return cElementvalueAssignment_1; }

		//ElementValue
		public RuleCall getElementvalueElementValueParserRuleCall_1_0() { return cElementvalueElementValueParserRuleCall_1_0; }
	}

	public class BlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Block");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBlockAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cBlockstatementAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cBlockstatementBlockStatementParserRuleCall_2_0 = (RuleCall)cBlockstatementAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//// ================================================================
		//// Blocks
		//// ================================================================
		//Block:
		//	{Block} "{" blockstatement+=BlockStatement* "}";
		public ParserRule getRule() { return rule; }

		//{Block} "{" blockstatement+=BlockStatement* "}"
		public Group getGroup() { return cGroup; }

		//{Block}
		public Action getBlockAction_0() { return cBlockAction_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//blockstatement+=BlockStatement*
		public Assignment getBlockstatementAssignment_2() { return cBlockstatementAssignment_2; }

		//BlockStatement
		public RuleCall getBlockstatementBlockStatementParserRuleCall_2_0() { return cBlockstatementBlockStatementParserRuleCall_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}

	public class BlockStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BlockStatement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cClassifierDeclarationWithModifierParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final RuleCall cExpressionParserRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		
		//BlockStatement:
		//	ClassifierDeclarationWithModifier | Expression ";";
		public ParserRule getRule() { return rule; }

		//ClassifierDeclarationWithModifier | Expression ";"
		public Alternatives getAlternatives() { return cAlternatives; }

		//ClassifierDeclarationWithModifier
		public RuleCall getClassifierDeclarationWithModifierParserRuleCall_0() { return cClassifierDeclarationWithModifierParserRuleCall_0; }

		//Expression ";"
		public Group getGroup_1() { return cGroup_1; }

		//Expression
		public RuleCall getExpressionParserRuleCall_1_0() { return cExpressionParserRuleCall_1_0; }

		//";"
		public Keyword getSemicolonKeyword_1_1() { return cSemicolonKeyword_1_1; }
	}

	public class IdentifierHavingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IdentifierHaving");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cMethodDeclarationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cVariableDeclaratorParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cEnumDeclarationParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//// ================================================================
		//// Dummy elements
		////
		//// These rules only have an influence on the generated meta-model
		//// ================================================================
		//IdentifierHaving:
		//	MethodDeclaration | VariableDeclarator | EnumDeclaration;
		public ParserRule getRule() { return rule; }

		//MethodDeclaration | VariableDeclarator | EnumDeclaration
		public Alternatives getAlternatives() { return cAlternatives; }

		//MethodDeclaration
		public RuleCall getMethodDeclarationParserRuleCall_0() { return cMethodDeclarationParserRuleCall_0; }

		//VariableDeclarator
		public RuleCall getVariableDeclaratorParserRuleCall_1() { return cVariableDeclaratorParserRuleCall_1; }

		//EnumDeclaration
		public RuleCall getEnumDeclarationParserRuleCall_2() { return cEnumDeclarationParserRuleCall_2; }
	}

	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Expression");
		private final RuleCall cAssignmentParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//// ================================================================
		//// Expressions
		////
		//// The following expressions are heavily based on the XBase grammar
		//// ================================================================
		//Expression:
		//	Assignment;
		public ParserRule getRule() { return rule; }

		//Assignment
		public RuleCall getAssignmentParserRuleCall() { return cAssignmentParserRuleCall; }
	}

	public class AssignmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Assignment");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cAssignmentAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cGroup_0.eContents().get(1);
		private final Assignment cTypeForVariableDeclarationAssignment_0_1_0 = (Assignment)cGroup_0_1.eContents().get(0);
		private final RuleCall cTypeForVariableDeclarationValidIDParserRuleCall_0_1_0_0 = (RuleCall)cTypeForVariableDeclarationAssignment_0_1_0.eContents().get(0);
		private final Group cGroup_0_1_1 = (Group)cGroup_0_1.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0_1_1_0 = (Keyword)cGroup_0_1_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_0_1_1_1 = (Keyword)cGroup_0_1_1.eContents().get(1);
		private final Assignment cFeatureAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cFeatureFeatureCallIDParserRuleCall_0_2_0 = (RuleCall)cFeatureAssignment_0_2.eContents().get(0);
		private final RuleCall cOpSingleAssignParserRuleCall_0_3 = (RuleCall)cGroup_0.eContents().get(3);
		private final Assignment cValueAssignment_0_4 = (Assignment)cGroup_0.eContents().get(4);
		private final RuleCall cValueAssignmentParserRuleCall_0_4_0 = (RuleCall)cValueAssignment_0_4.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final RuleCall cOrExpressionParserRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Group cGroup_1_1_0 = (Group)cGroup_1_1.eContents().get(0);
		private final Group cGroup_1_1_0_0 = (Group)cGroup_1_1_0.eContents().get(0);
		private final Action cBinaryOperationLeftOperandAction_1_1_0_0_0 = (Action)cGroup_1_1_0_0.eContents().get(0);
		private final Assignment cFeatureAssignment_1_1_0_0_1 = (Assignment)cGroup_1_1_0_0.eContents().get(1);
		private final RuleCall cFeatureOpMultiAssignParserRuleCall_1_1_0_0_1_0 = (RuleCall)cFeatureAssignment_1_1_0_0_1.eContents().get(0);
		private final Assignment cRightOperandAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cRightOperandAssignmentParserRuleCall_1_1_1_0 = (RuleCall)cRightOperandAssignment_1_1_1.eContents().get(0);
		
		//Assignment returns Expression: // quick and dirty support variable declarations in old java style
		//// makes grammar ambiguous
		//	{Assignment} (typeForVariableDeclaration=ValidID ("[" "]")*)? feature=FeatureCallID OpSingleAssign value=Assignment |
		//	OrExpression (=> ({BinaryOperation.leftOperand=current} feature=OpMultiAssign) rightOperand=Assignment)?;
		public ParserRule getRule() { return rule; }

		//// quick and dirty support variable declarations in old java style
		//// makes grammar ambiguous
		//{Assignment} (typeForVariableDeclaration=ValidID ("[" "]")*)? feature=FeatureCallID OpSingleAssign value=Assignment |
		//OrExpression (=> ({BinaryOperation.leftOperand=current} feature=OpMultiAssign) rightOperand=Assignment)?
		public Alternatives getAlternatives() { return cAlternatives; }

		//// quick and dirty support variable declarations in old java style
		//// makes grammar ambiguous
		//{Assignment} (typeForVariableDeclaration=ValidID ("[" "]")*)? feature=FeatureCallID OpSingleAssign value=Assignment
		public Group getGroup_0() { return cGroup_0; }

		//// quick and dirty support variable declarations in old java style
		//// makes grammar ambiguous
		//{Assignment}
		public Action getAssignmentAction_0_0() { return cAssignmentAction_0_0; }

		//(typeForVariableDeclaration=ValidID ("[" "]")*)?
		public Group getGroup_0_1() { return cGroup_0_1; }

		//typeForVariableDeclaration=ValidID
		public Assignment getTypeForVariableDeclarationAssignment_0_1_0() { return cTypeForVariableDeclarationAssignment_0_1_0; }

		//ValidID
		public RuleCall getTypeForVariableDeclarationValidIDParserRuleCall_0_1_0_0() { return cTypeForVariableDeclarationValidIDParserRuleCall_0_1_0_0; }

		//("[" "]")*
		public Group getGroup_0_1_1() { return cGroup_0_1_1; }

		//"["
		public Keyword getLeftSquareBracketKeyword_0_1_1_0() { return cLeftSquareBracketKeyword_0_1_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_0_1_1_1() { return cRightSquareBracketKeyword_0_1_1_1; }

		//feature=FeatureCallID
		public Assignment getFeatureAssignment_0_2() { return cFeatureAssignment_0_2; }

		//FeatureCallID
		public RuleCall getFeatureFeatureCallIDParserRuleCall_0_2_0() { return cFeatureFeatureCallIDParserRuleCall_0_2_0; }

		//OpSingleAssign
		public RuleCall getOpSingleAssignParserRuleCall_0_3() { return cOpSingleAssignParserRuleCall_0_3; }

		//value=Assignment
		public Assignment getValueAssignment_0_4() { return cValueAssignment_0_4; }

		//Assignment
		public RuleCall getValueAssignmentParserRuleCall_0_4_0() { return cValueAssignmentParserRuleCall_0_4_0; }

		//OrExpression (=> ({BinaryOperation.leftOperand=current} feature=OpMultiAssign) rightOperand=Assignment)?
		public Group getGroup_1() { return cGroup_1; }

		//OrExpression
		public RuleCall getOrExpressionParserRuleCall_1_0() { return cOrExpressionParserRuleCall_1_0; }

		//(=> ({BinaryOperation.leftOperand=current} feature=OpMultiAssign) rightOperand=Assignment)?
		public Group getGroup_1_1() { return cGroup_1_1; }

		//=> ({BinaryOperation.leftOperand=current} feature=OpMultiAssign)
		public Group getGroup_1_1_0() { return cGroup_1_1_0; }

		//{BinaryOperation.leftOperand=current} feature=OpMultiAssign
		public Group getGroup_1_1_0_0() { return cGroup_1_1_0_0; }

		//{BinaryOperation.leftOperand=current}
		public Action getBinaryOperationLeftOperandAction_1_1_0_0_0() { return cBinaryOperationLeftOperandAction_1_1_0_0_0; }

		//feature=OpMultiAssign
		public Assignment getFeatureAssignment_1_1_0_0_1() { return cFeatureAssignment_1_1_0_0_1; }

		//OpMultiAssign
		public RuleCall getFeatureOpMultiAssignParserRuleCall_1_1_0_0_1_0() { return cFeatureOpMultiAssignParserRuleCall_1_1_0_0_1_0; }

		//rightOperand=Assignment
		public Assignment getRightOperandAssignment_1_1_1() { return cRightOperandAssignment_1_1_1; }

		//Assignment
		public RuleCall getRightOperandAssignmentParserRuleCall_1_1_1_0() { return cRightOperandAssignmentParserRuleCall_1_1_1_0; }
	}

	public class OpSingleAssignElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OpSingleAssign");
		private final Keyword cEqualsSignKeyword = (Keyword)rule.eContents().get(1);
		
		//OpSingleAssign:
		//	"=";
		public ParserRule getRule() { return rule; }

		//"="
		public Keyword getEqualsSignKeyword() { return cEqualsSignKeyword; }
	}

	public class OpMultiAssignElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OpMultiAssign");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cPlusSignEqualsSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cHyphenMinusEqualsSignKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cAsteriskEqualsSignKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cSolidusEqualsSignKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cPercentSignEqualsSignKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Keyword cLessThanSignKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Keyword cLessThanSignKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Keyword cEqualsSignKeyword_5_2 = (Keyword)cGroup_5.eContents().get(2);
		private final Group cGroup_6 = (Group)cAlternatives.eContents().get(6);
		private final Keyword cGreaterThanSignKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_6_1 = (Keyword)cGroup_6.eContents().get(1);
		private final Keyword cGreaterThanSignEqualsSignKeyword_6_2 = (Keyword)cGroup_6.eContents().get(2);
		
		//OpMultiAssign:
		//	"+=" | "-=" | "*=" | "/=" | "%=" | "<" "<" "=" | ">" ">"? ">=";
		public ParserRule getRule() { return rule; }

		//"+=" | "-=" | "*=" | "/=" | "%=" | "<" "<" "=" | ">" ">"? ">="
		public Alternatives getAlternatives() { return cAlternatives; }

		//"+="
		public Keyword getPlusSignEqualsSignKeyword_0() { return cPlusSignEqualsSignKeyword_0; }

		//"-="
		public Keyword getHyphenMinusEqualsSignKeyword_1() { return cHyphenMinusEqualsSignKeyword_1; }

		//"*="
		public Keyword getAsteriskEqualsSignKeyword_2() { return cAsteriskEqualsSignKeyword_2; }

		//"/="
		public Keyword getSolidusEqualsSignKeyword_3() { return cSolidusEqualsSignKeyword_3; }

		//"%="
		public Keyword getPercentSignEqualsSignKeyword_4() { return cPercentSignEqualsSignKeyword_4; }

		//"<" "<" "="
		public Group getGroup_5() { return cGroup_5; }

		//"<"
		public Keyword getLessThanSignKeyword_5_0() { return cLessThanSignKeyword_5_0; }

		//"<"
		public Keyword getLessThanSignKeyword_5_1() { return cLessThanSignKeyword_5_1; }

		//"="
		public Keyword getEqualsSignKeyword_5_2() { return cEqualsSignKeyword_5_2; }

		//">" ">"? ">="
		public Group getGroup_6() { return cGroup_6; }

		//">"
		public Keyword getGreaterThanSignKeyword_6_0() { return cGreaterThanSignKeyword_6_0; }

		//">"?
		public Keyword getGreaterThanSignKeyword_6_1() { return cGreaterThanSignKeyword_6_1; }

		//">="
		public Keyword getGreaterThanSignEqualsSignKeyword_6_2() { return cGreaterThanSignEqualsSignKeyword_6_2; }
	}

	public class OrExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OrExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAndExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Action cBinaryOperationLeftOperandAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Assignment cFeatureAssignment_1_0_0_1 = (Assignment)cGroup_1_0_0.eContents().get(1);
		private final RuleCall cFeatureOpOrParserRuleCall_1_0_0_1_0 = (RuleCall)cFeatureAssignment_1_0_0_1.eContents().get(0);
		private final Assignment cRightOperandAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightOperandAndExpressionParserRuleCall_1_1_0 = (RuleCall)cRightOperandAssignment_1_1.eContents().get(0);
		
		//OrExpression returns Expression:
		//	AndExpression (=> ({BinaryOperation.leftOperand=current} feature=OpOr) rightOperand=AndExpression)*;
		public ParserRule getRule() { return rule; }

		//AndExpression (=> ({BinaryOperation.leftOperand=current} feature=OpOr) rightOperand=AndExpression)*
		public Group getGroup() { return cGroup; }

		//AndExpression
		public RuleCall getAndExpressionParserRuleCall_0() { return cAndExpressionParserRuleCall_0; }

		//(=> ({BinaryOperation.leftOperand=current} feature=OpOr) rightOperand=AndExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//=> ({BinaryOperation.leftOperand=current} feature=OpOr)
		public Group getGroup_1_0() { return cGroup_1_0; }

		//{BinaryOperation.leftOperand=current} feature=OpOr
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{BinaryOperation.leftOperand=current}
		public Action getBinaryOperationLeftOperandAction_1_0_0_0() { return cBinaryOperationLeftOperandAction_1_0_0_0; }

		//feature=OpOr
		public Assignment getFeatureAssignment_1_0_0_1() { return cFeatureAssignment_1_0_0_1; }

		//OpOr
		public RuleCall getFeatureOpOrParserRuleCall_1_0_0_1_0() { return cFeatureOpOrParserRuleCall_1_0_0_1_0; }

		//rightOperand=AndExpression
		public Assignment getRightOperandAssignment_1_1() { return cRightOperandAssignment_1_1; }

		//AndExpression
		public RuleCall getRightOperandAndExpressionParserRuleCall_1_1_0() { return cRightOperandAndExpressionParserRuleCall_1_1_0; }
	}

	public class OpOrElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OpOr");
		private final Keyword cVerticalLineVerticalLineKeyword = (Keyword)rule.eContents().get(1);
		
		//OpOr:
		//	"||";
		public ParserRule getRule() { return rule; }

		//"||"
		public Keyword getVerticalLineVerticalLineKeyword() { return cVerticalLineVerticalLineKeyword; }
	}

	public class AndExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AndExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cEqualityExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Action cBinaryOperationLeftOperandAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Assignment cFeatureAssignment_1_0_0_1 = (Assignment)cGroup_1_0_0.eContents().get(1);
		private final RuleCall cFeatureOpAndParserRuleCall_1_0_0_1_0 = (RuleCall)cFeatureAssignment_1_0_0_1.eContents().get(0);
		private final Assignment cRightOperandAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightOperandEqualityExpressionParserRuleCall_1_1_0 = (RuleCall)cRightOperandAssignment_1_1.eContents().get(0);
		
		//AndExpression returns Expression:
		//	EqualityExpression (=> ({BinaryOperation.leftOperand=current} feature=OpAnd) rightOperand=EqualityExpression)*;
		public ParserRule getRule() { return rule; }

		//EqualityExpression (=> ({BinaryOperation.leftOperand=current} feature=OpAnd) rightOperand=EqualityExpression)*
		public Group getGroup() { return cGroup; }

		//EqualityExpression
		public RuleCall getEqualityExpressionParserRuleCall_0() { return cEqualityExpressionParserRuleCall_0; }

		//(=> ({BinaryOperation.leftOperand=current} feature=OpAnd) rightOperand=EqualityExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//=> ({BinaryOperation.leftOperand=current} feature=OpAnd)
		public Group getGroup_1_0() { return cGroup_1_0; }

		//{BinaryOperation.leftOperand=current} feature=OpAnd
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{BinaryOperation.leftOperand=current}
		public Action getBinaryOperationLeftOperandAction_1_0_0_0() { return cBinaryOperationLeftOperandAction_1_0_0_0; }

		//feature=OpAnd
		public Assignment getFeatureAssignment_1_0_0_1() { return cFeatureAssignment_1_0_0_1; }

		//OpAnd
		public RuleCall getFeatureOpAndParserRuleCall_1_0_0_1_0() { return cFeatureOpAndParserRuleCall_1_0_0_1_0; }

		//rightOperand=EqualityExpression
		public Assignment getRightOperandAssignment_1_1() { return cRightOperandAssignment_1_1; }

		//EqualityExpression
		public RuleCall getRightOperandEqualityExpressionParserRuleCall_1_1_0() { return cRightOperandEqualityExpressionParserRuleCall_1_1_0; }
	}

	public class OpAndElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OpAnd");
		private final Keyword cAmpersandAmpersandKeyword = (Keyword)rule.eContents().get(1);
		
		//OpAnd:
		//	"&&";
		public ParserRule getRule() { return rule; }

		//"&&"
		public Keyword getAmpersandAmpersandKeyword() { return cAmpersandAmpersandKeyword; }
	}

	public class EqualityExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EqualityExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cRelationalExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Action cBinaryOperationLeftOperandAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Assignment cFeatureAssignment_1_0_0_1 = (Assignment)cGroup_1_0_0.eContents().get(1);
		private final RuleCall cFeatureOpEqualityParserRuleCall_1_0_0_1_0 = (RuleCall)cFeatureAssignment_1_0_0_1.eContents().get(0);
		private final Assignment cRightOperandAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightOperandRelationalExpressionParserRuleCall_1_1_0 = (RuleCall)cRightOperandAssignment_1_1.eContents().get(0);
		
		//EqualityExpression returns Expression:
		//	RelationalExpression (=> ({BinaryOperation.leftOperand=current} feature=OpEquality)
		//	rightOperand=RelationalExpression)*;
		public ParserRule getRule() { return rule; }

		//RelationalExpression (=> ({BinaryOperation.leftOperand=current} feature=OpEquality) rightOperand=RelationalExpression)*
		public Group getGroup() { return cGroup; }

		//RelationalExpression
		public RuleCall getRelationalExpressionParserRuleCall_0() { return cRelationalExpressionParserRuleCall_0; }

		//(=> ({BinaryOperation.leftOperand=current} feature=OpEquality) rightOperand=RelationalExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//=> ({BinaryOperation.leftOperand=current} feature=OpEquality)
		public Group getGroup_1_0() { return cGroup_1_0; }

		//{BinaryOperation.leftOperand=current} feature=OpEquality
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{BinaryOperation.leftOperand=current}
		public Action getBinaryOperationLeftOperandAction_1_0_0_0() { return cBinaryOperationLeftOperandAction_1_0_0_0; }

		//feature=OpEquality
		public Assignment getFeatureAssignment_1_0_0_1() { return cFeatureAssignment_1_0_0_1; }

		//OpEquality
		public RuleCall getFeatureOpEqualityParserRuleCall_1_0_0_1_0() { return cFeatureOpEqualityParserRuleCall_1_0_0_1_0; }

		//rightOperand=RelationalExpression
		public Assignment getRightOperandAssignment_1_1() { return cRightOperandAssignment_1_1; }

		//RelationalExpression
		public RuleCall getRightOperandRelationalExpressionParserRuleCall_1_1_0() { return cRightOperandRelationalExpressionParserRuleCall_1_1_0; }
	}

	public class OpEqualityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OpEquality");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cEqualsSignEqualsSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cExclamationMarkEqualsSignKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cEqualsSignEqualsSignEqualsSignKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cExclamationMarkEqualsSignEqualsSignKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		
		//OpEquality:
		//	"==" | "!=" | "===" | "!==";
		public ParserRule getRule() { return rule; }

		//"==" | "!=" | "===" | "!=="
		public Alternatives getAlternatives() { return cAlternatives; }

		//"=="
		public Keyword getEqualsSignEqualsSignKeyword_0() { return cEqualsSignEqualsSignKeyword_0; }

		//"!="
		public Keyword getExclamationMarkEqualsSignKeyword_1() { return cExclamationMarkEqualsSignKeyword_1; }

		//"==="
		public Keyword getEqualsSignEqualsSignEqualsSignKeyword_2() { return cEqualsSignEqualsSignEqualsSignKeyword_2; }

		//"!=="
		public Keyword getExclamationMarkEqualsSignEqualsSignKeyword_3() { return cExclamationMarkEqualsSignEqualsSignKeyword_3; }
	}

	public class RelationalExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RelationalExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cOtherOperatorExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Group cGroup_1_0_0_0 = (Group)cGroup_1_0_0.eContents().get(0);
		private final Action cInstanceOfExpressionExpressionAction_1_0_0_0_0 = (Action)cGroup_1_0_0_0.eContents().get(0);
		private final Keyword cInstanceofKeyword_1_0_0_0_1 = (Keyword)cGroup_1_0_0_0.eContents().get(1);
		private final Assignment cTypeAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final RuleCall cTypeTypeParserRuleCall_1_0_1_0 = (RuleCall)cTypeAssignment_1_0_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Group cGroup_1_1_0 = (Group)cGroup_1_1.eContents().get(0);
		private final Group cGroup_1_1_0_0 = (Group)cGroup_1_1_0.eContents().get(0);
		private final Action cBinaryOperationLeftOperandAction_1_1_0_0_0 = (Action)cGroup_1_1_0_0.eContents().get(0);
		private final Assignment cFeatureAssignment_1_1_0_0_1 = (Assignment)cGroup_1_1_0_0.eContents().get(1);
		private final RuleCall cFeatureOpCompareParserRuleCall_1_1_0_0_1_0 = (RuleCall)cFeatureAssignment_1_1_0_0_1.eContents().get(0);
		private final Assignment cRightOperandAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cRightOperandOtherOperatorExpressionParserRuleCall_1_1_1_0 = (RuleCall)cRightOperandAssignment_1_1_1.eContents().get(0);
		
		//RelationalExpression returns Expression:
		//	OtherOperatorExpression (=> ({InstanceOfExpression.expression=current} "instanceof") type=Type | =>
		//	({BinaryOperation.leftOperand=current} feature=OpCompare) rightOperand=OtherOperatorExpression)*;
		public ParserRule getRule() { return rule; }

		//OtherOperatorExpression (=> ({InstanceOfExpression.expression=current} "instanceof") type=Type | =>
		//({BinaryOperation.leftOperand=current} feature=OpCompare) rightOperand=OtherOperatorExpression)*
		public Group getGroup() { return cGroup; }

		//OtherOperatorExpression
		public RuleCall getOtherOperatorExpressionParserRuleCall_0() { return cOtherOperatorExpressionParserRuleCall_0; }

		//(=> ({InstanceOfExpression.expression=current} "instanceof") type=Type | => ({BinaryOperation.leftOperand=current}
		//feature=OpCompare) rightOperand=OtherOperatorExpression)*
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//=> ({InstanceOfExpression.expression=current} "instanceof") type=Type
		public Group getGroup_1_0() { return cGroup_1_0; }

		//=> ({InstanceOfExpression.expression=current} "instanceof")
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{InstanceOfExpression.expression=current} "instanceof"
		public Group getGroup_1_0_0_0() { return cGroup_1_0_0_0; }

		//{InstanceOfExpression.expression=current}
		public Action getInstanceOfExpressionExpressionAction_1_0_0_0_0() { return cInstanceOfExpressionExpressionAction_1_0_0_0_0; }

		//"instanceof"
		public Keyword getInstanceofKeyword_1_0_0_0_1() { return cInstanceofKeyword_1_0_0_0_1; }

		//type=Type
		public Assignment getTypeAssignment_1_0_1() { return cTypeAssignment_1_0_1; }

		//Type
		public RuleCall getTypeTypeParserRuleCall_1_0_1_0() { return cTypeTypeParserRuleCall_1_0_1_0; }

		//=> ({BinaryOperation.leftOperand=current} feature=OpCompare) rightOperand=OtherOperatorExpression
		public Group getGroup_1_1() { return cGroup_1_1; }

		//=> ({BinaryOperation.leftOperand=current} feature=OpCompare)
		public Group getGroup_1_1_0() { return cGroup_1_1_0; }

		//{BinaryOperation.leftOperand=current} feature=OpCompare
		public Group getGroup_1_1_0_0() { return cGroup_1_1_0_0; }

		//{BinaryOperation.leftOperand=current}
		public Action getBinaryOperationLeftOperandAction_1_1_0_0_0() { return cBinaryOperationLeftOperandAction_1_1_0_0_0; }

		//feature=OpCompare
		public Assignment getFeatureAssignment_1_1_0_0_1() { return cFeatureAssignment_1_1_0_0_1; }

		//OpCompare
		public RuleCall getFeatureOpCompareParserRuleCall_1_1_0_0_1_0() { return cFeatureOpCompareParserRuleCall_1_1_0_0_1_0; }

		//rightOperand=OtherOperatorExpression
		public Assignment getRightOperandAssignment_1_1_1() { return cRightOperandAssignment_1_1_1; }

		//OtherOperatorExpression
		public RuleCall getRightOperandOtherOperatorExpressionParserRuleCall_1_1_1_0() { return cRightOperandOtherOperatorExpressionParserRuleCall_1_1_1_0; }
	}

	public class OpCompareElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OpCompare");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cGreaterThanSignEqualsSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLessThanSignKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Keyword cGreaterThanSignKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cLessThanSignKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		
		//OpCompare:
		//	">=" | "<" "=" | ">" | "<";
		public ParserRule getRule() { return rule; }

		//">=" | "<" "=" | ">" | "<"
		public Alternatives getAlternatives() { return cAlternatives; }

		//">="
		public Keyword getGreaterThanSignEqualsSignKeyword_0() { return cGreaterThanSignEqualsSignKeyword_0; }

		//"<" "="
		public Group getGroup_1() { return cGroup_1; }

		//"<"
		public Keyword getLessThanSignKeyword_1_0() { return cLessThanSignKeyword_1_0; }

		//"="
		public Keyword getEqualsSignKeyword_1_1() { return cEqualsSignKeyword_1_1; }

		//">"
		public Keyword getGreaterThanSignKeyword_2() { return cGreaterThanSignKeyword_2; }

		//"<"
		public Keyword getLessThanSignKeyword_3() { return cLessThanSignKeyword_3; }
	}

	public class OtherOperatorExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OtherOperatorExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAdditiveExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Action cBinaryOperationLeftOperandAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Assignment cFeatureAssignment_1_0_0_1 = (Assignment)cGroup_1_0_0.eContents().get(1);
		private final RuleCall cFeatureOpOtherParserRuleCall_1_0_0_1_0 = (RuleCall)cFeatureAssignment_1_0_0_1.eContents().get(0);
		private final Assignment cRightOperandAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightOperandAdditiveExpressionParserRuleCall_1_1_0 = (RuleCall)cRightOperandAssignment_1_1.eContents().get(0);
		
		//OtherOperatorExpression returns Expression:
		//	AdditiveExpression (=> ({BinaryOperation.leftOperand=current} feature=OpOther) rightOperand=AdditiveExpression)*;
		public ParserRule getRule() { return rule; }

		//AdditiveExpression (=> ({BinaryOperation.leftOperand=current} feature=OpOther) rightOperand=AdditiveExpression)*
		public Group getGroup() { return cGroup; }

		//AdditiveExpression
		public RuleCall getAdditiveExpressionParserRuleCall_0() { return cAdditiveExpressionParserRuleCall_0; }

		//(=> ({BinaryOperation.leftOperand=current} feature=OpOther) rightOperand=AdditiveExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//=> ({BinaryOperation.leftOperand=current} feature=OpOther)
		public Group getGroup_1_0() { return cGroup_1_0; }

		//{BinaryOperation.leftOperand=current} feature=OpOther
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{BinaryOperation.leftOperand=current}
		public Action getBinaryOperationLeftOperandAction_1_0_0_0() { return cBinaryOperationLeftOperandAction_1_0_0_0; }

		//feature=OpOther
		public Assignment getFeatureAssignment_1_0_0_1() { return cFeatureAssignment_1_0_0_1; }

		//OpOther
		public RuleCall getFeatureOpOtherParserRuleCall_1_0_0_1_0() { return cFeatureOpOtherParserRuleCall_1_0_0_1_0; }

		//rightOperand=AdditiveExpression
		public Assignment getRightOperandAssignment_1_1() { return cRightOperandAssignment_1_1; }

		//AdditiveExpression
		public RuleCall getRightOperandAdditiveExpressionParserRuleCall_1_1_0() { return cRightOperandAdditiveExpressionParserRuleCall_1_1_0; }
	}

	public class OpOtherElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OpOther");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cFullStopFullStopLessThanSignKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cGreaterThanSignKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Keyword cFullStopFullStopKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Keyword cFullStopFullStopKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cEqualsSignGreaterThanSignKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Keyword cGreaterThanSignKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Alternatives cAlternatives_5_1 = (Alternatives)cGroup_5.eContents().get(1);
		private final Group cGroup_5_1_0 = (Group)cAlternatives_5_1.eContents().get(0);
		private final Group cGroup_5_1_0_0 = (Group)cGroup_5_1_0.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_5_1_0_0_0 = (Keyword)cGroup_5_1_0_0.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_5_1_0_0_1 = (Keyword)cGroup_5_1_0_0.eContents().get(1);
		private final Keyword cGreaterThanSignKeyword_5_1_1 = (Keyword)cAlternatives_5_1.eContents().get(1);
		private final Group cGroup_6 = (Group)cAlternatives.eContents().get(6);
		private final Keyword cLessThanSignKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Alternatives cAlternatives_6_1 = (Alternatives)cGroup_6.eContents().get(1);
		private final Group cGroup_6_1_0 = (Group)cAlternatives_6_1.eContents().get(0);
		private final Group cGroup_6_1_0_0 = (Group)cGroup_6_1_0.eContents().get(0);
		private final Keyword cLessThanSignKeyword_6_1_0_0_0 = (Keyword)cGroup_6_1_0_0.eContents().get(0);
		private final Keyword cLessThanSignKeyword_6_1_0_0_1 = (Keyword)cGroup_6_1_0_0.eContents().get(1);
		private final Keyword cLessThanSignKeyword_6_1_1 = (Keyword)cAlternatives_6_1.eContents().get(1);
		private final Keyword cEqualsSignGreaterThanSignKeyword_6_1_2 = (Keyword)cAlternatives_6_1.eContents().get(2);
		private final Keyword cLessThanSignGreaterThanSignKeyword_7 = (Keyword)cAlternatives.eContents().get(7);
		private final Keyword cQuestionMarkColonKeyword_8 = (Keyword)cAlternatives.eContents().get(8);
		
		//OpOther:
		//	"->" | "..<" | ">" ".." | ".." | "=>" | ">" (=> (">" ">") | ">") | "<" (=> ("<" "<") | "<" | "=>") | "<>" | "?:";
		public ParserRule getRule() { return rule; }

		//"->" | "..<" | ">" ".." | ".." | "=>" | ">" (=> (">" ">") | ">") | "<" (=> ("<" "<") | "<" | "=>") | "<>" | "?:"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"->"
		public Keyword getHyphenMinusGreaterThanSignKeyword_0() { return cHyphenMinusGreaterThanSignKeyword_0; }

		//"..<"
		public Keyword getFullStopFullStopLessThanSignKeyword_1() { return cFullStopFullStopLessThanSignKeyword_1; }

		//">" ".."
		public Group getGroup_2() { return cGroup_2; }

		//">"
		public Keyword getGreaterThanSignKeyword_2_0() { return cGreaterThanSignKeyword_2_0; }

		//".."
		public Keyword getFullStopFullStopKeyword_2_1() { return cFullStopFullStopKeyword_2_1; }

		//".."
		public Keyword getFullStopFullStopKeyword_3() { return cFullStopFullStopKeyword_3; }

		//"=>"
		public Keyword getEqualsSignGreaterThanSignKeyword_4() { return cEqualsSignGreaterThanSignKeyword_4; }

		//">" (=> (">" ">") | ">")
		public Group getGroup_5() { return cGroup_5; }

		//">"
		public Keyword getGreaterThanSignKeyword_5_0() { return cGreaterThanSignKeyword_5_0; }

		//=> (">" ">") | ">"
		public Alternatives getAlternatives_5_1() { return cAlternatives_5_1; }

		//=> (">" ">")
		public Group getGroup_5_1_0() { return cGroup_5_1_0; }

		//">" ">"
		public Group getGroup_5_1_0_0() { return cGroup_5_1_0_0; }

		//">"
		public Keyword getGreaterThanSignKeyword_5_1_0_0_0() { return cGreaterThanSignKeyword_5_1_0_0_0; }

		//">"
		public Keyword getGreaterThanSignKeyword_5_1_0_0_1() { return cGreaterThanSignKeyword_5_1_0_0_1; }

		//">"
		public Keyword getGreaterThanSignKeyword_5_1_1() { return cGreaterThanSignKeyword_5_1_1; }

		//"<" (=> ("<" "<") | "<" | "=>")
		public Group getGroup_6() { return cGroup_6; }

		//"<"
		public Keyword getLessThanSignKeyword_6_0() { return cLessThanSignKeyword_6_0; }

		//=> ("<" "<") | "<" | "=>"
		public Alternatives getAlternatives_6_1() { return cAlternatives_6_1; }

		//=> ("<" "<")
		public Group getGroup_6_1_0() { return cGroup_6_1_0; }

		//"<" "<"
		public Group getGroup_6_1_0_0() { return cGroup_6_1_0_0; }

		//"<"
		public Keyword getLessThanSignKeyword_6_1_0_0_0() { return cLessThanSignKeyword_6_1_0_0_0; }

		//"<"
		public Keyword getLessThanSignKeyword_6_1_0_0_1() { return cLessThanSignKeyword_6_1_0_0_1; }

		//"<"
		public Keyword getLessThanSignKeyword_6_1_1() { return cLessThanSignKeyword_6_1_1; }

		//"=>"
		public Keyword getEqualsSignGreaterThanSignKeyword_6_1_2() { return cEqualsSignGreaterThanSignKeyword_6_1_2; }

		//"<>"
		public Keyword getLessThanSignGreaterThanSignKeyword_7() { return cLessThanSignGreaterThanSignKeyword_7; }

		//"?:"
		public Keyword getQuestionMarkColonKeyword_8() { return cQuestionMarkColonKeyword_8; }
	}

	public class AdditiveExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AdditiveExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cMultiplicativeExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Action cBinaryOperationLeftOperandAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Assignment cFeatureAssignment_1_0_0_1 = (Assignment)cGroup_1_0_0.eContents().get(1);
		private final RuleCall cFeatureOpAddParserRuleCall_1_0_0_1_0 = (RuleCall)cFeatureAssignment_1_0_0_1.eContents().get(0);
		private final Assignment cRightOperandAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightOperandMultiplicativeExpressionParserRuleCall_1_1_0 = (RuleCall)cRightOperandAssignment_1_1.eContents().get(0);
		
		//AdditiveExpression returns Expression:
		//	MultiplicativeExpression (=> ({BinaryOperation.leftOperand=current} feature=OpAdd)
		//	rightOperand=MultiplicativeExpression)*;
		public ParserRule getRule() { return rule; }

		//MultiplicativeExpression (=> ({BinaryOperation.leftOperand=current} feature=OpAdd)
		//rightOperand=MultiplicativeExpression)*
		public Group getGroup() { return cGroup; }

		//MultiplicativeExpression
		public RuleCall getMultiplicativeExpressionParserRuleCall_0() { return cMultiplicativeExpressionParserRuleCall_0; }

		//(=> ({BinaryOperation.leftOperand=current} feature=OpAdd) rightOperand=MultiplicativeExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//=> ({BinaryOperation.leftOperand=current} feature=OpAdd)
		public Group getGroup_1_0() { return cGroup_1_0; }

		//{BinaryOperation.leftOperand=current} feature=OpAdd
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{BinaryOperation.leftOperand=current}
		public Action getBinaryOperationLeftOperandAction_1_0_0_0() { return cBinaryOperationLeftOperandAction_1_0_0_0; }

		//feature=OpAdd
		public Assignment getFeatureAssignment_1_0_0_1() { return cFeatureAssignment_1_0_0_1; }

		//OpAdd
		public RuleCall getFeatureOpAddParserRuleCall_1_0_0_1_0() { return cFeatureOpAddParserRuleCall_1_0_0_1_0; }

		//rightOperand=MultiplicativeExpression
		public Assignment getRightOperandAssignment_1_1() { return cRightOperandAssignment_1_1; }

		//MultiplicativeExpression
		public RuleCall getRightOperandMultiplicativeExpressionParserRuleCall_1_1_0() { return cRightOperandMultiplicativeExpressionParserRuleCall_1_1_0; }
	}

	public class OpAddElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OpAdd");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cPlusSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//OpAdd:
		//	"+" | "-";
		public ParserRule getRule() { return rule; }

		//"+" | "-"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"+"
		public Keyword getPlusSignKeyword_0() { return cPlusSignKeyword_0; }

		//"-"
		public Keyword getHyphenMinusKeyword_1() { return cHyphenMinusKeyword_1; }
	}

	public class MultiplicativeExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MultiplicativeExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cUnaryOperationParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Action cBinaryOperationLeftOperandAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Assignment cFeatureAssignment_1_0_0_1 = (Assignment)cGroup_1_0_0.eContents().get(1);
		private final RuleCall cFeatureOpMultiParserRuleCall_1_0_0_1_0 = (RuleCall)cFeatureAssignment_1_0_0_1.eContents().get(0);
		private final Assignment cRightOperandAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightOperandUnaryOperationParserRuleCall_1_1_0 = (RuleCall)cRightOperandAssignment_1_1.eContents().get(0);
		
		//MultiplicativeExpression returns Expression:
		//	UnaryOperation (=> ({BinaryOperation.leftOperand=current} feature=OpMulti) rightOperand=UnaryOperation)*;
		public ParserRule getRule() { return rule; }

		//UnaryOperation (=> ({BinaryOperation.leftOperand=current} feature=OpMulti) rightOperand=UnaryOperation)*
		public Group getGroup() { return cGroup; }

		//UnaryOperation
		public RuleCall getUnaryOperationParserRuleCall_0() { return cUnaryOperationParserRuleCall_0; }

		//(=> ({BinaryOperation.leftOperand=current} feature=OpMulti) rightOperand=UnaryOperation)*
		public Group getGroup_1() { return cGroup_1; }

		//=> ({BinaryOperation.leftOperand=current} feature=OpMulti)
		public Group getGroup_1_0() { return cGroup_1_0; }

		//{BinaryOperation.leftOperand=current} feature=OpMulti
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{BinaryOperation.leftOperand=current}
		public Action getBinaryOperationLeftOperandAction_1_0_0_0() { return cBinaryOperationLeftOperandAction_1_0_0_0; }

		//feature=OpMulti
		public Assignment getFeatureAssignment_1_0_0_1() { return cFeatureAssignment_1_0_0_1; }

		//OpMulti
		public RuleCall getFeatureOpMultiParserRuleCall_1_0_0_1_0() { return cFeatureOpMultiParserRuleCall_1_0_0_1_0; }

		//rightOperand=UnaryOperation
		public Assignment getRightOperandAssignment_1_1() { return cRightOperandAssignment_1_1; }

		//UnaryOperation
		public RuleCall getRightOperandUnaryOperationParserRuleCall_1_1_0() { return cRightOperandUnaryOperationParserRuleCall_1_1_0; }
	}

	public class OpMultiElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OpMulti");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cAsteriskKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cAsteriskAsteriskKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cSolidusKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cPercentSignKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		
		//OpMulti:
		//	"*" | "**" | "/" | "%";
		public ParserRule getRule() { return rule; }

		//"*" | "**" | "/" | "%"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"*"
		public Keyword getAsteriskKeyword_0() { return cAsteriskKeyword_0; }

		//"**"
		public Keyword getAsteriskAsteriskKeyword_1() { return cAsteriskAsteriskKeyword_1; }

		//"/"
		public Keyword getSolidusKeyword_2() { return cSolidusKeyword_2; }

		//"%"
		public Keyword getPercentSignKeyword_3() { return cPercentSignKeyword_3; }
	}

	public class UnaryOperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UnaryOperation");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cUnaryOperationAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cFeatureAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cFeatureOpUnaryParserRuleCall_0_1_0 = (RuleCall)cFeatureAssignment_0_1.eContents().get(0);
		private final Assignment cOperandAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cOperandUnaryOperationParserRuleCall_0_2_0 = (RuleCall)cOperandAssignment_0_2.eContents().get(0);
		private final RuleCall cPostfixOperationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//UnaryOperation returns Expression:
		//	{UnaryOperation} feature=OpUnary operand=UnaryOperation | PostfixOperation;
		public ParserRule getRule() { return rule; }

		//{UnaryOperation} feature=OpUnary operand=UnaryOperation | PostfixOperation
		public Alternatives getAlternatives() { return cAlternatives; }

		//{UnaryOperation} feature=OpUnary operand=UnaryOperation
		public Group getGroup_0() { return cGroup_0; }

		//{UnaryOperation}
		public Action getUnaryOperationAction_0_0() { return cUnaryOperationAction_0_0; }

		//feature=OpUnary
		public Assignment getFeatureAssignment_0_1() { return cFeatureAssignment_0_1; }

		//OpUnary
		public RuleCall getFeatureOpUnaryParserRuleCall_0_1_0() { return cFeatureOpUnaryParserRuleCall_0_1_0; }

		//operand=UnaryOperation
		public Assignment getOperandAssignment_0_2() { return cOperandAssignment_0_2; }

		//UnaryOperation
		public RuleCall getOperandUnaryOperationParserRuleCall_0_2_0() { return cOperandUnaryOperationParserRuleCall_0_2_0; }

		//PostfixOperation
		public RuleCall getPostfixOperationParserRuleCall_1() { return cPostfixOperationParserRuleCall_1; }
	}

	public class OpUnaryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OpUnary");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cExclamationMarkKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cPlusSignKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		
		//OpUnary:
		//	"!" | "-" | "+";
		public ParserRule getRule() { return rule; }

		//"!" | "-" | "+"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"!"
		public Keyword getExclamationMarkKeyword_0() { return cExclamationMarkKeyword_0; }

		//"-"
		public Keyword getHyphenMinusKeyword_1() { return cHyphenMinusKeyword_1; }

		//"+"
		public Keyword getPlusSignKeyword_2() { return cPlusSignKeyword_2; }
	}

	public class PostfixOperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PostfixOperation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cMemberFeatureCallParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Action cPostfixOperationOperandAction_1_0_0 = (Action)cGroup_1_0.eContents().get(0);
		private final Assignment cFeatureAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final RuleCall cFeatureOpPostfixParserRuleCall_1_0_1_0 = (RuleCall)cFeatureAssignment_1_0_1.eContents().get(0);
		
		//PostfixOperation returns Expression:
		//	MemberFeatureCall => ({PostfixOperation.operand=current} feature=OpPostfix)?;
		public ParserRule getRule() { return rule; }

		//MemberFeatureCall => ({PostfixOperation.operand=current} feature=OpPostfix)?
		public Group getGroup() { return cGroup; }

		//MemberFeatureCall
		public RuleCall getMemberFeatureCallParserRuleCall_0() { return cMemberFeatureCallParserRuleCall_0; }

		//=> ({PostfixOperation.operand=current} feature=OpPostfix)?
		public Group getGroup_1() { return cGroup_1; }

		//{PostfixOperation.operand=current} feature=OpPostfix
		public Group getGroup_1_0() { return cGroup_1_0; }

		//{PostfixOperation.operand=current}
		public Action getPostfixOperationOperandAction_1_0_0() { return cPostfixOperationOperandAction_1_0_0; }

		//feature=OpPostfix
		public Assignment getFeatureAssignment_1_0_1() { return cFeatureAssignment_1_0_1; }

		//OpPostfix
		public RuleCall getFeatureOpPostfixParserRuleCall_1_0_1_0() { return cFeatureOpPostfixParserRuleCall_1_0_1_0; }
	}

	public class OpPostfixElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OpPostfix");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cPlusSignPlusSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cHyphenMinusHyphenMinusKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//OpPostfix:
		//	"++" | "--";
		public ParserRule getRule() { return rule; }

		//"++" | "--"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"++"
		public Keyword getPlusSignPlusSignKeyword_0() { return cPlusSignPlusSignKeyword_0; }

		//"--"
		public Keyword getHyphenMinusHyphenMinusKeyword_1() { return cHyphenMinusHyphenMinusKeyword_1; }
	}

	public class MemberFeatureCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MemberFeatureCall");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPrimaryExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Group cGroup_1_0_0_0 = (Group)cGroup_1_0_0.eContents().get(0);
		private final Action cAssignmentAssignableAction_1_0_0_0_0 = (Action)cGroup_1_0_0_0.eContents().get(0);
		private final Keyword cFullStopKeyword_1_0_0_0_1 = (Keyword)cGroup_1_0_0_0.eContents().get(1);
		private final Assignment cFeatureAssignment_1_0_0_0_2 = (Assignment)cGroup_1_0_0_0.eContents().get(2);
		private final RuleCall cFeatureFeatureCallIDParserRuleCall_1_0_0_0_2_0 = (RuleCall)cFeatureAssignment_1_0_0_0_2.eContents().get(0);
		private final RuleCall cOpSingleAssignParserRuleCall_1_0_0_0_3 = (RuleCall)cGroup_1_0_0_0.eContents().get(3);
		private final Assignment cValueAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final RuleCall cValueAssignmentParserRuleCall_1_0_1_0 = (RuleCall)cValueAssignment_1_0_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Group cGroup_1_1_0 = (Group)cGroup_1_1.eContents().get(0);
		private final Group cGroup_1_1_0_0 = (Group)cGroup_1_1_0.eContents().get(0);
		private final Action cMemberFeatureCallMemberCallTargetAction_1_1_0_0_0 = (Action)cGroup_1_1_0_0.eContents().get(0);
		private final Alternatives cAlternatives_1_1_0_0_1 = (Alternatives)cGroup_1_1_0_0.eContents().get(1);
		private final Keyword cFullStopKeyword_1_1_0_0_1_0 = (Keyword)cAlternatives_1_1_0_0_1.eContents().get(0);
		private final Assignment cNullSafeAssignment_1_1_0_0_1_1 = (Assignment)cAlternatives_1_1_0_0_1.eContents().get(1);
		private final Keyword cNullSafeQuestionMarkFullStopKeyword_1_1_0_0_1_1_0 = (Keyword)cNullSafeAssignment_1_1_0_0_1_1.eContents().get(0);
		private final Assignment cExplicitStaticAssignment_1_1_0_0_1_2 = (Assignment)cAlternatives_1_1_0_0_1.eContents().get(2);
		private final Keyword cExplicitStaticColonColonKeyword_1_1_0_0_1_2_0 = (Keyword)cExplicitStaticAssignment_1_1_0_0_1_2.eContents().get(0);
		private final Group cGroup_1_1_1 = (Group)cGroup_1_1.eContents().get(1);
		private final Keyword cLessThanSignKeyword_1_1_1_0 = (Keyword)cGroup_1_1_1.eContents().get(0);
		private final Assignment cTypeArgumentsAssignment_1_1_1_1 = (Assignment)cGroup_1_1_1.eContents().get(1);
		private final RuleCall cTypeArgumentsJvmArgumentTypeReferenceParserRuleCall_1_1_1_1_0 = (RuleCall)cTypeArgumentsAssignment_1_1_1_1.eContents().get(0);
		private final Group cGroup_1_1_1_2 = (Group)cGroup_1_1_1.eContents().get(2);
		private final Keyword cCommaKeyword_1_1_1_2_0 = (Keyword)cGroup_1_1_1_2.eContents().get(0);
		private final Assignment cTypeArgumentsAssignment_1_1_1_2_1 = (Assignment)cGroup_1_1_1_2.eContents().get(1);
		private final RuleCall cTypeArgumentsJvmArgumentTypeReferenceParserRuleCall_1_1_1_2_1_0 = (RuleCall)cTypeArgumentsAssignment_1_1_1_2_1.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_1_1_1_3 = (Keyword)cGroup_1_1_1.eContents().get(3);
		private final Assignment cFeatureAssignment_1_1_2 = (Assignment)cGroup_1_1.eContents().get(2);
		private final RuleCall cFeatureIdOrSuperParserRuleCall_1_1_2_0 = (RuleCall)cFeatureAssignment_1_1_2.eContents().get(0);
		private final Group cGroup_1_1_3 = (Group)cGroup_1_1.eContents().get(3);
		private final Assignment cExplicitOperationCallAssignment_1_1_3_0 = (Assignment)cGroup_1_1_3.eContents().get(0);
		private final Keyword cExplicitOperationCallLeftParenthesisKeyword_1_1_3_0_0 = (Keyword)cExplicitOperationCallAssignment_1_1_3_0.eContents().get(0);
		private final Alternatives cAlternatives_1_1_3_1 = (Alternatives)cGroup_1_1_3.eContents().get(1);
		private final Assignment cMemberCallArgumentsAssignment_1_1_3_1_0 = (Assignment)cAlternatives_1_1_3_1.eContents().get(0);
		private final RuleCall cMemberCallArgumentsShortClosureParserRuleCall_1_1_3_1_0_0 = (RuleCall)cMemberCallArgumentsAssignment_1_1_3_1_0.eContents().get(0);
		private final Group cGroup_1_1_3_1_1 = (Group)cAlternatives_1_1_3_1.eContents().get(1);
		private final Assignment cMemberCallArgumentsAssignment_1_1_3_1_1_0 = (Assignment)cGroup_1_1_3_1_1.eContents().get(0);
		private final RuleCall cMemberCallArgumentsExpressionParserRuleCall_1_1_3_1_1_0_0 = (RuleCall)cMemberCallArgumentsAssignment_1_1_3_1_1_0.eContents().get(0);
		private final Group cGroup_1_1_3_1_1_1 = (Group)cGroup_1_1_3_1_1.eContents().get(1);
		private final Keyword cCommaKeyword_1_1_3_1_1_1_0 = (Keyword)cGroup_1_1_3_1_1_1.eContents().get(0);
		private final Assignment cMemberCallArgumentsAssignment_1_1_3_1_1_1_1 = (Assignment)cGroup_1_1_3_1_1_1.eContents().get(1);
		private final RuleCall cMemberCallArgumentsExpressionParserRuleCall_1_1_3_1_1_1_1_0 = (RuleCall)cMemberCallArgumentsAssignment_1_1_3_1_1_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_1_3_2 = (Keyword)cGroup_1_1_3.eContents().get(2);
		private final Assignment cMemberCallArgumentsAssignment_1_1_4 = (Assignment)cGroup_1_1.eContents().get(4);
		private final RuleCall cMemberCallArgumentsClosureParserRuleCall_1_1_4_0 = (RuleCall)cMemberCallArgumentsAssignment_1_1_4.eContents().get(0);
		
		//MemberFeatureCall returns Expression:
		//	PrimaryExpression (=> ({Assignment.assignable=current} "." feature=FeatureCallID OpSingleAssign) value=Assignment |
		//	=> ({MemberFeatureCall.memberCallTarget=current} ("." | nullSafe?="?." | explicitStatic?="::")) ("<"
		//	typeArguments+=JvmArgumentTypeReference ("," typeArguments+=JvmArgumentTypeReference)* ">")? feature=IdOrSuper (=>
		//	explicitOperationCall?="(" (memberCallArguments+=ShortClosure | memberCallArguments+=Expression (","
		//	memberCallArguments+=Expression)*)? ")")? memberCallArguments+=Closure?)*;
		public ParserRule getRule() { return rule; }

		//PrimaryExpression (=> ({Assignment.assignable=current} "." feature=FeatureCallID OpSingleAssign) value=Assignment | =>
		//({MemberFeatureCall.memberCallTarget=current} ("." | nullSafe?="?." | explicitStatic?="::")) ("<"
		//typeArguments+=JvmArgumentTypeReference ("," typeArguments+=JvmArgumentTypeReference)* ">")? feature=IdOrSuper (=>
		//explicitOperationCall?="(" (memberCallArguments+=ShortClosure | memberCallArguments+=Expression (","
		//memberCallArguments+=Expression)*)? ")")? memberCallArguments+=Closure?)*
		public Group getGroup() { return cGroup; }

		//PrimaryExpression
		public RuleCall getPrimaryExpressionParserRuleCall_0() { return cPrimaryExpressionParserRuleCall_0; }

		//(=> ({Assignment.assignable=current} "." feature=FeatureCallID OpSingleAssign) value=Assignment | =>
		//({MemberFeatureCall.memberCallTarget=current} ("." | nullSafe?="?." | explicitStatic?="::")) ("<"
		//typeArguments+=JvmArgumentTypeReference ("," typeArguments+=JvmArgumentTypeReference)* ">")? feature=IdOrSuper (=>
		//explicitOperationCall?="(" (memberCallArguments+=ShortClosure | memberCallArguments+=Expression (","
		//memberCallArguments+=Expression)*)? ")")? memberCallArguments+=Closure?)*
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//=> ({Assignment.assignable=current} "." feature=FeatureCallID OpSingleAssign) value=Assignment
		public Group getGroup_1_0() { return cGroup_1_0; }

		//=> ({Assignment.assignable=current} "." feature=FeatureCallID OpSingleAssign)
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{Assignment.assignable=current} "." feature=FeatureCallID OpSingleAssign
		public Group getGroup_1_0_0_0() { return cGroup_1_0_0_0; }

		//{Assignment.assignable=current}
		public Action getAssignmentAssignableAction_1_0_0_0_0() { return cAssignmentAssignableAction_1_0_0_0_0; }

		//"."
		public Keyword getFullStopKeyword_1_0_0_0_1() { return cFullStopKeyword_1_0_0_0_1; }

		//feature=FeatureCallID
		public Assignment getFeatureAssignment_1_0_0_0_2() { return cFeatureAssignment_1_0_0_0_2; }

		//FeatureCallID
		public RuleCall getFeatureFeatureCallIDParserRuleCall_1_0_0_0_2_0() { return cFeatureFeatureCallIDParserRuleCall_1_0_0_0_2_0; }

		//OpSingleAssign
		public RuleCall getOpSingleAssignParserRuleCall_1_0_0_0_3() { return cOpSingleAssignParserRuleCall_1_0_0_0_3; }

		//value=Assignment
		public Assignment getValueAssignment_1_0_1() { return cValueAssignment_1_0_1; }

		//Assignment
		public RuleCall getValueAssignmentParserRuleCall_1_0_1_0() { return cValueAssignmentParserRuleCall_1_0_1_0; }

		//=> ({MemberFeatureCall.memberCallTarget=current} ("." | nullSafe?="?." | explicitStatic?="::")) ("<"
		//typeArguments+=JvmArgumentTypeReference ("," typeArguments+=JvmArgumentTypeReference)* ">")? feature=IdOrSuper (=>
		//explicitOperationCall?="(" (memberCallArguments+=ShortClosure | memberCallArguments+=Expression (","
		//memberCallArguments+=Expression)*)? ")")? memberCallArguments+=Closure?
		public Group getGroup_1_1() { return cGroup_1_1; }

		//=> ({MemberFeatureCall.memberCallTarget=current} ("." | nullSafe?="?." | explicitStatic?="::"))
		public Group getGroup_1_1_0() { return cGroup_1_1_0; }

		//{MemberFeatureCall.memberCallTarget=current} ("." | nullSafe?="?." | explicitStatic?="::")
		public Group getGroup_1_1_0_0() { return cGroup_1_1_0_0; }

		//{MemberFeatureCall.memberCallTarget=current}
		public Action getMemberFeatureCallMemberCallTargetAction_1_1_0_0_0() { return cMemberFeatureCallMemberCallTargetAction_1_1_0_0_0; }

		//"." | nullSafe?="?." | explicitStatic?="::"
		public Alternatives getAlternatives_1_1_0_0_1() { return cAlternatives_1_1_0_0_1; }

		//"."
		public Keyword getFullStopKeyword_1_1_0_0_1_0() { return cFullStopKeyword_1_1_0_0_1_0; }

		//nullSafe?="?."
		public Assignment getNullSafeAssignment_1_1_0_0_1_1() { return cNullSafeAssignment_1_1_0_0_1_1; }

		//"?."
		public Keyword getNullSafeQuestionMarkFullStopKeyword_1_1_0_0_1_1_0() { return cNullSafeQuestionMarkFullStopKeyword_1_1_0_0_1_1_0; }

		//explicitStatic?="::"
		public Assignment getExplicitStaticAssignment_1_1_0_0_1_2() { return cExplicitStaticAssignment_1_1_0_0_1_2; }

		//"::"
		public Keyword getExplicitStaticColonColonKeyword_1_1_0_0_1_2_0() { return cExplicitStaticColonColonKeyword_1_1_0_0_1_2_0; }

		//("<" typeArguments+=JvmArgumentTypeReference ("," typeArguments+=JvmArgumentTypeReference)* ">")?
		public Group getGroup_1_1_1() { return cGroup_1_1_1; }

		//"<"
		public Keyword getLessThanSignKeyword_1_1_1_0() { return cLessThanSignKeyword_1_1_1_0; }

		//typeArguments+=JvmArgumentTypeReference
		public Assignment getTypeArgumentsAssignment_1_1_1_1() { return cTypeArgumentsAssignment_1_1_1_1; }

		//JvmArgumentTypeReference
		public RuleCall getTypeArgumentsJvmArgumentTypeReferenceParserRuleCall_1_1_1_1_0() { return cTypeArgumentsJvmArgumentTypeReferenceParserRuleCall_1_1_1_1_0; }

		//("," typeArguments+=JvmArgumentTypeReference)*
		public Group getGroup_1_1_1_2() { return cGroup_1_1_1_2; }

		//","
		public Keyword getCommaKeyword_1_1_1_2_0() { return cCommaKeyword_1_1_1_2_0; }

		//typeArguments+=JvmArgumentTypeReference
		public Assignment getTypeArgumentsAssignment_1_1_1_2_1() { return cTypeArgumentsAssignment_1_1_1_2_1; }

		//JvmArgumentTypeReference
		public RuleCall getTypeArgumentsJvmArgumentTypeReferenceParserRuleCall_1_1_1_2_1_0() { return cTypeArgumentsJvmArgumentTypeReferenceParserRuleCall_1_1_1_2_1_0; }

		//">"
		public Keyword getGreaterThanSignKeyword_1_1_1_3() { return cGreaterThanSignKeyword_1_1_1_3; }

		//feature=IdOrSuper
		public Assignment getFeatureAssignment_1_1_2() { return cFeatureAssignment_1_1_2; }

		//IdOrSuper
		public RuleCall getFeatureIdOrSuperParserRuleCall_1_1_2_0() { return cFeatureIdOrSuperParserRuleCall_1_1_2_0; }

		//(=> explicitOperationCall?="(" (memberCallArguments+=ShortClosure | memberCallArguments+=Expression (","
		//memberCallArguments+=Expression)*)? ")")?
		public Group getGroup_1_1_3() { return cGroup_1_1_3; }

		//=> explicitOperationCall?="("
		public Assignment getExplicitOperationCallAssignment_1_1_3_0() { return cExplicitOperationCallAssignment_1_1_3_0; }

		//"("
		public Keyword getExplicitOperationCallLeftParenthesisKeyword_1_1_3_0_0() { return cExplicitOperationCallLeftParenthesisKeyword_1_1_3_0_0; }

		//(memberCallArguments+=ShortClosure | memberCallArguments+=Expression ("," memberCallArguments+=Expression)*)?
		public Alternatives getAlternatives_1_1_3_1() { return cAlternatives_1_1_3_1; }

		//memberCallArguments+=ShortClosure
		public Assignment getMemberCallArgumentsAssignment_1_1_3_1_0() { return cMemberCallArgumentsAssignment_1_1_3_1_0; }

		//ShortClosure
		public RuleCall getMemberCallArgumentsShortClosureParserRuleCall_1_1_3_1_0_0() { return cMemberCallArgumentsShortClosureParserRuleCall_1_1_3_1_0_0; }

		//memberCallArguments+=Expression ("," memberCallArguments+=Expression)*
		public Group getGroup_1_1_3_1_1() { return cGroup_1_1_3_1_1; }

		//memberCallArguments+=Expression
		public Assignment getMemberCallArgumentsAssignment_1_1_3_1_1_0() { return cMemberCallArgumentsAssignment_1_1_3_1_1_0; }

		//Expression
		public RuleCall getMemberCallArgumentsExpressionParserRuleCall_1_1_3_1_1_0_0() { return cMemberCallArgumentsExpressionParserRuleCall_1_1_3_1_1_0_0; }

		//("," memberCallArguments+=Expression)*
		public Group getGroup_1_1_3_1_1_1() { return cGroup_1_1_3_1_1_1; }

		//","
		public Keyword getCommaKeyword_1_1_3_1_1_1_0() { return cCommaKeyword_1_1_3_1_1_1_0; }

		//memberCallArguments+=Expression
		public Assignment getMemberCallArgumentsAssignment_1_1_3_1_1_1_1() { return cMemberCallArgumentsAssignment_1_1_3_1_1_1_1; }

		//Expression
		public RuleCall getMemberCallArgumentsExpressionParserRuleCall_1_1_3_1_1_1_1_0() { return cMemberCallArgumentsExpressionParserRuleCall_1_1_3_1_1_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_1_1_3_2() { return cRightParenthesisKeyword_1_1_3_2; }

		//memberCallArguments+=Closure?
		public Assignment getMemberCallArgumentsAssignment_1_1_4() { return cMemberCallArgumentsAssignment_1_1_4; }

		//Closure
		public RuleCall getMemberCallArgumentsClosureParserRuleCall_1_1_4_0() { return cMemberCallArgumentsClosureParserRuleCall_1_1_4_0; }
	}

	public class PrimaryExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PrimaryExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cConstructorCallParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cBlockExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cSwitchExpressionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cSynchronizedExpressionParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cFeatureCallParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cLiteralParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cIfExpressionParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cForLoopExpressionParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cBasicForLoopExpressionParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cWhileExpressionParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		private final RuleCall cDoWhileExpressionParserRuleCall_10 = (RuleCall)cAlternatives.eContents().get(10);
		private final RuleCall cThrowExpressionParserRuleCall_11 = (RuleCall)cAlternatives.eContents().get(11);
		private final RuleCall cReturnExpressionParserRuleCall_12 = (RuleCall)cAlternatives.eContents().get(12);
		private final RuleCall cTryCatchFinallyExpressionParserRuleCall_13 = (RuleCall)cAlternatives.eContents().get(13);
		private final RuleCall cParenthesisExpressionParserRuleCall_14 = (RuleCall)cAlternatives.eContents().get(14);
		private final RuleCall cJMLOldExpressionParserRuleCall_15 = (RuleCall)cAlternatives.eContents().get(15);
		private final RuleCall cJMLFreshExpressionParserRuleCall_16 = (RuleCall)cAlternatives.eContents().get(16);
		private final RuleCall cJMLResultExpressionParserRuleCall_17 = (RuleCall)cAlternatives.eContents().get(17);
		
		//PrimaryExpression returns Expression:
		//	ConstructorCall | BlockExpression | SwitchExpression | SynchronizedExpression | FeatureCall | Literal | IfExpression
		//	| ForLoopExpression | BasicForLoopExpression | WhileExpression | DoWhileExpression | ThrowExpression |
		//	ReturnExpression | TryCatchFinallyExpression | ParenthesisExpression | JMLOldExpression | JMLFreshExpression |
		//	JMLResultExpression;
		public ParserRule getRule() { return rule; }

		//ConstructorCall | BlockExpression | SwitchExpression | SynchronizedExpression | FeatureCall | Literal | IfExpression |
		//ForLoopExpression | BasicForLoopExpression | WhileExpression | DoWhileExpression | ThrowExpression | ReturnExpression
		//| TryCatchFinallyExpression | ParenthesisExpression | JMLOldExpression | JMLFreshExpression | JMLResultExpression
		public Alternatives getAlternatives() { return cAlternatives; }

		//ConstructorCall
		public RuleCall getConstructorCallParserRuleCall_0() { return cConstructorCallParserRuleCall_0; }

		//BlockExpression
		public RuleCall getBlockExpressionParserRuleCall_1() { return cBlockExpressionParserRuleCall_1; }

		//SwitchExpression
		public RuleCall getSwitchExpressionParserRuleCall_2() { return cSwitchExpressionParserRuleCall_2; }

		//SynchronizedExpression
		public RuleCall getSynchronizedExpressionParserRuleCall_3() { return cSynchronizedExpressionParserRuleCall_3; }

		//FeatureCall
		public RuleCall getFeatureCallParserRuleCall_4() { return cFeatureCallParserRuleCall_4; }

		//Literal
		public RuleCall getLiteralParserRuleCall_5() { return cLiteralParserRuleCall_5; }

		//IfExpression
		public RuleCall getIfExpressionParserRuleCall_6() { return cIfExpressionParserRuleCall_6; }

		//ForLoopExpression
		public RuleCall getForLoopExpressionParserRuleCall_7() { return cForLoopExpressionParserRuleCall_7; }

		//BasicForLoopExpression
		public RuleCall getBasicForLoopExpressionParserRuleCall_8() { return cBasicForLoopExpressionParserRuleCall_8; }

		//WhileExpression
		public RuleCall getWhileExpressionParserRuleCall_9() { return cWhileExpressionParserRuleCall_9; }

		//DoWhileExpression
		public RuleCall getDoWhileExpressionParserRuleCall_10() { return cDoWhileExpressionParserRuleCall_10; }

		//ThrowExpression
		public RuleCall getThrowExpressionParserRuleCall_11() { return cThrowExpressionParserRuleCall_11; }

		//ReturnExpression
		public RuleCall getReturnExpressionParserRuleCall_12() { return cReturnExpressionParserRuleCall_12; }

		//TryCatchFinallyExpression
		public RuleCall getTryCatchFinallyExpressionParserRuleCall_13() { return cTryCatchFinallyExpressionParserRuleCall_13; }

		//ParenthesisExpression
		public RuleCall getParenthesisExpressionParserRuleCall_14() { return cParenthesisExpressionParserRuleCall_14; }

		//JMLOldExpression
		public RuleCall getJMLOldExpressionParserRuleCall_15() { return cJMLOldExpressionParserRuleCall_15; }

		//JMLFreshExpression
		public RuleCall getJMLFreshExpressionParserRuleCall_16() { return cJMLFreshExpressionParserRuleCall_16; }

		//JMLResultExpression
		public RuleCall getJMLResultExpressionParserRuleCall_17() { return cJMLResultExpressionParserRuleCall_17; }
	}

	public class ParenthesisExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ParenthesisExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cExprAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cExprParenthesizedExpressionParserRuleCall_1_0_0 = (RuleCall)cExprAssignment_1_0.eContents().get(0);
		private final Assignment cExprAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cExprJMLForAllExpressionParserRuleCall_1_1_0 = (RuleCall)cExprAssignment_1_1.eContents().get(0);
		
		//ParenthesisExpression:
		//	"(" (expr=ParenthesizedExpression | expr=JMLForAllExpression);
		public ParserRule getRule() { return rule; }

		//"(" (expr=ParenthesizedExpression | expr=JMLForAllExpression)
		public Group getGroup() { return cGroup; }

		//"("
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }

		//expr=ParenthesizedExpression | expr=JMLForAllExpression
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//expr=ParenthesizedExpression
		public Assignment getExprAssignment_1_0() { return cExprAssignment_1_0; }

		//ParenthesizedExpression
		public RuleCall getExprParenthesizedExpressionParserRuleCall_1_0_0() { return cExprParenthesizedExpressionParserRuleCall_1_0_0; }

		//expr=JMLForAllExpression
		public Assignment getExprAssignment_1_1() { return cExprAssignment_1_1; }

		//JMLForAllExpression
		public RuleCall getExprJMLForAllExpressionParserRuleCall_1_1_0() { return cExprJMLForAllExpressionParserRuleCall_1_1_0; }
	}

	public class JMLOldExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "JMLOldExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cJMLOldExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cOldKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExprAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExprParenthesisExpressionParserRuleCall_2_0 = (RuleCall)cExprAssignment_2.eContents().get(0);
		
		//JMLOldExpression returns Expression:
		//	{JMLOldExpression} "\\old" expr=ParenthesisExpression;
		public ParserRule getRule() { return rule; }

		//{JMLOldExpression} "\\old" expr=ParenthesisExpression
		public Group getGroup() { return cGroup; }

		//{JMLOldExpression}
		public Action getJMLOldExpressionAction_0() { return cJMLOldExpressionAction_0; }

		//"\\old"
		public Keyword getOldKeyword_1() { return cOldKeyword_1; }

		//expr=ParenthesisExpression
		public Assignment getExprAssignment_2() { return cExprAssignment_2; }

		//ParenthesisExpression
		public RuleCall getExprParenthesisExpressionParserRuleCall_2_0() { return cExprParenthesisExpressionParserRuleCall_2_0; }
	}

	public class JMLFreshExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "JMLFreshExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cJMLFreshExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cFreshKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExprAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExprParenthesisExpressionParserRuleCall_2_0 = (RuleCall)cExprAssignment_2.eContents().get(0);
		
		//JMLFreshExpression returns Expression:
		//	{JMLFreshExpression} "\\fresh" expr=ParenthesisExpression;
		public ParserRule getRule() { return rule; }

		//{JMLFreshExpression} "\\fresh" expr=ParenthesisExpression
		public Group getGroup() { return cGroup; }

		//{JMLFreshExpression}
		public Action getJMLFreshExpressionAction_0() { return cJMLFreshExpressionAction_0; }

		//"\\fresh"
		public Keyword getFreshKeyword_1() { return cFreshKeyword_1; }

		//expr=ParenthesisExpression
		public Assignment getExprAssignment_2() { return cExprAssignment_2; }

		//ParenthesisExpression
		public RuleCall getExprParenthesisExpressionParserRuleCall_2_0() { return cExprParenthesisExpressionParserRuleCall_2_0; }
	}

	public class JMLResultExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "JMLResultExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cJMLResultExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cResultKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//JMLResultExpression returns Expression:
		//	{JMLResultExpression} "\\result";
		public ParserRule getRule() { return rule; }

		//{JMLResultExpression} "\\result"
		public Group getGroup() { return cGroup; }

		//{JMLResultExpression}
		public Action getJMLResultExpressionAction_0() { return cJMLResultExpressionAction_0; }

		//"\\result"
		public Keyword getResultKeyword_1() { return cResultKeyword_1; }
	}

	public class JMLForAllExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "JMLForAllExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cJMLForAllExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cForallKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cInitExpressionsAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cInitExpressionsVarDeclParserRuleCall_2_0_0 = (RuleCall)cInitExpressionsAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cInitExpressionsAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cInitExpressionsVarDeclParserRuleCall_2_1_1_0 = (RuleCall)cInitExpressionsAssignment_2_1_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cExpressionAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cExpressionExpressionParserRuleCall_4_0 = (RuleCall)cExpressionAssignment_4.eContents().get(0);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Assignment cUpdateExpressionsAssignment_6_0 = (Assignment)cGroup_6.eContents().get(0);
		private final RuleCall cUpdateExpressionsExpressionParserRuleCall_6_0_0 = (RuleCall)cUpdateExpressionsAssignment_6_0.eContents().get(0);
		private final Group cGroup_6_1 = (Group)cGroup_6.eContents().get(1);
		private final Keyword cCommaKeyword_6_1_0 = (Keyword)cGroup_6_1.eContents().get(0);
		private final Assignment cUpdateExpressionsAssignment_6_1_1 = (Assignment)cGroup_6_1.eContents().get(1);
		private final RuleCall cUpdateExpressionsExpressionParserRuleCall_6_1_1_0 = (RuleCall)cUpdateExpressionsAssignment_6_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//JMLForAllExpression returns Expression:
		//	{JMLForAllExpression} "\\forall" (initExpressions+=VarDecl ("," initExpressions+=VarDecl)*)? ";"
		//	expression=Expression? ";" (updateExpressions+=Expression ("," updateExpressions+=Expression)*)? ")";
		public ParserRule getRule() { return rule; }

		//{JMLForAllExpression} "\\forall" (initExpressions+=VarDecl ("," initExpressions+=VarDecl)*)? ";" expression=Expression?
		//";" (updateExpressions+=Expression ("," updateExpressions+=Expression)*)? ")"
		public Group getGroup() { return cGroup; }

		//{JMLForAllExpression}
		public Action getJMLForAllExpressionAction_0() { return cJMLForAllExpressionAction_0; }

		//"\\forall"
		public Keyword getForallKeyword_1() { return cForallKeyword_1; }

		//(initExpressions+=VarDecl ("," initExpressions+=VarDecl)*)?
		public Group getGroup_2() { return cGroup_2; }

		//initExpressions+=VarDecl
		public Assignment getInitExpressionsAssignment_2_0() { return cInitExpressionsAssignment_2_0; }

		//VarDecl
		public RuleCall getInitExpressionsVarDeclParserRuleCall_2_0_0() { return cInitExpressionsVarDeclParserRuleCall_2_0_0; }

		//("," initExpressions+=VarDecl)*
		public Group getGroup_2_1() { return cGroup_2_1; }

		//","
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }

		//initExpressions+=VarDecl
		public Assignment getInitExpressionsAssignment_2_1_1() { return cInitExpressionsAssignment_2_1_1; }

		//VarDecl
		public RuleCall getInitExpressionsVarDeclParserRuleCall_2_1_1_0() { return cInitExpressionsVarDeclParserRuleCall_2_1_1_0; }

		//";"
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }

		//expression=Expression?
		public Assignment getExpressionAssignment_4() { return cExpressionAssignment_4; }

		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_4_0() { return cExpressionExpressionParserRuleCall_4_0; }

		//";"
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }

		//(updateExpressions+=Expression ("," updateExpressions+=Expression)*)?
		public Group getGroup_6() { return cGroup_6; }

		//updateExpressions+=Expression
		public Assignment getUpdateExpressionsAssignment_6_0() { return cUpdateExpressionsAssignment_6_0; }

		//Expression
		public RuleCall getUpdateExpressionsExpressionParserRuleCall_6_0_0() { return cUpdateExpressionsExpressionParserRuleCall_6_0_0; }

		//("," updateExpressions+=Expression)*
		public Group getGroup_6_1() { return cGroup_6_1; }

		//","
		public Keyword getCommaKeyword_6_1_0() { return cCommaKeyword_6_1_0; }

		//updateExpressions+=Expression
		public Assignment getUpdateExpressionsAssignment_6_1_1() { return cUpdateExpressionsAssignment_6_1_1; }

		//Expression
		public RuleCall getUpdateExpressionsExpressionParserRuleCall_6_1_1_0() { return cUpdateExpressionsExpressionParserRuleCall_6_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_7() { return cRightParenthesisKeyword_7; }
	}

	public class VarDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VarDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Group cGroup_0_0 = (Group)cAlternatives_0.eContents().get(0);
		private final Group cGroup_0_0_0 = (Group)cGroup_0_0.eContents().get(0);
		private final Assignment cTypeAssignment_0_0_0_0 = (Assignment)cGroup_0_0_0.eContents().get(0);
		private final RuleCall cTypeTypeParserRuleCall_0_0_0_0_0 = (RuleCall)cTypeAssignment_0_0_0_0.eContents().get(0);
		private final Assignment cNameAssignment_0_0_0_1 = (Assignment)cGroup_0_0_0.eContents().get(1);
		private final RuleCall cNameValidIDParserRuleCall_0_0_0_1_0 = (RuleCall)cNameAssignment_0_0_0_1.eContents().get(0);
		private final Assignment cNameAssignment_0_1 = (Assignment)cAlternatives_0.eContents().get(1);
		private final RuleCall cNameValidIDParserRuleCall_0_1_0 = (RuleCall)cNameAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cEqualsSignKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightExpressionParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//VarDecl returns Expression:
		//	(=> (type=Type name=ValidID) | name=ValidID) ("=" right=Expression)?;
		public ParserRule getRule() { return rule; }

		//(=> (type=Type name=ValidID) | name=ValidID) ("=" right=Expression)?
		public Group getGroup() { return cGroup; }

		//=> (type=Type name=ValidID) | name=ValidID
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//=> (type=Type name=ValidID)
		public Group getGroup_0_0() { return cGroup_0_0; }

		//type=Type name=ValidID
		public Group getGroup_0_0_0() { return cGroup_0_0_0; }

		//type=Type
		public Assignment getTypeAssignment_0_0_0_0() { return cTypeAssignment_0_0_0_0; }

		//Type
		public RuleCall getTypeTypeParserRuleCall_0_0_0_0_0() { return cTypeTypeParserRuleCall_0_0_0_0_0; }

		//name=ValidID
		public Assignment getNameAssignment_0_0_0_1() { return cNameAssignment_0_0_0_1; }

		//ValidID
		public RuleCall getNameValidIDParserRuleCall_0_0_0_1_0() { return cNameValidIDParserRuleCall_0_0_0_1_0; }

		//name=ValidID
		public Assignment getNameAssignment_0_1() { return cNameAssignment_0_1; }

		//ValidID
		public RuleCall getNameValidIDParserRuleCall_0_1_0() { return cNameValidIDParserRuleCall_0_1_0; }

		//("=" right=Expression)?
		public Group getGroup_1() { return cGroup_1; }

		//"="
		public Keyword getEqualsSignKeyword_1_0() { return cEqualsSignKeyword_1_0; }

		//right=Expression
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }

		//Expression
		public RuleCall getRightExpressionParserRuleCall_1_1_0() { return cRightExpressionParserRuleCall_1_1_0; }
	}

	public class LiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Literal");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cCollectionLiteralParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cClosureParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cBooleanLiteralParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cNumberLiteralParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cNullLiteralParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cStringLiteralParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cCharLiteralParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		
		////TypeLiteral
		//Literal returns Expression:
		//	CollectionLiteral | Closure | BooleanLiteral | NumberLiteral | NullLiteral | StringLiteral | CharLiteral;
		public ParserRule getRule() { return rule; }

		//CollectionLiteral | Closure | BooleanLiteral | NumberLiteral | NullLiteral | StringLiteral | CharLiteral
		public Alternatives getAlternatives() { return cAlternatives; }

		//CollectionLiteral
		public RuleCall getCollectionLiteralParserRuleCall_0() { return cCollectionLiteralParserRuleCall_0; }

		//Closure
		public RuleCall getClosureParserRuleCall_1() { return cClosureParserRuleCall_1; }

		//BooleanLiteral
		public RuleCall getBooleanLiteralParserRuleCall_2() { return cBooleanLiteralParserRuleCall_2; }

		//NumberLiteral
		public RuleCall getNumberLiteralParserRuleCall_3() { return cNumberLiteralParserRuleCall_3; }

		//NullLiteral
		public RuleCall getNullLiteralParserRuleCall_4() { return cNullLiteralParserRuleCall_4; }

		//StringLiteral
		public RuleCall getStringLiteralParserRuleCall_5() { return cStringLiteralParserRuleCall_5; }

		//CharLiteral
		public RuleCall getCharLiteralParserRuleCall_6() { return cCharLiteralParserRuleCall_6; }
	}

	public class CollectionLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CollectionLiteral");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSetLiteralParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cListLiteralParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//CollectionLiteral:
		//	SetLiteral | ListLiteral;
		public ParserRule getRule() { return rule; }

		//SetLiteral | ListLiteral
		public Alternatives getAlternatives() { return cAlternatives; }

		//SetLiteral
		public RuleCall getSetLiteralParserRuleCall_0() { return cSetLiteralParserRuleCall_0; }

		//ListLiteral
		public RuleCall getListLiteralParserRuleCall_1() { return cListLiteralParserRuleCall_1; }
	}

	public class SetLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SetLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSetLiteralAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cNumberSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cElementsAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cElementsExpressionParserRuleCall_3_0_0 = (RuleCall)cElementsAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cElementsAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cElementsExpressionParserRuleCall_3_1_1_0 = (RuleCall)cElementsAssignment_3_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//SetLiteral:
		//	{SetLiteral} "#" "{" (elements+=Expression ("," elements+=Expression)*)? "}";
		public ParserRule getRule() { return rule; }

		//{SetLiteral} "#" "{" (elements+=Expression ("," elements+=Expression)*)? "}"
		public Group getGroup() { return cGroup; }

		//{SetLiteral}
		public Action getSetLiteralAction_0() { return cSetLiteralAction_0; }

		//"#"
		public Keyword getNumberSignKeyword_1() { return cNumberSignKeyword_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//(elements+=Expression ("," elements+=Expression)*)?
		public Group getGroup_3() { return cGroup_3; }

		//elements+=Expression
		public Assignment getElementsAssignment_3_0() { return cElementsAssignment_3_0; }

		//Expression
		public RuleCall getElementsExpressionParserRuleCall_3_0_0() { return cElementsExpressionParserRuleCall_3_0_0; }

		//("," elements+=Expression)*
		public Group getGroup_3_1() { return cGroup_3_1; }

		//","
		public Keyword getCommaKeyword_3_1_0() { return cCommaKeyword_3_1_0; }

		//elements+=Expression
		public Assignment getElementsAssignment_3_1_1() { return cElementsAssignment_3_1_1; }

		//Expression
		public RuleCall getElementsExpressionParserRuleCall_3_1_1_0() { return cElementsExpressionParserRuleCall_3_1_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class ListLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ListLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cListLiteralAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cNumberSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cElementsAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cElementsExpressionParserRuleCall_3_0_0 = (RuleCall)cElementsAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cElementsAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cElementsExpressionParserRuleCall_3_1_1_0 = (RuleCall)cElementsAssignment_3_1_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//ListLiteral:
		//	{ListLiteral} "#" "[" (elements+=Expression ("," elements+=Expression)*)? "]";
		public ParserRule getRule() { return rule; }

		//{ListLiteral} "#" "[" (elements+=Expression ("," elements+=Expression)*)? "]"
		public Group getGroup() { return cGroup; }

		//{ListLiteral}
		public Action getListLiteralAction_0() { return cListLiteralAction_0; }

		//"#"
		public Keyword getNumberSignKeyword_1() { return cNumberSignKeyword_1; }

		//"["
		public Keyword getLeftSquareBracketKeyword_2() { return cLeftSquareBracketKeyword_2; }

		//(elements+=Expression ("," elements+=Expression)*)?
		public Group getGroup_3() { return cGroup_3; }

		//elements+=Expression
		public Assignment getElementsAssignment_3_0() { return cElementsAssignment_3_0; }

		//Expression
		public RuleCall getElementsExpressionParserRuleCall_3_0_0() { return cElementsExpressionParserRuleCall_3_0_0; }

		//("," elements+=Expression)*
		public Group getGroup_3_1() { return cGroup_3_1; }

		//","
		public Keyword getCommaKeyword_3_1_0() { return cCommaKeyword_3_1_0; }

		//elements+=Expression
		public Assignment getElementsAssignment_3_1_1() { return cElementsAssignment_3_1_1; }

		//Expression
		public RuleCall getElementsExpressionParserRuleCall_3_1_1_0() { return cElementsExpressionParserRuleCall_3_1_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_4() { return cRightSquareBracketKeyword_4; }
	}

	public class ClosureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Closure");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Group cGroup_0_0 = (Group)cGroup_0.eContents().get(0);
		private final Action cClosureAction_0_0_0 = (Action)cGroup_0_0.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_0_0_1 = (Keyword)cGroup_0_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Assignment cDeclaredFormalParametersAssignment_1_0_0_0 = (Assignment)cGroup_1_0_0.eContents().get(0);
		private final RuleCall cDeclaredFormalParametersJvmFormalParameterParserRuleCall_1_0_0_0_0 = (RuleCall)cDeclaredFormalParametersAssignment_1_0_0_0.eContents().get(0);
		private final Group cGroup_1_0_0_1 = (Group)cGroup_1_0_0.eContents().get(1);
		private final Keyword cCommaKeyword_1_0_0_1_0 = (Keyword)cGroup_1_0_0_1.eContents().get(0);
		private final Assignment cDeclaredFormalParametersAssignment_1_0_0_1_1 = (Assignment)cGroup_1_0_0_1.eContents().get(1);
		private final RuleCall cDeclaredFormalParametersJvmFormalParameterParserRuleCall_1_0_0_1_1_0 = (RuleCall)cDeclaredFormalParametersAssignment_1_0_0_1_1.eContents().get(0);
		private final Assignment cExplicitSyntaxAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final Keyword cExplicitSyntaxVerticalLineKeyword_1_0_1_0 = (Keyword)cExplicitSyntaxAssignment_1_0_1.eContents().get(0);
		private final Assignment cExpressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpressionExpressionInClosureParserRuleCall_2_0 = (RuleCall)cExpressionAssignment_2.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Closure returns Expression:
		//	=> ({Closure} "[") => ((declaredFormalParameters+=JvmFormalParameter (","
		//	declaredFormalParameters+=JvmFormalParameter)*)? explicitSyntax?="|")? expression=ExpressionInClosure "]";
		public ParserRule getRule() { return rule; }

		//=> ({Closure} "[") => ((declaredFormalParameters+=JvmFormalParameter (","
		//declaredFormalParameters+=JvmFormalParameter)*)? explicitSyntax?="|")? expression=ExpressionInClosure "]"
		public Group getGroup() { return cGroup; }

		//=> ({Closure} "[")
		public Group getGroup_0() { return cGroup_0; }

		//{Closure} "["
		public Group getGroup_0_0() { return cGroup_0_0; }

		//{Closure}
		public Action getClosureAction_0_0_0() { return cClosureAction_0_0_0; }

		//"["
		public Keyword getLeftSquareBracketKeyword_0_0_1() { return cLeftSquareBracketKeyword_0_0_1; }

		//=> ((declaredFormalParameters+=JvmFormalParameter ("," declaredFormalParameters+=JvmFormalParameter)*)?
		//explicitSyntax?="|")?
		public Group getGroup_1() { return cGroup_1; }

		//(declaredFormalParameters+=JvmFormalParameter ("," declaredFormalParameters+=JvmFormalParameter)*)? explicitSyntax?="|"
		public Group getGroup_1_0() { return cGroup_1_0; }

		//(declaredFormalParameters+=JvmFormalParameter ("," declaredFormalParameters+=JvmFormalParameter)*)?
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//declaredFormalParameters+=JvmFormalParameter
		public Assignment getDeclaredFormalParametersAssignment_1_0_0_0() { return cDeclaredFormalParametersAssignment_1_0_0_0; }

		//JvmFormalParameter
		public RuleCall getDeclaredFormalParametersJvmFormalParameterParserRuleCall_1_0_0_0_0() { return cDeclaredFormalParametersJvmFormalParameterParserRuleCall_1_0_0_0_0; }

		//("," declaredFormalParameters+=JvmFormalParameter)*
		public Group getGroup_1_0_0_1() { return cGroup_1_0_0_1; }

		//","
		public Keyword getCommaKeyword_1_0_0_1_0() { return cCommaKeyword_1_0_0_1_0; }

		//declaredFormalParameters+=JvmFormalParameter
		public Assignment getDeclaredFormalParametersAssignment_1_0_0_1_1() { return cDeclaredFormalParametersAssignment_1_0_0_1_1; }

		//JvmFormalParameter
		public RuleCall getDeclaredFormalParametersJvmFormalParameterParserRuleCall_1_0_0_1_1_0() { return cDeclaredFormalParametersJvmFormalParameterParserRuleCall_1_0_0_1_1_0; }

		//explicitSyntax?="|"
		public Assignment getExplicitSyntaxAssignment_1_0_1() { return cExplicitSyntaxAssignment_1_0_1; }

		//"|"
		public Keyword getExplicitSyntaxVerticalLineKeyword_1_0_1_0() { return cExplicitSyntaxVerticalLineKeyword_1_0_1_0; }

		//expression=ExpressionInClosure
		public Assignment getExpressionAssignment_2() { return cExpressionAssignment_2; }

		//ExpressionInClosure
		public RuleCall getExpressionExpressionInClosureParserRuleCall_2_0() { return cExpressionExpressionInClosureParserRuleCall_2_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }
	}

	public class ExpressionInClosureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExpressionInClosure");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBlockExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cExpressionsAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cExpressionsExpressionOrVarDeclarationParserRuleCall_1_0_0 = (RuleCall)cExpressionsAssignment_1_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		
		//ExpressionInClosure returns Expression:
		//	{BlockExpression} (expressions+=ExpressionOrVarDeclaration ";"?)*;
		public ParserRule getRule() { return rule; }

		//{BlockExpression} (expressions+=ExpressionOrVarDeclaration ";"?)*
		public Group getGroup() { return cGroup; }

		//{BlockExpression}
		public Action getBlockExpressionAction_0() { return cBlockExpressionAction_0; }

		//(expressions+=ExpressionOrVarDeclaration ";"?)*
		public Group getGroup_1() { return cGroup_1; }

		//expressions+=ExpressionOrVarDeclaration
		public Assignment getExpressionsAssignment_1_0() { return cExpressionsAssignment_1_0; }

		//ExpressionOrVarDeclaration
		public RuleCall getExpressionsExpressionOrVarDeclarationParserRuleCall_1_0_0() { return cExpressionsExpressionOrVarDeclarationParserRuleCall_1_0_0; }

		//";"?
		public Keyword getSemicolonKeyword_1_1() { return cSemicolonKeyword_1_1; }
	}

	public class ShortClosureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ShortClosure");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Group cGroup_0_0 = (Group)cGroup_0.eContents().get(0);
		private final Action cClosureAction_0_0_0 = (Action)cGroup_0_0.eContents().get(0);
		private final Group cGroup_0_0_1 = (Group)cGroup_0_0.eContents().get(1);
		private final Assignment cDeclaredFormalParametersAssignment_0_0_1_0 = (Assignment)cGroup_0_0_1.eContents().get(0);
		private final RuleCall cDeclaredFormalParametersJvmFormalParameterParserRuleCall_0_0_1_0_0 = (RuleCall)cDeclaredFormalParametersAssignment_0_0_1_0.eContents().get(0);
		private final Group cGroup_0_0_1_1 = (Group)cGroup_0_0_1.eContents().get(1);
		private final Keyword cCommaKeyword_0_0_1_1_0 = (Keyword)cGroup_0_0_1_1.eContents().get(0);
		private final Assignment cDeclaredFormalParametersAssignment_0_0_1_1_1 = (Assignment)cGroup_0_0_1_1.eContents().get(1);
		private final RuleCall cDeclaredFormalParametersJvmFormalParameterParserRuleCall_0_0_1_1_1_0 = (RuleCall)cDeclaredFormalParametersAssignment_0_0_1_1_1.eContents().get(0);
		private final Assignment cExplicitSyntaxAssignment_0_0_2 = (Assignment)cGroup_0_0.eContents().get(2);
		private final Keyword cExplicitSyntaxVerticalLineKeyword_0_0_2_0 = (Keyword)cExplicitSyntaxAssignment_0_0_2.eContents().get(0);
		private final Assignment cExpressionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_1_0 = (RuleCall)cExpressionAssignment_1.eContents().get(0);
		
		//ShortClosure returns Expression:
		//	=> ({Closure} (declaredFormalParameters+=JvmFormalParameter ("," declaredFormalParameters+=JvmFormalParameter)*)?
		//	explicitSyntax?="|") expression=Expression;
		public ParserRule getRule() { return rule; }

		//=> ({Closure} (declaredFormalParameters+=JvmFormalParameter ("," declaredFormalParameters+=JvmFormalParameter)*)?
		//explicitSyntax?="|") expression=Expression
		public Group getGroup() { return cGroup; }

		//=> ({Closure} (declaredFormalParameters+=JvmFormalParameter ("," declaredFormalParameters+=JvmFormalParameter)*)?
		//explicitSyntax?="|")
		public Group getGroup_0() { return cGroup_0; }

		//{Closure} (declaredFormalParameters+=JvmFormalParameter ("," declaredFormalParameters+=JvmFormalParameter)*)?
		//explicitSyntax?="|"
		public Group getGroup_0_0() { return cGroup_0_0; }

		//{Closure}
		public Action getClosureAction_0_0_0() { return cClosureAction_0_0_0; }

		//(declaredFormalParameters+=JvmFormalParameter ("," declaredFormalParameters+=JvmFormalParameter)*)?
		public Group getGroup_0_0_1() { return cGroup_0_0_1; }

		//declaredFormalParameters+=JvmFormalParameter
		public Assignment getDeclaredFormalParametersAssignment_0_0_1_0() { return cDeclaredFormalParametersAssignment_0_0_1_0; }

		//JvmFormalParameter
		public RuleCall getDeclaredFormalParametersJvmFormalParameterParserRuleCall_0_0_1_0_0() { return cDeclaredFormalParametersJvmFormalParameterParserRuleCall_0_0_1_0_0; }

		//("," declaredFormalParameters+=JvmFormalParameter)*
		public Group getGroup_0_0_1_1() { return cGroup_0_0_1_1; }

		//","
		public Keyword getCommaKeyword_0_0_1_1_0() { return cCommaKeyword_0_0_1_1_0; }

		//declaredFormalParameters+=JvmFormalParameter
		public Assignment getDeclaredFormalParametersAssignment_0_0_1_1_1() { return cDeclaredFormalParametersAssignment_0_0_1_1_1; }

		//JvmFormalParameter
		public RuleCall getDeclaredFormalParametersJvmFormalParameterParserRuleCall_0_0_1_1_1_0() { return cDeclaredFormalParametersJvmFormalParameterParserRuleCall_0_0_1_1_1_0; }

		//explicitSyntax?="|"
		public Assignment getExplicitSyntaxAssignment_0_0_2() { return cExplicitSyntaxAssignment_0_0_2; }

		//"|"
		public Keyword getExplicitSyntaxVerticalLineKeyword_0_0_2_0() { return cExplicitSyntaxVerticalLineKeyword_0_0_2_0; }

		//expression=Expression
		public Assignment getExpressionAssignment_1() { return cExpressionAssignment_1; }

		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_1_0() { return cExpressionExpressionParserRuleCall_1_0; }
	}

	public class ParenthesizedExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ParenthesizedExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		////castedExpr+=Expression?;
		//ParenthesizedExpression returns Expression: / *'(' this one is located in ParenthesisExpression * / Expression ")";
		public ParserRule getRule() { return rule; }

		/// *'(' this one is located in ParenthesisExpression * / Expression ")"
		public Group getGroup() { return cGroup; }

		/// *'(' this one is located in ParenthesisExpression * / Expression
		public RuleCall getExpressionParserRuleCall_0() { return cExpressionParserRuleCall_0; }

		//")"
		public Keyword getRightParenthesisKeyword_1() { return cRightParenthesisKeyword_1; }
	}

	public class IfExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IfExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cIfExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cIfKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cIfAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cIfExpressionParserRuleCall_3_0 = (RuleCall)cIfAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cThenAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cThenExpressionParserRuleCall_5_0 = (RuleCall)cThenAssignment_5.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cElseKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cElseAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cElseExpressionParserRuleCall_6_1_0 = (RuleCall)cElseAssignment_6_1.eContents().get(0);
		
		//IfExpression returns Expression:
		//	{IfExpression} "if" "(" if=Expression ")" then=Expression ("else" else=Expression)?;
		public ParserRule getRule() { return rule; }

		//{IfExpression} "if" "(" if=Expression ")" then=Expression ("else" else=Expression)?
		public Group getGroup() { return cGroup; }

		//{IfExpression}
		public Action getIfExpressionAction_0() { return cIfExpressionAction_0; }

		//"if"
		public Keyword getIfKeyword_1() { return cIfKeyword_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//if=Expression
		public Assignment getIfAssignment_3() { return cIfAssignment_3; }

		//Expression
		public RuleCall getIfExpressionParserRuleCall_3_0() { return cIfExpressionParserRuleCall_3_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }

		//then=Expression
		public Assignment getThenAssignment_5() { return cThenAssignment_5; }

		//Expression
		public RuleCall getThenExpressionParserRuleCall_5_0() { return cThenExpressionParserRuleCall_5_0; }

		//(=> "else" else=Expression)?
		public Group getGroup_6() { return cGroup_6; }

		//=> "else"
		public Keyword getElseKeyword_6_0() { return cElseKeyword_6_0; }

		//else=Expression
		public Assignment getElseAssignment_6_1() { return cElseAssignment_6_1; }

		//Expression
		public RuleCall getElseExpressionParserRuleCall_6_1_0() { return cElseExpressionParserRuleCall_6_1_0; }
	}

	public class SwitchExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SwitchExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSwitchExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cSwitchKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cAlternatives_2.eContents().get(0);
		private final Group cGroup_2_0_0 = (Group)cGroup_2_0.eContents().get(0);
		private final Group cGroup_2_0_0_0 = (Group)cGroup_2_0_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2_0_0_0_0 = (Keyword)cGroup_2_0_0_0.eContents().get(0);
		private final Assignment cDeclaredParamAssignment_2_0_0_0_1 = (Assignment)cGroup_2_0_0_0.eContents().get(1);
		private final RuleCall cDeclaredParamJvmFormalParameterParserRuleCall_2_0_0_0_1_0 = (RuleCall)cDeclaredParamAssignment_2_0_0_0_1.eContents().get(0);
		private final Keyword cColonKeyword_2_0_0_0_2 = (Keyword)cGroup_2_0_0_0.eContents().get(2);
		private final Assignment cSwitchAssignment_2_0_1 = (Assignment)cGroup_2_0.eContents().get(1);
		private final RuleCall cSwitchExpressionParserRuleCall_2_0_1_0 = (RuleCall)cSwitchAssignment_2_0_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_0_2 = (Keyword)cGroup_2_0.eContents().get(2);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final Group cGroup_2_1_0 = (Group)cGroup_2_1.eContents().get(0);
		private final Group cGroup_2_1_0_0 = (Group)cGroup_2_1_0.eContents().get(0);
		private final Assignment cDeclaredParamAssignment_2_1_0_0_0 = (Assignment)cGroup_2_1_0_0.eContents().get(0);
		private final RuleCall cDeclaredParamJvmFormalParameterParserRuleCall_2_1_0_0_0_0 = (RuleCall)cDeclaredParamAssignment_2_1_0_0_0.eContents().get(0);
		private final Keyword cColonKeyword_2_1_0_0_1 = (Keyword)cGroup_2_1_0_0.eContents().get(1);
		private final Assignment cSwitchAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cSwitchExpressionParserRuleCall_2_1_1_0 = (RuleCall)cSwitchAssignment_2_1_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cCasesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cCasesCasePartParserRuleCall_4_0 = (RuleCall)cCasesAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cDefaultKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Keyword cColonKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Assignment cDefaultAssignment_5_2 = (Assignment)cGroup_5.eContents().get(2);
		private final RuleCall cDefaultExpressionParserRuleCall_5_2_0 = (RuleCall)cDefaultAssignment_5_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//SwitchExpression returns Expression:
		//	{SwitchExpression} "switch" (=> ("(" declaredParam=JvmFormalParameter ":") switch=Expression ")" | =>
		//	(declaredParam=JvmFormalParameter ":")? switch=Expression) "{" cases+=CasePart* ("default" ":" default=Expression)?
		//	"}";
		public ParserRule getRule() { return rule; }

		//{SwitchExpression} "switch" (=> ("(" declaredParam=JvmFormalParameter ":") switch=Expression ")" | =>
		//(declaredParam=JvmFormalParameter ":")? switch=Expression) "{" cases+=CasePart* ("default" ":" default=Expression)?
		//"}"
		public Group getGroup() { return cGroup; }

		//{SwitchExpression}
		public Action getSwitchExpressionAction_0() { return cSwitchExpressionAction_0; }

		//"switch"
		public Keyword getSwitchKeyword_1() { return cSwitchKeyword_1; }

		//=> ("(" declaredParam=JvmFormalParameter ":") switch=Expression ")" | => (declaredParam=JvmFormalParameter ":")?
		//switch=Expression
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//=> ("(" declaredParam=JvmFormalParameter ":") switch=Expression ")"
		public Group getGroup_2_0() { return cGroup_2_0; }

		//=> ("(" declaredParam=JvmFormalParameter ":")
		public Group getGroup_2_0_0() { return cGroup_2_0_0; }

		//"(" declaredParam=JvmFormalParameter ":"
		public Group getGroup_2_0_0_0() { return cGroup_2_0_0_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_2_0_0_0_0() { return cLeftParenthesisKeyword_2_0_0_0_0; }

		//declaredParam=JvmFormalParameter
		public Assignment getDeclaredParamAssignment_2_0_0_0_1() { return cDeclaredParamAssignment_2_0_0_0_1; }

		//JvmFormalParameter
		public RuleCall getDeclaredParamJvmFormalParameterParserRuleCall_2_0_0_0_1_0() { return cDeclaredParamJvmFormalParameterParserRuleCall_2_0_0_0_1_0; }

		//":"
		public Keyword getColonKeyword_2_0_0_0_2() { return cColonKeyword_2_0_0_0_2; }

		//switch=Expression
		public Assignment getSwitchAssignment_2_0_1() { return cSwitchAssignment_2_0_1; }

		//Expression
		public RuleCall getSwitchExpressionParserRuleCall_2_0_1_0() { return cSwitchExpressionParserRuleCall_2_0_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_2_0_2() { return cRightParenthesisKeyword_2_0_2; }

		//=> (declaredParam=JvmFormalParameter ":")? switch=Expression
		public Group getGroup_2_1() { return cGroup_2_1; }

		//=> (declaredParam=JvmFormalParameter ":")?
		public Group getGroup_2_1_0() { return cGroup_2_1_0; }

		//declaredParam=JvmFormalParameter ":"
		public Group getGroup_2_1_0_0() { return cGroup_2_1_0_0; }

		//declaredParam=JvmFormalParameter
		public Assignment getDeclaredParamAssignment_2_1_0_0_0() { return cDeclaredParamAssignment_2_1_0_0_0; }

		//JvmFormalParameter
		public RuleCall getDeclaredParamJvmFormalParameterParserRuleCall_2_1_0_0_0_0() { return cDeclaredParamJvmFormalParameterParserRuleCall_2_1_0_0_0_0; }

		//":"
		public Keyword getColonKeyword_2_1_0_0_1() { return cColonKeyword_2_1_0_0_1; }

		//switch=Expression
		public Assignment getSwitchAssignment_2_1_1() { return cSwitchAssignment_2_1_1; }

		//Expression
		public RuleCall getSwitchExpressionParserRuleCall_2_1_1_0() { return cSwitchExpressionParserRuleCall_2_1_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//cases+=CasePart*
		public Assignment getCasesAssignment_4() { return cCasesAssignment_4; }

		//CasePart
		public RuleCall getCasesCasePartParserRuleCall_4_0() { return cCasesCasePartParserRuleCall_4_0; }

		//("default" ":" default=Expression)?
		public Group getGroup_5() { return cGroup_5; }

		//"default"
		public Keyword getDefaultKeyword_5_0() { return cDefaultKeyword_5_0; }

		//":"
		public Keyword getColonKeyword_5_1() { return cColonKeyword_5_1; }

		//default=Expression
		public Assignment getDefaultAssignment_5_2() { return cDefaultAssignment_5_2; }

		//Expression
		public RuleCall getDefaultExpressionParserRuleCall_5_2_0() { return cDefaultExpressionParserRuleCall_5_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}

	public class CasePartElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CasePart");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cCasePartAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cTypeGuardAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeGuardJvmTypeReferenceParserRuleCall_1_0 = (RuleCall)cTypeGuardAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCaseKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cCaseAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cCaseExpressionParserRuleCall_2_1_0 = (RuleCall)cCaseAssignment_2_1.eContents().get(0);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Group cGroup_3_0 = (Group)cAlternatives_3.eContents().get(0);
		private final Keyword cColonKeyword_3_0_0 = (Keyword)cGroup_3_0.eContents().get(0);
		private final Assignment cThenAssignment_3_0_1 = (Assignment)cGroup_3_0.eContents().get(1);
		private final RuleCall cThenExpressionParserRuleCall_3_0_1_0 = (RuleCall)cThenAssignment_3_0_1.eContents().get(0);
		private final Keyword cCommaKeyword_3_1 = (Keyword)cAlternatives_3.eContents().get(1);
		
		//CasePart:
		//	{CasePart} typeGuard=JvmTypeReference? ("case" case=Expression)? (":" then=Expression | ",");
		public ParserRule getRule() { return rule; }

		//{CasePart} typeGuard=JvmTypeReference? ("case" case=Expression)? (":" then=Expression | ",")
		public Group getGroup() { return cGroup; }

		//{CasePart}
		public Action getCasePartAction_0() { return cCasePartAction_0; }

		//typeGuard=JvmTypeReference?
		public Assignment getTypeGuardAssignment_1() { return cTypeGuardAssignment_1; }

		//JvmTypeReference
		public RuleCall getTypeGuardJvmTypeReferenceParserRuleCall_1_0() { return cTypeGuardJvmTypeReferenceParserRuleCall_1_0; }

		//("case" case=Expression)?
		public Group getGroup_2() { return cGroup_2; }

		//"case"
		public Keyword getCaseKeyword_2_0() { return cCaseKeyword_2_0; }

		//case=Expression
		public Assignment getCaseAssignment_2_1() { return cCaseAssignment_2_1; }

		//Expression
		public RuleCall getCaseExpressionParserRuleCall_2_1_0() { return cCaseExpressionParserRuleCall_2_1_0; }

		//":" then=Expression | ","
		public Alternatives getAlternatives_3() { return cAlternatives_3; }

		//":" then=Expression
		public Group getGroup_3_0() { return cGroup_3_0; }

		//":"
		public Keyword getColonKeyword_3_0_0() { return cColonKeyword_3_0_0; }

		//then=Expression
		public Assignment getThenAssignment_3_0_1() { return cThenAssignment_3_0_1; }

		//Expression
		public RuleCall getThenExpressionParserRuleCall_3_0_1_0() { return cThenExpressionParserRuleCall_3_0_1_0; }

		//","
		public Keyword getCommaKeyword_3_1() { return cCommaKeyword_3_1; }
	}

	public class ForLoopExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ForLoopExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Group cGroup_0_0 = (Group)cGroup_0.eContents().get(0);
		private final Action cForLoopExpressionAction_0_0_0 = (Action)cGroup_0_0.eContents().get(0);
		private final Keyword cForKeyword_0_0_1 = (Keyword)cGroup_0_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0_0_2 = (Keyword)cGroup_0_0.eContents().get(2);
		private final Assignment cDeclaredParamAssignment_0_0_3 = (Assignment)cGroup_0_0.eContents().get(3);
		private final RuleCall cDeclaredParamJvmFormalParameterParserRuleCall_0_0_3_0 = (RuleCall)cDeclaredParamAssignment_0_0_3.eContents().get(0);
		private final Keyword cColonKeyword_0_0_4 = (Keyword)cGroup_0_0.eContents().get(4);
		private final Assignment cForExpressionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cForExpressionExpressionParserRuleCall_1_0 = (RuleCall)cForExpressionAssignment_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cEachExpressionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cEachExpressionExpressionParserRuleCall_3_0 = (RuleCall)cEachExpressionAssignment_3.eContents().get(0);
		
		//ForLoopExpression returns Expression:
		//	=> ({ForLoopExpression} "for" "(" declaredParam=JvmFormalParameter ":") forExpression=Expression ")"
		//	eachExpression=Expression;
		public ParserRule getRule() { return rule; }

		//=> ({ForLoopExpression} "for" "(" declaredParam=JvmFormalParameter ":") forExpression=Expression ")"
		//eachExpression=Expression
		public Group getGroup() { return cGroup; }

		//=> ({ForLoopExpression} "for" "(" declaredParam=JvmFormalParameter ":")
		public Group getGroup_0() { return cGroup_0; }

		//{ForLoopExpression} "for" "(" declaredParam=JvmFormalParameter ":"
		public Group getGroup_0_0() { return cGroup_0_0; }

		//{ForLoopExpression}
		public Action getForLoopExpressionAction_0_0_0() { return cForLoopExpressionAction_0_0_0; }

		//"for"
		public Keyword getForKeyword_0_0_1() { return cForKeyword_0_0_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_0_0_2() { return cLeftParenthesisKeyword_0_0_2; }

		//declaredParam=JvmFormalParameter
		public Assignment getDeclaredParamAssignment_0_0_3() { return cDeclaredParamAssignment_0_0_3; }

		//JvmFormalParameter
		public RuleCall getDeclaredParamJvmFormalParameterParserRuleCall_0_0_3_0() { return cDeclaredParamJvmFormalParameterParserRuleCall_0_0_3_0; }

		//":"
		public Keyword getColonKeyword_0_0_4() { return cColonKeyword_0_0_4; }

		//forExpression=Expression
		public Assignment getForExpressionAssignment_1() { return cForExpressionAssignment_1; }

		//Expression
		public RuleCall getForExpressionExpressionParserRuleCall_1_0() { return cForExpressionExpressionParserRuleCall_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }

		//eachExpression=Expression
		public Assignment getEachExpressionAssignment_3() { return cEachExpressionAssignment_3; }

		//Expression
		public RuleCall getEachExpressionExpressionParserRuleCall_3_0() { return cEachExpressionExpressionParserRuleCall_3_0; }
	}

	public class BasicForLoopExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BasicForLoopExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBasicForLoopExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cForKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cInitExpressionsAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cInitExpressionsExpressionOrVarDeclarationParserRuleCall_3_0_0 = (RuleCall)cInitExpressionsAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cInitExpressionsAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cInitExpressionsExpressionOrVarDeclarationParserRuleCall_3_1_1_0 = (RuleCall)cInitExpressionsAssignment_3_1_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cExpressionAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cExpressionExpressionParserRuleCall_5_0 = (RuleCall)cExpressionAssignment_5.eContents().get(0);
		private final Keyword cSemicolonKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Assignment cUpdateExpressionsAssignment_7_0 = (Assignment)cGroup_7.eContents().get(0);
		private final RuleCall cUpdateExpressionsExpressionParserRuleCall_7_0_0 = (RuleCall)cUpdateExpressionsAssignment_7_0.eContents().get(0);
		private final Group cGroup_7_1 = (Group)cGroup_7.eContents().get(1);
		private final Keyword cCommaKeyword_7_1_0 = (Keyword)cGroup_7_1.eContents().get(0);
		private final Assignment cUpdateExpressionsAssignment_7_1_1 = (Assignment)cGroup_7_1.eContents().get(1);
		private final RuleCall cUpdateExpressionsExpressionParserRuleCall_7_1_1_0 = (RuleCall)cUpdateExpressionsAssignment_7_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cEachExpressionAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cEachExpressionExpressionParserRuleCall_9_0 = (RuleCall)cEachExpressionAssignment_9.eContents().get(0);
		
		//BasicForLoopExpression returns Expression:
		//	{BasicForLoopExpression} "for" "(" (initExpressions+=ExpressionOrVarDeclaration (","
		//	initExpressions+=ExpressionOrVarDeclaration)*)? ";" expression=Expression? ";" (updateExpressions+=Expression (","
		//	updateExpressions+=Expression)*)? ")" eachExpression=Expression;
		public ParserRule getRule() { return rule; }

		//{BasicForLoopExpression} "for" "(" (initExpressions+=ExpressionOrVarDeclaration (","
		//initExpressions+=ExpressionOrVarDeclaration)*)? ";" expression=Expression? ";" (updateExpressions+=Expression (","
		//updateExpressions+=Expression)*)? ")" eachExpression=Expression
		public Group getGroup() { return cGroup; }

		//{BasicForLoopExpression}
		public Action getBasicForLoopExpressionAction_0() { return cBasicForLoopExpressionAction_0; }

		//"for"
		public Keyword getForKeyword_1() { return cForKeyword_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//(initExpressions+=ExpressionOrVarDeclaration ("," initExpressions+=ExpressionOrVarDeclaration)*)?
		public Group getGroup_3() { return cGroup_3; }

		//initExpressions+=ExpressionOrVarDeclaration
		public Assignment getInitExpressionsAssignment_3_0() { return cInitExpressionsAssignment_3_0; }

		//ExpressionOrVarDeclaration
		public RuleCall getInitExpressionsExpressionOrVarDeclarationParserRuleCall_3_0_0() { return cInitExpressionsExpressionOrVarDeclarationParserRuleCall_3_0_0; }

		//("," initExpressions+=ExpressionOrVarDeclaration)*
		public Group getGroup_3_1() { return cGroup_3_1; }

		//","
		public Keyword getCommaKeyword_3_1_0() { return cCommaKeyword_3_1_0; }

		//initExpressions+=ExpressionOrVarDeclaration
		public Assignment getInitExpressionsAssignment_3_1_1() { return cInitExpressionsAssignment_3_1_1; }

		//ExpressionOrVarDeclaration
		public RuleCall getInitExpressionsExpressionOrVarDeclarationParserRuleCall_3_1_1_0() { return cInitExpressionsExpressionOrVarDeclarationParserRuleCall_3_1_1_0; }

		//";"
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }

		//expression=Expression?
		public Assignment getExpressionAssignment_5() { return cExpressionAssignment_5; }

		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_5_0() { return cExpressionExpressionParserRuleCall_5_0; }

		//";"
		public Keyword getSemicolonKeyword_6() { return cSemicolonKeyword_6; }

		//(updateExpressions+=Expression ("," updateExpressions+=Expression)*)?
		public Group getGroup_7() { return cGroup_7; }

		//updateExpressions+=Expression
		public Assignment getUpdateExpressionsAssignment_7_0() { return cUpdateExpressionsAssignment_7_0; }

		//Expression
		public RuleCall getUpdateExpressionsExpressionParserRuleCall_7_0_0() { return cUpdateExpressionsExpressionParserRuleCall_7_0_0; }

		//("," updateExpressions+=Expression)*
		public Group getGroup_7_1() { return cGroup_7_1; }

		//","
		public Keyword getCommaKeyword_7_1_0() { return cCommaKeyword_7_1_0; }

		//updateExpressions+=Expression
		public Assignment getUpdateExpressionsAssignment_7_1_1() { return cUpdateExpressionsAssignment_7_1_1; }

		//Expression
		public RuleCall getUpdateExpressionsExpressionParserRuleCall_7_1_1_0() { return cUpdateExpressionsExpressionParserRuleCall_7_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_8() { return cRightParenthesisKeyword_8; }

		//eachExpression=Expression
		public Assignment getEachExpressionAssignment_9() { return cEachExpressionAssignment_9; }

		//Expression
		public RuleCall getEachExpressionExpressionParserRuleCall_9_0() { return cEachExpressionExpressionParserRuleCall_9_0; }
	}

	public class WhileExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "WhileExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cWhileExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cWhileKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cPredicateAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cPredicateExpressionParserRuleCall_3_0 = (RuleCall)cPredicateAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cBodyAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cBodyExpressionParserRuleCall_5_0 = (RuleCall)cBodyAssignment_5.eContents().get(0);
		
		//WhileExpression returns Expression:
		//	{WhileExpression} "while" "(" predicate=Expression ")" body=Expression;
		public ParserRule getRule() { return rule; }

		//{WhileExpression} "while" "(" predicate=Expression ")" body=Expression
		public Group getGroup() { return cGroup; }

		//{WhileExpression}
		public Action getWhileExpressionAction_0() { return cWhileExpressionAction_0; }

		//"while"
		public Keyword getWhileKeyword_1() { return cWhileKeyword_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//predicate=Expression
		public Assignment getPredicateAssignment_3() { return cPredicateAssignment_3; }

		//Expression
		public RuleCall getPredicateExpressionParserRuleCall_3_0() { return cPredicateExpressionParserRuleCall_3_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }

		//body=Expression
		public Assignment getBodyAssignment_5() { return cBodyAssignment_5; }

		//Expression
		public RuleCall getBodyExpressionParserRuleCall_5_0() { return cBodyExpressionParserRuleCall_5_0; }
	}

	public class DoWhileExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DoWhileExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDoWhileExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cDoKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cBodyAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cBodyExpressionParserRuleCall_2_0 = (RuleCall)cBodyAssignment_2.eContents().get(0);
		private final Keyword cWhileKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cLeftParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cPredicateAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cPredicateExpressionParserRuleCall_5_0 = (RuleCall)cPredicateAssignment_5.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//DoWhileExpression returns Expression:
		//	{DoWhileExpression} "do" body=Expression "while" "(" predicate=Expression ")";
		public ParserRule getRule() { return rule; }

		//{DoWhileExpression} "do" body=Expression "while" "(" predicate=Expression ")"
		public Group getGroup() { return cGroup; }

		//{DoWhileExpression}
		public Action getDoWhileExpressionAction_0() { return cDoWhileExpressionAction_0; }

		//"do"
		public Keyword getDoKeyword_1() { return cDoKeyword_1; }

		//body=Expression
		public Assignment getBodyAssignment_2() { return cBodyAssignment_2; }

		//Expression
		public RuleCall getBodyExpressionParserRuleCall_2_0() { return cBodyExpressionParserRuleCall_2_0; }

		//"while"
		public Keyword getWhileKeyword_3() { return cWhileKeyword_3; }

		//"("
		public Keyword getLeftParenthesisKeyword_4() { return cLeftParenthesisKeyword_4; }

		//predicate=Expression
		public Assignment getPredicateAssignment_5() { return cPredicateAssignment_5; }

		//Expression
		public RuleCall getPredicateExpressionParserRuleCall_5_0() { return cPredicateExpressionParserRuleCall_5_0; }

		//")"
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }
	}

	public class BlockExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BlockExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBlockExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cExpressionsAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cExpressionsExpressionOrVarDeclarationParserRuleCall_2_0_0 = (RuleCall)cExpressionsAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cExpressionsAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cExpressionsExpressionOrVarDeclarationParserRuleCall_2_1_1_0 = (RuleCall)cExpressionsAssignment_2_1_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//BlockExpression returns Expression: // weakened grammar to make this expression usable as ArrayInitializer too
		//	{BlockExpression} "{" (expressions+=ExpressionOrVarDeclaration ("," expressions+=ExpressionOrVarDeclaration) ";"?)*
		//	"}";
		public ParserRule getRule() { return rule; }

		//// weakened grammar to make this expression usable as ArrayInitializer too
		//{BlockExpression} "{" (expressions+=ExpressionOrVarDeclaration ("," expressions+=ExpressionOrVarDeclaration) ";"?)* "}"
		public Group getGroup() { return cGroup; }

		//// weakened grammar to make this expression usable as ArrayInitializer too
		//{BlockExpression}
		public Action getBlockExpressionAction_0() { return cBlockExpressionAction_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//(expressions+=ExpressionOrVarDeclaration ("," expressions+=ExpressionOrVarDeclaration) ";"?)*
		public Group getGroup_2() { return cGroup_2; }

		//expressions+=ExpressionOrVarDeclaration
		public Assignment getExpressionsAssignment_2_0() { return cExpressionsAssignment_2_0; }

		//ExpressionOrVarDeclaration
		public RuleCall getExpressionsExpressionOrVarDeclarationParserRuleCall_2_0_0() { return cExpressionsExpressionOrVarDeclarationParserRuleCall_2_0_0; }

		//"," expressions+=ExpressionOrVarDeclaration
		public Group getGroup_2_1() { return cGroup_2_1; }

		//","
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }

		//expressions+=ExpressionOrVarDeclaration
		public Assignment getExpressionsAssignment_2_1_1() { return cExpressionsAssignment_2_1_1; }

		//ExpressionOrVarDeclaration
		public RuleCall getExpressionsExpressionOrVarDeclarationParserRuleCall_2_1_1_0() { return cExpressionsExpressionOrVarDeclarationParserRuleCall_2_1_1_0; }

		//";"?
		public Keyword getSemicolonKeyword_2_2() { return cSemicolonKeyword_2_2; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}

	public class ExpressionOrVarDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExpressionOrVarDeclaration");
		private final RuleCall cExpressionParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//ExpressionOrVarDeclaration returns Expression: / *VariableDeclaration |* / Expression;
		public ParserRule getRule() { return rule; }

		/// *VariableDeclaration |* / Expression
		public RuleCall getExpressionParserRuleCall() { return cExpressionParserRuleCall; }
	}

	public class JvmFormalParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "JvmFormalParameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cParameterTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cParameterTypeValidIDParserRuleCall_0_0 = (RuleCall)cParameterTypeAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameValidIDParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		////VariableDeclaration returns Expression:
		////	{VariableDeclaration}
		////	/ *(writeable?='var'|'val')* / (=>(type=JvmTypeReference name=ValidID) | name=ValidID) ('=' right=Expression)?;
		//JvmFormalParameter returns ValidID:
		//	parameterType=ValidID? name=ValidID;
		public ParserRule getRule() { return rule; }

		//parameterType=ValidID? name=ValidID
		public Group getGroup() { return cGroup; }

		//parameterType=ValidID?
		public Assignment getParameterTypeAssignment_0() { return cParameterTypeAssignment_0; }

		//ValidID
		public RuleCall getParameterTypeValidIDParserRuleCall_0_0() { return cParameterTypeValidIDParserRuleCall_0_0; }

		//name=ValidID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ValidID
		public RuleCall getNameValidIDParserRuleCall_1_0() { return cNameValidIDParserRuleCall_1_0; }
	}

	public class FullJvmFormalParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FullJvmFormalParameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cParameterTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cParameterTypeValidIDParserRuleCall_0_0 = (RuleCall)cParameterTypeAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameValidIDParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//FullJvmFormalParameter returns ValidID:
		//	parameterType=ValidID name=ValidID;
		public ParserRule getRule() { return rule; }

		//parameterType=ValidID name=ValidID
		public Group getGroup() { return cGroup; }

		//parameterType=ValidID
		public Assignment getParameterTypeAssignment_0() { return cParameterTypeAssignment_0; }

		//ValidID
		public RuleCall getParameterTypeValidIDParserRuleCall_0_0() { return cParameterTypeValidIDParserRuleCall_0_0; }

		//name=ValidID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ValidID
		public RuleCall getNameValidIDParserRuleCall_1_0() { return cNameValidIDParserRuleCall_1_0; }
	}

	public class FeatureCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FeatureCall");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cFeatureCallAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLessThanSignKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cTypeArgumentsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cTypeArgumentsJvmArgumentTypeReferenceParserRuleCall_1_1_0 = (RuleCall)cTypeArgumentsAssignment_1_1.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final Keyword cCommaKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Assignment cTypeArgumentsAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final RuleCall cTypeArgumentsJvmArgumentTypeReferenceParserRuleCall_1_2_1_0 = (RuleCall)cTypeArgumentsAssignment_1_2_1.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Assignment cFeatureAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cFeatureIdOrSuperParserRuleCall_2_0 = (RuleCall)cFeatureAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cExplicitOperationCallAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final Keyword cExplicitOperationCallLeftParenthesisKeyword_3_0_0 = (Keyword)cExplicitOperationCallAssignment_3_0.eContents().get(0);
		private final Alternatives cAlternatives_3_1 = (Alternatives)cGroup_3.eContents().get(1);
		private final Assignment cFeatureCallArgumentsAssignment_3_1_0 = (Assignment)cAlternatives_3_1.eContents().get(0);
		private final RuleCall cFeatureCallArgumentsShortClosureParserRuleCall_3_1_0_0 = (RuleCall)cFeatureCallArgumentsAssignment_3_1_0.eContents().get(0);
		private final Group cGroup_3_1_1 = (Group)cAlternatives_3_1.eContents().get(1);
		private final Assignment cFeatureCallArgumentsAssignment_3_1_1_0 = (Assignment)cGroup_3_1_1.eContents().get(0);
		private final RuleCall cFeatureCallArgumentsExpressionParserRuleCall_3_1_1_0_0 = (RuleCall)cFeatureCallArgumentsAssignment_3_1_1_0.eContents().get(0);
		private final Group cGroup_3_1_1_1 = (Group)cGroup_3_1_1.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_1_1_0 = (Keyword)cGroup_3_1_1_1.eContents().get(0);
		private final Assignment cFeatureCallArgumentsAssignment_3_1_1_1_1 = (Assignment)cGroup_3_1_1_1.eContents().get(1);
		private final RuleCall cFeatureCallArgumentsExpressionParserRuleCall_3_1_1_1_1_0 = (RuleCall)cFeatureCallArgumentsAssignment_3_1_1_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		private final Assignment cFeatureCallArgumentsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cFeatureCallArgumentsClosureParserRuleCall_4_0 = (RuleCall)cFeatureCallArgumentsAssignment_4.eContents().get(0);
		
		//FeatureCall returns Expression:
		//	{FeatureCall} ("<" typeArguments+=JvmArgumentTypeReference ("," typeArguments+=JvmArgumentTypeReference)* ">")?
		//	feature=IdOrSuper (=> explicitOperationCall?="(" (featureCallArguments+=ShortClosure |
		//	featureCallArguments+=Expression ("," featureCallArguments+=Expression)*)? ")")? featureCallArguments+=Closure?;
		public ParserRule getRule() { return rule; }

		//{FeatureCall} ("<" typeArguments+=JvmArgumentTypeReference ("," typeArguments+=JvmArgumentTypeReference)* ">")?
		//feature=IdOrSuper (=> explicitOperationCall?="(" (featureCallArguments+=ShortClosure |
		//featureCallArguments+=Expression ("," featureCallArguments+=Expression)*)? ")")? featureCallArguments+=Closure?
		public Group getGroup() { return cGroup; }

		//{FeatureCall}
		public Action getFeatureCallAction_0() { return cFeatureCallAction_0; }

		//("<" typeArguments+=JvmArgumentTypeReference ("," typeArguments+=JvmArgumentTypeReference)* ">")?
		public Group getGroup_1() { return cGroup_1; }

		//"<"
		public Keyword getLessThanSignKeyword_1_0() { return cLessThanSignKeyword_1_0; }

		//typeArguments+=JvmArgumentTypeReference
		public Assignment getTypeArgumentsAssignment_1_1() { return cTypeArgumentsAssignment_1_1; }

		//JvmArgumentTypeReference
		public RuleCall getTypeArgumentsJvmArgumentTypeReferenceParserRuleCall_1_1_0() { return cTypeArgumentsJvmArgumentTypeReferenceParserRuleCall_1_1_0; }

		//("," typeArguments+=JvmArgumentTypeReference)*
		public Group getGroup_1_2() { return cGroup_1_2; }

		//","
		public Keyword getCommaKeyword_1_2_0() { return cCommaKeyword_1_2_0; }

		//typeArguments+=JvmArgumentTypeReference
		public Assignment getTypeArgumentsAssignment_1_2_1() { return cTypeArgumentsAssignment_1_2_1; }

		//JvmArgumentTypeReference
		public RuleCall getTypeArgumentsJvmArgumentTypeReferenceParserRuleCall_1_2_1_0() { return cTypeArgumentsJvmArgumentTypeReferenceParserRuleCall_1_2_1_0; }

		//">"
		public Keyword getGreaterThanSignKeyword_1_3() { return cGreaterThanSignKeyword_1_3; }

		//feature=IdOrSuper
		public Assignment getFeatureAssignment_2() { return cFeatureAssignment_2; }

		//IdOrSuper
		public RuleCall getFeatureIdOrSuperParserRuleCall_2_0() { return cFeatureIdOrSuperParserRuleCall_2_0; }

		//(=> explicitOperationCall?="(" (featureCallArguments+=ShortClosure | featureCallArguments+=Expression (","
		//featureCallArguments+=Expression)*)? ")")?
		public Group getGroup_3() { return cGroup_3; }

		//=> explicitOperationCall?="("
		public Assignment getExplicitOperationCallAssignment_3_0() { return cExplicitOperationCallAssignment_3_0; }

		//"("
		public Keyword getExplicitOperationCallLeftParenthesisKeyword_3_0_0() { return cExplicitOperationCallLeftParenthesisKeyword_3_0_0; }

		//(featureCallArguments+=ShortClosure | featureCallArguments+=Expression ("," featureCallArguments+=Expression)*)?
		public Alternatives getAlternatives_3_1() { return cAlternatives_3_1; }

		//featureCallArguments+=ShortClosure
		public Assignment getFeatureCallArgumentsAssignment_3_1_0() { return cFeatureCallArgumentsAssignment_3_1_0; }

		//ShortClosure
		public RuleCall getFeatureCallArgumentsShortClosureParserRuleCall_3_1_0_0() { return cFeatureCallArgumentsShortClosureParserRuleCall_3_1_0_0; }

		//featureCallArguments+=Expression ("," featureCallArguments+=Expression)*
		public Group getGroup_3_1_1() { return cGroup_3_1_1; }

		//featureCallArguments+=Expression
		public Assignment getFeatureCallArgumentsAssignment_3_1_1_0() { return cFeatureCallArgumentsAssignment_3_1_1_0; }

		//Expression
		public RuleCall getFeatureCallArgumentsExpressionParserRuleCall_3_1_1_0_0() { return cFeatureCallArgumentsExpressionParserRuleCall_3_1_1_0_0; }

		//("," featureCallArguments+=Expression)*
		public Group getGroup_3_1_1_1() { return cGroup_3_1_1_1; }

		//","
		public Keyword getCommaKeyword_3_1_1_1_0() { return cCommaKeyword_3_1_1_1_0; }

		//featureCallArguments+=Expression
		public Assignment getFeatureCallArgumentsAssignment_3_1_1_1_1() { return cFeatureCallArgumentsAssignment_3_1_1_1_1; }

		//Expression
		public RuleCall getFeatureCallArgumentsExpressionParserRuleCall_3_1_1_1_1_0() { return cFeatureCallArgumentsExpressionParserRuleCall_3_1_1_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3_2() { return cRightParenthesisKeyword_3_2; }

		//featureCallArguments+=Closure?
		public Assignment getFeatureCallArgumentsAssignment_4() { return cFeatureCallArgumentsAssignment_4; }

		//Closure
		public RuleCall getFeatureCallArgumentsClosureParserRuleCall_4_0() { return cFeatureCallArgumentsClosureParserRuleCall_4_0; }
	}

	public class FeatureCallIDElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FeatureCallID");
		private final RuleCall cValidIDParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//FeatureCallID: / *| 'extends' | 'static' | 'import' | 'extension' * / ValidID;
		public ParserRule getRule() { return rule; }

		/// *| 'extends' | 'static' | 'import' | 'extension' * / ValidID
		public RuleCall getValidIDParserRuleCall() { return cValidIDParserRuleCall; }
	}

	public class IdOrSuperElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IdOrSuper");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cFeatureCallIDParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Keyword cSuperKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cClassKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		
		//IdOrSuper:
		//	FeatureCallID | "super" | "class";
		public ParserRule getRule() { return rule; }

		//FeatureCallID | "super" | "class"
		public Alternatives getAlternatives() { return cAlternatives; }

		//FeatureCallID
		public RuleCall getFeatureCallIDParserRuleCall_0() { return cFeatureCallIDParserRuleCall_0; }

		//"super"
		public Keyword getSuperKeyword_1() { return cSuperKeyword_1; }

		//"class"
		public Keyword getClassKeyword_2() { return cClassKeyword_2; }
	}

	public class ConstructorCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ConstructorCall");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cConstructorCallAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cNewKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cConstructorAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cConstructorQualifiedNameParserRuleCall_2_0 = (RuleCall)cConstructorAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLessThanSignKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cTypeArgumentsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cTypeArgumentsJvmArgumentTypeReferenceParserRuleCall_3_1_0 = (RuleCall)cTypeArgumentsAssignment_3_1.eContents().get(0);
		private final Group cGroup_3_2 = (Group)cGroup_3.eContents().get(2);
		private final Keyword cCommaKeyword_3_2_0 = (Keyword)cGroup_3_2.eContents().get(0);
		private final Assignment cTypeArgumentsAssignment_3_2_1 = (Assignment)cGroup_3_2.eContents().get(1);
		private final RuleCall cTypeArgumentsJvmArgumentTypeReferenceParserRuleCall_3_2_1_0 = (RuleCall)cTypeArgumentsAssignment_3_2_1.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_3_3 = (Keyword)cGroup_3.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Assignment cExplicitConstructorCallAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final Keyword cExplicitConstructorCallLeftParenthesisKeyword_4_0_0 = (Keyword)cExplicitConstructorCallAssignment_4_0.eContents().get(0);
		private final Alternatives cAlternatives_4_1 = (Alternatives)cGroup_4.eContents().get(1);
		private final Assignment cArgumentsAssignment_4_1_0 = (Assignment)cAlternatives_4_1.eContents().get(0);
		private final RuleCall cArgumentsShortClosureParserRuleCall_4_1_0_0 = (RuleCall)cArgumentsAssignment_4_1_0.eContents().get(0);
		private final Group cGroup_4_1_1 = (Group)cAlternatives_4_1.eContents().get(1);
		private final Assignment cArgumentsAssignment_4_1_1_0 = (Assignment)cGroup_4_1_1.eContents().get(0);
		private final RuleCall cArgumentsExpressionParserRuleCall_4_1_1_0_0 = (RuleCall)cArgumentsAssignment_4_1_1_0.eContents().get(0);
		private final Group cGroup_4_1_1_1 = (Group)cGroup_4_1_1.eContents().get(1);
		private final Keyword cCommaKeyword_4_1_1_1_0 = (Keyword)cGroup_4_1_1_1.eContents().get(0);
		private final Assignment cArgumentsAssignment_4_1_1_1_1 = (Assignment)cGroup_4_1_1_1.eContents().get(1);
		private final RuleCall cArgumentsExpressionParserRuleCall_4_1_1_1_1_0 = (RuleCall)cArgumentsAssignment_4_1_1_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4_2 = (Keyword)cGroup_4.eContents().get(2);
		private final Assignment cArgumentsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cArgumentsClosureParserRuleCall_5_0 = (RuleCall)cArgumentsAssignment_5.eContents().get(0);
		
		//ConstructorCall returns Expression:
		//	{ConstructorCall} "new" constructor=QualifiedName ("<" typeArguments+=JvmArgumentTypeReference (","
		//	typeArguments+=JvmArgumentTypeReference)* ">")? (=> explicitConstructorCall?="(" (arguments+=ShortClosure |
		//	arguments+=Expression ("," arguments+=Expression)*)? ")")? arguments+=Closure?;
		public ParserRule getRule() { return rule; }

		//{ConstructorCall} "new" constructor=QualifiedName ("<" typeArguments+=JvmArgumentTypeReference (","
		//typeArguments+=JvmArgumentTypeReference)* ">")? (=> explicitConstructorCall?="(" (arguments+=ShortClosure |
		//arguments+=Expression ("," arguments+=Expression)*)? ")")? arguments+=Closure?
		public Group getGroup() { return cGroup; }

		//{ConstructorCall}
		public Action getConstructorCallAction_0() { return cConstructorCallAction_0; }

		//"new"
		public Keyword getNewKeyword_1() { return cNewKeyword_1; }

		//constructor=QualifiedName
		public Assignment getConstructorAssignment_2() { return cConstructorAssignment_2; }

		//QualifiedName
		public RuleCall getConstructorQualifiedNameParserRuleCall_2_0() { return cConstructorQualifiedNameParserRuleCall_2_0; }

		//(=> "<" typeArguments+=JvmArgumentTypeReference ("," typeArguments+=JvmArgumentTypeReference)* ">")?
		public Group getGroup_3() { return cGroup_3; }

		//=> "<"
		public Keyword getLessThanSignKeyword_3_0() { return cLessThanSignKeyword_3_0; }

		//typeArguments+=JvmArgumentTypeReference
		public Assignment getTypeArgumentsAssignment_3_1() { return cTypeArgumentsAssignment_3_1; }

		//JvmArgumentTypeReference
		public RuleCall getTypeArgumentsJvmArgumentTypeReferenceParserRuleCall_3_1_0() { return cTypeArgumentsJvmArgumentTypeReferenceParserRuleCall_3_1_0; }

		//("," typeArguments+=JvmArgumentTypeReference)*
		public Group getGroup_3_2() { return cGroup_3_2; }

		//","
		public Keyword getCommaKeyword_3_2_0() { return cCommaKeyword_3_2_0; }

		//typeArguments+=JvmArgumentTypeReference
		public Assignment getTypeArgumentsAssignment_3_2_1() { return cTypeArgumentsAssignment_3_2_1; }

		//JvmArgumentTypeReference
		public RuleCall getTypeArgumentsJvmArgumentTypeReferenceParserRuleCall_3_2_1_0() { return cTypeArgumentsJvmArgumentTypeReferenceParserRuleCall_3_2_1_0; }

		//">"
		public Keyword getGreaterThanSignKeyword_3_3() { return cGreaterThanSignKeyword_3_3; }

		//(=> explicitConstructorCall?="(" (arguments+=ShortClosure | arguments+=Expression ("," arguments+=Expression)*)? ")")?
		public Group getGroup_4() { return cGroup_4; }

		//=> explicitConstructorCall?="("
		public Assignment getExplicitConstructorCallAssignment_4_0() { return cExplicitConstructorCallAssignment_4_0; }

		//"("
		public Keyword getExplicitConstructorCallLeftParenthesisKeyword_4_0_0() { return cExplicitConstructorCallLeftParenthesisKeyword_4_0_0; }

		//(arguments+=ShortClosure | arguments+=Expression ("," arguments+=Expression)*)?
		public Alternatives getAlternatives_4_1() { return cAlternatives_4_1; }

		//arguments+=ShortClosure
		public Assignment getArgumentsAssignment_4_1_0() { return cArgumentsAssignment_4_1_0; }

		//ShortClosure
		public RuleCall getArgumentsShortClosureParserRuleCall_4_1_0_0() { return cArgumentsShortClosureParserRuleCall_4_1_0_0; }

		//arguments+=Expression ("," arguments+=Expression)*
		public Group getGroup_4_1_1() { return cGroup_4_1_1; }

		//arguments+=Expression
		public Assignment getArgumentsAssignment_4_1_1_0() { return cArgumentsAssignment_4_1_1_0; }

		//Expression
		public RuleCall getArgumentsExpressionParserRuleCall_4_1_1_0_0() { return cArgumentsExpressionParserRuleCall_4_1_1_0_0; }

		//("," arguments+=Expression)*
		public Group getGroup_4_1_1_1() { return cGroup_4_1_1_1; }

		//","
		public Keyword getCommaKeyword_4_1_1_1_0() { return cCommaKeyword_4_1_1_1_0; }

		//arguments+=Expression
		public Assignment getArgumentsAssignment_4_1_1_1_1() { return cArgumentsAssignment_4_1_1_1_1; }

		//Expression
		public RuleCall getArgumentsExpressionParserRuleCall_4_1_1_1_1_0() { return cArgumentsExpressionParserRuleCall_4_1_1_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4_2() { return cRightParenthesisKeyword_4_2; }

		//arguments+=Closure?
		public Assignment getArgumentsAssignment_5() { return cArgumentsAssignment_5; }

		//Closure
		public RuleCall getArgumentsClosureParserRuleCall_5_0() { return cArgumentsClosureParserRuleCall_5_0; }
	}

	public class BooleanLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BooleanLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBooleanLiteralAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cFalseKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Assignment cIsTrueAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final Keyword cIsTrueTrueKeyword_1_1_0 = (Keyword)cIsTrueAssignment_1_1.eContents().get(0);
		
		//BooleanLiteral returns Expression:
		//	{BooleanLiteral} ("false" | isTrue?="true");
		public ParserRule getRule() { return rule; }

		//{BooleanLiteral} ("false" | isTrue?="true")
		public Group getGroup() { return cGroup; }

		//{BooleanLiteral}
		public Action getBooleanLiteralAction_0() { return cBooleanLiteralAction_0; }

		//"false" | isTrue?="true"
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//"false"
		public Keyword getFalseKeyword_1_0() { return cFalseKeyword_1_0; }

		//isTrue?="true"
		public Assignment getIsTrueAssignment_1_1() { return cIsTrueAssignment_1_1; }

		//"true"
		public Keyword getIsTrueTrueKeyword_1_1_0() { return cIsTrueTrueKeyword_1_1_0; }
	}

	public class NullLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NullLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cNullLiteralAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cNullKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//NullLiteral returns Expression:
		//	{NullLiteral} "null";
		public ParserRule getRule() { return rule; }

		//{NullLiteral} "null"
		public Group getGroup() { return cGroup; }

		//{NullLiteral}
		public Action getNullLiteralAction_0() { return cNullLiteralAction_0; }

		//"null"
		public Keyword getNullKeyword_1() { return cNullKeyword_1; }
	}

	public class NumberLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NumberLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cNumberLiteralAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueNumberParserRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//NumberLiteral returns Expression:
		//	{NumberLiteral} value=Number;
		public ParserRule getRule() { return rule; }

		//{NumberLiteral} value=Number
		public Group getGroup() { return cGroup; }

		//{NumberLiteral}
		public Action getNumberLiteralAction_0() { return cNumberLiteralAction_0; }

		//value=Number
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//Number
		public RuleCall getValueNumberParserRuleCall_1_0() { return cValueNumberParserRuleCall_1_0; }
	}

	public class StringLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StringLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cStringLiteralAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//StringLiteral returns Expression:
		//	{StringLiteral} value=STRING;
		public ParserRule getRule() { return rule; }

		//{StringLiteral} value=STRING
		public Group getGroup() { return cGroup; }

		//{StringLiteral}
		public Action getStringLiteralAction_0() { return cStringLiteralAction_0; }

		//value=STRING
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_1_0() { return cValueSTRINGTerminalRuleCall_1_0; }
	}

	public class CharLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CharLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cCharLiteralAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueCHARTerminalRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//CharLiteral returns Expression:
		//	{CharLiteral} value=CHAR;
		public ParserRule getRule() { return rule; }

		//{CharLiteral} value=CHAR
		public Group getGroup() { return cGroup; }

		//{CharLiteral}
		public Action getCharLiteralAction_0() { return cCharLiteralAction_0; }

		//value=CHAR
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//CHAR
		public RuleCall getValueCHARTerminalRuleCall_1_0() { return cValueCHARTerminalRuleCall_1_0; }
	}

	public class ThrowExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ThrowExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cThrowExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cThrowKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpressionExpressionParserRuleCall_2_0 = (RuleCall)cExpressionAssignment_2.eContents().get(0);
		
		////TypeLiteral returns Expression :
		////	{TypeLiteral} 'typeof' '(' (type=JvmTypeReference|typeRef=QualifiedName) (arrayDimensions+=ArrayBrackets)* ')'
		////;
		//ThrowExpression returns Expression:
		//	{ThrowExpression} "throw" expression=Expression;
		public ParserRule getRule() { return rule; }

		//{ThrowExpression} "throw" expression=Expression
		public Group getGroup() { return cGroup; }

		//{ThrowExpression}
		public Action getThrowExpressionAction_0() { return cThrowExpressionAction_0; }

		//"throw"
		public Keyword getThrowKeyword_1() { return cThrowKeyword_1; }

		//expression=Expression
		public Assignment getExpressionAssignment_2() { return cExpressionAssignment_2; }

		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_2_0() { return cExpressionExpressionParserRuleCall_2_0; }
	}

	public class ReturnExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ReturnExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cReturnExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cReturnKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpressionExpressionParserRuleCall_2_0 = (RuleCall)cExpressionAssignment_2.eContents().get(0);
		
		//ReturnExpression returns Expression:
		//	{ReturnExpression} "return" -> expression=Expression?;
		public ParserRule getRule() { return rule; }

		//{ReturnExpression} "return" -> expression=Expression?
		public Group getGroup() { return cGroup; }

		//{ReturnExpression}
		public Action getReturnExpressionAction_0() { return cReturnExpressionAction_0; }

		//"return"
		public Keyword getReturnKeyword_1() { return cReturnKeyword_1; }

		//-> expression=Expression?
		public Assignment getExpressionAssignment_2() { return cExpressionAssignment_2; }

		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_2_0() { return cExpressionExpressionParserRuleCall_2_0; }
	}

	public class TryCatchFinallyExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TryCatchFinallyExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTryCatchFinallyExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cTryKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpressionExpressionParserRuleCall_2_0 = (RuleCall)cExpressionAssignment_2.eContents().get(0);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Group cGroup_3_0 = (Group)cAlternatives_3.eContents().get(0);
		private final Assignment cCatchClausesAssignment_3_0_0 = (Assignment)cGroup_3_0.eContents().get(0);
		private final RuleCall cCatchClausesCatchClauseParserRuleCall_3_0_0_0 = (RuleCall)cCatchClausesAssignment_3_0_0.eContents().get(0);
		private final Group cGroup_3_0_1 = (Group)cGroup_3_0.eContents().get(1);
		private final Keyword cFinallyKeyword_3_0_1_0 = (Keyword)cGroup_3_0_1.eContents().get(0);
		private final Assignment cFinallyExpressionAssignment_3_0_1_1 = (Assignment)cGroup_3_0_1.eContents().get(1);
		private final RuleCall cFinallyExpressionExpressionParserRuleCall_3_0_1_1_0 = (RuleCall)cFinallyExpressionAssignment_3_0_1_1.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cAlternatives_3.eContents().get(1);
		private final Keyword cFinallyKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cFinallyExpressionAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cFinallyExpressionExpressionParserRuleCall_3_1_1_0 = (RuleCall)cFinallyExpressionAssignment_3_1_1.eContents().get(0);
		
		//TryCatchFinallyExpression returns Expression:
		//	{TryCatchFinallyExpression} "try" expression=Expression (catchClauses+=CatchClause+ ("finally"
		//	finallyExpression=Expression)? | "finally" finallyExpression=Expression);
		public ParserRule getRule() { return rule; }

		//{TryCatchFinallyExpression} "try" expression=Expression (catchClauses+=CatchClause+ ("finally"
		//finallyExpression=Expression)? | "finally" finallyExpression=Expression)
		public Group getGroup() { return cGroup; }

		//{TryCatchFinallyExpression}
		public Action getTryCatchFinallyExpressionAction_0() { return cTryCatchFinallyExpressionAction_0; }

		//"try"
		public Keyword getTryKeyword_1() { return cTryKeyword_1; }

		//expression=Expression
		public Assignment getExpressionAssignment_2() { return cExpressionAssignment_2; }

		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_2_0() { return cExpressionExpressionParserRuleCall_2_0; }

		//catchClauses+=CatchClause+ ("finally" finallyExpression=Expression)? | "finally" finallyExpression=Expression
		public Alternatives getAlternatives_3() { return cAlternatives_3; }

		//catchClauses+=CatchClause+ ("finally" finallyExpression=Expression)?
		public Group getGroup_3_0() { return cGroup_3_0; }

		//catchClauses+=CatchClause+
		public Assignment getCatchClausesAssignment_3_0_0() { return cCatchClausesAssignment_3_0_0; }

		//CatchClause
		public RuleCall getCatchClausesCatchClauseParserRuleCall_3_0_0_0() { return cCatchClausesCatchClauseParserRuleCall_3_0_0_0; }

		//(=> "finally" finallyExpression=Expression)?
		public Group getGroup_3_0_1() { return cGroup_3_0_1; }

		//=> "finally"
		public Keyword getFinallyKeyword_3_0_1_0() { return cFinallyKeyword_3_0_1_0; }

		//finallyExpression=Expression
		public Assignment getFinallyExpressionAssignment_3_0_1_1() { return cFinallyExpressionAssignment_3_0_1_1; }

		//Expression
		public RuleCall getFinallyExpressionExpressionParserRuleCall_3_0_1_1_0() { return cFinallyExpressionExpressionParserRuleCall_3_0_1_1_0; }

		//"finally" finallyExpression=Expression
		public Group getGroup_3_1() { return cGroup_3_1; }

		//"finally"
		public Keyword getFinallyKeyword_3_1_0() { return cFinallyKeyword_3_1_0; }

		//finallyExpression=Expression
		public Assignment getFinallyExpressionAssignment_3_1_1() { return cFinallyExpressionAssignment_3_1_1; }

		//Expression
		public RuleCall getFinallyExpressionExpressionParserRuleCall_3_1_1_0() { return cFinallyExpressionExpressionParserRuleCall_3_1_1_0; }
	}

	public class SynchronizedExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SynchronizedExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Group cGroup_0_0 = (Group)cGroup_0.eContents().get(0);
		private final Action cSynchronizedExpressionAction_0_0_0 = (Action)cGroup_0_0.eContents().get(0);
		private final Keyword cSynchronizedKeyword_0_0_1 = (Keyword)cGroup_0_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0_0_2 = (Keyword)cGroup_0_0.eContents().get(2);
		private final Assignment cParamAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cParamExpressionParserRuleCall_1_0 = (RuleCall)cParamAssignment_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cExpressionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cExpressionExpressionParserRuleCall_3_0 = (RuleCall)cExpressionAssignment_3.eContents().get(0);
		
		//SynchronizedExpression returns Expression:
		//	=> ({SynchronizedExpression} "synchronized" "(") param=Expression ")" expression=Expression;
		public ParserRule getRule() { return rule; }

		//=> ({SynchronizedExpression} "synchronized" "(") param=Expression ")" expression=Expression
		public Group getGroup() { return cGroup; }

		//=> ({SynchronizedExpression} "synchronized" "(")
		public Group getGroup_0() { return cGroup_0; }

		//{SynchronizedExpression} "synchronized" "("
		public Group getGroup_0_0() { return cGroup_0_0; }

		//{SynchronizedExpression}
		public Action getSynchronizedExpressionAction_0_0_0() { return cSynchronizedExpressionAction_0_0_0; }

		//"synchronized"
		public Keyword getSynchronizedKeyword_0_0_1() { return cSynchronizedKeyword_0_0_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_0_0_2() { return cLeftParenthesisKeyword_0_0_2; }

		//param=Expression
		public Assignment getParamAssignment_1() { return cParamAssignment_1; }

		//Expression
		public RuleCall getParamExpressionParserRuleCall_1_0() { return cParamExpressionParserRuleCall_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }

		//expression=Expression
		public Assignment getExpressionAssignment_3() { return cExpressionAssignment_3; }

		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_3_0() { return cExpressionExpressionParserRuleCall_3_0; }
	}

	public class CatchClauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CatchClause");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCatchKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cDeclaredParamAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDeclaredParamFullJvmFormalParameterParserRuleCall_2_0 = (RuleCall)cDeclaredParamAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cExpressionAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cExpressionExpressionParserRuleCall_4_0 = (RuleCall)cExpressionAssignment_4.eContents().get(0);
		
		//CatchClause:
		//	"catch" "(" declaredParam=FullJvmFormalParameter ")" expression=Expression;
		public ParserRule getRule() { return rule; }

		//=> "catch" "(" declaredParam=FullJvmFormalParameter ")" expression=Expression
		public Group getGroup() { return cGroup; }

		//=> "catch"
		public Keyword getCatchKeyword_0() { return cCatchKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//declaredParam=FullJvmFormalParameter
		public Assignment getDeclaredParamAssignment_2() { return cDeclaredParamAssignment_2; }

		//FullJvmFormalParameter
		public RuleCall getDeclaredParamFullJvmFormalParameterParserRuleCall_2_0() { return cDeclaredParamFullJvmFormalParameterParserRuleCall_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }

		//expression=Expression
		public Assignment getExpressionAssignment_4() { return cExpressionAssignment_4; }

		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_4_0() { return cExpressionExpressionParserRuleCall_4_0; }
	}

	public class QualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QualifiedName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cValidIDParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cValidIDParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//QualifiedName:
		//	ValidID ("." ValidID)*;
		public ParserRule getRule() { return rule; }

		//ValidID ("." ValidID)*
		public Group getGroup() { return cGroup; }

		//ValidID
		public RuleCall getValidIDParserRuleCall_0() { return cValidIDParserRuleCall_0; }

		//(=> "." ValidID)*
		public Group getGroup_1() { return cGroup_1; }

		//=> "."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//ValidID
		public RuleCall getValidIDParserRuleCall_1_1() { return cValidIDParserRuleCall_1_1; }
	}

	public class NumberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Number");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cHEXTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1_0_0 = (RuleCall)cAlternatives_1_0.eContents().get(0);
		private final RuleCall cDECIMALTerminalRuleCall_1_0_1 = (RuleCall)cAlternatives_1_0.eContents().get(1);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Keyword cFullStopKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Alternatives cAlternatives_1_1_1 = (Alternatives)cGroup_1_1.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_1_1_1_0 = (RuleCall)cAlternatives_1_1_1.eContents().get(0);
		private final RuleCall cDECIMALTerminalRuleCall_1_1_1_1 = (RuleCall)cAlternatives_1_1_1.eContents().get(1);
		
		//Number hidden():
		//	HEX | (INT | DECIMAL) ("." (INT | DECIMAL))?;
		public ParserRule getRule() { return rule; }

		//HEX | (INT | DECIMAL) ("." (INT | DECIMAL))?
		public Alternatives getAlternatives() { return cAlternatives; }

		//HEX
		public RuleCall getHEXTerminalRuleCall_0() { return cHEXTerminalRuleCall_0; }

		//(INT | DECIMAL) ("." (INT | DECIMAL))?
		public Group getGroup_1() { return cGroup_1; }

		//INT | DECIMAL
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }

		//INT
		public RuleCall getINTTerminalRuleCall_1_0_0() { return cINTTerminalRuleCall_1_0_0; }

		//DECIMAL
		public RuleCall getDECIMALTerminalRuleCall_1_0_1() { return cDECIMALTerminalRuleCall_1_0_1; }

		//("." (INT | DECIMAL))?
		public Group getGroup_1_1() { return cGroup_1_1; }

		//"."
		public Keyword getFullStopKeyword_1_1_0() { return cFullStopKeyword_1_1_0; }

		//INT | DECIMAL
		public Alternatives getAlternatives_1_1_1() { return cAlternatives_1_1_1; }

		//INT
		public RuleCall getINTTerminalRuleCall_1_1_1_0() { return cINTTerminalRuleCall_1_1_1_0; }

		//DECIMAL
		public RuleCall getDECIMALTerminalRuleCall_1_1_1_1() { return cDECIMALTerminalRuleCall_1_1_1_1; }
	}

	public class StaticQualifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StaticQualifier");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cValidIDParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cColonColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		/// **
		// * Dummy rule, for "better" downwards compatibility, since GrammarAccess generates non-static inner classes, 
		// * which makes downstream grammars break on classloading, when a rule is removed.
		// * / StaticQualifier:
		//	(ValidID "::")+;
		public ParserRule getRule() { return rule; }

		//(ValidID "::")+
		public Group getGroup() { return cGroup; }

		//ValidID
		public RuleCall getValidIDParserRuleCall_0() { return cValidIDParserRuleCall_0; }

		//"::"
		public Keyword getColonColonKeyword_1() { return cColonColonKeyword_1; }
	}

	public class JMLMultilineSpecCommentStartElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "JMLMultilineSpecCommentStart");
		private final Keyword cSolidusAsteriskCommercialAtKeyword = (Keyword)rule.eContents().get(1);
		
		//JMLMultilineSpecCommentStart:
		//	"/ *@";
		public ParserRule getRule() { return rule; }

		//"/ *@"
		public Keyword getSolidusAsteriskCommercialAtKeyword() { return cSolidusAsteriskCommercialAtKeyword; }
	}

	public class JMLMultilineSpecCommentEndElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "JMLMultilineSpecCommentEnd");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cAsteriskSolidusKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cCommercialAtAsteriskSolidusKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//JMLMultilineSpecCommentEnd:
		//	"* /" | "@* /";
		public ParserRule getRule() { return rule; }

		//"* /" | "@* /"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"* /"
		public Keyword getAsteriskSolidusKeyword_0() { return cAsteriskSolidusKeyword_0; }

		//"@* /"
		public Keyword getCommercialAtAsteriskSolidusKeyword_1() { return cCommercialAtAsteriskSolidusKeyword_1; }
	}
	
	
	public class ModifierValueElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "ModifierValue");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cPUBLICEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cPUBLICPublicKeyword_0_0 = (Keyword)cPUBLICEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cPROTECTEDEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cPROTECTEDProtectedKeyword_1_0 = (Keyword)cPROTECTEDEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cPRIVATEEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cPRIVATEPrivateKeyword_2_0 = (Keyword)cPRIVATEEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cSTATICEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cSTATICStaticKeyword_3_0 = (Keyword)cSTATICEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cABSTRACTEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cABSTRACTAbstractKeyword_4_0 = (Keyword)cABSTRACTEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cFINALEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cFINALFinalKeyword_5_0 = (Keyword)cFINALEnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cNATIVEEnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cNATIVENativeKeyword_6_0 = (Keyword)cNATIVEEnumLiteralDeclaration_6.eContents().get(0);
		private final EnumLiteralDeclaration cSYNCHRONIZEDEnumLiteralDeclaration_7 = (EnumLiteralDeclaration)cAlternatives.eContents().get(7);
		private final Keyword cSYNCHRONIZEDSynchronizedKeyword_7_0 = (Keyword)cSYNCHRONIZEDEnumLiteralDeclaration_7.eContents().get(0);
		private final EnumLiteralDeclaration cTRANSIENTEnumLiteralDeclaration_8 = (EnumLiteralDeclaration)cAlternatives.eContents().get(8);
		private final Keyword cTRANSIENTTransientKeyword_8_0 = (Keyword)cTRANSIENTEnumLiteralDeclaration_8.eContents().get(0);
		private final EnumLiteralDeclaration cVOLATILEEnumLiteralDeclaration_9 = (EnumLiteralDeclaration)cAlternatives.eContents().get(9);
		private final Keyword cVOLATILEVolatileKeyword_9_0 = (Keyword)cVOLATILEEnumLiteralDeclaration_9.eContents().get(0);
		private final EnumLiteralDeclaration cSTRICTFPEnumLiteralDeclaration_10 = (EnumLiteralDeclaration)cAlternatives.eContents().get(10);
		private final Keyword cSTRICTFPStrictfpKeyword_10_0 = (Keyword)cSTRICTFPEnumLiteralDeclaration_10.eContents().get(0);
		
		//enum ModifierValue:
		//	PUBLIC="public" | PROTECTED="protected" | PRIVATE="private" | STATIC="static" | ABSTRACT="abstract" | FINAL="final" |
		//	NATIVE="native" | SYNCHRONIZED="synchronized" | TRANSIENT="transient" | VOLATILE="volatile" | STRICTFP="strictfp";
		public EnumRule getRule() { return rule; }

		//PUBLIC="public" | PROTECTED="protected" | PRIVATE="private" | STATIC="static" | ABSTRACT="abstract" | FINAL="final" |
		//NATIVE="native" | SYNCHRONIZED="synchronized" | TRANSIENT="transient" | VOLATILE="volatile" | STRICTFP="strictfp"
		public Alternatives getAlternatives() { return cAlternatives; }

		//PUBLIC="public"
		public EnumLiteralDeclaration getPUBLICEnumLiteralDeclaration_0() { return cPUBLICEnumLiteralDeclaration_0; }

		//"public"
		public Keyword getPUBLICPublicKeyword_0_0() { return cPUBLICPublicKeyword_0_0; }

		//PROTECTED="protected"
		public EnumLiteralDeclaration getPROTECTEDEnumLiteralDeclaration_1() { return cPROTECTEDEnumLiteralDeclaration_1; }

		//"protected"
		public Keyword getPROTECTEDProtectedKeyword_1_0() { return cPROTECTEDProtectedKeyword_1_0; }

		//PRIVATE="private"
		public EnumLiteralDeclaration getPRIVATEEnumLiteralDeclaration_2() { return cPRIVATEEnumLiteralDeclaration_2; }

		//"private"
		public Keyword getPRIVATEPrivateKeyword_2_0() { return cPRIVATEPrivateKeyword_2_0; }

		//STATIC="static"
		public EnumLiteralDeclaration getSTATICEnumLiteralDeclaration_3() { return cSTATICEnumLiteralDeclaration_3; }

		//"static"
		public Keyword getSTATICStaticKeyword_3_0() { return cSTATICStaticKeyword_3_0; }

		//ABSTRACT="abstract"
		public EnumLiteralDeclaration getABSTRACTEnumLiteralDeclaration_4() { return cABSTRACTEnumLiteralDeclaration_4; }

		//"abstract"
		public Keyword getABSTRACTAbstractKeyword_4_0() { return cABSTRACTAbstractKeyword_4_0; }

		//FINAL="final"
		public EnumLiteralDeclaration getFINALEnumLiteralDeclaration_5() { return cFINALEnumLiteralDeclaration_5; }

		//"final"
		public Keyword getFINALFinalKeyword_5_0() { return cFINALFinalKeyword_5_0; }

		//NATIVE="native"
		public EnumLiteralDeclaration getNATIVEEnumLiteralDeclaration_6() { return cNATIVEEnumLiteralDeclaration_6; }

		//"native"
		public Keyword getNATIVENativeKeyword_6_0() { return cNATIVENativeKeyword_6_0; }

		//SYNCHRONIZED="synchronized"
		public EnumLiteralDeclaration getSYNCHRONIZEDEnumLiteralDeclaration_7() { return cSYNCHRONIZEDEnumLiteralDeclaration_7; }

		//"synchronized"
		public Keyword getSYNCHRONIZEDSynchronizedKeyword_7_0() { return cSYNCHRONIZEDSynchronizedKeyword_7_0; }

		//TRANSIENT="transient"
		public EnumLiteralDeclaration getTRANSIENTEnumLiteralDeclaration_8() { return cTRANSIENTEnumLiteralDeclaration_8; }

		//"transient"
		public Keyword getTRANSIENTTransientKeyword_8_0() { return cTRANSIENTTransientKeyword_8_0; }

		//VOLATILE="volatile"
		public EnumLiteralDeclaration getVOLATILEEnumLiteralDeclaration_9() { return cVOLATILEEnumLiteralDeclaration_9; }

		//"volatile"
		public Keyword getVOLATILEVolatileKeyword_9_0() { return cVOLATILEVolatileKeyword_9_0; }

		//STRICTFP="strictfp"
		public EnumLiteralDeclaration getSTRICTFPEnumLiteralDeclaration_10() { return cSTRICTFPEnumLiteralDeclaration_10; }

		//"strictfp"
		public Keyword getSTRICTFPStrictfpKeyword_10_0() { return cSTRICTFPStrictfpKeyword_10_0; }
	}

	public class VisibilityModifierValueElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "VisibilityModifierValue");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cPUBLICEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cPUBLICPublicKeyword_0_0 = (Keyword)cPUBLICEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cPROTECTEDEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cPROTECTEDProtectedKeyword_1_0 = (Keyword)cPROTECTEDEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cPRIVATEEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cPRIVATEPrivateKeyword_2_0 = (Keyword)cPRIVATEEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cSTATICEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cSTATICStaticKeyword_3_0 = (Keyword)cSTATICEnumLiteralDeclaration_3.eContents().get(0);
		
		//enum VisibilityModifierValue:
		//	PUBLIC="public" | PROTECTED="protected" | PRIVATE="private" | STATIC="static";
		public EnumRule getRule() { return rule; }

		//PUBLIC="public" | PROTECTED="protected" | PRIVATE="private" | STATIC="static"
		public Alternatives getAlternatives() { return cAlternatives; }

		//PUBLIC="public"
		public EnumLiteralDeclaration getPUBLICEnumLiteralDeclaration_0() { return cPUBLICEnumLiteralDeclaration_0; }

		//"public"
		public Keyword getPUBLICPublicKeyword_0_0() { return cPUBLICPublicKeyword_0_0; }

		//PROTECTED="protected"
		public EnumLiteralDeclaration getPROTECTEDEnumLiteralDeclaration_1() { return cPROTECTEDEnumLiteralDeclaration_1; }

		//"protected"
		public Keyword getPROTECTEDProtectedKeyword_1_0() { return cPROTECTEDProtectedKeyword_1_0; }

		//PRIVATE="private"
		public EnumLiteralDeclaration getPRIVATEEnumLiteralDeclaration_2() { return cPRIVATEEnumLiteralDeclaration_2; }

		//"private"
		public Keyword getPRIVATEPrivateKeyword_2_0() { return cPRIVATEPrivateKeyword_2_0; }

		//STATIC="static"
		public EnumLiteralDeclaration getSTATICEnumLiteralDeclaration_3() { return cSTATICEnumLiteralDeclaration_3; }

		//"static"
		public Keyword getSTATICStaticKeyword_3_0() { return cSTATICStaticKeyword_3_0; }
	}

	public class JMLSpecMemberModifierElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "JMLSpecMemberModifier");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cPUREEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cPUREPureKeyword_0_0 = (Keyword)cPUREEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cHELPEREnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cHELPERHelperKeyword_1_0 = (Keyword)cHELPEREnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cPUBLICEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cPUBLICSpec_publicKeyword_2_0 = (Keyword)cPUBLICEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cPROTECTEDEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cPROTECTEDSpec_protectedKeyword_3_0 = (Keyword)cPROTECTEDEnumLiteralDeclaration_3.eContents().get(0);
		
		//enum JMLSpecMemberModifier:
		//	PURE="pure" | HELPER="helper" | PUBLIC="spec_public" | PROTECTED="spec_protected";
		public EnumRule getRule() { return rule; }

		//PURE="pure" | HELPER="helper" | PUBLIC="spec_public" | PROTECTED="spec_protected"
		public Alternatives getAlternatives() { return cAlternatives; }

		//PURE="pure"
		public EnumLiteralDeclaration getPUREEnumLiteralDeclaration_0() { return cPUREEnumLiteralDeclaration_0; }

		//"pure"
		public Keyword getPUREPureKeyword_0_0() { return cPUREPureKeyword_0_0; }

		//HELPER="helper"
		public EnumLiteralDeclaration getHELPEREnumLiteralDeclaration_1() { return cHELPEREnumLiteralDeclaration_1; }

		//"helper"
		public Keyword getHELPERHelperKeyword_1_0() { return cHELPERHelperKeyword_1_0; }

		//PUBLIC="spec_public"
		public EnumLiteralDeclaration getPUBLICEnumLiteralDeclaration_2() { return cPUBLICEnumLiteralDeclaration_2; }

		//"spec_public"
		public Keyword getPUBLICSpec_publicKeyword_2_0() { return cPUBLICSpec_publicKeyword_2_0; }

		//PROTECTED="spec_protected"
		public EnumLiteralDeclaration getPROTECTEDEnumLiteralDeclaration_3() { return cPROTECTEDEnumLiteralDeclaration_3; }

		//"spec_protected"
		public Keyword getPROTECTEDSpec_protectedKeyword_3_0() { return cPROTECTEDSpec_protectedKeyword_3_0; }
	}

	public class PrimitiveTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "PrimitiveType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cBOOLEANEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cBOOLEANBooleanKeyword_0_0 = (Keyword)cBOOLEANEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cCHAREnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cCHARCharKeyword_1_0 = (Keyword)cCHAREnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cBYTEEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cBYTEByteKeyword_2_0 = (Keyword)cBYTEEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cSHORTEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cSHORTShortKeyword_3_0 = (Keyword)cSHORTEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cINTEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cINTIntKeyword_4_0 = (Keyword)cINTEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cLONGEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cLONGLongKeyword_5_0 = (Keyword)cLONGEnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cFLOATEnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cFLOATFloatKeyword_6_0 = (Keyword)cFLOATEnumLiteralDeclaration_6.eContents().get(0);
		private final EnumLiteralDeclaration cDOUBLEEnumLiteralDeclaration_7 = (EnumLiteralDeclaration)cAlternatives.eContents().get(7);
		private final Keyword cDOUBLEDoubleKeyword_7_0 = (Keyword)cDOUBLEEnumLiteralDeclaration_7.eContents().get(0);
		
		//enum PrimitiveType:
		//	BOOLEAN="boolean" | CHAR="char" | BYTE="byte" | SHORT="short" | INT="int" | LONG="long" | FLOAT="float" |
		//	DOUBLE="double";
		public EnumRule getRule() { return rule; }

		//BOOLEAN="boolean" | CHAR="char" | BYTE="byte" | SHORT="short" | INT="int" | LONG="long" | FLOAT="float" |
		//DOUBLE="double"
		public Alternatives getAlternatives() { return cAlternatives; }

		//BOOLEAN="boolean"
		public EnumLiteralDeclaration getBOOLEANEnumLiteralDeclaration_0() { return cBOOLEANEnumLiteralDeclaration_0; }

		//"boolean"
		public Keyword getBOOLEANBooleanKeyword_0_0() { return cBOOLEANBooleanKeyword_0_0; }

		//CHAR="char"
		public EnumLiteralDeclaration getCHAREnumLiteralDeclaration_1() { return cCHAREnumLiteralDeclaration_1; }

		//"char"
		public Keyword getCHARCharKeyword_1_0() { return cCHARCharKeyword_1_0; }

		//BYTE="byte"
		public EnumLiteralDeclaration getBYTEEnumLiteralDeclaration_2() { return cBYTEEnumLiteralDeclaration_2; }

		//"byte"
		public Keyword getBYTEByteKeyword_2_0() { return cBYTEByteKeyword_2_0; }

		//SHORT="short"
		public EnumLiteralDeclaration getSHORTEnumLiteralDeclaration_3() { return cSHORTEnumLiteralDeclaration_3; }

		//"short"
		public Keyword getSHORTShortKeyword_3_0() { return cSHORTShortKeyword_3_0; }

		//INT="int"
		public EnumLiteralDeclaration getINTEnumLiteralDeclaration_4() { return cINTEnumLiteralDeclaration_4; }

		//"int"
		public Keyword getINTIntKeyword_4_0() { return cINTIntKeyword_4_0; }

		//LONG="long"
		public EnumLiteralDeclaration getLONGEnumLiteralDeclaration_5() { return cLONGEnumLiteralDeclaration_5; }

		//"long"
		public Keyword getLONGLongKeyword_5_0() { return cLONGLongKeyword_5_0; }

		//FLOAT="float"
		public EnumLiteralDeclaration getFLOATEnumLiteralDeclaration_6() { return cFLOATEnumLiteralDeclaration_6; }

		//"float"
		public Keyword getFLOATFloatKeyword_6_0() { return cFLOATFloatKeyword_6_0; }

		//DOUBLE="double"
		public EnumLiteralDeclaration getDOUBLEEnumLiteralDeclaration_7() { return cDOUBLEEnumLiteralDeclaration_7; }

		//"double"
		public Keyword getDOUBLEDoubleKeyword_7_0() { return cDOUBLEDoubleKeyword_7_0; }
	}
	
	private final CompilationUnitElements pCompilationUnit;
	private final PackageDeclarationElements pPackageDeclaration;
	private final ImportDeclarationElements pImportDeclaration;
	private final ClassifierDeclarationWithModifierElements pClassifierDeclarationWithModifier;
	private final ClassOrInterfaceDeclarationElements pClassOrInterfaceDeclaration;
	private final ModifierElements pModifier;
	private final RegularModifierElements pRegularModifier;
	private final ModifierValueElements unknownRuleModifierValue;
	private final VisibilityModifierValueElements unknownRuleVisibilityModifierValue;
	private final ClassDeclarationElements pClassDeclaration;
	private final NormalClassDeclarationElements pNormalClassDeclaration;
	private final TypeParametersElements pTypeParameters;
	private final TypeParameterElements pTypeParameter;
	private final TypeBoundElements pTypeBound;
	private final EnumDeclarationElements pEnumDeclaration;
	private final EnumConstantsElements pEnumConstants;
	private final EnumConstantElements pEnumConstant;
	private final EnumBodyDeclarationsElements pEnumBodyDeclarations;
	private final ArgumentsElements pArguments;
	private final InterfaceDeclarationElements pInterfaceDeclaration;
	private final NormalInterfaceDeclarationElements pNormalInterfaceDeclaration;
	private final ClassBodyDeclarationElements pClassBodyDeclaration;
	private final StaticBlockElements pStaticBlock;
	private final JMLSpecifiedElementElements pJMLSpecifiedElement;
	private final JMLMultilineSpecElements pJMLMultilineSpec;
	private final JMLSinglelineSpecElements pJMLSinglelineSpec;
	private final JMLExpressionHavingElements pJMLExpressionHaving;
	private final VisiblityModifierElements pVisiblityModifier;
	private final JMLMethodSpecificationWithModifierElements pJMLMethodSpecificationWithModifier;
	private final JMLMethodSpecificationWithModifierRegularElements pJMLMethodSpecificationWithModifierRegular;
	private final JMLMethodSpecificationWithModifierExtendedElements pJMLMethodSpecificationWithModifierExtended;
	private final JMLMethodSpecificationElements pJMLMethodSpecification;
	private final JMLMethodBehaviorElements pJMLMethodBehavior;
	private final JMLExceptionalBehaviorBlockElements pJMLExceptionalBehaviorBlock;
	private final JMLNormalBehaviorBlockElements pJMLNormalBehaviorBlock;
	private final JMLBehaviorBlockElements pJMLBehaviorBlock;
	private final JMLMethodExpressionElements pJMLMethodExpression;
	private final JMLEnsuresExpressionElements pJMLEnsuresExpression;
	private final JMLRequiresExpressionElements pJMLRequiresExpression;
	private final JMLSpecificationOnlyElementWithModifierElements pJMLSpecificationOnlyElementWithModifier;
	private final JMLSpecificationOnlyElementElements pJMLSpecificationOnlyElement;
	private final JMLModelElementElements pJMLModelElement;
	private final JMLGhostElementElements pJMLGhostElement;
	private final JMLTypeExpressionWithModifierElements pJMLTypeExpressionWithModifier;
	private final JMLTypeExpressionElements pJMLTypeExpression;
	private final JMLInvariantExpressionElements pJMLInvariantExpression;
	private final JMLConstraintExpressionElements pJMLConstraintExpression;
	private final JMLAxiomExpressionElements pJMLAxiomExpression;
	private final JMLMemberModifierElements pJMLMemberModifier;
	private final JMLSpecMemberModifierElements unknownRuleJMLSpecMemberModifier;
	private final MemberDeclWithModifierElements pMemberDeclWithModifier;
	private final MemberDeclWithModifierRegularElements pMemberDeclWithModifierRegular;
	private final MemberDeclWithModifierSpecElements pMemberDeclWithModifierSpec;
	private final MemberDeclElements pMemberDecl;
	private final ConstructorElements pConstructor;
	private final MemberDeclarationElements pMemberDeclaration;
	private final GenericMethodOrConstructorDeclOldElements pGenericMethodOrConstructorDeclOld;
	private final GenericMethodOrConstructorDeclElements pGenericMethodOrConstructorDecl;
	private final MethodDeclarationElements pMethodDeclaration;
	private final FieldDeclarationElements pFieldDeclaration;
	private final DeclaredExceptionElements pDeclaredException;
	private final VariableDeclaratorElements pVariableDeclarator;
	private final TypeElements pType;
	private final ClassOrInterfaceTypeWithBracketsElements pClassOrInterfaceTypeWithBrackets;
	private final PrimitiveTypeWithBracketsElements pPrimitiveTypeWithBrackets;
	private final BracketsElements pBrackets;
	private final ClassOrInterfaceTypeElements pClassOrInterfaceType;
	private final ClassifierTypeElements pClassifierType;
	private final PrimitiveTypeElements unknownRulePrimitiveType;
	private final TypeArgumentsElements pTypeArguments;
	private final TypeArgumentElements pTypeArgument;
	private final FormalParameterDeclElements pFormalParameterDecl;
	private final MethodBodyElements pMethodBody;
	private final ConstructorBodyElements pConstructorBody;
	private final ModifiableElements pModifiable;
	private final TypedElements pTyped;
	private final AnnotationsElements pAnnotations;
	private final AnnotationElements pAnnotation;
	private final AnnotationNameElements pAnnotationName;
	private final ElementValuePairsElements pElementValuePairs;
	private final ElementValuePairElements pElementValuePair;
	private final ElementValueElements pElementValue;
	private final ElementValueArrayInitializerElements pElementValueArrayInitializer;
	private final AnnotationTypeDeclarationElements pAnnotationTypeDeclaration;
	private final AnnotationTypeElementDeclarationElements pAnnotationTypeElementDeclaration;
	private final AnnotationTypeElementRestElements pAnnotationTypeElementRest;
	private final AnnotationMethodOrConstantRestElements pAnnotationMethodOrConstantRest;
	private final AnnotationMethodRestElements pAnnotationMethodRest;
	private final AnnotationConstantRestElements pAnnotationConstantRest;
	private final DefaultValueElements pDefaultValue;
	private final BlockElements pBlock;
	private final BlockStatementElements pBlockStatement;
	private final IdentifierHavingElements pIdentifierHaving;
	private final ExpressionElements pExpression;
	private final AssignmentElements pAssignment;
	private final OpSingleAssignElements pOpSingleAssign;
	private final OpMultiAssignElements pOpMultiAssign;
	private final OrExpressionElements pOrExpression;
	private final OpOrElements pOpOr;
	private final AndExpressionElements pAndExpression;
	private final OpAndElements pOpAnd;
	private final EqualityExpressionElements pEqualityExpression;
	private final OpEqualityElements pOpEquality;
	private final RelationalExpressionElements pRelationalExpression;
	private final OpCompareElements pOpCompare;
	private final OtherOperatorExpressionElements pOtherOperatorExpression;
	private final OpOtherElements pOpOther;
	private final AdditiveExpressionElements pAdditiveExpression;
	private final OpAddElements pOpAdd;
	private final MultiplicativeExpressionElements pMultiplicativeExpression;
	private final OpMultiElements pOpMulti;
	private final UnaryOperationElements pUnaryOperation;
	private final OpUnaryElements pOpUnary;
	private final PostfixOperationElements pPostfixOperation;
	private final OpPostfixElements pOpPostfix;
	private final MemberFeatureCallElements pMemberFeatureCall;
	private final PrimaryExpressionElements pPrimaryExpression;
	private final ParenthesisExpressionElements pParenthesisExpression;
	private final JMLOldExpressionElements pJMLOldExpression;
	private final JMLFreshExpressionElements pJMLFreshExpression;
	private final JMLResultExpressionElements pJMLResultExpression;
	private final JMLForAllExpressionElements pJMLForAllExpression;
	private final VarDeclElements pVarDecl;
	private final LiteralElements pLiteral;
	private final CollectionLiteralElements pCollectionLiteral;
	private final SetLiteralElements pSetLiteral;
	private final ListLiteralElements pListLiteral;
	private final ClosureElements pClosure;
	private final ExpressionInClosureElements pExpressionInClosure;
	private final ShortClosureElements pShortClosure;
	private final ParenthesizedExpressionElements pParenthesizedExpression;
	private final IfExpressionElements pIfExpression;
	private final SwitchExpressionElements pSwitchExpression;
	private final CasePartElements pCasePart;
	private final ForLoopExpressionElements pForLoopExpression;
	private final BasicForLoopExpressionElements pBasicForLoopExpression;
	private final WhileExpressionElements pWhileExpression;
	private final DoWhileExpressionElements pDoWhileExpression;
	private final BlockExpressionElements pBlockExpression;
	private final ExpressionOrVarDeclarationElements pExpressionOrVarDeclaration;
	private final JvmFormalParameterElements pJvmFormalParameter;
	private final FullJvmFormalParameterElements pFullJvmFormalParameter;
	private final FeatureCallElements pFeatureCall;
	private final FeatureCallIDElements pFeatureCallID;
	private final IdOrSuperElements pIdOrSuper;
	private final ConstructorCallElements pConstructorCall;
	private final BooleanLiteralElements pBooleanLiteral;
	private final NullLiteralElements pNullLiteral;
	private final NumberLiteralElements pNumberLiteral;
	private final StringLiteralElements pStringLiteral;
	private final CharLiteralElements pCharLiteral;
	private final ThrowExpressionElements pThrowExpression;
	private final ReturnExpressionElements pReturnExpression;
	private final TryCatchFinallyExpressionElements pTryCatchFinallyExpression;
	private final SynchronizedExpressionElements pSynchronizedExpression;
	private final CatchClauseElements pCatchClause;
	private final QualifiedNameElements pQualifiedName;
	private final NumberElements pNumber;
	private final StaticQualifierElements pStaticQualifier;
	private final JMLMultilineSpecCommentStartElements pJMLMultilineSpecCommentStart;
	private final JMLMultilineSpecCommentEndElements pJMLMultilineSpecCommentEnd;
	private final TerminalRule tHEX;
	private final TerminalRule tINT;
	private final TerminalRule tDECIMAL;
	private final TerminalRule tML_COMMENT;
	private final TerminalRule tSL_COMMENT;
	private final TerminalRule tSTRING;
	private final TerminalRule tCHAR;
	
	private final Grammar grammar;

	private final XtypeGrammarAccess gaXtype;

	@Inject
	public JMLGrammarAccess(GrammarProvider grammarProvider,
		XtypeGrammarAccess gaXtype) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaXtype = gaXtype;
		this.pCompilationUnit = new CompilationUnitElements();
		this.pPackageDeclaration = new PackageDeclarationElements();
		this.pImportDeclaration = new ImportDeclarationElements();
		this.pClassifierDeclarationWithModifier = new ClassifierDeclarationWithModifierElements();
		this.pClassOrInterfaceDeclaration = new ClassOrInterfaceDeclarationElements();
		this.pModifier = new ModifierElements();
		this.pRegularModifier = new RegularModifierElements();
		this.unknownRuleModifierValue = new ModifierValueElements();
		this.unknownRuleVisibilityModifierValue = new VisibilityModifierValueElements();
		this.pClassDeclaration = new ClassDeclarationElements();
		this.pNormalClassDeclaration = new NormalClassDeclarationElements();
		this.pTypeParameters = new TypeParametersElements();
		this.pTypeParameter = new TypeParameterElements();
		this.pTypeBound = new TypeBoundElements();
		this.pEnumDeclaration = new EnumDeclarationElements();
		this.pEnumConstants = new EnumConstantsElements();
		this.pEnumConstant = new EnumConstantElements();
		this.pEnumBodyDeclarations = new EnumBodyDeclarationsElements();
		this.pArguments = new ArgumentsElements();
		this.pInterfaceDeclaration = new InterfaceDeclarationElements();
		this.pNormalInterfaceDeclaration = new NormalInterfaceDeclarationElements();
		this.pClassBodyDeclaration = new ClassBodyDeclarationElements();
		this.pStaticBlock = new StaticBlockElements();
		this.pJMLSpecifiedElement = new JMLSpecifiedElementElements();
		this.pJMLMultilineSpec = new JMLMultilineSpecElements();
		this.pJMLSinglelineSpec = new JMLSinglelineSpecElements();
		this.pJMLExpressionHaving = new JMLExpressionHavingElements();
		this.pVisiblityModifier = new VisiblityModifierElements();
		this.pJMLMethodSpecificationWithModifier = new JMLMethodSpecificationWithModifierElements();
		this.pJMLMethodSpecificationWithModifierRegular = new JMLMethodSpecificationWithModifierRegularElements();
		this.pJMLMethodSpecificationWithModifierExtended = new JMLMethodSpecificationWithModifierExtendedElements();
		this.pJMLMethodSpecification = new JMLMethodSpecificationElements();
		this.pJMLMethodBehavior = new JMLMethodBehaviorElements();
		this.pJMLExceptionalBehaviorBlock = new JMLExceptionalBehaviorBlockElements();
		this.pJMLNormalBehaviorBlock = new JMLNormalBehaviorBlockElements();
		this.pJMLBehaviorBlock = new JMLBehaviorBlockElements();
		this.pJMLMethodExpression = new JMLMethodExpressionElements();
		this.pJMLEnsuresExpression = new JMLEnsuresExpressionElements();
		this.pJMLRequiresExpression = new JMLRequiresExpressionElements();
		this.pJMLSpecificationOnlyElementWithModifier = new JMLSpecificationOnlyElementWithModifierElements();
		this.pJMLSpecificationOnlyElement = new JMLSpecificationOnlyElementElements();
		this.pJMLModelElement = new JMLModelElementElements();
		this.pJMLGhostElement = new JMLGhostElementElements();
		this.pJMLTypeExpressionWithModifier = new JMLTypeExpressionWithModifierElements();
		this.pJMLTypeExpression = new JMLTypeExpressionElements();
		this.pJMLInvariantExpression = new JMLInvariantExpressionElements();
		this.pJMLConstraintExpression = new JMLConstraintExpressionElements();
		this.pJMLAxiomExpression = new JMLAxiomExpressionElements();
		this.pJMLMemberModifier = new JMLMemberModifierElements();
		this.unknownRuleJMLSpecMemberModifier = new JMLSpecMemberModifierElements();
		this.pMemberDeclWithModifier = new MemberDeclWithModifierElements();
		this.pMemberDeclWithModifierRegular = new MemberDeclWithModifierRegularElements();
		this.pMemberDeclWithModifierSpec = new MemberDeclWithModifierSpecElements();
		this.pMemberDecl = new MemberDeclElements();
		this.pConstructor = new ConstructorElements();
		this.pMemberDeclaration = new MemberDeclarationElements();
		this.pGenericMethodOrConstructorDeclOld = new GenericMethodOrConstructorDeclOldElements();
		this.pGenericMethodOrConstructorDecl = new GenericMethodOrConstructorDeclElements();
		this.pMethodDeclaration = new MethodDeclarationElements();
		this.pFieldDeclaration = new FieldDeclarationElements();
		this.pDeclaredException = new DeclaredExceptionElements();
		this.pVariableDeclarator = new VariableDeclaratorElements();
		this.pType = new TypeElements();
		this.pClassOrInterfaceTypeWithBrackets = new ClassOrInterfaceTypeWithBracketsElements();
		this.pPrimitiveTypeWithBrackets = new PrimitiveTypeWithBracketsElements();
		this.pBrackets = new BracketsElements();
		this.pClassOrInterfaceType = new ClassOrInterfaceTypeElements();
		this.pClassifierType = new ClassifierTypeElements();
		this.unknownRulePrimitiveType = new PrimitiveTypeElements();
		this.pTypeArguments = new TypeArgumentsElements();
		this.pTypeArgument = new TypeArgumentElements();
		this.pFormalParameterDecl = new FormalParameterDeclElements();
		this.pMethodBody = new MethodBodyElements();
		this.pConstructorBody = new ConstructorBodyElements();
		this.pModifiable = new ModifiableElements();
		this.pTyped = new TypedElements();
		this.pAnnotations = new AnnotationsElements();
		this.pAnnotation = new AnnotationElements();
		this.pAnnotationName = new AnnotationNameElements();
		this.pElementValuePairs = new ElementValuePairsElements();
		this.pElementValuePair = new ElementValuePairElements();
		this.pElementValue = new ElementValueElements();
		this.pElementValueArrayInitializer = new ElementValueArrayInitializerElements();
		this.pAnnotationTypeDeclaration = new AnnotationTypeDeclarationElements();
		this.pAnnotationTypeElementDeclaration = new AnnotationTypeElementDeclarationElements();
		this.pAnnotationTypeElementRest = new AnnotationTypeElementRestElements();
		this.pAnnotationMethodOrConstantRest = new AnnotationMethodOrConstantRestElements();
		this.pAnnotationMethodRest = new AnnotationMethodRestElements();
		this.pAnnotationConstantRest = new AnnotationConstantRestElements();
		this.pDefaultValue = new DefaultValueElements();
		this.pBlock = new BlockElements();
		this.pBlockStatement = new BlockStatementElements();
		this.pIdentifierHaving = new IdentifierHavingElements();
		this.pExpression = new ExpressionElements();
		this.pAssignment = new AssignmentElements();
		this.pOpSingleAssign = new OpSingleAssignElements();
		this.pOpMultiAssign = new OpMultiAssignElements();
		this.pOrExpression = new OrExpressionElements();
		this.pOpOr = new OpOrElements();
		this.pAndExpression = new AndExpressionElements();
		this.pOpAnd = new OpAndElements();
		this.pEqualityExpression = new EqualityExpressionElements();
		this.pOpEquality = new OpEqualityElements();
		this.pRelationalExpression = new RelationalExpressionElements();
		this.pOpCompare = new OpCompareElements();
		this.pOtherOperatorExpression = new OtherOperatorExpressionElements();
		this.pOpOther = new OpOtherElements();
		this.pAdditiveExpression = new AdditiveExpressionElements();
		this.pOpAdd = new OpAddElements();
		this.pMultiplicativeExpression = new MultiplicativeExpressionElements();
		this.pOpMulti = new OpMultiElements();
		this.pUnaryOperation = new UnaryOperationElements();
		this.pOpUnary = new OpUnaryElements();
		this.pPostfixOperation = new PostfixOperationElements();
		this.pOpPostfix = new OpPostfixElements();
		this.pMemberFeatureCall = new MemberFeatureCallElements();
		this.pPrimaryExpression = new PrimaryExpressionElements();
		this.pParenthesisExpression = new ParenthesisExpressionElements();
		this.pJMLOldExpression = new JMLOldExpressionElements();
		this.pJMLFreshExpression = new JMLFreshExpressionElements();
		this.pJMLResultExpression = new JMLResultExpressionElements();
		this.pJMLForAllExpression = new JMLForAllExpressionElements();
		this.pVarDecl = new VarDeclElements();
		this.pLiteral = new LiteralElements();
		this.pCollectionLiteral = new CollectionLiteralElements();
		this.pSetLiteral = new SetLiteralElements();
		this.pListLiteral = new ListLiteralElements();
		this.pClosure = new ClosureElements();
		this.pExpressionInClosure = new ExpressionInClosureElements();
		this.pShortClosure = new ShortClosureElements();
		this.pParenthesizedExpression = new ParenthesizedExpressionElements();
		this.pIfExpression = new IfExpressionElements();
		this.pSwitchExpression = new SwitchExpressionElements();
		this.pCasePart = new CasePartElements();
		this.pForLoopExpression = new ForLoopExpressionElements();
		this.pBasicForLoopExpression = new BasicForLoopExpressionElements();
		this.pWhileExpression = new WhileExpressionElements();
		this.pDoWhileExpression = new DoWhileExpressionElements();
		this.pBlockExpression = new BlockExpressionElements();
		this.pExpressionOrVarDeclaration = new ExpressionOrVarDeclarationElements();
		this.pJvmFormalParameter = new JvmFormalParameterElements();
		this.pFullJvmFormalParameter = new FullJvmFormalParameterElements();
		this.pFeatureCall = new FeatureCallElements();
		this.pFeatureCallID = new FeatureCallIDElements();
		this.pIdOrSuper = new IdOrSuperElements();
		this.pConstructorCall = new ConstructorCallElements();
		this.pBooleanLiteral = new BooleanLiteralElements();
		this.pNullLiteral = new NullLiteralElements();
		this.pNumberLiteral = new NumberLiteralElements();
		this.pStringLiteral = new StringLiteralElements();
		this.pCharLiteral = new CharLiteralElements();
		this.pThrowExpression = new ThrowExpressionElements();
		this.pReturnExpression = new ReturnExpressionElements();
		this.pTryCatchFinallyExpression = new TryCatchFinallyExpressionElements();
		this.pSynchronizedExpression = new SynchronizedExpressionElements();
		this.pCatchClause = new CatchClauseElements();
		this.pQualifiedName = new QualifiedNameElements();
		this.pNumber = new NumberElements();
		this.pStaticQualifier = new StaticQualifierElements();
		this.pJMLMultilineSpecCommentStart = new JMLMultilineSpecCommentStartElements();
		this.pJMLMultilineSpecCommentEnd = new JMLMultilineSpecCommentEndElements();
		this.tHEX = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "HEX");
		this.tINT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "INT");
		this.tDECIMAL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "DECIMAL");
		this.tML_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ML_COMMENT");
		this.tSL_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "SL_COMMENT");
		this.tSTRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "STRING");
		this.tCHAR = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "CHAR");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("edu.kit.ipd.sdq.vitruvius.casestudies.jml.language.JML".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public XtypeGrammarAccess getXtypeGrammarAccess() {
		return gaXtype;
	}

	
	//CompilationUnit:
	//	{CompilationUnit} packagedeclaration=PackageDeclaration? importdeclaration+=ImportDeclaration*
	//	typedeclaration+=ClassifierDeclarationWithModifier*;
	public CompilationUnitElements getCompilationUnitAccess() {
		return pCompilationUnit;
	}
	
	public ParserRule getCompilationUnitRule() {
		return getCompilationUnitAccess().getRule();
	}

	//PackageDeclaration:
	//	"package" qualifiedname=QualifiedName ";";
	public PackageDeclarationElements getPackageDeclarationAccess() {
		return pPackageDeclaration;
	}
	
	public ParserRule getPackageDeclarationRule() {
		return getPackageDeclarationAccess().getRule();
	}

	//ImportDeclaration:
	//	"import" static?="static"? qualifiedname=QualifiedName ("." wildcard?="*")? ";";
	public ImportDeclarationElements getImportDeclarationAccess() {
		return pImportDeclaration;
	}
	
	public ParserRule getImportDeclarationRule() {
		return getImportDeclarationAccess().getRule();
	}

	//ClassifierDeclarationWithModifier:
	//	modifiers+=Modifier* classOrInterfaceDeclaration=ClassOrInterfaceDeclaration;
	public ClassifierDeclarationWithModifierElements getClassifierDeclarationWithModifierAccess() {
		return pClassifierDeclarationWithModifier;
	}
	
	public ParserRule getClassifierDeclarationWithModifierRule() {
		return getClassifierDeclarationWithModifierAccess().getRule();
	}

	//ClassOrInterfaceDeclaration:
	//	ClassDeclaration | InterfaceDeclaration;
	public ClassOrInterfaceDeclarationElements getClassOrInterfaceDeclarationAccess() {
		return pClassOrInterfaceDeclaration;
	}
	
	public ParserRule getClassOrInterfaceDeclarationRule() {
		return getClassOrInterfaceDeclarationAccess().getRule();
	}

	//Modifier:
	//	Annotation | RegularModifier;
	public ModifierElements getModifierAccess() {
		return pModifier;
	}
	
	public ParserRule getModifierRule() {
		return getModifierAccess().getRule();
	}

	//RegularModifier:
	//	modifier=ModifierValue;
	public RegularModifierElements getRegularModifierAccess() {
		return pRegularModifier;
	}
	
	public ParserRule getRegularModifierRule() {
		return getRegularModifierAccess().getRule();
	}

	//enum ModifierValue:
	//	PUBLIC="public" | PROTECTED="protected" | PRIVATE="private" | STATIC="static" | ABSTRACT="abstract" | FINAL="final" |
	//	NATIVE="native" | SYNCHRONIZED="synchronized" | TRANSIENT="transient" | VOLATILE="volatile" | STRICTFP="strictfp";
	public ModifierValueElements getModifierValueAccess() {
		return unknownRuleModifierValue;
	}
	
	public EnumRule getModifierValueRule() {
		return getModifierValueAccess().getRule();
	}

	//enum VisibilityModifierValue:
	//	PUBLIC="public" | PROTECTED="protected" | PRIVATE="private" | STATIC="static";
	public VisibilityModifierValueElements getVisibilityModifierValueAccess() {
		return unknownRuleVisibilityModifierValue;
	}
	
	public EnumRule getVisibilityModifierValueRule() {
		return getVisibilityModifierValueAccess().getRule();
	}

	//ClassDeclaration:
	//	NormalClassDeclaration | EnumDeclaration;
	public ClassDeclarationElements getClassDeclarationAccess() {
		return pClassDeclaration;
	}
	
	public ParserRule getClassDeclarationRule() {
		return getClassDeclarationAccess().getRule();
	}

	//NormalClassDeclaration:
	//	"class" identifier=ID typeparameters=TypeParameters? ("extends" superType=Type)? ("implements" implementedTypes+=Type
	//	("," implementedTypes+=Type)*)? "{" bodyDeclarations+=ClassBodyDeclaration* "}";
	public NormalClassDeclarationElements getNormalClassDeclarationAccess() {
		return pNormalClassDeclaration;
	}
	
	public ParserRule getNormalClassDeclarationRule() {
		return getNormalClassDeclarationAccess().getRule();
	}

	//TypeParameters:
	//	"<" typeparameter+=TypeParameter ("," typeparameter+=TypeParameter)* ">";
	public TypeParametersElements getTypeParametersAccess() {
		return pTypeParameters;
	}
	
	public ParserRule getTypeParametersRule() {
		return getTypeParametersAccess().getRule();
	}

	//TypeParameter:
	//	{TypeParameter} identifier=ID ("extends" typebound=TypeBound)?;
	public TypeParameterElements getTypeParameterAccess() {
		return pTypeParameter;
	}
	
	public ParserRule getTypeParameterRule() {
		return getTypeParameterAccess().getRule();
	}

	//TypeBound:
	//	type+=Type ("&" type+=Type)*;
	public TypeBoundElements getTypeBoundAccess() {
		return pTypeBound;
	}
	
	public ParserRule getTypeBoundRule() {
		return getTypeBoundAccess().getRule();
	}

	//EnumDeclaration:
	//	"enum" identifier=ID ("implements" implementedTypes+=Type ("," implementedTypes+=Type)*)? "{"
	//	enumconstants=EnumConstants? ","? bodyDeclarations=EnumBodyDeclarations? "}";
	public EnumDeclarationElements getEnumDeclarationAccess() {
		return pEnumDeclaration;
	}
	
	public ParserRule getEnumDeclarationRule() {
		return getEnumDeclarationAccess().getRule();
	}

	//EnumConstants:
	//	enumconstant+=EnumConstant ("," enumconstant+=EnumConstant)*;
	public EnumConstantsElements getEnumConstantsAccess() {
		return pEnumConstants;
	}
	
	public ParserRule getEnumConstantsRule() {
		return getEnumConstantsAccess().getRule();
	}

	//EnumConstant:
	//	{EnumConstant} (annotations=Annotations? identifier=ID arguments=Arguments? ("{"
	//	classbodydeclaration+=ClassBodyDeclaration* "}")?);
	public EnumConstantElements getEnumConstantAccess() {
		return pEnumConstant;
	}
	
	public ParserRule getEnumConstantRule() {
		return getEnumConstantAccess().getRule();
	}

	//EnumBodyDeclarations:
	//	{EnumBodyDeclarations} ";" classbodydeclaration+=ClassBodyDeclaration*;
	public EnumBodyDeclarationsElements getEnumBodyDeclarationsAccess() {
		return pEnumBodyDeclarations;
	}
	
	public ParserRule getEnumBodyDeclarationsRule() {
		return getEnumBodyDeclarationsAccess().getRule();
	}

	//Arguments:
	//	{Arguments} "(" expressions+=Expression ("," expressions+=Expression) ")";
	public ArgumentsElements getArgumentsAccess() {
		return pArguments;
	}
	
	public ParserRule getArgumentsRule() {
		return getArgumentsAccess().getRule();
	}

	//InterfaceDeclaration:
	//	NormalInterfaceDeclaration | AnnotationTypeDeclaration;
	public InterfaceDeclarationElements getInterfaceDeclarationAccess() {
		return pInterfaceDeclaration;
	}
	
	public ParserRule getInterfaceDeclarationRule() {
		return getInterfaceDeclarationAccess().getRule();
	}

	//NormalInterfaceDeclaration:
	//	"interface" identifier=ID typeparameters=TypeParameters? ("extends" implementedTypes+=Type (","
	//	implementedTypes+=Type)*)? "{" bodyDeclarations+=ClassBodyDeclaration* "}";
	public NormalInterfaceDeclarationElements getNormalInterfaceDeclarationAccess() {
		return pNormalInterfaceDeclaration;
	}
	
	public ParserRule getNormalInterfaceDeclarationRule() {
		return getNormalInterfaceDeclarationAccess().getRule();
	}

	//ClassBodyDeclaration:
	//	{ClassBodyDeclaration} ";" | StaticBlock | JMLSpecifiedElement;
	public ClassBodyDeclarationElements getClassBodyDeclarationAccess() {
		return pClassBodyDeclaration;
	}
	
	public ParserRule getClassBodyDeclarationRule() {
		return getClassBodyDeclarationAccess().getRule();
	}

	//StaticBlock:
	//	static?="static"? block=Block;
	public StaticBlockElements getStaticBlockAccess() {
		return pStaticBlock;
	}
	
	public ParserRule getStaticBlockRule() {
		return getStaticBlockAccess().getRule();
	}

	//JMLSpecifiedElement:
	//	JMLMultilineSpec | JMLSinglelineSpec;
	public JMLSpecifiedElementElements getJMLSpecifiedElementAccess() {
		return pJMLSpecifiedElement;
	}
	
	public ParserRule getJMLSpecifiedElementRule() {
		return getJMLSpecifiedElementAccess().getRule();
	}

	//// requires look ahead because of the modifiers
	//JMLMultilineSpec:
	//	JMLMultilineSpecCommentStart (jmlTypeSpecifications+=JMLTypeExpressionWithModifier+ JMLMultilineSpecCommentEnd |
	//	jmlSpecifications+=JMLMethodSpecificationWithModifier* (modelElement=JMLSpecificationOnlyElementWithModifier
	//	JMLMultilineSpecCommentEnd | JMLMultilineSpecCommentEnd element=MemberDeclWithModifierRegular));
	public JMLMultilineSpecElements getJMLMultilineSpecAccess() {
		return pJMLMultilineSpec;
	}
	
	public ParserRule getJMLMultilineSpecRule() {
		return getJMLMultilineSpecAccess().getRule();
	}

	//JMLSinglelineSpec:
	//	element=MemberDeclWithModifierRegular | "//@" (jmlTypeSpecifications+=JMLTypeExpressionWithModifier |
	//	jmlSpecifications+=JMLMethodSpecificationWithModifier ("//@" jmlSpecifications+=JMLMethodSpecificationWithModifier)*
	//	element=MemberDeclWithModifierRegular);
	public JMLSinglelineSpecElements getJMLSinglelineSpecAccess() {
		return pJMLSinglelineSpec;
	}
	
	public ParserRule getJMLSinglelineSpecRule() {
		return getJMLSinglelineSpecAccess().getRule();
	}

	//JMLExpressionHaving:
	//	JMLMethodExpression | JMLTypeExpression;
	public JMLExpressionHavingElements getJMLExpressionHavingAccess() {
		return pJMLExpressionHaving;
	}
	
	public ParserRule getJMLExpressionHavingRule() {
		return getJMLExpressionHavingAccess().getRule();
	}

	//VisiblityModifier:
	//	modifier=VisibilityModifierValue;
	public VisiblityModifierElements getVisiblityModifierAccess() {
		return pVisiblityModifier;
	}
	
	public ParserRule getVisiblityModifierRule() {
		return getVisiblityModifierAccess().getRule();
	}

	//JMLMethodSpecificationWithModifier:
	//	JMLMethodSpecificationWithModifierRegular | JMLMethodSpecificationWithModifierExtended;
	public JMLMethodSpecificationWithModifierElements getJMLMethodSpecificationWithModifierAccess() {
		return pJMLMethodSpecificationWithModifier;
	}
	
	public ParserRule getJMLMethodSpecificationWithModifierRule() {
		return getJMLMethodSpecificationWithModifierAccess().getRule();
	}

	//JMLMethodSpecificationWithModifierRegular:
	//	modifier+=VisiblityModifier* spec=JMLMethodSpecification;
	public JMLMethodSpecificationWithModifierRegularElements getJMLMethodSpecificationWithModifierRegularAccess() {
		return pJMLMethodSpecificationWithModifierRegular;
	}
	
	public ParserRule getJMLMethodSpecificationWithModifierRegularRule() {
		return getJMLMethodSpecificationWithModifierRegularAccess().getRule();
	}

	//JMLMethodSpecificationWithModifierExtended:
	//	"also" modifier+=VisiblityModifier* spec=JMLMethodSpecification;
	public JMLMethodSpecificationWithModifierExtendedElements getJMLMethodSpecificationWithModifierExtendedAccess() {
		return pJMLMethodSpecificationWithModifierExtended;
	}
	
	public ParserRule getJMLMethodSpecificationWithModifierExtendedRule() {
		return getJMLMethodSpecificationWithModifierExtendedAccess().getRule();
	}

	//JMLMethodSpecification:
	//	JMLMethodExpression | JMLMethodBehavior;
	public JMLMethodSpecificationElements getJMLMethodSpecificationAccess() {
		return pJMLMethodSpecification;
	}
	
	public ParserRule getJMLMethodSpecificationRule() {
		return getJMLMethodSpecificationAccess().getRule();
	}

	//JMLMethodBehavior:
	//	JMLExceptionalBehaviorBlock | JMLNormalBehaviorBlock | JMLBehaviorBlock;
	public JMLMethodBehaviorElements getJMLMethodBehaviorAccess() {
		return pJMLMethodBehavior;
	}
	
	public ParserRule getJMLMethodBehaviorRule() {
		return getJMLMethodBehaviorAccess().getRule();
	}

	//JMLExceptionalBehaviorBlock:
	//	"exceptional_behavior" specifications+=JMLMethodExpression+;
	public JMLExceptionalBehaviorBlockElements getJMLExceptionalBehaviorBlockAccess() {
		return pJMLExceptionalBehaviorBlock;
	}
	
	public ParserRule getJMLExceptionalBehaviorBlockRule() {
		return getJMLExceptionalBehaviorBlockAccess().getRule();
	}

	//JMLNormalBehaviorBlock:
	//	"normal_behavior" specifications+=JMLMethodExpression+;
	public JMLNormalBehaviorBlockElements getJMLNormalBehaviorBlockAccess() {
		return pJMLNormalBehaviorBlock;
	}
	
	public ParserRule getJMLNormalBehaviorBlockRule() {
		return getJMLNormalBehaviorBlockAccess().getRule();
	}

	//JMLBehaviorBlock:
	//	"behavior" specifications+=JMLMethodExpression+;
	public JMLBehaviorBlockElements getJMLBehaviorBlockAccess() {
		return pJMLBehaviorBlock;
	}
	
	public ParserRule getJMLBehaviorBlockRule() {
		return getJMLBehaviorBlockAccess().getRule();
	}

	//JMLMethodExpression:
	//	(JMLEnsuresExpression | JMLRequiresExpression) ";";
	public JMLMethodExpressionElements getJMLMethodExpressionAccess() {
		return pJMLMethodExpression;
	}
	
	public ParserRule getJMLMethodExpressionRule() {
		return getJMLMethodExpressionAccess().getRule();
	}

	//JMLEnsuresExpression:
	//	"ensures" expr=Expression;
	public JMLEnsuresExpressionElements getJMLEnsuresExpressionAccess() {
		return pJMLEnsuresExpression;
	}
	
	public ParserRule getJMLEnsuresExpressionRule() {
		return getJMLEnsuresExpressionAccess().getRule();
	}

	//JMLRequiresExpression:
	//	"requires" expr=Expression;
	public JMLRequiresExpressionElements getJMLRequiresExpressionAccess() {
		return pJMLRequiresExpression;
	}
	
	public ParserRule getJMLRequiresExpressionRule() {
		return getJMLRequiresExpressionAccess().getRule();
	}

	//JMLSpecificationOnlyElementWithModifier:
	//	modifier+=VisiblityModifier* element=JMLSpecificationOnlyElement;
	public JMLSpecificationOnlyElementWithModifierElements getJMLSpecificationOnlyElementWithModifierAccess() {
		return pJMLSpecificationOnlyElementWithModifier;
	}
	
	public ParserRule getJMLSpecificationOnlyElementWithModifierRule() {
		return getJMLSpecificationOnlyElementWithModifierAccess().getRule();
	}

	//JMLSpecificationOnlyElement:
	//	JMLGhostElement | JMLModelElement;
	public JMLSpecificationOnlyElementElements getJMLSpecificationOnlyElementAccess() {
		return pJMLSpecificationOnlyElement;
	}
	
	public ParserRule getJMLSpecificationOnlyElementRule() {
		return getJMLSpecificationOnlyElementAccess().getRule();
	}

	//JMLModelElement:
	//	"model" instance?="instance"? element=MemberDeclWithModifierSpec;
	public JMLModelElementElements getJMLModelElementAccess() {
		return pJMLModelElement;
	}
	
	public ParserRule getJMLModelElementRule() {
		return getJMLModelElementAccess().getRule();
	}

	//JMLGhostElement:
	//	"ghost" instance?="instance"? element=MemberDeclWithModifierSpec;
	public JMLGhostElementElements getJMLGhostElementAccess() {
		return pJMLGhostElement;
	}
	
	public ParserRule getJMLGhostElementRule() {
		return getJMLGhostElementAccess().getRule();
	}

	//JMLTypeExpressionWithModifier:
	//	modifier+=VisiblityModifier* spec=JMLTypeExpression;
	public JMLTypeExpressionWithModifierElements getJMLTypeExpressionWithModifierAccess() {
		return pJMLTypeExpressionWithModifier;
	}
	
	public ParserRule getJMLTypeExpressionWithModifierRule() {
		return getJMLTypeExpressionWithModifierAccess().getRule();
	}

	//JMLTypeExpression:
	//	(JMLInvariantExpression | JMLConstraintExpression | JMLAxiomExpression) ";";
	public JMLTypeExpressionElements getJMLTypeExpressionAccess() {
		return pJMLTypeExpression;
	}
	
	public ParserRule getJMLTypeExpressionRule() {
		return getJMLTypeExpressionAccess().getRule();
	}

	//JMLInvariantExpression:
	//	"invariant" expr=Expression;
	public JMLInvariantExpressionElements getJMLInvariantExpressionAccess() {
		return pJMLInvariantExpression;
	}
	
	public ParserRule getJMLInvariantExpressionRule() {
		return getJMLInvariantExpressionAccess().getRule();
	}

	//JMLConstraintExpression:
	//	"constraint" expr=Expression;
	public JMLConstraintExpressionElements getJMLConstraintExpressionAccess() {
		return pJMLConstraintExpression;
	}
	
	public ParserRule getJMLConstraintExpressionRule() {
		return getJMLConstraintExpressionAccess().getRule();
	}

	//JMLAxiomExpression:
	//	"axiom" expr=Expression;
	public JMLAxiomExpressionElements getJMLAxiomExpressionAccess() {
		return pJMLAxiomExpression;
	}
	
	public ParserRule getJMLAxiomExpressionRule() {
		return getJMLAxiomExpressionAccess().getRule();
	}

	////JMLMemberModifierContainer:
	////	// the jml comments are required for regular elements, but forbidden for model elements...
	////	'/ *@'? modifiers+=JMLMemberModifier (',' + modifiers+=JMLMemberModifier)* '* /'?
	////;
	//JMLMemberModifier:
	//	modifier=JMLSpecMemberModifier;
	public JMLMemberModifierElements getJMLMemberModifierAccess() {
		return pJMLMemberModifier;
	}
	
	public ParserRule getJMLMemberModifierRule() {
		return getJMLMemberModifierAccess().getRule();
	}

	//enum JMLSpecMemberModifier:
	//	PURE="pure" | HELPER="helper" | PUBLIC="spec_public" | PROTECTED="spec_protected";
	public JMLSpecMemberModifierElements getJMLSpecMemberModifierAccess() {
		return unknownRuleJMLSpecMemberModifier;
	}
	
	public EnumRule getJMLSpecMemberModifierRule() {
		return getJMLSpecMemberModifierAccess().getRule();
	}

	//MemberDeclWithModifier:
	//	MemberDeclWithModifierRegular | MemberDeclWithModifierSpec;
	public MemberDeclWithModifierElements getMemberDeclWithModifierAccess() {
		return pMemberDeclWithModifier;
	}
	
	public ParserRule getMemberDeclWithModifierRule() {
		return getMemberDeclWithModifierAccess().getRule();
	}

	//MemberDeclWithModifierRegular:
	//	modifiers+=Modifier* (JMLMultilineSpecCommentStart jmlModifiers+=JMLMemberModifier+ JMLMultilineSpecCommentEnd)?
	//	/ *jmlModifiers=JMLMemberModifierContainer?* / memberdecl=MemberDecl;
	public MemberDeclWithModifierRegularElements getMemberDeclWithModifierRegularAccess() {
		return pMemberDeclWithModifierRegular;
	}
	
	public ParserRule getMemberDeclWithModifierRegularRule() {
		return getMemberDeclWithModifierRegularAccess().getRule();
	}

	//MemberDeclWithModifierSpec:
	//	modifiers+=Modifier* jmlModifiers+=JMLMemberModifier* memberdecl=MemberDecl;
	public MemberDeclWithModifierSpecElements getMemberDeclWithModifierSpecAccess() {
		return pMemberDeclWithModifierSpec;
	}
	
	public ParserRule getMemberDeclWithModifierSpecRule() {
		return getMemberDeclWithModifierSpecAccess().getRule();
	}

	//MemberDecl:
	//	GenericMethodOrConstructorDecl / *| VoidMethod * / | MemberDeclaration | Constructor | InterfaceDeclaration |
	//	ClassDeclaration;
	public MemberDeclElements getMemberDeclAccess() {
		return pMemberDecl;
	}
	
	public ParserRule getMemberDeclRule() {
		return getMemberDeclAccess().getRule();
	}

	//Constructor:
	//	identifier=ID "(" (parameters+=FormalParameterDecl ("," parameters+=FormalParameterDecl)*)? ")" ("throws"
	//	exceptions+=DeclaredException ("," exceptions+=DeclaredException)*)? (constructorbody=ConstructorBody | ";");
	public ConstructorElements getConstructorAccess() {
		return pConstructor;
	}
	
	public ParserRule getConstructorRule() {
		return getConstructorAccess().getRule();
	}

	//MemberDeclaration:
	//	(type=Type // this enables void fields but I don't care :D
	//	| "void") (method=MethodDeclaration | field=FieldDeclaration);
	public MemberDeclarationElements getMemberDeclarationAccess() {
		return pMemberDeclaration;
	}
	
	public ParserRule getMemberDeclarationRule() {
		return getMemberDeclarationAccess().getRule();
	}

	//GenericMethodOrConstructorDeclOld:
	//	TypeParameters (type=Type | "void") identifier=ID "(" (parameters+=FormalParameterDecl (","
	//	parameters+=FormalParameterDecl)*)? ")" / *brackets+=Brackets** / ("throws" exceptions+=DeclaredException (","
	//	exceptions+=DeclaredException)*)? (methodbody=MethodBody | ";") | constructor=Constructor;
	public GenericMethodOrConstructorDeclOldElements getGenericMethodOrConstructorDeclOldAccess() {
		return pGenericMethodOrConstructorDeclOld;
	}
	
	public ParserRule getGenericMethodOrConstructorDeclOldRule() {
		return getGenericMethodOrConstructorDeclOldAccess().getRule();
	}

	//GenericMethodOrConstructorDecl:
	//	typeParameters=TypeParameters ((type=Type method=MethodDeclaration | "void" method=MethodDeclaration) |
	//	constructor=Constructor);
	public GenericMethodOrConstructorDeclElements getGenericMethodOrConstructorDeclAccess() {
		return pGenericMethodOrConstructorDecl;
	}
	
	public ParserRule getGenericMethodOrConstructorDeclRule() {
		return getGenericMethodOrConstructorDeclAccess().getRule();
	}

	//MethodDeclaration:
	//	identifier=ID "(" (parameters+=FormalParameterDecl ("," parameters+=FormalParameterDecl)*)? ")"
	//	/ *brackets+=Brackets** / ("throws" exceptions+=DeclaredException ("," exceptions+=DeclaredException)*)?
	//	(methodbody=MethodBody | ";");
	public MethodDeclarationElements getMethodDeclarationAccess() {
		return pMethodDeclaration;
	}
	
	public ParserRule getMethodDeclarationRule() {
		return getMethodDeclarationAccess().getRule();
	}

	//FieldDeclaration:
	//	variabledeclarator+=VariableDeclarator ("," variabledeclarator+=VariableDeclarator)* ";";
	public FieldDeclarationElements getFieldDeclarationAccess() {
		return pFieldDeclaration;
	}
	
	public ParserRule getFieldDeclarationRule() {
		return getFieldDeclarationAccess().getRule();
	}

	//DeclaredException:
	//	name=QualifiedName;
	public DeclaredExceptionElements getDeclaredExceptionAccess() {
		return pDeclaredException;
	}
	
	public ParserRule getDeclaredExceptionRule() {
		return getDeclaredExceptionAccess().getRule();
	}

	//VariableDeclarator:
	//	{VariableDeclarator} identifier=ID brackets+=Brackets* ("=" expression=Expression)?;
	public VariableDeclaratorElements getVariableDeclaratorAccess() {
		return pVariableDeclarator;
	}
	
	public ParserRule getVariableDeclaratorRule() {
		return getVariableDeclaratorAccess().getRule();
	}

	//Type:
	//	ClassOrInterfaceTypeWithBrackets | PrimitiveTypeWithBrackets;
	public TypeElements getTypeAccess() {
		return pType;
	}
	
	public ParserRule getTypeRule() {
		return getTypeAccess().getRule();
	}

	//ClassOrInterfaceTypeWithBrackets:
	//	type+=ClassifierType ("." type+=ClassifierType)* brackets+=Brackets*;
	public ClassOrInterfaceTypeWithBracketsElements getClassOrInterfaceTypeWithBracketsAccess() {
		return pClassOrInterfaceTypeWithBrackets;
	}
	
	public ParserRule getClassOrInterfaceTypeWithBracketsRule() {
		return getClassOrInterfaceTypeWithBracketsAccess().getRule();
	}

	//PrimitiveTypeWithBrackets:
	//	primitivetype=PrimitiveType brackets+=Brackets*;
	public PrimitiveTypeWithBracketsElements getPrimitiveTypeWithBracketsAccess() {
		return pPrimitiveTypeWithBrackets;
	}
	
	public ParserRule getPrimitiveTypeWithBracketsRule() {
		return getPrimitiveTypeWithBracketsAccess().getRule();
	}

	//Brackets:
	//	{Brackets} "[" "]";
	public BracketsElements getBracketsAccess() {
		return pBrackets;
	}
	
	public ParserRule getBracketsRule() {
		return getBracketsAccess().getRule();
	}

	//ClassOrInterfaceType:
	//	{ClassOrInterfaceType} type+=ClassifierType ("." type+=ClassifierType)*;
	public ClassOrInterfaceTypeElements getClassOrInterfaceTypeAccess() {
		return pClassOrInterfaceType;
	}
	
	public ParserRule getClassOrInterfaceTypeRule() {
		return getClassOrInterfaceTypeAccess().getRule();
	}

	//ClassifierType:
	//	identifier=ID typearguments=TypeArguments?;
	public ClassifierTypeElements getClassifierTypeAccess() {
		return pClassifierType;
	}
	
	public ParserRule getClassifierTypeRule() {
		return getClassifierTypeAccess().getRule();
	}

	//enum PrimitiveType:
	//	BOOLEAN="boolean" | CHAR="char" | BYTE="byte" | SHORT="short" | INT="int" | LONG="long" | FLOAT="float" |
	//	DOUBLE="double";
	public PrimitiveTypeElements getPrimitiveTypeAccess() {
		return unknownRulePrimitiveType;
	}
	
	public EnumRule getPrimitiveTypeRule() {
		return getPrimitiveTypeAccess().getRule();
	}

	//TypeArguments:
	//	"<" typeargument+=TypeArgument ("," typeargument+=TypeArgument)* ">";
	public TypeArgumentsElements getTypeArgumentsAccess() {
		return pTypeArguments;
	}
	
	public ParserRule getTypeArgumentsRule() {
		return getTypeArgumentsAccess().getRule();
	}

	//TypeArgument:
	//	{TypeArgument} (type=Type | wildcard?="?" ((extends?="extends" | super?="super") type=Type)?);
	public TypeArgumentElements getTypeArgumentAccess() {
		return pTypeArgument;
	}
	
	public ParserRule getTypeArgumentRule() {
		return getTypeArgumentAccess().getRule();
	}

	//FormalParameterDecl: // this is just to ease the access to parameters, invalid java syntax can be produced...
	//// correct handling is given in FormalParameterDecls
	//	modifiers+=Modifier* type=Type varargs?="..."? identifier= / *brackets+=Brackets** / ID;
	public FormalParameterDeclElements getFormalParameterDeclAccess() {
		return pFormalParameterDecl;
	}
	
	public ParserRule getFormalParameterDeclRule() {
		return getFormalParameterDeclAccess().getRule();
	}

	//MethodBody:
	//	Block;
	public MethodBodyElements getMethodBodyAccess() {
		return pMethodBody;
	}
	
	public ParserRule getMethodBodyRule() {
		return getMethodBodyAccess().getRule();
	}

	//ConstructorBody:
	//	{ConstructorBody} / *=> explicitconstructorinvocation=ExplicitConstructorInvocation? => * / "{"
	//	blockstatement+=BlockStatement* "}";
	public ConstructorBodyElements getConstructorBodyAccess() {
		return pConstructorBody;
	}
	
	public ParserRule getConstructorBodyRule() {
		return getConstructorBodyAccess().getRule();
	}

	////ExplicitConstructorInvocation:   
	////	(NonWildcardTypeArguments? ('this' | 'super') arguments=Arguments ';'
	////    | primary=Primary '.' NonWildcardTypeArguments=NonWildcardTypeArguments? 'super' arguments=Arguments ';')
	////;
	//Modifiable:
	//	ClassifierDeclarationWithModifier | MemberDeclWithModifier | AnnotationTypeElementDeclaration | FormalParameterDecl;
	public ModifiableElements getModifiableAccess() {
		return pModifiable;
	}
	
	public ParserRule getModifiableRule() {
		return getModifiableAccess().getRule();
	}

	//Typed:
	//	AnnotationMethodOrConstantRest | MemberDeclaration | FormalParameterDecl;
	public TypedElements getTypedAccess() {
		return pTyped;
	}
	
	public ParserRule getTypedRule() {
		return getTypedAccess().getRule();
	}

	//// ================================================================
	//// Annotations
	//// ================================================================
	//Annotations:
	//	annotation+=Annotation+;
	public AnnotationsElements getAnnotationsAccess() {
		return pAnnotations;
	}
	
	public ParserRule getAnnotationsRule() {
		return getAnnotationsAccess().getRule();
	}

	//Annotation:
	//	{Annotation} "@" annotationname=AnnotationName ("(" (elementvaluepairs=ElementValuePairs |
	//	elementvalue=ElementValue)? ")")?;
	public AnnotationElements getAnnotationAccess() {
		return pAnnotation;
	}
	
	public ParserRule getAnnotationRule() {
		return getAnnotationAccess().getRule();
	}

	//AnnotationName:
	//	ID ("." ID)*;
	public AnnotationNameElements getAnnotationNameAccess() {
		return pAnnotationName;
	}
	
	public ParserRule getAnnotationNameRule() {
		return getAnnotationNameAccess().getRule();
	}

	//ElementValuePairs:
	//	elementvaluepair+=ElementValuePair ("," elementvaluepair+=ElementValuePair)*;
	public ElementValuePairsElements getElementValuePairsAccess() {
		return pElementValuePairs;
	}
	
	public ParserRule getElementValuePairsRule() {
		return getElementValuePairsAccess().getRule();
	}

	//ElementValuePair:
	//	identifier=ID "=" elementvalue=ElementValue;
	public ElementValuePairElements getElementValuePairAccess() {
		return pElementValuePair;
	}
	
	public ParserRule getElementValuePairRule() {
		return getElementValuePairAccess().getRule();
	}

	//ElementValue: / *ConditionalExpression |* / Annotation | ElementValueArrayInitializer;
	public ElementValueElements getElementValueAccess() {
		return pElementValue;
	}
	
	public ParserRule getElementValueRule() {
		return getElementValueAccess().getRule();
	}

	//ElementValueArrayInitializer:
	//	{ElementValueArrayInitializer} "{" (elementvalue+=ElementValue ("," elementvalue+=ElementValue)*)? => ","? "}";
	public ElementValueArrayInitializerElements getElementValueArrayInitializerAccess() {
		return pElementValueArrayInitializer;
	}
	
	public ParserRule getElementValueArrayInitializerRule() {
		return getElementValueArrayInitializerAccess().getRule();
	}

	//AnnotationTypeDeclaration:
	//	"@" "interface" identifier=ID "{" => annotationtypeelementdeclaration+=AnnotationTypeElementDeclaration* "}";
	public AnnotationTypeDeclarationElements getAnnotationTypeDeclarationAccess() {
		return pAnnotationTypeDeclaration;
	}
	
	public ParserRule getAnnotationTypeDeclarationRule() {
		return getAnnotationTypeDeclarationAccess().getRule();
	}

	//AnnotationTypeElementDeclaration:
	//	modifiers+=Modifier* annotationtypeelementrest=AnnotationTypeElementRest;
	public AnnotationTypeElementDeclarationElements getAnnotationTypeElementDeclarationAccess() {
		return pAnnotationTypeElementDeclaration;
	}
	
	public ParserRule getAnnotationTypeElementDeclarationRule() {
		return getAnnotationTypeElementDeclarationAccess().getRule();
	}

	//AnnotationTypeElementRest:
	//	AnnotationMethodOrConstantRest ";" | NormalClassDeclaration ";"? | NormalInterfaceDeclaration ";"? | EnumDeclaration
	//	";"? | AnnotationTypeDeclaration ";"?;
	public AnnotationTypeElementRestElements getAnnotationTypeElementRestAccess() {
		return pAnnotationTypeElementRest;
	}
	
	public ParserRule getAnnotationTypeElementRestRule() {
		return getAnnotationTypeElementRestAccess().getRule();
	}

	//AnnotationMethodOrConstantRest:
	//	type=Type (method=AnnotationMethodRest | constant=AnnotationConstantRest);
	public AnnotationMethodOrConstantRestElements getAnnotationMethodOrConstantRestAccess() {
		return pAnnotationMethodOrConstantRest;
	}
	
	public ParserRule getAnnotationMethodOrConstantRestRule() {
		return getAnnotationMethodOrConstantRestAccess().getRule();
	}

	//AnnotationMethodRest:
	//	{AnnotationMethodRest} (identifier=ID "(" ")" => defaultvalue=DefaultValue?);
	public AnnotationMethodRestElements getAnnotationMethodRestAccess() {
		return pAnnotationMethodRest;
	}
	
	public ParserRule getAnnotationMethodRestRule() {
		return getAnnotationMethodRestAccess().getRule();
	}

	//AnnotationConstantRest:
	//	variabledeclarator+=VariableDeclarator ("," variabledeclarator+=VariableDeclarator)*;
	public AnnotationConstantRestElements getAnnotationConstantRestAccess() {
		return pAnnotationConstantRest;
	}
	
	public ParserRule getAnnotationConstantRestRule() {
		return getAnnotationConstantRestAccess().getRule();
	}

	//DefaultValue:
	//	"default" elementvalue=ElementValue;
	public DefaultValueElements getDefaultValueAccess() {
		return pDefaultValue;
	}
	
	public ParserRule getDefaultValueRule() {
		return getDefaultValueAccess().getRule();
	}

	//// ================================================================
	//// Blocks
	//// ================================================================
	//Block:
	//	{Block} "{" blockstatement+=BlockStatement* "}";
	public BlockElements getBlockAccess() {
		return pBlock;
	}
	
	public ParserRule getBlockRule() {
		return getBlockAccess().getRule();
	}

	//BlockStatement:
	//	ClassifierDeclarationWithModifier | Expression ";";
	public BlockStatementElements getBlockStatementAccess() {
		return pBlockStatement;
	}
	
	public ParserRule getBlockStatementRule() {
		return getBlockStatementAccess().getRule();
	}

	//// ================================================================
	//// Dummy elements
	////
	//// These rules only have an influence on the generated meta-model
	//// ================================================================
	//IdentifierHaving:
	//	MethodDeclaration | VariableDeclarator | EnumDeclaration;
	public IdentifierHavingElements getIdentifierHavingAccess() {
		return pIdentifierHaving;
	}
	
	public ParserRule getIdentifierHavingRule() {
		return getIdentifierHavingAccess().getRule();
	}

	//// ================================================================
	//// Expressions
	////
	//// The following expressions are heavily based on the XBase grammar
	//// ================================================================
	//Expression:
	//	Assignment;
	public ExpressionElements getExpressionAccess() {
		return pExpression;
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}

	//Assignment returns Expression: // quick and dirty support variable declarations in old java style
	//// makes grammar ambiguous
	//	{Assignment} (typeForVariableDeclaration=ValidID ("[" "]")*)? feature=FeatureCallID OpSingleAssign value=Assignment |
	//	OrExpression (=> ({BinaryOperation.leftOperand=current} feature=OpMultiAssign) rightOperand=Assignment)?;
	public AssignmentElements getAssignmentAccess() {
		return pAssignment;
	}
	
	public ParserRule getAssignmentRule() {
		return getAssignmentAccess().getRule();
	}

	//OpSingleAssign:
	//	"=";
	public OpSingleAssignElements getOpSingleAssignAccess() {
		return pOpSingleAssign;
	}
	
	public ParserRule getOpSingleAssignRule() {
		return getOpSingleAssignAccess().getRule();
	}

	//OpMultiAssign:
	//	"+=" | "-=" | "*=" | "/=" | "%=" | "<" "<" "=" | ">" ">"? ">=";
	public OpMultiAssignElements getOpMultiAssignAccess() {
		return pOpMultiAssign;
	}
	
	public ParserRule getOpMultiAssignRule() {
		return getOpMultiAssignAccess().getRule();
	}

	//OrExpression returns Expression:
	//	AndExpression (=> ({BinaryOperation.leftOperand=current} feature=OpOr) rightOperand=AndExpression)*;
	public OrExpressionElements getOrExpressionAccess() {
		return pOrExpression;
	}
	
	public ParserRule getOrExpressionRule() {
		return getOrExpressionAccess().getRule();
	}

	//OpOr:
	//	"||";
	public OpOrElements getOpOrAccess() {
		return pOpOr;
	}
	
	public ParserRule getOpOrRule() {
		return getOpOrAccess().getRule();
	}

	//AndExpression returns Expression:
	//	EqualityExpression (=> ({BinaryOperation.leftOperand=current} feature=OpAnd) rightOperand=EqualityExpression)*;
	public AndExpressionElements getAndExpressionAccess() {
		return pAndExpression;
	}
	
	public ParserRule getAndExpressionRule() {
		return getAndExpressionAccess().getRule();
	}

	//OpAnd:
	//	"&&";
	public OpAndElements getOpAndAccess() {
		return pOpAnd;
	}
	
	public ParserRule getOpAndRule() {
		return getOpAndAccess().getRule();
	}

	//EqualityExpression returns Expression:
	//	RelationalExpression (=> ({BinaryOperation.leftOperand=current} feature=OpEquality)
	//	rightOperand=RelationalExpression)*;
	public EqualityExpressionElements getEqualityExpressionAccess() {
		return pEqualityExpression;
	}
	
	public ParserRule getEqualityExpressionRule() {
		return getEqualityExpressionAccess().getRule();
	}

	//OpEquality:
	//	"==" | "!=" | "===" | "!==";
	public OpEqualityElements getOpEqualityAccess() {
		return pOpEquality;
	}
	
	public ParserRule getOpEqualityRule() {
		return getOpEqualityAccess().getRule();
	}

	//RelationalExpression returns Expression:
	//	OtherOperatorExpression (=> ({InstanceOfExpression.expression=current} "instanceof") type=Type | =>
	//	({BinaryOperation.leftOperand=current} feature=OpCompare) rightOperand=OtherOperatorExpression)*;
	public RelationalExpressionElements getRelationalExpressionAccess() {
		return pRelationalExpression;
	}
	
	public ParserRule getRelationalExpressionRule() {
		return getRelationalExpressionAccess().getRule();
	}

	//OpCompare:
	//	">=" | "<" "=" | ">" | "<";
	public OpCompareElements getOpCompareAccess() {
		return pOpCompare;
	}
	
	public ParserRule getOpCompareRule() {
		return getOpCompareAccess().getRule();
	}

	//OtherOperatorExpression returns Expression:
	//	AdditiveExpression (=> ({BinaryOperation.leftOperand=current} feature=OpOther) rightOperand=AdditiveExpression)*;
	public OtherOperatorExpressionElements getOtherOperatorExpressionAccess() {
		return pOtherOperatorExpression;
	}
	
	public ParserRule getOtherOperatorExpressionRule() {
		return getOtherOperatorExpressionAccess().getRule();
	}

	//OpOther:
	//	"->" | "..<" | ">" ".." | ".." | "=>" | ">" (=> (">" ">") | ">") | "<" (=> ("<" "<") | "<" | "=>") | "<>" | "?:";
	public OpOtherElements getOpOtherAccess() {
		return pOpOther;
	}
	
	public ParserRule getOpOtherRule() {
		return getOpOtherAccess().getRule();
	}

	//AdditiveExpression returns Expression:
	//	MultiplicativeExpression (=> ({BinaryOperation.leftOperand=current} feature=OpAdd)
	//	rightOperand=MultiplicativeExpression)*;
	public AdditiveExpressionElements getAdditiveExpressionAccess() {
		return pAdditiveExpression;
	}
	
	public ParserRule getAdditiveExpressionRule() {
		return getAdditiveExpressionAccess().getRule();
	}

	//OpAdd:
	//	"+" | "-";
	public OpAddElements getOpAddAccess() {
		return pOpAdd;
	}
	
	public ParserRule getOpAddRule() {
		return getOpAddAccess().getRule();
	}

	//MultiplicativeExpression returns Expression:
	//	UnaryOperation (=> ({BinaryOperation.leftOperand=current} feature=OpMulti) rightOperand=UnaryOperation)*;
	public MultiplicativeExpressionElements getMultiplicativeExpressionAccess() {
		return pMultiplicativeExpression;
	}
	
	public ParserRule getMultiplicativeExpressionRule() {
		return getMultiplicativeExpressionAccess().getRule();
	}

	//OpMulti:
	//	"*" | "**" | "/" | "%";
	public OpMultiElements getOpMultiAccess() {
		return pOpMulti;
	}
	
	public ParserRule getOpMultiRule() {
		return getOpMultiAccess().getRule();
	}

	//UnaryOperation returns Expression:
	//	{UnaryOperation} feature=OpUnary operand=UnaryOperation | PostfixOperation;
	public UnaryOperationElements getUnaryOperationAccess() {
		return pUnaryOperation;
	}
	
	public ParserRule getUnaryOperationRule() {
		return getUnaryOperationAccess().getRule();
	}

	//OpUnary:
	//	"!" | "-" | "+";
	public OpUnaryElements getOpUnaryAccess() {
		return pOpUnary;
	}
	
	public ParserRule getOpUnaryRule() {
		return getOpUnaryAccess().getRule();
	}

	//PostfixOperation returns Expression:
	//	MemberFeatureCall => ({PostfixOperation.operand=current} feature=OpPostfix)?;
	public PostfixOperationElements getPostfixOperationAccess() {
		return pPostfixOperation;
	}
	
	public ParserRule getPostfixOperationRule() {
		return getPostfixOperationAccess().getRule();
	}

	//OpPostfix:
	//	"++" | "--";
	public OpPostfixElements getOpPostfixAccess() {
		return pOpPostfix;
	}
	
	public ParserRule getOpPostfixRule() {
		return getOpPostfixAccess().getRule();
	}

	//MemberFeatureCall returns Expression:
	//	PrimaryExpression (=> ({Assignment.assignable=current} "." feature=FeatureCallID OpSingleAssign) value=Assignment |
	//	=> ({MemberFeatureCall.memberCallTarget=current} ("." | nullSafe?="?." | explicitStatic?="::")) ("<"
	//	typeArguments+=JvmArgumentTypeReference ("," typeArguments+=JvmArgumentTypeReference)* ">")? feature=IdOrSuper (=>
	//	explicitOperationCall?="(" (memberCallArguments+=ShortClosure | memberCallArguments+=Expression (","
	//	memberCallArguments+=Expression)*)? ")")? memberCallArguments+=Closure?)*;
	public MemberFeatureCallElements getMemberFeatureCallAccess() {
		return pMemberFeatureCall;
	}
	
	public ParserRule getMemberFeatureCallRule() {
		return getMemberFeatureCallAccess().getRule();
	}

	//PrimaryExpression returns Expression:
	//	ConstructorCall | BlockExpression | SwitchExpression | SynchronizedExpression | FeatureCall | Literal | IfExpression
	//	| ForLoopExpression | BasicForLoopExpression | WhileExpression | DoWhileExpression | ThrowExpression |
	//	ReturnExpression | TryCatchFinallyExpression | ParenthesisExpression | JMLOldExpression | JMLFreshExpression |
	//	JMLResultExpression;
	public PrimaryExpressionElements getPrimaryExpressionAccess() {
		return pPrimaryExpression;
	}
	
	public ParserRule getPrimaryExpressionRule() {
		return getPrimaryExpressionAccess().getRule();
	}

	//ParenthesisExpression:
	//	"(" (expr=ParenthesizedExpression | expr=JMLForAllExpression);
	public ParenthesisExpressionElements getParenthesisExpressionAccess() {
		return pParenthesisExpression;
	}
	
	public ParserRule getParenthesisExpressionRule() {
		return getParenthesisExpressionAccess().getRule();
	}

	//JMLOldExpression returns Expression:
	//	{JMLOldExpression} "\\old" expr=ParenthesisExpression;
	public JMLOldExpressionElements getJMLOldExpressionAccess() {
		return pJMLOldExpression;
	}
	
	public ParserRule getJMLOldExpressionRule() {
		return getJMLOldExpressionAccess().getRule();
	}

	//JMLFreshExpression returns Expression:
	//	{JMLFreshExpression} "\\fresh" expr=ParenthesisExpression;
	public JMLFreshExpressionElements getJMLFreshExpressionAccess() {
		return pJMLFreshExpression;
	}
	
	public ParserRule getJMLFreshExpressionRule() {
		return getJMLFreshExpressionAccess().getRule();
	}

	//JMLResultExpression returns Expression:
	//	{JMLResultExpression} "\\result";
	public JMLResultExpressionElements getJMLResultExpressionAccess() {
		return pJMLResultExpression;
	}
	
	public ParserRule getJMLResultExpressionRule() {
		return getJMLResultExpressionAccess().getRule();
	}

	//JMLForAllExpression returns Expression:
	//	{JMLForAllExpression} "\\forall" (initExpressions+=VarDecl ("," initExpressions+=VarDecl)*)? ";"
	//	expression=Expression? ";" (updateExpressions+=Expression ("," updateExpressions+=Expression)*)? ")";
	public JMLForAllExpressionElements getJMLForAllExpressionAccess() {
		return pJMLForAllExpression;
	}
	
	public ParserRule getJMLForAllExpressionRule() {
		return getJMLForAllExpressionAccess().getRule();
	}

	//VarDecl returns Expression:
	//	(=> (type=Type name=ValidID) | name=ValidID) ("=" right=Expression)?;
	public VarDeclElements getVarDeclAccess() {
		return pVarDecl;
	}
	
	public ParserRule getVarDeclRule() {
		return getVarDeclAccess().getRule();
	}

	////TypeLiteral
	//Literal returns Expression:
	//	CollectionLiteral | Closure | BooleanLiteral | NumberLiteral | NullLiteral | StringLiteral | CharLiteral;
	public LiteralElements getLiteralAccess() {
		return pLiteral;
	}
	
	public ParserRule getLiteralRule() {
		return getLiteralAccess().getRule();
	}

	//CollectionLiteral:
	//	SetLiteral | ListLiteral;
	public CollectionLiteralElements getCollectionLiteralAccess() {
		return pCollectionLiteral;
	}
	
	public ParserRule getCollectionLiteralRule() {
		return getCollectionLiteralAccess().getRule();
	}

	//SetLiteral:
	//	{SetLiteral} "#" "{" (elements+=Expression ("," elements+=Expression)*)? "}";
	public SetLiteralElements getSetLiteralAccess() {
		return pSetLiteral;
	}
	
	public ParserRule getSetLiteralRule() {
		return getSetLiteralAccess().getRule();
	}

	//ListLiteral:
	//	{ListLiteral} "#" "[" (elements+=Expression ("," elements+=Expression)*)? "]";
	public ListLiteralElements getListLiteralAccess() {
		return pListLiteral;
	}
	
	public ParserRule getListLiteralRule() {
		return getListLiteralAccess().getRule();
	}

	//Closure returns Expression:
	//	=> ({Closure} "[") => ((declaredFormalParameters+=JvmFormalParameter (","
	//	declaredFormalParameters+=JvmFormalParameter)*)? explicitSyntax?="|")? expression=ExpressionInClosure "]";
	public ClosureElements getClosureAccess() {
		return pClosure;
	}
	
	public ParserRule getClosureRule() {
		return getClosureAccess().getRule();
	}

	//ExpressionInClosure returns Expression:
	//	{BlockExpression} (expressions+=ExpressionOrVarDeclaration ";"?)*;
	public ExpressionInClosureElements getExpressionInClosureAccess() {
		return pExpressionInClosure;
	}
	
	public ParserRule getExpressionInClosureRule() {
		return getExpressionInClosureAccess().getRule();
	}

	//ShortClosure returns Expression:
	//	=> ({Closure} (declaredFormalParameters+=JvmFormalParameter ("," declaredFormalParameters+=JvmFormalParameter)*)?
	//	explicitSyntax?="|") expression=Expression;
	public ShortClosureElements getShortClosureAccess() {
		return pShortClosure;
	}
	
	public ParserRule getShortClosureRule() {
		return getShortClosureAccess().getRule();
	}

	////castedExpr+=Expression?;
	//ParenthesizedExpression returns Expression: / *'(' this one is located in ParenthesisExpression * / Expression ")";
	public ParenthesizedExpressionElements getParenthesizedExpressionAccess() {
		return pParenthesizedExpression;
	}
	
	public ParserRule getParenthesizedExpressionRule() {
		return getParenthesizedExpressionAccess().getRule();
	}

	//IfExpression returns Expression:
	//	{IfExpression} "if" "(" if=Expression ")" then=Expression ("else" else=Expression)?;
	public IfExpressionElements getIfExpressionAccess() {
		return pIfExpression;
	}
	
	public ParserRule getIfExpressionRule() {
		return getIfExpressionAccess().getRule();
	}

	//SwitchExpression returns Expression:
	//	{SwitchExpression} "switch" (=> ("(" declaredParam=JvmFormalParameter ":") switch=Expression ")" | =>
	//	(declaredParam=JvmFormalParameter ":")? switch=Expression) "{" cases+=CasePart* ("default" ":" default=Expression)?
	//	"}";
	public SwitchExpressionElements getSwitchExpressionAccess() {
		return pSwitchExpression;
	}
	
	public ParserRule getSwitchExpressionRule() {
		return getSwitchExpressionAccess().getRule();
	}

	//CasePart:
	//	{CasePart} typeGuard=JvmTypeReference? ("case" case=Expression)? (":" then=Expression | ",");
	public CasePartElements getCasePartAccess() {
		return pCasePart;
	}
	
	public ParserRule getCasePartRule() {
		return getCasePartAccess().getRule();
	}

	//ForLoopExpression returns Expression:
	//	=> ({ForLoopExpression} "for" "(" declaredParam=JvmFormalParameter ":") forExpression=Expression ")"
	//	eachExpression=Expression;
	public ForLoopExpressionElements getForLoopExpressionAccess() {
		return pForLoopExpression;
	}
	
	public ParserRule getForLoopExpressionRule() {
		return getForLoopExpressionAccess().getRule();
	}

	//BasicForLoopExpression returns Expression:
	//	{BasicForLoopExpression} "for" "(" (initExpressions+=ExpressionOrVarDeclaration (","
	//	initExpressions+=ExpressionOrVarDeclaration)*)? ";" expression=Expression? ";" (updateExpressions+=Expression (","
	//	updateExpressions+=Expression)*)? ")" eachExpression=Expression;
	public BasicForLoopExpressionElements getBasicForLoopExpressionAccess() {
		return pBasicForLoopExpression;
	}
	
	public ParserRule getBasicForLoopExpressionRule() {
		return getBasicForLoopExpressionAccess().getRule();
	}

	//WhileExpression returns Expression:
	//	{WhileExpression} "while" "(" predicate=Expression ")" body=Expression;
	public WhileExpressionElements getWhileExpressionAccess() {
		return pWhileExpression;
	}
	
	public ParserRule getWhileExpressionRule() {
		return getWhileExpressionAccess().getRule();
	}

	//DoWhileExpression returns Expression:
	//	{DoWhileExpression} "do" body=Expression "while" "(" predicate=Expression ")";
	public DoWhileExpressionElements getDoWhileExpressionAccess() {
		return pDoWhileExpression;
	}
	
	public ParserRule getDoWhileExpressionRule() {
		return getDoWhileExpressionAccess().getRule();
	}

	//BlockExpression returns Expression: // weakened grammar to make this expression usable as ArrayInitializer too
	//	{BlockExpression} "{" (expressions+=ExpressionOrVarDeclaration ("," expressions+=ExpressionOrVarDeclaration) ";"?)*
	//	"}";
	public BlockExpressionElements getBlockExpressionAccess() {
		return pBlockExpression;
	}
	
	public ParserRule getBlockExpressionRule() {
		return getBlockExpressionAccess().getRule();
	}

	//ExpressionOrVarDeclaration returns Expression: / *VariableDeclaration |* / Expression;
	public ExpressionOrVarDeclarationElements getExpressionOrVarDeclarationAccess() {
		return pExpressionOrVarDeclaration;
	}
	
	public ParserRule getExpressionOrVarDeclarationRule() {
		return getExpressionOrVarDeclarationAccess().getRule();
	}

	////VariableDeclaration returns Expression:
	////	{VariableDeclaration}
	////	/ *(writeable?='var'|'val')* / (=>(type=JvmTypeReference name=ValidID) | name=ValidID) ('=' right=Expression)?;
	//JvmFormalParameter returns ValidID:
	//	parameterType=ValidID? name=ValidID;
	public JvmFormalParameterElements getJvmFormalParameterAccess() {
		return pJvmFormalParameter;
	}
	
	public ParserRule getJvmFormalParameterRule() {
		return getJvmFormalParameterAccess().getRule();
	}

	//FullJvmFormalParameter returns ValidID:
	//	parameterType=ValidID name=ValidID;
	public FullJvmFormalParameterElements getFullJvmFormalParameterAccess() {
		return pFullJvmFormalParameter;
	}
	
	public ParserRule getFullJvmFormalParameterRule() {
		return getFullJvmFormalParameterAccess().getRule();
	}

	//FeatureCall returns Expression:
	//	{FeatureCall} ("<" typeArguments+=JvmArgumentTypeReference ("," typeArguments+=JvmArgumentTypeReference)* ">")?
	//	feature=IdOrSuper (=> explicitOperationCall?="(" (featureCallArguments+=ShortClosure |
	//	featureCallArguments+=Expression ("," featureCallArguments+=Expression)*)? ")")? featureCallArguments+=Closure?;
	public FeatureCallElements getFeatureCallAccess() {
		return pFeatureCall;
	}
	
	public ParserRule getFeatureCallRule() {
		return getFeatureCallAccess().getRule();
	}

	//FeatureCallID: / *| 'extends' | 'static' | 'import' | 'extension' * / ValidID;
	public FeatureCallIDElements getFeatureCallIDAccess() {
		return pFeatureCallID;
	}
	
	public ParserRule getFeatureCallIDRule() {
		return getFeatureCallIDAccess().getRule();
	}

	//IdOrSuper:
	//	FeatureCallID | "super" | "class";
	public IdOrSuperElements getIdOrSuperAccess() {
		return pIdOrSuper;
	}
	
	public ParserRule getIdOrSuperRule() {
		return getIdOrSuperAccess().getRule();
	}

	//ConstructorCall returns Expression:
	//	{ConstructorCall} "new" constructor=QualifiedName ("<" typeArguments+=JvmArgumentTypeReference (","
	//	typeArguments+=JvmArgumentTypeReference)* ">")? (=> explicitConstructorCall?="(" (arguments+=ShortClosure |
	//	arguments+=Expression ("," arguments+=Expression)*)? ")")? arguments+=Closure?;
	public ConstructorCallElements getConstructorCallAccess() {
		return pConstructorCall;
	}
	
	public ParserRule getConstructorCallRule() {
		return getConstructorCallAccess().getRule();
	}

	//BooleanLiteral returns Expression:
	//	{BooleanLiteral} ("false" | isTrue?="true");
	public BooleanLiteralElements getBooleanLiteralAccess() {
		return pBooleanLiteral;
	}
	
	public ParserRule getBooleanLiteralRule() {
		return getBooleanLiteralAccess().getRule();
	}

	//NullLiteral returns Expression:
	//	{NullLiteral} "null";
	public NullLiteralElements getNullLiteralAccess() {
		return pNullLiteral;
	}
	
	public ParserRule getNullLiteralRule() {
		return getNullLiteralAccess().getRule();
	}

	//NumberLiteral returns Expression:
	//	{NumberLiteral} value=Number;
	public NumberLiteralElements getNumberLiteralAccess() {
		return pNumberLiteral;
	}
	
	public ParserRule getNumberLiteralRule() {
		return getNumberLiteralAccess().getRule();
	}

	//StringLiteral returns Expression:
	//	{StringLiteral} value=STRING;
	public StringLiteralElements getStringLiteralAccess() {
		return pStringLiteral;
	}
	
	public ParserRule getStringLiteralRule() {
		return getStringLiteralAccess().getRule();
	}

	//CharLiteral returns Expression:
	//	{CharLiteral} value=CHAR;
	public CharLiteralElements getCharLiteralAccess() {
		return pCharLiteral;
	}
	
	public ParserRule getCharLiteralRule() {
		return getCharLiteralAccess().getRule();
	}

	////TypeLiteral returns Expression :
	////	{TypeLiteral} 'typeof' '(' (type=JvmTypeReference|typeRef=QualifiedName) (arrayDimensions+=ArrayBrackets)* ')'
	////;
	//ThrowExpression returns Expression:
	//	{ThrowExpression} "throw" expression=Expression;
	public ThrowExpressionElements getThrowExpressionAccess() {
		return pThrowExpression;
	}
	
	public ParserRule getThrowExpressionRule() {
		return getThrowExpressionAccess().getRule();
	}

	//ReturnExpression returns Expression:
	//	{ReturnExpression} "return" -> expression=Expression?;
	public ReturnExpressionElements getReturnExpressionAccess() {
		return pReturnExpression;
	}
	
	public ParserRule getReturnExpressionRule() {
		return getReturnExpressionAccess().getRule();
	}

	//TryCatchFinallyExpression returns Expression:
	//	{TryCatchFinallyExpression} "try" expression=Expression (catchClauses+=CatchClause+ ("finally"
	//	finallyExpression=Expression)? | "finally" finallyExpression=Expression);
	public TryCatchFinallyExpressionElements getTryCatchFinallyExpressionAccess() {
		return pTryCatchFinallyExpression;
	}
	
	public ParserRule getTryCatchFinallyExpressionRule() {
		return getTryCatchFinallyExpressionAccess().getRule();
	}

	//SynchronizedExpression returns Expression:
	//	=> ({SynchronizedExpression} "synchronized" "(") param=Expression ")" expression=Expression;
	public SynchronizedExpressionElements getSynchronizedExpressionAccess() {
		return pSynchronizedExpression;
	}
	
	public ParserRule getSynchronizedExpressionRule() {
		return getSynchronizedExpressionAccess().getRule();
	}

	//CatchClause:
	//	"catch" "(" declaredParam=FullJvmFormalParameter ")" expression=Expression;
	public CatchClauseElements getCatchClauseAccess() {
		return pCatchClause;
	}
	
	public ParserRule getCatchClauseRule() {
		return getCatchClauseAccess().getRule();
	}

	//QualifiedName:
	//	ValidID ("." ValidID)*;
	public QualifiedNameElements getQualifiedNameAccess() {
		return pQualifiedName;
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}

	//Number hidden():
	//	HEX | (INT | DECIMAL) ("." (INT | DECIMAL))?;
	public NumberElements getNumberAccess() {
		return pNumber;
	}
	
	public ParserRule getNumberRule() {
		return getNumberAccess().getRule();
	}

	/// **
	// * Dummy rule, for "better" downwards compatibility, since GrammarAccess generates non-static inner classes, 
	// * which makes downstream grammars break on classloading, when a rule is removed.
	// * / StaticQualifier:
	//	(ValidID "::")+;
	public StaticQualifierElements getStaticQualifierAccess() {
		return pStaticQualifier;
	}
	
	public ParserRule getStaticQualifierRule() {
		return getStaticQualifierAccess().getRule();
	}

	//JMLMultilineSpecCommentStart:
	//	"/ *@";
	public JMLMultilineSpecCommentStartElements getJMLMultilineSpecCommentStartAccess() {
		return pJMLMultilineSpecCommentStart;
	}
	
	public ParserRule getJMLMultilineSpecCommentStartRule() {
		return getJMLMultilineSpecCommentStartAccess().getRule();
	}

	//JMLMultilineSpecCommentEnd:
	//	"* /" | "@* /";
	public JMLMultilineSpecCommentEndElements getJMLMultilineSpecCommentEndAccess() {
		return pJMLMultilineSpecCommentEnd;
	}
	
	public ParserRule getJMLMultilineSpecCommentEndRule() {
		return getJMLMultilineSpecCommentEndAccess().getRule();
	}

	//terminal HEX:
	//	("0x" | "0X") ("0".."9" | "a".."f" | "A".."F" | "_")+ ("#" (("b" | "B") ("i" | "I") | ("l" | "L")))?;
	public TerminalRule getHEXRule() {
		return tHEX;
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9" ("0".."9" | "_")*;
	public TerminalRule getINTRule() {
		return tINT;
	} 

	//terminal DECIMAL:
	//	INT (("e" | "E") ("+" | "-")? INT)? (("b" | "B") ("i" | "I" | "d" | "D") | ("l" | "L" | "d" | "D" | "f" | "F"))?;
	public TerminalRule getDECIMALRule() {
		return tDECIMAL;
	} 

	//terminal ML_COMMENT:
	//	"/ *" !"@"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return tML_COMMENT;
	} 

	//terminal SL_COMMENT:
	//	"//" !"@" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return tSL_COMMENT;
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"";
	public TerminalRule getSTRINGRule() {
		return tSTRING;
	} 

	//terminal CHAR:
	//	"\'" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'")) "\'";
	public TerminalRule getCHARRule() {
		return tCHAR;
	} 

	//JvmTypeReference:
	//	JvmParameterizedTypeReference => ({JvmGenericArrayTypeReference.componentType=current} ArrayBrackets)* |
	//	XFunctionTypeRef;
	public XtypeGrammarAccess.JvmTypeReferenceElements getJvmTypeReferenceAccess() {
		return gaXtype.getJvmTypeReferenceAccess();
	}
	
	public ParserRule getJvmTypeReferenceRule() {
		return getJvmTypeReferenceAccess().getRule();
	}

	//ArrayBrackets:
	//	"[" "]";
	public XtypeGrammarAccess.ArrayBracketsElements getArrayBracketsAccess() {
		return gaXtype.getArrayBracketsAccess();
	}
	
	public ParserRule getArrayBracketsRule() {
		return getArrayBracketsAccess().getRule();
	}

	//XFunctionTypeRef:
	//	("(" (paramTypes+=JvmTypeReference ("," paramTypes+=JvmTypeReference)*)? ")")? "=>" returnType=JvmTypeReference;
	public XtypeGrammarAccess.XFunctionTypeRefElements getXFunctionTypeRefAccess() {
		return gaXtype.getXFunctionTypeRefAccess();
	}
	
	public ParserRule getXFunctionTypeRefRule() {
		return getXFunctionTypeRefAccess().getRule();
	}

	//JvmParameterizedTypeReference:
	//	type=[JvmType|QualifiedName] ("<" arguments+=JvmArgumentTypeReference ("," arguments+=JvmArgumentTypeReference)* ">"
	//	(=> ({JvmInnerTypeReference.outer=current} ".") type=[JvmType|ValidID] ("<" arguments+=JvmArgumentTypeReference (","
	//	arguments+=JvmArgumentTypeReference)* ">")?)*)?;
	public XtypeGrammarAccess.JvmParameterizedTypeReferenceElements getJvmParameterizedTypeReferenceAccess() {
		return gaXtype.getJvmParameterizedTypeReferenceAccess();
	}
	
	public ParserRule getJvmParameterizedTypeReferenceRule() {
		return getJvmParameterizedTypeReferenceAccess().getRule();
	}

	//JvmArgumentTypeReference returns JvmTypeReference:
	//	JvmTypeReference | JvmWildcardTypeReference;
	public XtypeGrammarAccess.JvmArgumentTypeReferenceElements getJvmArgumentTypeReferenceAccess() {
		return gaXtype.getJvmArgumentTypeReferenceAccess();
	}
	
	public ParserRule getJvmArgumentTypeReferenceRule() {
		return getJvmArgumentTypeReferenceAccess().getRule();
	}

	//JvmWildcardTypeReference:
	//	{JvmWildcardTypeReference} "?" (constraints+=JvmUpperBound constraints+=JvmUpperBoundAnded* |
	//	constraints+=JvmLowerBound constraints+=JvmLowerBoundAnded*)?;
	public XtypeGrammarAccess.JvmWildcardTypeReferenceElements getJvmWildcardTypeReferenceAccess() {
		return gaXtype.getJvmWildcardTypeReferenceAccess();
	}
	
	public ParserRule getJvmWildcardTypeReferenceRule() {
		return getJvmWildcardTypeReferenceAccess().getRule();
	}

	//JvmUpperBound:
	//	"extends" typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmUpperBoundElements getJvmUpperBoundAccess() {
		return gaXtype.getJvmUpperBoundAccess();
	}
	
	public ParserRule getJvmUpperBoundRule() {
		return getJvmUpperBoundAccess().getRule();
	}

	//JvmUpperBoundAnded returns JvmUpperBound:
	//	"&" typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmUpperBoundAndedElements getJvmUpperBoundAndedAccess() {
		return gaXtype.getJvmUpperBoundAndedAccess();
	}
	
	public ParserRule getJvmUpperBoundAndedRule() {
		return getJvmUpperBoundAndedAccess().getRule();
	}

	//JvmLowerBound:
	//	"super" typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmLowerBoundElements getJvmLowerBoundAccess() {
		return gaXtype.getJvmLowerBoundAccess();
	}
	
	public ParserRule getJvmLowerBoundRule() {
		return getJvmLowerBoundAccess().getRule();
	}

	//JvmLowerBoundAnded returns JvmLowerBound:
	//	"&" typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmLowerBoundAndedElements getJvmLowerBoundAndedAccess() {
		return gaXtype.getJvmLowerBoundAndedAccess();
	}
	
	public ParserRule getJvmLowerBoundAndedRule() {
		return getJvmLowerBoundAndedAccess().getRule();
	}

	//JvmTypeParameter:
	//	name=ValidID (constraints+=JvmUpperBound constraints+=JvmUpperBoundAnded*)?;
	public XtypeGrammarAccess.JvmTypeParameterElements getJvmTypeParameterAccess() {
		return gaXtype.getJvmTypeParameterAccess();
	}
	
	public ParserRule getJvmTypeParameterRule() {
		return getJvmTypeParameterAccess().getRule();
	}

	//QualifiedNameWithWildcard:
	//	QualifiedName "." "*";
	public XtypeGrammarAccess.QualifiedNameWithWildcardElements getQualifiedNameWithWildcardAccess() {
		return gaXtype.getQualifiedNameWithWildcardAccess();
	}
	
	public ParserRule getQualifiedNameWithWildcardRule() {
		return getQualifiedNameWithWildcardAccess().getRule();
	}

	//ValidID:
	//	ID;
	public XtypeGrammarAccess.ValidIDElements getValidIDAccess() {
		return gaXtype.getValidIDAccess();
	}
	
	public ParserRule getValidIDRule() {
		return getValidIDAccess().getRule();
	}

	//XImportSection:
	//	importDeclarations+=XImportDeclaration+;
	public XtypeGrammarAccess.XImportSectionElements getXImportSectionAccess() {
		return gaXtype.getXImportSectionAccess();
	}
	
	public ParserRule getXImportSectionRule() {
		return getXImportSectionAccess().getRule();
	}

	//XImportDeclaration:
	//	"import" (static?="static" extension?="extension"? importedType=[JvmDeclaredType|QualifiedNameInStaticImport]
	//	(wildcard?="*" | memberName=ValidID) | importedType=[JvmDeclaredType|QualifiedName] |
	//	importedNamespace=QualifiedNameWithWildcard) ";"?;
	public XtypeGrammarAccess.XImportDeclarationElements getXImportDeclarationAccess() {
		return gaXtype.getXImportDeclarationAccess();
	}
	
	public ParserRule getXImportDeclarationRule() {
		return getXImportDeclarationAccess().getRule();
	}

	//QualifiedNameInStaticImport:
	//	(ValidID ".")+;
	public XtypeGrammarAccess.QualifiedNameInStaticImportElements getQualifiedNameInStaticImportAccess() {
		return gaXtype.getQualifiedNameInStaticImportAccess();
	}
	
	public ParserRule getQualifiedNameInStaticImportRule() {
		return getQualifiedNameInStaticImportAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "$" | "_") ("a".."z" | "A".."Z" | "$" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaXtype.getIDRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaXtype.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaXtype.getANY_OTHERRule();
	} 
}
