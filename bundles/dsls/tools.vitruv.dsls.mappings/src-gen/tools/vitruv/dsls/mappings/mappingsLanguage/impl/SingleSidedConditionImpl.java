/**
 * generated by Xtext 2.12.0
 */
package tools.vitruv.dsls.mappings.mappingsLanguage.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import tools.vitruv.dsls.mappings.mappingsLanguage.CheckExpression;
import tools.vitruv.dsls.mappings.mappingsLanguage.MappingsLanguagePackage;
import tools.vitruv.dsls.mappings.mappingsLanguage.SingleSidedCondition;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Single Sided Condition</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link tools.vitruv.dsls.mappings.mappingsLanguage.impl.SingleSidedConditionImpl#getCheckExpression <em>Check Expression</em>}</li>
 *   <li>{@link tools.vitruv.dsls.mappings.mappingsLanguage.impl.SingleSidedConditionImpl#getEnforceExpression <em>Enforce Expression</em>}</li>
 * </ul>
 *
 * @generated
 */
public class SingleSidedConditionImpl extends ConditionImpl implements SingleSidedCondition
{
  /**
   * The cached value of the '{@link #getCheckExpression() <em>Check Expression</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCheckExpression()
   * @generated
   * @ordered
   */
  protected CheckExpression checkExpression;

  /**
   * The cached value of the '{@link #getEnforceExpression() <em>Enforce Expression</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getEnforceExpression()
   * @generated
   * @ordered
   */
  protected CheckExpression enforceExpression;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected SingleSidedConditionImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return MappingsLanguagePackage.Literals.SINGLE_SIDED_CONDITION;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public CheckExpression getCheckExpression()
  {
    return checkExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetCheckExpression(CheckExpression newCheckExpression, NotificationChain msgs)
  {
    CheckExpression oldCheckExpression = checkExpression;
    checkExpression = newCheckExpression;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, MappingsLanguagePackage.SINGLE_SIDED_CONDITION__CHECK_EXPRESSION, oldCheckExpression, newCheckExpression);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setCheckExpression(CheckExpression newCheckExpression)
  {
    if (newCheckExpression != checkExpression)
    {
      NotificationChain msgs = null;
      if (checkExpression != null)
        msgs = ((InternalEObject)checkExpression).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - MappingsLanguagePackage.SINGLE_SIDED_CONDITION__CHECK_EXPRESSION, null, msgs);
      if (newCheckExpression != null)
        msgs = ((InternalEObject)newCheckExpression).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - MappingsLanguagePackage.SINGLE_SIDED_CONDITION__CHECK_EXPRESSION, null, msgs);
      msgs = basicSetCheckExpression(newCheckExpression, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MappingsLanguagePackage.SINGLE_SIDED_CONDITION__CHECK_EXPRESSION, newCheckExpression, newCheckExpression));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public CheckExpression getEnforceExpression()
  {
    return enforceExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetEnforceExpression(CheckExpression newEnforceExpression, NotificationChain msgs)
  {
    CheckExpression oldEnforceExpression = enforceExpression;
    enforceExpression = newEnforceExpression;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, MappingsLanguagePackage.SINGLE_SIDED_CONDITION__ENFORCE_EXPRESSION, oldEnforceExpression, newEnforceExpression);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setEnforceExpression(CheckExpression newEnforceExpression)
  {
    if (newEnforceExpression != enforceExpression)
    {
      NotificationChain msgs = null;
      if (enforceExpression != null)
        msgs = ((InternalEObject)enforceExpression).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - MappingsLanguagePackage.SINGLE_SIDED_CONDITION__ENFORCE_EXPRESSION, null, msgs);
      if (newEnforceExpression != null)
        msgs = ((InternalEObject)newEnforceExpression).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - MappingsLanguagePackage.SINGLE_SIDED_CONDITION__ENFORCE_EXPRESSION, null, msgs);
      msgs = basicSetEnforceExpression(newEnforceExpression, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MappingsLanguagePackage.SINGLE_SIDED_CONDITION__ENFORCE_EXPRESSION, newEnforceExpression, newEnforceExpression));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case MappingsLanguagePackage.SINGLE_SIDED_CONDITION__CHECK_EXPRESSION:
        return basicSetCheckExpression(null, msgs);
      case MappingsLanguagePackage.SINGLE_SIDED_CONDITION__ENFORCE_EXPRESSION:
        return basicSetEnforceExpression(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case MappingsLanguagePackage.SINGLE_SIDED_CONDITION__CHECK_EXPRESSION:
        return getCheckExpression();
      case MappingsLanguagePackage.SINGLE_SIDED_CONDITION__ENFORCE_EXPRESSION:
        return getEnforceExpression();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case MappingsLanguagePackage.SINGLE_SIDED_CONDITION__CHECK_EXPRESSION:
        setCheckExpression((CheckExpression)newValue);
        return;
      case MappingsLanguagePackage.SINGLE_SIDED_CONDITION__ENFORCE_EXPRESSION:
        setEnforceExpression((CheckExpression)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case MappingsLanguagePackage.SINGLE_SIDED_CONDITION__CHECK_EXPRESSION:
        setCheckExpression((CheckExpression)null);
        return;
      case MappingsLanguagePackage.SINGLE_SIDED_CONDITION__ENFORCE_EXPRESSION:
        setEnforceExpression((CheckExpression)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case MappingsLanguagePackage.SINGLE_SIDED_CONDITION__CHECK_EXPRESSION:
        return checkExpression != null;
      case MappingsLanguagePackage.SINGLE_SIDED_CONDITION__ENFORCE_EXPRESSION:
        return enforceExpression != null;
    }
    return super.eIsSet(featureID);
  }

} //SingleSidedConditionImpl
