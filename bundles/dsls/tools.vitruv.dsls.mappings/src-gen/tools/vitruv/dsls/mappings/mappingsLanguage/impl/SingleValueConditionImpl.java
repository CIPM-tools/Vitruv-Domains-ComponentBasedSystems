/**
 * generated by Xtext 2.12.0
 */
package tools.vitruv.dsls.mappings.mappingsLanguage.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import tools.vitruv.dsls.mappings.mappingsLanguage.MappingsLanguagePackage;
import tools.vitruv.dsls.mappings.mappingsLanguage.NumCompareOperator;
import tools.vitruv.dsls.mappings.mappingsLanguage.SingleValueCondition;
import tools.vitruv.dsls.mappings.mappingsLanguage.ValueExpression;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Single Value Condition</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link tools.vitruv.dsls.mappings.mappingsLanguage.impl.SingleValueConditionImpl#isNegated <em>Negated</em>}</li>
 *   <li>{@link tools.vitruv.dsls.mappings.mappingsLanguage.impl.SingleValueConditionImpl#getIndexValueExpression <em>Index Value Expression</em>}</li>
 *   <li>{@link tools.vitruv.dsls.mappings.mappingsLanguage.impl.SingleValueConditionImpl#getOperator <em>Operator</em>}</li>
 * </ul>
 *
 * @generated
 */
public class SingleValueConditionImpl extends ValueConditionImpl implements SingleValueCondition
{
  /**
   * The default value of the '{@link #isNegated() <em>Negated</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isNegated()
   * @generated
   * @ordered
   */
  protected static final boolean NEGATED_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isNegated() <em>Negated</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isNegated()
   * @generated
   * @ordered
   */
  protected boolean negated = NEGATED_EDEFAULT;

  /**
   * The cached value of the '{@link #getIndexValueExpression() <em>Index Value Expression</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getIndexValueExpression()
   * @generated
   * @ordered
   */
  protected ValueExpression indexValueExpression;

  /**
   * The default value of the '{@link #getOperator() <em>Operator</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getOperator()
   * @generated
   * @ordered
   */
  protected static final NumCompareOperator OPERATOR_EDEFAULT = NumCompareOperator.NOT_GREATER;

  /**
   * The cached value of the '{@link #getOperator() <em>Operator</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getOperator()
   * @generated
   * @ordered
   */
  protected NumCompareOperator operator = OPERATOR_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected SingleValueConditionImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return MappingsLanguagePackage.Literals.SINGLE_VALUE_CONDITION;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public boolean isNegated()
  {
    return negated;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setNegated(boolean newNegated)
  {
    boolean oldNegated = negated;
    negated = newNegated;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MappingsLanguagePackage.SINGLE_VALUE_CONDITION__NEGATED, oldNegated, negated));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ValueExpression getIndexValueExpression()
  {
    return indexValueExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetIndexValueExpression(ValueExpression newIndexValueExpression, NotificationChain msgs)
  {
    ValueExpression oldIndexValueExpression = indexValueExpression;
    indexValueExpression = newIndexValueExpression;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, MappingsLanguagePackage.SINGLE_VALUE_CONDITION__INDEX_VALUE_EXPRESSION, oldIndexValueExpression, newIndexValueExpression);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setIndexValueExpression(ValueExpression newIndexValueExpression)
  {
    if (newIndexValueExpression != indexValueExpression)
    {
      NotificationChain msgs = null;
      if (indexValueExpression != null)
        msgs = ((InternalEObject)indexValueExpression).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - MappingsLanguagePackage.SINGLE_VALUE_CONDITION__INDEX_VALUE_EXPRESSION, null, msgs);
      if (newIndexValueExpression != null)
        msgs = ((InternalEObject)newIndexValueExpression).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - MappingsLanguagePackage.SINGLE_VALUE_CONDITION__INDEX_VALUE_EXPRESSION, null, msgs);
      msgs = basicSetIndexValueExpression(newIndexValueExpression, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MappingsLanguagePackage.SINGLE_VALUE_CONDITION__INDEX_VALUE_EXPRESSION, newIndexValueExpression, newIndexValueExpression));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NumCompareOperator getOperator()
  {
    return operator;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setOperator(NumCompareOperator newOperator)
  {
    NumCompareOperator oldOperator = operator;
    operator = newOperator == null ? OPERATOR_EDEFAULT : newOperator;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MappingsLanguagePackage.SINGLE_VALUE_CONDITION__OPERATOR, oldOperator, operator));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case MappingsLanguagePackage.SINGLE_VALUE_CONDITION__INDEX_VALUE_EXPRESSION:
        return basicSetIndexValueExpression(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case MappingsLanguagePackage.SINGLE_VALUE_CONDITION__NEGATED:
        return isNegated();
      case MappingsLanguagePackage.SINGLE_VALUE_CONDITION__INDEX_VALUE_EXPRESSION:
        return getIndexValueExpression();
      case MappingsLanguagePackage.SINGLE_VALUE_CONDITION__OPERATOR:
        return getOperator();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case MappingsLanguagePackage.SINGLE_VALUE_CONDITION__NEGATED:
        setNegated((Boolean)newValue);
        return;
      case MappingsLanguagePackage.SINGLE_VALUE_CONDITION__INDEX_VALUE_EXPRESSION:
        setIndexValueExpression((ValueExpression)newValue);
        return;
      case MappingsLanguagePackage.SINGLE_VALUE_CONDITION__OPERATOR:
        setOperator((NumCompareOperator)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case MappingsLanguagePackage.SINGLE_VALUE_CONDITION__NEGATED:
        setNegated(NEGATED_EDEFAULT);
        return;
      case MappingsLanguagePackage.SINGLE_VALUE_CONDITION__INDEX_VALUE_EXPRESSION:
        setIndexValueExpression((ValueExpression)null);
        return;
      case MappingsLanguagePackage.SINGLE_VALUE_CONDITION__OPERATOR:
        setOperator(OPERATOR_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case MappingsLanguagePackage.SINGLE_VALUE_CONDITION__NEGATED:
        return negated != NEGATED_EDEFAULT;
      case MappingsLanguagePackage.SINGLE_VALUE_CONDITION__INDEX_VALUE_EXPRESSION:
        return indexValueExpression != null;
      case MappingsLanguagePackage.SINGLE_VALUE_CONDITION__OPERATOR:
        return operator != OPERATOR_EDEFAULT;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuffer result = new StringBuffer(super.toString());
    result.append(" (negated: ");
    result.append(negated);
    result.append(", operator: ");
    result.append(operator);
    result.append(')');
    return result.toString();
  }

} //SingleValueConditionImpl
