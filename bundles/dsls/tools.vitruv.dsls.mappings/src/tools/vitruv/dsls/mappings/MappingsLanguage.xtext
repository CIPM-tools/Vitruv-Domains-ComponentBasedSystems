grammar tools.vitruv.dsls.Mappings with tools.vitruv.dsls.mirbase.MirBase
hidden(WS, SL_COMMENT)

generate mappings "http://vitruv.tools/dsls/mappings/MappingsLanguage"

import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "http://www.kit.edu/ipd/sdq/vitruvius/dsls/mirbase/MirBase" as mirbase

MappingsFile:
	(namespaceImports=XImportSection)?
	MirBaseFile
	(mappingsSegments+=MappingsSegment)+;

MappingsSegment:
	Documentable
	'mappings:' name=ValidID
	'for' leftDomain=DomainReference 
	'and' rightDomain=DomainReference
	(mappings+=Mapping |
		bootstrapMappings+=BootstrapMapping)*;
		
Mapping:
	'mapping' name=ValidID
		('depends on' input=MappingInput)?
	'{'
		'map (' (leftParameters+=Parameter)+ ')'
			('with {' 
				(leftConditions+=SingleSidedCondition)+
			'}')?
		'and (' (rightParameters+=Parameter)+ ')'
			('with {' 
				(rightConditions+=SingleSidedCondition)+
			'}')?
		('such that {'
			(bidirectionalizableConditions+=BidirectionalizableCondition)+
		'}')?
		('forward execute {'
			
		'}')?
	'}';
	
Parameter:
	{ClassicallyNamedModelElement};
	
SingleSidedCondition returns ConditionExpression:
	/*/
 	InExpression
	| NotNullExpression
	| EqualsLiteralExpression
	| DefaultContainExpression
	| XbaseSignatureConstraintExpression
	*/
	'TODO'
;
		
BidirectionalizableCondition returns ConditionExpression:
	'TODO'
;
	
BootstrapMapping: 
	'bootstrap mapping'
;
	
MappingInput:
	{MappingInput}
	'(' ((modelInputElements+=ClassicallyNamedModelElement | "plain" javaInputElements+=NamedJavaElement)
		(',' (modelInputElements+=ClassicallyNamedModelElement | "plain" javaInputElements+=NamedJavaElement))*)? ')';
		
fragment Documentable:
	(documentation=ML_COMMENT)?;
		