/*
 * generated by Xtext 2.12.0
 */
package tools.vitruv.dsls.commonalities.ui.outline

import org.eclipse.xtext.ui.editor.outline.IOutlineNode
import org.eclipse.xtext.ui.editor.outline.impl.DefaultOutlineTreeProvider
import org.eclipse.xtext.ui.editor.outline.impl.DocumentRootNode
import tools.vitruv.dsls.commonalities.language.AttributeDeclaration
import tools.vitruv.dsls.commonalities.language.CommonalityDeclaration
import tools.vitruv.dsls.commonalities.language.CommonalityFile
import tools.vitruv.dsls.commonalities.language.ConceptDeclaration
import tools.vitruv.dsls.commonalities.language.Participation
import tools.vitruv.dsls.commonalities.language.ReferenceDeclaration

import static tools.vitruv.dsls.commonalities.language.LanguagePackage.Literals.*

/**
 * Customization of the default outline structure.
 * 
 * See https://www.eclipse.org/Xtext/documentation/310_eclipse_support.html#outline
 */
class CommonalitiesLanguageOutlineTreeProvider extends DefaultOutlineTreeProvider {

	def protected void _createChildren(DocumentRootNode root, CommonalityFile commonalityFile) {
		createNode(root, commonalityFile.concept)
		createNode(root, commonalityFile.commonality)
	}

	def protected boolean _isLeaf(ConceptDeclaration concept) {
		true
	}

	def protected void _createChildren(IOutlineNode parent, CommonalityDeclaration commonality) {
		createEStructuralFeatureNode(parent, commonality, COMMONALITY_DECLARATION__PARTICIPATIONS,
			labelProvider.getImage(PARTICIPATION), commonality.participations.size + ' Participations', false)
		commonality.attributes.forEach [createNode(parent, it)]
		commonality.references.forEach [createNode(parent, it)]
	}
	
	def protected boolean _isLeaf(Participation participation) {
		true
	}
	
	def protected boolean _isLeaf(AttributeDeclaration attribute) {
		true
	}
	
	def protected boolean _isLeaf(ReferenceDeclaration referenceDeclaration) {
		true
	}
}
