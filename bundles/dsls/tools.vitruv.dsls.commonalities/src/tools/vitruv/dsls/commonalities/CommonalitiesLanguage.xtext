grammar tools.vitruv.dsls.commonalities.CommonalitiesLanguage
	with org.eclipse.xtext.xbase.Xbase hidden(WS, SL_COMMENT)

generate commonalitiesLanguage "http://www.vitruv.tools/dsls/commonalities/CommonalitiesLanguage"

import "http://www.eclipse.org/emf/2002/Ecore" as ecore

CommonalityFile:
	domain += DomainDeclaration
	imports += Import*
	
	commonality = Commonality
;

DomainDeclaration:
	'domain' name=ValidID
;


/***********
 * Imports *
 ***********/
 
 /*
  * Concepts can reference metamodels or other concepts. Ecore models are best
  * referenced by their URI, as this makes importing them platform independent.
  * Concepts, on the other hand, are only meant to be used inside the project
  * they are defined in. So referencing them by fully qualified name is
  * perfectly fine.
  * 
  * In effect, there are two import parser rules: one for Metamodels, specified
  * by a string (the URI) and one for concepts, specified by a fully qualified
  * name.
  */
  
PackageLikeImportReference:
	CommonalityImportReference | MetapackageImportReference
;

MetapackageImportReference:
	package = [ecore::EPackage|STRING]
;
  
CommonalityImportReference:
	commonality = [CommonalityFile|QualifiedName]
;

Import:
	'import' element = PackageLikeImportReference ('as' alias=ValidID)?
;


/***********************
 * Concept Declaration *
 ***********************/
 
Commonality:
 	'commonality' name=ValidID '{'
 		participations += Participation*
 		attributes += Attribute*
 	'}'
;

ClassLikeReference:
	MetaclassReference | CommonalityReference
;

MetaclassReference:
	metamodel=[ecore::EPackage] '::' metaclass=[ecore::EClass]
;

CommonalityReference:
	commonality = [Commonality]
;

Participation:
	'with' element = ClassLikeReference
;

Attribute:
	name=ValidID '{'
		mappings += AttributeMappingSpecifiation*
	'}'
;

AttributeMappingSpecifiation:
	AttributeEqualitySpecification
;

AttributeLikeReference:
	meta=[Participation|ValidID] '.' attribute=[ecore::EAttribute|ValidID]
;

AttributeEqualitySpecification:
	'=' attribute=AttributeLikeReference
;
