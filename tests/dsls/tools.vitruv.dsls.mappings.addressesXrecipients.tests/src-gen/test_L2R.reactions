import edu.kit.ipd.sdq.metamodels.addresses.Addresses
import edu.kit.ipd.sdq.metamodels.recipients.Recipients
import java.util.Optional
import org.eclipse.xtext.xbase.lib.ObjectExtensions
import org.eclipse.xtext.xbase.lib.BooleanExtensions

import "edu.kit.ipd.sdq.metamodels.addresses" as addresses
import "edu.kit.ipd.sdq.metamodels.recipients" as recipients
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

reactions: test_L2R in reaction to changes in Addresses
execute actions in Recipients

reaction OnAdRootXReRootAddressesInsertedAsRoot {
	after element addresses::Addresses created
	call adRootXReRoot_ElementCreatedCheck(affectedEObject)
}

reaction OnAdRootXReRootAddressesDeleted {
	after element addresses::Addresses deleted
	call adRootXReRoot_ElementDeletedCheck(affectedEObject)
}

routine adRootXReRoot_BidirectionalUpdate(addresses::Addresses aRoot_) {
	action {
		execute {
			return
		}
	}
}

routine adRootXReRoot_CreateMapping(addresses::Addresses aRoot_) {
	match {
		require absence of recipients::Recipients corresponding to aRoot_ tagged with "test_map_Addresses_and_Recipients_correspondence_Addresses:aRoot_with_Recipients:rRoot"
	}
	action {
		val rRoot_ = create recipients::Recipients
		add correspondence between rRoot_ and aRoot_ tagged with "test_map_Addresses_and_Recipients_correspondence_Addresses:aRoot_with_Recipients:rRoot"
		call adRootXReRoot_BidirectionalUpdate(aRoot_)
	}
}

routine adRootXReRoot_DeleteMapping(recipients::Recipients rRoot_) {
	action {
		delete rRoot_
	}
}

routine adRootXReRoot_BidirectionalCheck(ecore::EObject affectedEObject, plain String as routineName) {
	action {
		call {
			if ( affectedEObject instanceof Addresses ) { var Addresses aRoot_ = affectedEObject { } }
		}
	}
}

routine adRootXReRoot_ElementCreatedCheck(ecore::EObject affectedEObject) {
	action {
		call {
			if ( affectedEObject instanceof Addresses ) { var Addresses aRoot_ = affectedEObject adRootXReRoot_CreateMapping ( aRoot_ ) }
		}
	}
}

routine adRootXReRoot_ElementDeletedCheck(ecore::EObject affectedEObject) {
	match {
		val rRoot_correspondingTo_aRoot = retrieve optional recipients::Recipients corresponding to affectedEObject tagged with "test_map_Addresses_and_Recipients_correspondence_Addresses:aRoot_with_Recipients:rRoot"
	}
	action {
		call {
			var Recipients rRoot_
			if ( rRoot_correspondingTo_aRoot . isPresent ( ) ) rRoot_ = rRoot_correspondingTo_aRoot . get ( )
			if ( rRoot_ !== null ) adRootXReRoot_DeleteMapping ( rRoot_ )
		}
	}
}

routine adRootXReRoot_ElementUpdatedCheck(ecore::EObject affectedEObject) {
	action {
		call {
			if ( affectedEObject instanceof Addresses ) { var Addresses aRoot_ = affectedEObject adRootXReRoot_CreateMapping ( aRoot_ ) }
			adRootXReRoot_ElementDeletedCheck(affectedEObject)
		}
	}
}