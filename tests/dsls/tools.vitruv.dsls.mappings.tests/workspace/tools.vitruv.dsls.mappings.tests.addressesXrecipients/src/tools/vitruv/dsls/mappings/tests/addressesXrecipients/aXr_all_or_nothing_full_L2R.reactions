import static tools.vitruv.dsls.mappings.tests.addressesXrecipients.mappings.AdRootXReRootMapping.*
import static tools.vitruv.dsls.mappings.tests.addressesXrecipients.mappings.AddressXRecipientLocationCityMapping.*

import "http://edu.kit.ipd.sdq.mdsd.addresses" as ad
import "http://edu.kit.ipd.sdq.mdsd.recipients" as re

reactions: adXre_L2R 
in reaction to changes in Addresses
execute actions in Recipients

/******************************************************
********** BEGIN GLOBAL REACTION AND ROUTINE **********
*******************************************************/
reaction AnyChange {
	after any change
	call {
		ensureAllMappings()
	}
}

routine ensureAllMappings() {
	action {
		call {
			ensureAdRootXReRootMapping()
			ensureAddressXRecipientLocationCityMapping()
		}
	}
}

/******************************************************
********** BEGIN AdRootXReRoot MAPPING **********
*******************************************************/
routine ensureAdRootXReRootMapping() {
	action {
		call {
			deleteAdRootXReRootMappingInstances()
			createAdRootXReRootMappingInstances()
			updateAdRootXReRootMappingInstances()
		}
	}
}

/********** BEGIN AdRootXReRoot DELETE ROUTINES **********/
routine deleteAdRootXReRootMappingInstances() {
	action {
		call {
			val invalidatedInstances = adRootXReRootMapping.removeInvalidatedLeftInstances()
			for (invalidatedInstance : invalidatedInstances) {
				deleteAdRootXReRootMappingElements(invalidatedInstance.ARoot)
			}
		}
	}
}

routine deleteAdRootXReRootMappingElements(ad::Addresses aRoot) {
	match {
		val rRoot = retrieve re::Recipients corresponding to aRoot
			tagged with "AdRootXReRoot"
	}
	action {
		remove correspondence between aRoot and rRoot // FIXME MK: tagged with "AdRootXReRoot"
		delete rRoot
	}
}

/********** BEGIN AdRootXReRoot CREATE ROUTINES **********/
routine createAdRootXReRootMappingInstances() {
	action {
		call {
			val newInstances = adRootXReRootMapping.promoteValidatedLeftCandidatesToInstances()
			for (newInstance : newInstances) {
				createAdRootXReRootMappingInstance(newInstance.ARoot)
			}
		}
	}
}

routine createAdRootXReRootMappingInstance(ad::Addresses aRoot) {
	action {
		val rRoot = create re::Recipients
		add correspondence between aRoot and rRoot
			tag with "AdRootXReRoot"
		call {
			adRootXReRootMapping.registerFullInstance(aRoot, rRoot)
			persistProjectRelative(aRoot, rRoot, aRoot.eResource.URI.lastSegment)
		}
	}
}

/********** BEGIN AdRootXReRootMapping UPDATE ROUTINES **********/
routine updateAdRootXReRootMappingInstances() {
	action {
		call {
			val instances = adRootXReRootMapping.getLeftInstances()
			for (instance : instances) {
				updateAdRootXReRootMappingInstance(instance.ARoot)
			}
		}
	}
}

routine updateAdRootXReRootMappingInstance(ad::Addresses aRoot) {
	match {
		val rRoot = retrieve re::Recipients corresponding to aRoot
			tagged with "AdRootXReRootMapping"
	}
	action {
		call {
			adRootXReRootMapping.enforceConditionsFromLeft2Right(aRoot, rRoot)
		}
	}
}

/******************************************************
********** BEGIN AddressXRecipientLocationCity MAPPING **********
*******************************************************/
routine ensureAddressXRecipientLocationCityMapping() {
	action {
		call {
			deleteAddressXRecipientLocationCityMappingInstances()
			createAddressXRecipientLocationCityMappingInstances()
			updateAddressXRecipientLocationCityMappingInstances()
		}
	}
}

/********** BEGIN AddressXRecipientLocationCity DELETE ROUTINES **********/
routine deleteAddressXRecipientLocationCityMappingInstances() {
	action {
		call {
			val instances = addressXRecipientLocationCityMapping.removeInvalidatedLeftInstances()
			for (invalidatedInstance : instances) {
				deleteAddressXRecipientLocationCityMappingInstance(invalidatedInstance.a)
			}
		}
	}
}

routine deleteAddressXRecipientLocationCityMappingInstance(ad::Address a) {
	match {
		val r = retrieve re::Recipient corresponding to a
			tagged with "AddressXRecipientLocationCity"
		val l = retrieve re::Location corresponding to a
			tagged with "AddressXRecipientLocationCity"
		val c = retrieve re::City corresponding to a
			tagged with "AddressXRecipientLocationCity"
	}
	action {
		remove correspondence between a and r // FIXME MK: tagged with "AddressXRecipientLocationCity"
		remove correspondence between a and l // FIXME MK: tagged with "AddressXRecipientLocationCity"
		remove correspondence between a and c // FIXME MK: tagged with "AddressXRecipientLocationCity"
		delete r
		delete l
		delete c
	}
}

/********** BEGIN AddressXRecipientLocationCity CREATE ROUTINES **********/
routine createAddressXRecipientLocationCityMappingInstances() {
	action {
		call {
			val newInstances = addressXRecipientLocationCityMapping.promoteValidatedLeftCandidatesToInstances()
			for (newInstance : newInstances) {
				createAddressXRecipientLocationCityMappingInstance(newInstance.a)
			}
		}
	}
}

routine createAddressXRecipientLocationCityMappingInstance(ad::Address a) {
	action {
		val r = create re::Recipient
		val l = create re::Location
		val c = create re::City
		add correspondence between a and r
			tag with "AddressXRecipientLocationCity"
		add correspondence between a and l
			tag with "AddressXRecipientLocationCity"
		add correspondence between a and c
			tag with "AddressXRecipientLocationCity"
		call {
			addressXRecipientLocationCityMapping.registerFullInstance(a, r, l, c)
		}
	}
}

/********** BEGIN AddressXRecipientLocationCity UPDATE ROUTINES **********/
routine updateAddressXRecipientLocationCityMappingInstances() {
	action {
		call {
			val instances = addressXRecipientLocationCityMapping.getLeftInstances()
			for (instance : instances) {
				updateAddressXRecipientLocationCityMappingInstance(instance.a)
			}
		}
	}
}

routine updateAddressXRecipientLocationCityMappingInstance(ad::Address a) {
	match {
		val r = retrieve re::Recipient corresponding to a
			tagged with "AddressXRecipientLocationCity"
		val l = retrieve re::Location corresponding to a
			tagged with "AddressXRecipientLocationCity"
		val c = retrieve re::City corresponding to a
			tagged with "AddressXRecipientLocationCity"
	}
	action {
		call {
			addressXRecipientLocationCityMapping.enforceConditionsFromLeft2Right(a, r, l, c)
		}
	}
}

/******************************************************
 ********** BEGIN CREATE REACTIONS **********
 ******************************************************/
reaction AddressesCreated {
	after element ad::Addresses created
	call {
		adRootXReRootMapping.addAddresses(affectedEObject)
	}
}

reaction AddressCreated {
	after element ad::Address created
	call {
		addressXRecipientLocationCityMapping.addAddress(affectedEObject)
	}
}

/******************************************************
 ********** BEGIN DELETE REACTIONS **********
 ******************************************************/
reaction AddressesDeleted {
	after element ad::Addresses deleted
	call {
		adRootXReRootMapping.removeAddresses(affectedEObject)
	}
}

reaction AddressDeleted {
	after element ad::Address deleted
	call {
		addressXRecipientLocationCityMapping.removeAddress(affectedEObject)
	}
}