import static extension tools.vitruv.dsls.mappings.tests.addressesXrecipients.AddressXRecipientLocationCityMapping.*
import static extension tools.vitruv.dsls.mappings.tests.addressesXrecipients.AddressXRecipientLocationCityConditions.*

import "http://edu.kit.ipd.sdq.mdsd.addresses" as ad
import "http://edu.kit.ipd.sdq.mdsd.recipients" as re

reactions: ad2re 
in reaction to changes in Addresses
execute actions in Recipients

/********** BEGIN UPDATE REACTIONS **********/
reaction AnyChange {
	after any change
	call {
		ensureAllMappings()
	}
}

routine ensureAllMappings() {
	action {
		call {
			ensureAddressXRecipientLocationCityMapping()
			//ensureTHENEXTNAMEMapping()
		}
	}
}

routine ensureAddressXRecipientLocationCityMapping() {
	action {
		call {
			deleteAddressXRecipientLocationCityMappingInstances()
			createAddressXRecipientLocationCityMappingInstances()
			updateAddressXRecipientLocationCityMappingInstances()
		}
	}
}

routine deleteAddressXRecipientLocationCityMappingInstances() {
	action {
		call {
			val instances = addressXRecipientLocationCityMapping.getLeftInstances()
			for (a : instances) {
				deleteAddressXRecipientLocationCityMappingInstance(a)
			}
		}
	}
}

routine deleteAddressXRecipientLocationCityMappingInstance(ad::Address a) {
	match {
		check AddressXRecipientLocationCityConditions.checkLeftPreconditions(a)
		val r = retrieve re::Recipient corresponding to a
			tagged with "AddressXRecipientLocationCity"
		val l = retrieve re::Location corresponding to a
			tagged with "AddressXRecipientLocationCity"
		val c = retrieve re::City corresponding to a
			tagged with "AddressXRecipientLocationCity"
	}
	action {
		remove correspondence between a and r
		remove correspondence between a and l
		remove correspondence between a and c
		delete r
		delete l
		delete c
		execute
			addressXRecipientLocationCityMapping.removeLeftInstance(a)
	}
}

routine createAddressXRecipientLocationCityMappingInstances() {
	action {
		call {
			val candidates = addressXRecipientLocationCityMapping.getLeftCandidates()
			for (a : candidates) {
				createAddressXRecipientLocationCityMappingInstance(a)
			}
		}
	}
}

routine createAddressXRecipientLocationCityMappingInstance(ad::Address a) {
	match {
		check AddressXRecipientLocationCityConditions.checkLeftPreconditions(a)
	}
	action {
		val r = create re::Recipient
		val l = create re::Location
		val c = create re::City
		add correspondence between a and r
		add correspondence between a and l
		add correspondence between a and c
		execute
			addressXRecipientLocationCityMapping.addLeftInstance(a)
	}
}

routine updateAddressXRecipientLocationCityMappingInstances() {
	action {
		call {
			val instances = addressXRecipientLocationCityMapping.getLeftInstances()
			for (a : instances) {
				updateAddressXRecipientLocationCityMappingInstance(a)
			}
		}
	}
}

routine updateAddressXRecipientLocationCityMappingInstance(ad::Address a) {
	match {
		val r = retrieve re::Recipient corresponding to a
			tagged with "AddressXRecipientLocationCity"
		val l = retrieve re::Location corresponding to a
			tagged with "AddressXRecipientLocationCity"
		val c = retrieve re::City corresponding to a
			tagged with "AddressXRecipientLocationCity"
	}
	action {
		call {
			AddressXRecipientLocationCityConditions.enforceRigthPostconditions(r, l, c)
			AddressXRecipientLocationCityConditions.enforceFromLeft2Right(a, r, l, c)
		}
	}
}

/********** BEGIN CREATE REACTIONS **********/
reaction AddressCreated {
	after element ad::Address created
	call {
		addressXRecipientLocationCityMapping.addAddress(affectedEObject)
		// FIXME MK: IS IT ALREADY GUARANTEED THAT THIS REACTION IS TRIGGERED BEFORE ANY CHANGE?
	}
}

/********** BEGIN DELETE REACTIONS **********/
reaction AddressDeleted {
	after element ad::Address deleted
	call {
		addressXRecipientLocationCityMapping.removeAddress(affectedEObject)
		// FIXME MK: IS IT ALREADY GUARANTEED THAT THIS REACTION IS TRIGGERED BEFORE ANY CHANGE?
	}
}