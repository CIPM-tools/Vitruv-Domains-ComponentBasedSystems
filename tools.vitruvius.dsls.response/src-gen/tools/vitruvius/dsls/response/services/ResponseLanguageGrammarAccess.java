/*
 * generated by Xtext 2.10.0
 */
package tools.vitruvius.dsls.response.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import tools.vitruvius.dsls.mirbase.services.MirBaseGrammarAccess;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.xbase.services.XbaseGrammarAccess;
import org.eclipse.xtext.xbase.services.XtypeGrammarAccess;

@Singleton
public class ResponseLanguageGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ResponseFileElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tools.vitruvius.dsls.response.ResponseLanguage.ResponseFile");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNamespaceImportsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNamespaceImportsXImportSectionParserRuleCall_0_0 = (RuleCall)cNamespaceImportsAssignment_0.eContents().get(0);
		private final RuleCall cMirBaseFileParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cResponsesSegmentsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cResponsesSegmentsResponsesSegmentParserRuleCall_2_0 = (RuleCall)cResponsesSegmentsAssignment_2.eContents().get(0);
		
		//ResponseFile:
		//	namespaceImports=XImportSection?
		//	MirBaseFile
		//	responsesSegments+=ResponsesSegment+;
		@Override public ParserRule getRule() { return rule; }
		
		//namespaceImports=XImportSection? MirBaseFile responsesSegments+=ResponsesSegment+
		public Group getGroup() { return cGroup; }
		
		//namespaceImports=XImportSection?
		public Assignment getNamespaceImportsAssignment_0() { return cNamespaceImportsAssignment_0; }
		
		//XImportSection
		public RuleCall getNamespaceImportsXImportSectionParserRuleCall_0_0() { return cNamespaceImportsXImportSectionParserRuleCall_0_0; }
		
		//MirBaseFile
		public RuleCall getMirBaseFileParserRuleCall_1() { return cMirBaseFileParserRuleCall_1; }
		
		//responsesSegments+=ResponsesSegment+
		public Assignment getResponsesSegmentsAssignment_2() { return cResponsesSegmentsAssignment_2; }
		
		//ResponsesSegment
		public RuleCall getResponsesSegmentsResponsesSegmentParserRuleCall_2_0() { return cResponsesSegmentsResponsesSegmentParserRuleCall_2_0; }
	}
	public class ResponsesSegmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tools.vitruvius.dsls.response.ResponseLanguage.ResponsesSegment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cResponsesFromMetamodelKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cFromMetamodelAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFromMetamodelMetamodelReferenceParserRuleCall_1_0 = (RuleCall)cFromMetamodelAssignment_1.eContents().get(0);
		private final Keyword cToMetamodelKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cToMetamodelAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cToMetamodelMetamodelReferenceParserRuleCall_3_0 = (RuleCall)cToMetamodelAssignment_3.eContents().get(0);
		private final Keyword cCalledKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cNameAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cNameValidIDParserRuleCall_5_0 = (RuleCall)cNameAssignment_5.eContents().get(0);
		private final Alternatives cAlternatives_6 = (Alternatives)cGroup.eContents().get(6);
		private final Assignment cResponsesAssignment_6_0 = (Assignment)cAlternatives_6.eContents().get(0);
		private final RuleCall cResponsesResponseParserRuleCall_6_0_0 = (RuleCall)cResponsesAssignment_6_0.eContents().get(0);
		private final Assignment cRoutinesAssignment_6_1 = (Assignment)cAlternatives_6.eContents().get(1);
		private final RuleCall cRoutinesExplicitRoutineParserRuleCall_6_1_0 = (RuleCall)cRoutinesAssignment_6_1.eContents().get(0);
		
		//ResponsesSegment:
		//	'responses from metamodel' fromMetamodel=MetamodelReference 'to metamodel' toMetamodel=MetamodelReference
		//	'called' name=ValidID (responses+=Response | routines+=ExplicitRoutine)*;
		@Override public ParserRule getRule() { return rule; }
		
		//'responses from metamodel' fromMetamodel=MetamodelReference 'to metamodel' toMetamodel=MetamodelReference 'called'
		//name=ValidID (responses+=Response | routines+=ExplicitRoutine)*
		public Group getGroup() { return cGroup; }
		
		//'responses from metamodel'
		public Keyword getResponsesFromMetamodelKeyword_0() { return cResponsesFromMetamodelKeyword_0; }
		
		//fromMetamodel=MetamodelReference
		public Assignment getFromMetamodelAssignment_1() { return cFromMetamodelAssignment_1; }
		
		//MetamodelReference
		public RuleCall getFromMetamodelMetamodelReferenceParserRuleCall_1_0() { return cFromMetamodelMetamodelReferenceParserRuleCall_1_0; }
		
		//'to metamodel'
		public Keyword getToMetamodelKeyword_2() { return cToMetamodelKeyword_2; }
		
		//toMetamodel=MetamodelReference
		public Assignment getToMetamodelAssignment_3() { return cToMetamodelAssignment_3; }
		
		//MetamodelReference
		public RuleCall getToMetamodelMetamodelReferenceParserRuleCall_3_0() { return cToMetamodelMetamodelReferenceParserRuleCall_3_0; }
		
		//'called'
		public Keyword getCalledKeyword_4() { return cCalledKeyword_4; }
		
		//name=ValidID
		public Assignment getNameAssignment_5() { return cNameAssignment_5; }
		
		//ValidID
		public RuleCall getNameValidIDParserRuleCall_5_0() { return cNameValidIDParserRuleCall_5_0; }
		
		//(responses+=Response | routines+=ExplicitRoutine)*
		public Alternatives getAlternatives_6() { return cAlternatives_6; }
		
		//responses+=Response
		public Assignment getResponsesAssignment_6_0() { return cResponsesAssignment_6_0; }
		
		//Response
		public RuleCall getResponsesResponseParserRuleCall_6_0_0() { return cResponsesResponseParserRuleCall_6_0_0; }
		
		//routines+=ExplicitRoutine
		public Assignment getRoutinesAssignment_6_1() { return cRoutinesAssignment_6_1; }
		
		//ExplicitRoutine
		public RuleCall getRoutinesExplicitRoutineParserRuleCall_6_1_0() { return cRoutinesExplicitRoutineParserRuleCall_6_1_0; }
	}
	public class ResponseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tools.vitruvius.dsls.response.ResponseLanguage.Response");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDocumentationAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cDocumentationML_COMMENTTerminalRuleCall_0_0 = (RuleCall)cDocumentationAssignment_0.eContents().get(0);
		private final Keyword cResponseKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameValidIDParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Assignment cTriggerAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTriggerTriggerParserRuleCall_3_0 = (RuleCall)cTriggerAssignment_3.eContents().get(0);
		private final Assignment cRoutineAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cRoutineImplicitRoutineParserRuleCall_4_0 = (RuleCall)cRoutineAssignment_4.eContents().get(0);
		
		//Response:
		//	documentation=ML_COMMENT?
		//	'response:' name=ValidID
		//	trigger=Trigger
		//	routine=ImplicitRoutine;
		@Override public ParserRule getRule() { return rule; }
		
		//documentation=ML_COMMENT? 'response:' name=ValidID trigger=Trigger routine=ImplicitRoutine
		public Group getGroup() { return cGroup; }
		
		//documentation=ML_COMMENT?
		public Assignment getDocumentationAssignment_0() { return cDocumentationAssignment_0; }
		
		//ML_COMMENT
		public RuleCall getDocumentationML_COMMENTTerminalRuleCall_0_0() { return cDocumentationML_COMMENTTerminalRuleCall_0_0; }
		
		//'response:'
		public Keyword getResponseKeyword_1() { return cResponseKeyword_1; }
		
		//name=ValidID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ValidID
		public RuleCall getNameValidIDParserRuleCall_2_0() { return cNameValidIDParserRuleCall_2_0; }
		
		//trigger=Trigger
		public Assignment getTriggerAssignment_3() { return cTriggerAssignment_3; }
		
		//Trigger
		public RuleCall getTriggerTriggerParserRuleCall_3_0() { return cTriggerTriggerParserRuleCall_3_0; }
		
		//routine=ImplicitRoutine
		public Assignment getRoutineAssignment_4() { return cRoutineAssignment_4; }
		
		//ImplicitRoutine
		public RuleCall getRoutineImplicitRoutineParserRuleCall_4_0() { return cRoutineImplicitRoutineParserRuleCall_4_0; }
	}
	public class InvariantViolationEventElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tools.vitruvius.dsls.response.ResponseLanguage.InvariantViolationEvent");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cInvariantKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cViolationAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cViolationEClassCrossReference_1_0 = (CrossReference)cViolationAssignment_1.eContents().get(0);
		private final RuleCall cViolationEClassQualifiedNameParserRuleCall_1_0_1 = (RuleCall)cViolationEClassCrossReference_1_0.eContents().get(1);
		
		//// ****** TRIGGER ******
		//InvariantViolationEvent:
		//	'invariant' violation=[ecore::EClass|QualifiedName];
		@Override public ParserRule getRule() { return rule; }
		
		//'invariant' violation=[ecore::EClass|QualifiedName]
		public Group getGroup() { return cGroup; }
		
		//'invariant'
		public Keyword getInvariantKeyword_0() { return cInvariantKeyword_0; }
		
		//violation=[ecore::EClass|QualifiedName]
		public Assignment getViolationAssignment_1() { return cViolationAssignment_1; }
		
		//[ecore::EClass|QualifiedName]
		public CrossReference getViolationEClassCrossReference_1_0() { return cViolationEClassCrossReference_1_0; }
		
		//QualifiedName
		public RuleCall getViolationEClassQualifiedNameParserRuleCall_1_0_1() { return cViolationEClassQualifiedNameParserRuleCall_1_0_1; }
	}
	public class TriggerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tools.vitruvius.dsls.response.ResponseLanguage.Trigger");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTriggerKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final RuleCall cModelChangeParserRuleCall_1_0 = (RuleCall)cAlternatives_1.eContents().get(0);
		private final RuleCall cInvariantViolationEventParserRuleCall_1_1 = (RuleCall)cAlternatives_1.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCheckKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cPreconditionAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cPreconditionPreconditionCodeBlockParserRuleCall_2_1_0 = (RuleCall)cPreconditionAssignment_2_1.eContents().get(0);
		
		//Trigger:
		//	'trigger:' (ModelChange | InvariantViolationEvent) ('check:' precondition=PreconditionCodeBlock)?;
		@Override public ParserRule getRule() { return rule; }
		
		//'trigger:' (ModelChange | InvariantViolationEvent) ('check:' precondition=PreconditionCodeBlock)?
		public Group getGroup() { return cGroup; }
		
		//'trigger:'
		public Keyword getTriggerKeyword_0() { return cTriggerKeyword_0; }
		
		//(ModelChange | InvariantViolationEvent)
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//ModelChange
		public RuleCall getModelChangeParserRuleCall_1_0() { return cModelChangeParserRuleCall_1_0; }
		
		//InvariantViolationEvent
		public RuleCall getInvariantViolationEventParserRuleCall_1_1() { return cInvariantViolationEventParserRuleCall_1_1; }
		
		//('check:' precondition=PreconditionCodeBlock)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'check:'
		public Keyword getCheckKeyword_2_0() { return cCheckKeyword_2_0; }
		
		//precondition=PreconditionCodeBlock
		public Assignment getPreconditionAssignment_2_1() { return cPreconditionAssignment_2_1; }
		
		//PreconditionCodeBlock
		public RuleCall getPreconditionPreconditionCodeBlockParserRuleCall_2_1_0() { return cPreconditionPreconditionCodeBlockParserRuleCall_2_1_0; }
	}
	public class ModelChangeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tools.vitruvius.dsls.response.ResponseLanguage.ModelChange");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cConcreteModelElementChangeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cArbitraryModelElementChangeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//ModelChange:
		//	ConcreteModelElementChange | ArbitraryModelElementChange;
		@Override public ParserRule getRule() { return rule; }
		
		//ConcreteModelElementChange | ArbitraryModelElementChange
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ConcreteModelElementChange
		public RuleCall getConcreteModelElementChangeParserRuleCall_0() { return cConcreteModelElementChangeParserRuleCall_0; }
		
		//ArbitraryModelElementChange
		public RuleCall getArbitraryModelElementChangeParserRuleCall_1() { return cArbitraryModelElementChangeParserRuleCall_1; }
	}
	public class ConcreteModelElementChangeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tools.vitruvius.dsls.response.ResponseLanguage.ConcreteModelElementChange");
		private final RuleCall cAtomicConcreteModelElementChangeParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//ConcreteModelElementChange:
		//	AtomicConcreteModelElementChange;
		@Override public ParserRule getRule() { return rule; }
		
		//AtomicConcreteModelElementChange
		public RuleCall getAtomicConcreteModelElementChangeParserRuleCall() { return cAtomicConcreteModelElementChangeParserRuleCall; }
	}
	public class AtomicConcreteModelElementChangeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tools.vitruvius.dsls.response.ResponseLanguage.AtomicConcreteModelElementChange");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAtomicRootObjectChangeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cAtomicFeatureChangeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//AtomicConcreteModelElementChange:
		//	AtomicRootObjectChange | AtomicFeatureChange;
		@Override public ParserRule getRule() { return rule; }
		
		//AtomicRootObjectChange | AtomicFeatureChange
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//AtomicRootObjectChange
		public RuleCall getAtomicRootObjectChangeParserRuleCall_0() { return cAtomicRootObjectChangeParserRuleCall_0; }
		
		//AtomicFeatureChange
		public RuleCall getAtomicFeatureChangeParserRuleCall_1() { return cAtomicFeatureChangeParserRuleCall_1; }
	}
	public class AtomicRootObjectChangeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tools.vitruvius.dsls.response.ResponseLanguage.AtomicRootObjectChange");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Group cGroup_0_0 = (Group)cAlternatives_0.eContents().get(0);
		private final Keyword cInsertRootKeyword_0_0_0 = (Keyword)cGroup_0_0.eContents().get(0);
		private final Action cInsertRootChangeAction_0_0_1 = (Action)cGroup_0_0.eContents().get(1);
		private final Group cGroup_0_1 = (Group)cAlternatives_0.eContents().get(1);
		private final Keyword cRemoveRootKeyword_0_1_0 = (Keyword)cGroup_0_1.eContents().get(0);
		private final Action cRemoveRootChangeAction_0_1_1 = (Action)cGroup_0_1.eContents().get(1);
		private final Assignment cChangedElementAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cChangedElementModelElementParserRuleCall_1_0 = (RuleCall)cChangedElementAssignment_1.eContents().get(0);
		
		//AtomicRootObjectChange:
		//	('insert root' {InsertRootChange} |
		//	'remove root' {RemoveRootChange}) changedElement=ModelElement;
		@Override public ParserRule getRule() { return rule; }
		
		//('insert root' {InsertRootChange} | 'remove root' {RemoveRootChange}) changedElement=ModelElement
		public Group getGroup() { return cGroup; }
		
		//('insert root' {InsertRootChange} | 'remove root' {RemoveRootChange})
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//'insert root' {InsertRootChange}
		public Group getGroup_0_0() { return cGroup_0_0; }
		
		//'insert root'
		public Keyword getInsertRootKeyword_0_0_0() { return cInsertRootKeyword_0_0_0; }
		
		//{InsertRootChange}
		public Action getInsertRootChangeAction_0_0_1() { return cInsertRootChangeAction_0_0_1; }
		
		//'remove root' {RemoveRootChange}
		public Group getGroup_0_1() { return cGroup_0_1; }
		
		//'remove root'
		public Keyword getRemoveRootKeyword_0_1_0() { return cRemoveRootKeyword_0_1_0; }
		
		//{RemoveRootChange}
		public Action getRemoveRootChangeAction_0_1_1() { return cRemoveRootChangeAction_0_1_1; }
		
		//changedElement=ModelElement
		public Assignment getChangedElementAssignment_1() { return cChangedElementAssignment_1; }
		
		//ModelElement
		public RuleCall getChangedElementModelElementParserRuleCall_1_0() { return cChangedElementModelElementParserRuleCall_1_0; }
	}
	public class AtomicFeatureChangeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tools.vitruvius.dsls.response.ResponseLanguage.AtomicFeatureChange");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final RuleCall cAtomicMultiValuedFeatureChangeParserRuleCall_0_0 = (RuleCall)cAlternatives_0.eContents().get(0);
		private final RuleCall cAtomicSingleValuedFeatureChangeParserRuleCall_0_1 = (RuleCall)cAlternatives_0.eContents().get(1);
		private final Assignment cChangedFeatureAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cChangedFeatureFeatureOfElementParserRuleCall_1_0 = (RuleCall)cChangedFeatureAssignment_1.eContents().get(0);
		
		//AtomicFeatureChange:
		//	(AtomicMultiValuedFeatureChange | AtomicSingleValuedFeatureChange) changedFeature=FeatureOfElement;
		@Override public ParserRule getRule() { return rule; }
		
		//(AtomicMultiValuedFeatureChange | AtomicSingleValuedFeatureChange) changedFeature=FeatureOfElement
		public Group getGroup() { return cGroup; }
		
		//(AtomicMultiValuedFeatureChange | AtomicSingleValuedFeatureChange)
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//AtomicMultiValuedFeatureChange
		public RuleCall getAtomicMultiValuedFeatureChangeParserRuleCall_0_0() { return cAtomicMultiValuedFeatureChangeParserRuleCall_0_0; }
		
		//AtomicSingleValuedFeatureChange
		public RuleCall getAtomicSingleValuedFeatureChangeParserRuleCall_0_1() { return cAtomicSingleValuedFeatureChangeParserRuleCall_0_1; }
		
		//changedFeature=FeatureOfElement
		public Assignment getChangedFeatureAssignment_1() { return cChangedFeatureAssignment_1; }
		
		//FeatureOfElement
		public RuleCall getChangedFeatureFeatureOfElementParserRuleCall_1_0() { return cChangedFeatureFeatureOfElementParserRuleCall_1_0; }
	}
	public class AtomicMultiValuedFeatureChangeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tools.vitruvius.dsls.response.ResponseLanguage.AtomicMultiValuedFeatureChange");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cInsertInListKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Action cMultiValuedFeatureInsertChangeAction_0_1 = (Action)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cRemoveFromListKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Action cMultiValuedFeatureRemoveChangeAction_1_1 = (Action)cGroup_1.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cPermuteListKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Action cMultiValuedFeaturePermuteChangeAction_2_1 = (Action)cGroup_2.eContents().get(1);
		
		//AtomicMultiValuedFeatureChange:
		//	'insert in list' {MultiValuedFeatureInsertChange} |
		//	'remove from list' {MultiValuedFeatureRemoveChange} |
		//	'permute list' {MultiValuedFeaturePermuteChange};
		@Override public ParserRule getRule() { return rule; }
		
		//'insert in list' {MultiValuedFeatureInsertChange} | 'remove from list' {MultiValuedFeatureRemoveChange} | 'permute list'
		//{MultiValuedFeaturePermuteChange}
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'insert in list' {MultiValuedFeatureInsertChange}
		public Group getGroup_0() { return cGroup_0; }
		
		//'insert in list'
		public Keyword getInsertInListKeyword_0_0() { return cInsertInListKeyword_0_0; }
		
		//{MultiValuedFeatureInsertChange}
		public Action getMultiValuedFeatureInsertChangeAction_0_1() { return cMultiValuedFeatureInsertChangeAction_0_1; }
		
		//'remove from list' {MultiValuedFeatureRemoveChange}
		public Group getGroup_1() { return cGroup_1; }
		
		//'remove from list'
		public Keyword getRemoveFromListKeyword_1_0() { return cRemoveFromListKeyword_1_0; }
		
		//{MultiValuedFeatureRemoveChange}
		public Action getMultiValuedFeatureRemoveChangeAction_1_1() { return cMultiValuedFeatureRemoveChangeAction_1_1; }
		
		//'permute list' {MultiValuedFeaturePermuteChange}
		public Group getGroup_2() { return cGroup_2; }
		
		//'permute list'
		public Keyword getPermuteListKeyword_2_0() { return cPermuteListKeyword_2_0; }
		
		//{MultiValuedFeaturePermuteChange}
		public Action getMultiValuedFeaturePermuteChangeAction_2_1() { return cMultiValuedFeaturePermuteChangeAction_2_1; }
	}
	public class AtomicSingleValuedFeatureChangeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tools.vitruvius.dsls.response.ResponseLanguage.AtomicSingleValuedFeatureChange");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cReplaceValueKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Action cSingleValuedFeatureReplaceAction_1 = (Action)cGroup.eContents().get(1);
		
		//AtomicSingleValuedFeatureChange: //'create value' {SingleValuedFeatureCreate} | 'delete value' {SingleValuedFeatureDelete} | 
		//	'replace value' {SingleValuedFeatureReplace};
		@Override public ParserRule getRule() { return rule; }
		
		////'create value' {SingleValuedFeatureCreate} | 'delete value' {SingleValuedFeatureDelete} | 
		//'replace value' {SingleValuedFeatureReplace}
		public Group getGroup() { return cGroup; }
		
		////'create value' {SingleValuedFeatureCreate} | 'delete value' {SingleValuedFeatureDelete} | 
		//'replace value'
		public Keyword getReplaceValueKeyword_0() { return cReplaceValueKeyword_0; }
		
		//{SingleValuedFeatureReplace}
		public Action getSingleValuedFeatureReplaceAction_1() { return cSingleValuedFeatureReplaceAction_1; }
	}
	public class ArbitraryModelElementChangeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tools.vitruvius.dsls.response.ResponseLanguage.ArbitraryModelElementChange");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cArbitraryModelElementChangeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cAnyChangeKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//ArbitraryModelElementChange:
		//	{ArbitraryModelElementChange} 'any change';
		@Override public ParserRule getRule() { return rule; }
		
		//{ArbitraryModelElementChange} 'any change'
		public Group getGroup() { return cGroup; }
		
		//{ArbitraryModelElementChange}
		public Action getArbitraryModelElementChangeAction_0() { return cArbitraryModelElementChangeAction_0; }
		
		//'any change'
		public Keyword getAnyChangeKeyword_1() { return cAnyChangeKeyword_1; }
	}
	public class RoutineElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tools.vitruvius.dsls.response.ResponseLanguage.Routine");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cMatchingAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cMatchingMatchingParserRuleCall_0_0 = (RuleCall)cMatchingAssignment_0.eContents().get(0);
		private final Assignment cEffectAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cEffectEffectParserRuleCall_1_0 = (RuleCall)cEffectAssignment_1.eContents().get(0);
		
		//// ****** EFFECTS ******
		//fragment Routine:
		//	matching=Matching?
		//	effect=Effect;
		@Override public ParserRule getRule() { return rule; }
		
		//matching=Matching? effect=Effect
		public Group getGroup() { return cGroup; }
		
		//matching=Matching?
		public Assignment getMatchingAssignment_0() { return cMatchingAssignment_0; }
		
		//Matching
		public RuleCall getMatchingMatchingParserRuleCall_0_0() { return cMatchingMatchingParserRuleCall_0_0; }
		
		//effect=Effect
		public Assignment getEffectAssignment_1() { return cEffectAssignment_1; }
		
		//Effect
		public RuleCall getEffectEffectParserRuleCall_1_0() { return cEffectEffectParserRuleCall_1_0; }
	}
	public class ImplicitRoutineElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tools.vitruvius.dsls.response.ResponseLanguage.ImplicitRoutine");
		private final RuleCall cRoutineParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//ImplicitRoutine:
		//	Routine;
		@Override public ParserRule getRule() { return rule; }
		
		//Routine
		public RuleCall getRoutineParserRuleCall() { return cRoutineParserRuleCall; }
	}
	public class MatchingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tools.vitruvius.dsls.response.ResponseLanguage.Matching");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cMatchingAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cMatchKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cRetrievedElementsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRetrievedElementsRetrieveModelElementParserRuleCall_2_0 = (RuleCall)cRetrievedElementsAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCheckKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cConditionAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cConditionPreconditionCodeBlockParserRuleCall_3_1_0 = (RuleCall)cConditionAssignment_3_1.eContents().get(0);
		
		//Matching:
		//	{Matching}
		//	'match:'
		//	retrievedElements+=RetrieveModelElement* ('check:' condition=PreconditionCodeBlock)?;
		@Override public ParserRule getRule() { return rule; }
		
		//{Matching} 'match:' retrievedElements+=RetrieveModelElement* ('check:' condition=PreconditionCodeBlock)?
		public Group getGroup() { return cGroup; }
		
		//{Matching}
		public Action getMatchingAction_0() { return cMatchingAction_0; }
		
		//'match:'
		public Keyword getMatchKeyword_1() { return cMatchKeyword_1; }
		
		//retrievedElements+=RetrieveModelElement*
		public Assignment getRetrievedElementsAssignment_2() { return cRetrievedElementsAssignment_2; }
		
		//RetrieveModelElement
		public RuleCall getRetrievedElementsRetrieveModelElementParserRuleCall_2_0() { return cRetrievedElementsRetrieveModelElementParserRuleCall_2_0; }
		
		//('check:' condition=PreconditionCodeBlock)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'check:'
		public Keyword getCheckKeyword_3_0() { return cCheckKeyword_3_0; }
		
		//condition=PreconditionCodeBlock
		public Assignment getConditionAssignment_3_1() { return cConditionAssignment_3_1; }
		
		//PreconditionCodeBlock
		public RuleCall getConditionPreconditionCodeBlockParserRuleCall_3_1_0() { return cConditionPreconditionCodeBlockParserRuleCall_3_1_0; }
	}
	public class EffectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tools.vitruvius.dsls.response.ResponseLanguage.Effect");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cEffectAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cEffectKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cElementCreationAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final RuleCall cElementCreationCreateElementParserRuleCall_2_0_0 = (RuleCall)cElementCreationAssignment_2_0.eContents().get(0);
		private final Assignment cElementDeletionAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final RuleCall cElementDeletionDeleteElementParserRuleCall_2_1_0 = (RuleCall)cElementDeletionAssignment_2_1.eContents().get(0);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Assignment cCorrespondenceCreationAssignment_3_0 = (Assignment)cAlternatives_3.eContents().get(0);
		private final RuleCall cCorrespondenceCreationCreateCorrespondenceParserRuleCall_3_0_0 = (RuleCall)cCorrespondenceCreationAssignment_3_0.eContents().get(0);
		private final Assignment cCorrespondenceDeletionAssignment_3_1 = (Assignment)cAlternatives_3.eContents().get(1);
		private final RuleCall cCorrespondenceDeletionRemoveCorrespondenceParserRuleCall_3_1_0 = (RuleCall)cCorrespondenceDeletionAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cExecuteKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cCodeBlockAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cCodeBlockExecutionCodeBlockParserRuleCall_4_1_0 = (RuleCall)cCodeBlockAssignment_4_1.eContents().get(0);
		
		//Effect:
		//	{Effect}
		//	'effect:' (elementCreation+=CreateElement | elementDeletion+=DeleteElement)*
		//	(correspondenceCreation+=CreateCorrespondence | correspondenceDeletion+=RemoveCorrespondence)* ('execute:'
		//	codeBlock=ExecutionCodeBlock)?;
		@Override public ParserRule getRule() { return rule; }
		
		//{Effect} 'effect:' (elementCreation+=CreateElement | elementDeletion+=DeleteElement)*
		//(correspondenceCreation+=CreateCorrespondence | correspondenceDeletion+=RemoveCorrespondence)* ('execute:'
		//codeBlock=ExecutionCodeBlock)?
		public Group getGroup() { return cGroup; }
		
		//{Effect}
		public Action getEffectAction_0() { return cEffectAction_0; }
		
		//'effect:'
		public Keyword getEffectKeyword_1() { return cEffectKeyword_1; }
		
		//(elementCreation+=CreateElement | elementDeletion+=DeleteElement)*
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//elementCreation+=CreateElement
		public Assignment getElementCreationAssignment_2_0() { return cElementCreationAssignment_2_0; }
		
		//CreateElement
		public RuleCall getElementCreationCreateElementParserRuleCall_2_0_0() { return cElementCreationCreateElementParserRuleCall_2_0_0; }
		
		//elementDeletion+=DeleteElement
		public Assignment getElementDeletionAssignment_2_1() { return cElementDeletionAssignment_2_1; }
		
		//DeleteElement
		public RuleCall getElementDeletionDeleteElementParserRuleCall_2_1_0() { return cElementDeletionDeleteElementParserRuleCall_2_1_0; }
		
		//(correspondenceCreation+=CreateCorrespondence | correspondenceDeletion+=RemoveCorrespondence)*
		public Alternatives getAlternatives_3() { return cAlternatives_3; }
		
		//correspondenceCreation+=CreateCorrespondence
		public Assignment getCorrespondenceCreationAssignment_3_0() { return cCorrespondenceCreationAssignment_3_0; }
		
		//CreateCorrespondence
		public RuleCall getCorrespondenceCreationCreateCorrespondenceParserRuleCall_3_0_0() { return cCorrespondenceCreationCreateCorrespondenceParserRuleCall_3_0_0; }
		
		//correspondenceDeletion+=RemoveCorrespondence
		public Assignment getCorrespondenceDeletionAssignment_3_1() { return cCorrespondenceDeletionAssignment_3_1; }
		
		//RemoveCorrespondence
		public RuleCall getCorrespondenceDeletionRemoveCorrespondenceParserRuleCall_3_1_0() { return cCorrespondenceDeletionRemoveCorrespondenceParserRuleCall_3_1_0; }
		
		//('execute:' codeBlock=ExecutionCodeBlock)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'execute:'
		public Keyword getExecuteKeyword_4_0() { return cExecuteKeyword_4_0; }
		
		//codeBlock=ExecutionCodeBlock
		public Assignment getCodeBlockAssignment_4_1() { return cCodeBlockAssignment_4_1; }
		
		//ExecutionCodeBlock
		public RuleCall getCodeBlockExecutionCodeBlockParserRuleCall_4_1_0() { return cCodeBlockExecutionCodeBlockParserRuleCall_4_1_0; }
	}
	public class ExplicitRoutineElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tools.vitruvius.dsls.response.ResponseLanguage.ExplicitRoutine");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRoutineKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameValidIDParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cInputAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cInputRoutineInputParserRuleCall_2_0 = (RuleCall)cInputAssignment_2.eContents().get(0);
		private final RuleCall cRoutineParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//ExplicitRoutine:
		//	'routine:' name=ValidID
		//	input=RoutineInput
		//	Routine;
		@Override public ParserRule getRule() { return rule; }
		
		//'routine:' name=ValidID input=RoutineInput Routine
		public Group getGroup() { return cGroup; }
		
		//'routine:'
		public Keyword getRoutineKeyword_0() { return cRoutineKeyword_0; }
		
		//name=ValidID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ValidID
		public RuleCall getNameValidIDParserRuleCall_1_0() { return cNameValidIDParserRuleCall_1_0; }
		
		//input=RoutineInput
		public Assignment getInputAssignment_2() { return cInputAssignment_2; }
		
		//RoutineInput
		public RuleCall getInputRoutineInputParserRuleCall_2_0() { return cInputRoutineInputParserRuleCall_2_0; }
		
		//Routine
		public RuleCall getRoutineParserRuleCall_3() { return cRoutineParserRuleCall_3; }
	}
	public class RoutineInputElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tools.vitruvius.dsls.response.ResponseLanguage.RoutineInput");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRoutineInputAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cInputKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cModelInputElementsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cModelInputElementsNamedModelElementParserRuleCall_1_1_0 = (RuleCall)cModelInputElementsAssignment_1_1.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final Keyword cCommaKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Assignment cModelInputElementsAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final RuleCall cModelInputElementsNamedModelElementParserRuleCall_1_2_1_0 = (RuleCall)cModelInputElementsAssignment_1_2_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cPlainJavaInputKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cJavaInputElementsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cJavaInputElementsNamedJavaElementParserRuleCall_2_1_0 = (RuleCall)cJavaInputElementsAssignment_2_1.eContents().get(0);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Keyword cCommaKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Assignment cJavaInputElementsAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final RuleCall cJavaInputElementsNamedJavaElementParserRuleCall_2_2_1_0 = (RuleCall)cJavaInputElementsAssignment_2_2_1.eContents().get(0);
		
		//RoutineInput:
		//	{RoutineInput} ('input:' modelInputElements+=NamedModelElement (',' modelInputElements+=NamedModelElement)*)?
		//	('plain java input:' javaInputElements+=NamedJavaElement (',' javaInputElements+=NamedJavaElement)*)?;
		@Override public ParserRule getRule() { return rule; }
		
		//{RoutineInput} ('input:' modelInputElements+=NamedModelElement (',' modelInputElements+=NamedModelElement)*)?
		//('plain java input:' javaInputElements+=NamedJavaElement (',' javaInputElements+=NamedJavaElement)*)?
		public Group getGroup() { return cGroup; }
		
		//{RoutineInput}
		public Action getRoutineInputAction_0() { return cRoutineInputAction_0; }
		
		//('input:' modelInputElements+=NamedModelElement (',' modelInputElements+=NamedModelElement)*)?
		public Group getGroup_1() { return cGroup_1; }
		
		//'input:'
		public Keyword getInputKeyword_1_0() { return cInputKeyword_1_0; }
		
		//modelInputElements+=NamedModelElement
		public Assignment getModelInputElementsAssignment_1_1() { return cModelInputElementsAssignment_1_1; }
		
		//NamedModelElement
		public RuleCall getModelInputElementsNamedModelElementParserRuleCall_1_1_0() { return cModelInputElementsNamedModelElementParserRuleCall_1_1_0; }
		
		//(',' modelInputElements+=NamedModelElement)*
		public Group getGroup_1_2() { return cGroup_1_2; }
		
		//','
		public Keyword getCommaKeyword_1_2_0() { return cCommaKeyword_1_2_0; }
		
		//modelInputElements+=NamedModelElement
		public Assignment getModelInputElementsAssignment_1_2_1() { return cModelInputElementsAssignment_1_2_1; }
		
		//NamedModelElement
		public RuleCall getModelInputElementsNamedModelElementParserRuleCall_1_2_1_0() { return cModelInputElementsNamedModelElementParserRuleCall_1_2_1_0; }
		
		//('plain java input:' javaInputElements+=NamedJavaElement (',' javaInputElements+=NamedJavaElement)*)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'plain java input:'
		public Keyword getPlainJavaInputKeyword_2_0() { return cPlainJavaInputKeyword_2_0; }
		
		//javaInputElements+=NamedJavaElement
		public Assignment getJavaInputElementsAssignment_2_1() { return cJavaInputElementsAssignment_2_1; }
		
		//NamedJavaElement
		public RuleCall getJavaInputElementsNamedJavaElementParserRuleCall_2_1_0() { return cJavaInputElementsNamedJavaElementParserRuleCall_2_1_0; }
		
		//(',' javaInputElements+=NamedJavaElement)*
		public Group getGroup_2_2() { return cGroup_2_2; }
		
		//','
		public Keyword getCommaKeyword_2_2_0() { return cCommaKeyword_2_2_0; }
		
		//javaInputElements+=NamedJavaElement
		public Assignment getJavaInputElementsAssignment_2_2_1() { return cJavaInputElementsAssignment_2_2_1; }
		
		//NamedJavaElement
		public RuleCall getJavaInputElementsNamedJavaElementParserRuleCall_2_2_1_0() { return cJavaInputElementsNamedJavaElementParserRuleCall_2_2_1_0; }
	}
	public class TaggableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tools.vitruvius.dsls.response.ResponseLanguage.Taggable");
		private final Assignment cTagAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cTagTagCodeBlockParserRuleCall_0 = (RuleCall)cTagAssignment.eContents().get(0);
		
		//// ****** CORRESPONDENCE SPECIFICATION ******	
		//fragment Taggable:
		//	tag=TagCodeBlock;
		@Override public ParserRule getRule() { return rule; }
		
		//tag=TagCodeBlock
		public Assignment getTagAssignment() { return cTagAssignment; }
		
		//TagCodeBlock
		public RuleCall getTagTagCodeBlockParserRuleCall_0() { return cTagTagCodeBlockParserRuleCall_0; }
	}
	public class RetrieveModelElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tools.vitruvius.dsls.response.ResponseLanguage.RetrieveModelElement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Assignment cRequiredAssignment_0_0 = (Assignment)cAlternatives_0.eContents().get(0);
		private final Keyword cRequiredRetrieveRequiredElementKeyword_0_0_0 = (Keyword)cRequiredAssignment_0_0.eContents().get(0);
		private final Assignment cOptionalAssignment_0_1 = (Assignment)cAlternatives_0.eContents().get(1);
		private final Keyword cOptionalRetrieveOptionalElementKeyword_0_1_0 = (Keyword)cOptionalAssignment_0_1.eContents().get(0);
		private final Assignment cAbscenceAssignment_0_2 = (Assignment)cAlternatives_0.eContents().get(2);
		private final Keyword cAbscenceRequireAbsenceOfElementKeyword_0_2_0 = (Keyword)cAbscenceAssignment_0_2.eContents().get(0);
		private final Assignment cElementAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cElementNamedModelElementParserRuleCall_1_0 = (RuleCall)cElementAssignment_1.eContents().get(0);
		private final Keyword cCorrespondingToKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cCorrespondenceSourceAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cCorrespondenceSourceCorrespondingObjectCodeBlockParserRuleCall_3_0 = (RuleCall)cCorrespondenceSourceAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cTaggedWithKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final RuleCall cTaggableParserRuleCall_4_1 = (RuleCall)cGroup_4.eContents().get(1);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cWithKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cPreconditionAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cPreconditionPreconditionCodeBlockParserRuleCall_5_1_0 = (RuleCall)cPreconditionAssignment_5_1.eContents().get(0);
		
		//RetrieveModelElement:
		//	(required?='retrieve required element:' | optional?='retrieve optional element:' |
		//	abscence?='require absence of element:') element=NamedModelElement 'corresponding to'
		//	correspondenceSource=CorrespondingObjectCodeBlock ('tagged with' Taggable)? ('with'
		//	precondition=PreconditionCodeBlock)?;
		@Override public ParserRule getRule() { return rule; }
		
		//(required?='retrieve required element:' | optional?='retrieve optional element:' |
		//abscence?='require absence of element:') element=NamedModelElement 'corresponding to'
		//correspondenceSource=CorrespondingObjectCodeBlock ('tagged with' Taggable)? ('with'
		//precondition=PreconditionCodeBlock)?
		public Group getGroup() { return cGroup; }
		
		//(required?='retrieve required element:' | optional?='retrieve optional element:' |
		//abscence?='require absence of element:')
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//required?='retrieve required element:'
		public Assignment getRequiredAssignment_0_0() { return cRequiredAssignment_0_0; }
		
		//'retrieve required element:'
		public Keyword getRequiredRetrieveRequiredElementKeyword_0_0_0() { return cRequiredRetrieveRequiredElementKeyword_0_0_0; }
		
		//optional?='retrieve optional element:'
		public Assignment getOptionalAssignment_0_1() { return cOptionalAssignment_0_1; }
		
		//'retrieve optional element:'
		public Keyword getOptionalRetrieveOptionalElementKeyword_0_1_0() { return cOptionalRetrieveOptionalElementKeyword_0_1_0; }
		
		//abscence?='require absence of element:'
		public Assignment getAbscenceAssignment_0_2() { return cAbscenceAssignment_0_2; }
		
		//'require absence of element:'
		public Keyword getAbscenceRequireAbsenceOfElementKeyword_0_2_0() { return cAbscenceRequireAbsenceOfElementKeyword_0_2_0; }
		
		//element=NamedModelElement
		public Assignment getElementAssignment_1() { return cElementAssignment_1; }
		
		//NamedModelElement
		public RuleCall getElementNamedModelElementParserRuleCall_1_0() { return cElementNamedModelElementParserRuleCall_1_0; }
		
		//'corresponding to'
		public Keyword getCorrespondingToKeyword_2() { return cCorrespondingToKeyword_2; }
		
		//correspondenceSource=CorrespondingObjectCodeBlock
		public Assignment getCorrespondenceSourceAssignment_3() { return cCorrespondenceSourceAssignment_3; }
		
		//CorrespondingObjectCodeBlock
		public RuleCall getCorrespondenceSourceCorrespondingObjectCodeBlockParserRuleCall_3_0() { return cCorrespondenceSourceCorrespondingObjectCodeBlockParserRuleCall_3_0; }
		
		//('tagged with' Taggable)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'tagged with'
		public Keyword getTaggedWithKeyword_4_0() { return cTaggedWithKeyword_4_0; }
		
		//Taggable
		public RuleCall getTaggableParserRuleCall_4_1() { return cTaggableParserRuleCall_4_1; }
		
		//('with' precondition=PreconditionCodeBlock)?
		public Group getGroup_5() { return cGroup_5; }
		
		//'with'
		public Keyword getWithKeyword_5_0() { return cWithKeyword_5_0; }
		
		//precondition=PreconditionCodeBlock
		public Assignment getPreconditionAssignment_5_1() { return cPreconditionAssignment_5_1; }
		
		//PreconditionCodeBlock
		public RuleCall getPreconditionPreconditionCodeBlockParserRuleCall_5_1_0() { return cPreconditionPreconditionCodeBlockParserRuleCall_5_1_0; }
	}
	public class ExistingElementReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tools.vitruvius.dsls.response.ResponseLanguage.ExistingElementReference");
		private final RuleCall cCodeBlockParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//ExistingElementReference:
		//	CodeBlock;
		@Override public ParserRule getRule() { return rule; }
		
		//CodeBlock
		public RuleCall getCodeBlockParserRuleCall() { return cCodeBlockParserRuleCall; }
	}
	public class CreateElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tools.vitruvius.dsls.response.ResponseLanguage.CreateElement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCreateElementKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cElementAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cElementNamedModelElementParserRuleCall_1_0 = (RuleCall)cElementAssignment_1.eContents().get(0);
		
		//CreateElement:
		//	"create element:" element=NamedModelElement;
		@Override public ParserRule getRule() { return rule; }
		
		//"create element:" element=NamedModelElement
		public Group getGroup() { return cGroup; }
		
		//"create element:"
		public Keyword getCreateElementKeyword_0() { return cCreateElementKeyword_0; }
		
		//element=NamedModelElement
		public Assignment getElementAssignment_1() { return cElementAssignment_1; }
		
		//NamedModelElement
		public RuleCall getElementNamedModelElementParserRuleCall_1_0() { return cElementNamedModelElementParserRuleCall_1_0; }
	}
	public class DeleteElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tools.vitruvius.dsls.response.ResponseLanguage.DeleteElement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDeleteElementKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cElementAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cElementExistingElementReferenceParserRuleCall_1_0 = (RuleCall)cElementAssignment_1.eContents().get(0);
		
		//DeleteElement:
		//	"delete element:" element=ExistingElementReference;
		@Override public ParserRule getRule() { return rule; }
		
		//"delete element:" element=ExistingElementReference
		public Group getGroup() { return cGroup; }
		
		//"delete element:"
		public Keyword getDeleteElementKeyword_0() { return cDeleteElementKeyword_0; }
		
		//element=ExistingElementReference
		public Assignment getElementAssignment_1() { return cElementAssignment_1; }
		
		//ExistingElementReference
		public RuleCall getElementExistingElementReferenceParserRuleCall_1_0() { return cElementExistingElementReferenceParserRuleCall_1_0; }
	}
	public class CreateCorrespondenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tools.vitruvius.dsls.response.ResponseLanguage.CreateCorrespondence");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAddCorrespondenceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cFirstElementAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFirstElementExistingElementReferenceParserRuleCall_1_0 = (RuleCall)cFirstElementAssignment_1.eContents().get(0);
		private final Keyword cCommaKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cSecondElementAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cSecondElementExistingElementReferenceParserRuleCall_3_0 = (RuleCall)cSecondElementAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cTagWithKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final RuleCall cTaggableParserRuleCall_4_1 = (RuleCall)cGroup_4.eContents().get(1);
		
		//CreateCorrespondence:
		//	"add correspondence:" firstElement=ExistingElementReference "," secondElement=ExistingElementReference ('tag with'
		//	Taggable)?;
		@Override public ParserRule getRule() { return rule; }
		
		//"add correspondence:" firstElement=ExistingElementReference "," secondElement=ExistingElementReference ('tag with'
		//Taggable)?
		public Group getGroup() { return cGroup; }
		
		//"add correspondence:"
		public Keyword getAddCorrespondenceKeyword_0() { return cAddCorrespondenceKeyword_0; }
		
		//firstElement=ExistingElementReference
		public Assignment getFirstElementAssignment_1() { return cFirstElementAssignment_1; }
		
		//ExistingElementReference
		public RuleCall getFirstElementExistingElementReferenceParserRuleCall_1_0() { return cFirstElementExistingElementReferenceParserRuleCall_1_0; }
		
		//","
		public Keyword getCommaKeyword_2() { return cCommaKeyword_2; }
		
		//secondElement=ExistingElementReference
		public Assignment getSecondElementAssignment_3() { return cSecondElementAssignment_3; }
		
		//ExistingElementReference
		public RuleCall getSecondElementExistingElementReferenceParserRuleCall_3_0() { return cSecondElementExistingElementReferenceParserRuleCall_3_0; }
		
		//('tag with' Taggable)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'tag with'
		public Keyword getTagWithKeyword_4_0() { return cTagWithKeyword_4_0; }
		
		//Taggable
		public RuleCall getTaggableParserRuleCall_4_1() { return cTaggableParserRuleCall_4_1; }
	}
	public class RemoveCorrespondenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tools.vitruvius.dsls.response.ResponseLanguage.RemoveCorrespondence");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRemoveCorrespondenceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cFirstElementAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFirstElementExistingElementReferenceParserRuleCall_1_0 = (RuleCall)cFirstElementAssignment_1.eContents().get(0);
		private final Keyword cCommaKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cSecondElementAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cSecondElementExistingElementReferenceParserRuleCall_3_0 = (RuleCall)cSecondElementAssignment_3.eContents().get(0);
		
		//RemoveCorrespondence:
		//	"remove correspondence:" firstElement=ExistingElementReference "," secondElement=ExistingElementReference;
		@Override public ParserRule getRule() { return rule; }
		
		//"remove correspondence:" firstElement=ExistingElementReference "," secondElement=ExistingElementReference
		public Group getGroup() { return cGroup; }
		
		//"remove correspondence:"
		public Keyword getRemoveCorrespondenceKeyword_0() { return cRemoveCorrespondenceKeyword_0; }
		
		//firstElement=ExistingElementReference
		public Assignment getFirstElementAssignment_1() { return cFirstElementAssignment_1; }
		
		//ExistingElementReference
		public RuleCall getFirstElementExistingElementReferenceParserRuleCall_1_0() { return cFirstElementExistingElementReferenceParserRuleCall_1_0; }
		
		//","
		public Keyword getCommaKeyword_2() { return cCommaKeyword_2; }
		
		//secondElement=ExistingElementReference
		public Assignment getSecondElementAssignment_3() { return cSecondElementAssignment_3; }
		
		//ExistingElementReference
		public RuleCall getSecondElementExistingElementReferenceParserRuleCall_3_0() { return cSecondElementExistingElementReferenceParserRuleCall_3_0; }
	}
	public class TagCodeBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tools.vitruvius.dsls.response.ResponseLanguage.TagCodeBlock");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTagCodeBlockAction_0 = (Action)cGroup.eContents().get(0);
		private final RuleCall cCodeBlockParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//// ****** CODE BLOCKS ******
		//TagCodeBlock:
		//	{TagCodeBlock} CodeBlock;
		@Override public ParserRule getRule() { return rule; }
		
		//{TagCodeBlock} CodeBlock
		public Group getGroup() { return cGroup; }
		
		//{TagCodeBlock}
		public Action getTagCodeBlockAction_0() { return cTagCodeBlockAction_0; }
		
		//CodeBlock
		public RuleCall getCodeBlockParserRuleCall_1() { return cCodeBlockParserRuleCall_1; }
	}
	public class PreconditionCodeBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tools.vitruvius.dsls.response.ResponseLanguage.PreconditionCodeBlock");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPreconditionCodeBlockAction_0 = (Action)cGroup.eContents().get(0);
		private final RuleCall cCodeBlockParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//PreconditionCodeBlock:
		//	{PreconditionCodeBlock} CodeBlock;
		@Override public ParserRule getRule() { return rule; }
		
		//{PreconditionCodeBlock} CodeBlock
		public Group getGroup() { return cGroup; }
		
		//{PreconditionCodeBlock}
		public Action getPreconditionCodeBlockAction_0() { return cPreconditionCodeBlockAction_0; }
		
		//CodeBlock
		public RuleCall getCodeBlockParserRuleCall_1() { return cCodeBlockParserRuleCall_1; }
	}
	public class CorrespondingObjectCodeBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tools.vitruvius.dsls.response.ResponseLanguage.CorrespondingObjectCodeBlock");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cCorrespondingObjectCodeBlockAction_0 = (Action)cGroup.eContents().get(0);
		private final RuleCall cCodeBlockParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//CorrespondingObjectCodeBlock:
		//	{CorrespondingObjectCodeBlock} CodeBlock;
		@Override public ParserRule getRule() { return rule; }
		
		//{CorrespondingObjectCodeBlock} CodeBlock
		public Group getGroup() { return cGroup; }
		
		//{CorrespondingObjectCodeBlock}
		public Action getCorrespondingObjectCodeBlockAction_0() { return cCorrespondingObjectCodeBlockAction_0; }
		
		//CodeBlock
		public RuleCall getCodeBlockParserRuleCall_1() { return cCodeBlockParserRuleCall_1; }
	}
	public class ExecutionCodeBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tools.vitruvius.dsls.response.ResponseLanguage.ExecutionCodeBlock");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cExecutionCodeBlockAction_0 = (Action)cGroup.eContents().get(0);
		private final RuleCall cCodeBlockParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//ExecutionCodeBlock:
		//	{ExecutionCodeBlock} CodeBlock;
		@Override public ParserRule getRule() { return rule; }
		
		//{ExecutionCodeBlock} CodeBlock
		public Group getGroup() { return cGroup; }
		
		//{ExecutionCodeBlock}
		public Action getExecutionCodeBlockAction_0() { return cExecutionCodeBlockAction_0; }
		
		//CodeBlock
		public RuleCall getCodeBlockParserRuleCall_1() { return cCodeBlockParserRuleCall_1; }
	}
	public class CodeBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tools.vitruvius.dsls.response.ResponseLanguage.CodeBlock");
		private final Assignment cCodeAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cCodeXExpressionParserRuleCall_0 = (RuleCall)cCodeAssignment.eContents().get(0);
		
		//fragment CodeBlock:
		//	code=XExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//code=XExpression
		public Assignment getCodeAssignment() { return cCodeAssignment; }
		
		//XExpression
		public RuleCall getCodeXExpressionParserRuleCall_0() { return cCodeXExpressionParserRuleCall_0; }
	}
	
	
	private final ResponseFileElements pResponseFile;
	private final ResponsesSegmentElements pResponsesSegment;
	private final ResponseElements pResponse;
	private final InvariantViolationEventElements pInvariantViolationEvent;
	private final TriggerElements pTrigger;
	private final ModelChangeElements pModelChange;
	private final ConcreteModelElementChangeElements pConcreteModelElementChange;
	private final AtomicConcreteModelElementChangeElements pAtomicConcreteModelElementChange;
	private final AtomicRootObjectChangeElements pAtomicRootObjectChange;
	private final AtomicFeatureChangeElements pAtomicFeatureChange;
	private final AtomicMultiValuedFeatureChangeElements pAtomicMultiValuedFeatureChange;
	private final AtomicSingleValuedFeatureChangeElements pAtomicSingleValuedFeatureChange;
	private final ArbitraryModelElementChangeElements pArbitraryModelElementChange;
	private final RoutineElements pRoutine;
	private final ImplicitRoutineElements pImplicitRoutine;
	private final MatchingElements pMatching;
	private final EffectElements pEffect;
	private final ExplicitRoutineElements pExplicitRoutine;
	private final RoutineInputElements pRoutineInput;
	private final TaggableElements pTaggable;
	private final RetrieveModelElementElements pRetrieveModelElement;
	private final ExistingElementReferenceElements pExistingElementReference;
	private final CreateElementElements pCreateElement;
	private final DeleteElementElements pDeleteElement;
	private final CreateCorrespondenceElements pCreateCorrespondence;
	private final RemoveCorrespondenceElements pRemoveCorrespondence;
	private final TagCodeBlockElements pTagCodeBlock;
	private final PreconditionCodeBlockElements pPreconditionCodeBlock;
	private final CorrespondingObjectCodeBlockElements pCorrespondingObjectCodeBlock;
	private final ExecutionCodeBlockElements pExecutionCodeBlock;
	private final CodeBlockElements pCodeBlock;
	
	private final Grammar grammar;
	
	private final MirBaseGrammarAccess gaMirBase;
	
	private final XbaseGrammarAccess gaXbase;
	
	private final XtypeGrammarAccess gaXtype;

	@Inject
	public ResponseLanguageGrammarAccess(GrammarProvider grammarProvider,
			MirBaseGrammarAccess gaMirBase,
			XbaseGrammarAccess gaXbase,
			XtypeGrammarAccess gaXtype) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaMirBase = gaMirBase;
		this.gaXbase = gaXbase;
		this.gaXtype = gaXtype;
		this.pResponseFile = new ResponseFileElements();
		this.pResponsesSegment = new ResponsesSegmentElements();
		this.pResponse = new ResponseElements();
		this.pInvariantViolationEvent = new InvariantViolationEventElements();
		this.pTrigger = new TriggerElements();
		this.pModelChange = new ModelChangeElements();
		this.pConcreteModelElementChange = new ConcreteModelElementChangeElements();
		this.pAtomicConcreteModelElementChange = new AtomicConcreteModelElementChangeElements();
		this.pAtomicRootObjectChange = new AtomicRootObjectChangeElements();
		this.pAtomicFeatureChange = new AtomicFeatureChangeElements();
		this.pAtomicMultiValuedFeatureChange = new AtomicMultiValuedFeatureChangeElements();
		this.pAtomicSingleValuedFeatureChange = new AtomicSingleValuedFeatureChangeElements();
		this.pArbitraryModelElementChange = new ArbitraryModelElementChangeElements();
		this.pRoutine = new RoutineElements();
		this.pImplicitRoutine = new ImplicitRoutineElements();
		this.pMatching = new MatchingElements();
		this.pEffect = new EffectElements();
		this.pExplicitRoutine = new ExplicitRoutineElements();
		this.pRoutineInput = new RoutineInputElements();
		this.pTaggable = new TaggableElements();
		this.pRetrieveModelElement = new RetrieveModelElementElements();
		this.pExistingElementReference = new ExistingElementReferenceElements();
		this.pCreateElement = new CreateElementElements();
		this.pDeleteElement = new DeleteElementElements();
		this.pCreateCorrespondence = new CreateCorrespondenceElements();
		this.pRemoveCorrespondence = new RemoveCorrespondenceElements();
		this.pTagCodeBlock = new TagCodeBlockElements();
		this.pPreconditionCodeBlock = new PreconditionCodeBlockElements();
		this.pCorrespondingObjectCodeBlock = new CorrespondingObjectCodeBlockElements();
		this.pExecutionCodeBlock = new ExecutionCodeBlockElements();
		this.pCodeBlock = new CodeBlockElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("tools.vitruvius.dsls.response.ResponseLanguage".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public MirBaseGrammarAccess getMirBaseGrammarAccess() {
		return gaMirBase;
	}
	
	public XbaseGrammarAccess getXbaseGrammarAccess() {
		return gaXbase;
	}
	
	public XtypeGrammarAccess getXtypeGrammarAccess() {
		return gaXtype;
	}

	
	//ResponseFile:
	//	namespaceImports=XImportSection?
	//	MirBaseFile
	//	responsesSegments+=ResponsesSegment+;
	public ResponseFileElements getResponseFileAccess() {
		return pResponseFile;
	}
	
	public ParserRule getResponseFileRule() {
		return getResponseFileAccess().getRule();
	}
	
	//ResponsesSegment:
	//	'responses from metamodel' fromMetamodel=MetamodelReference 'to metamodel' toMetamodel=MetamodelReference
	//	'called' name=ValidID (responses+=Response | routines+=ExplicitRoutine)*;
	public ResponsesSegmentElements getResponsesSegmentAccess() {
		return pResponsesSegment;
	}
	
	public ParserRule getResponsesSegmentRule() {
		return getResponsesSegmentAccess().getRule();
	}
	
	//Response:
	//	documentation=ML_COMMENT?
	//	'response:' name=ValidID
	//	trigger=Trigger
	//	routine=ImplicitRoutine;
	public ResponseElements getResponseAccess() {
		return pResponse;
	}
	
	public ParserRule getResponseRule() {
		return getResponseAccess().getRule();
	}
	
	//// ****** TRIGGER ******
	//InvariantViolationEvent:
	//	'invariant' violation=[ecore::EClass|QualifiedName];
	public InvariantViolationEventElements getInvariantViolationEventAccess() {
		return pInvariantViolationEvent;
	}
	
	public ParserRule getInvariantViolationEventRule() {
		return getInvariantViolationEventAccess().getRule();
	}
	
	//Trigger:
	//	'trigger:' (ModelChange | InvariantViolationEvent) ('check:' precondition=PreconditionCodeBlock)?;
	public TriggerElements getTriggerAccess() {
		return pTrigger;
	}
	
	public ParserRule getTriggerRule() {
		return getTriggerAccess().getRule();
	}
	
	//ModelChange:
	//	ConcreteModelElementChange | ArbitraryModelElementChange;
	public ModelChangeElements getModelChangeAccess() {
		return pModelChange;
	}
	
	public ParserRule getModelChangeRule() {
		return getModelChangeAccess().getRule();
	}
	
	//ConcreteModelElementChange:
	//	AtomicConcreteModelElementChange;
	public ConcreteModelElementChangeElements getConcreteModelElementChangeAccess() {
		return pConcreteModelElementChange;
	}
	
	public ParserRule getConcreteModelElementChangeRule() {
		return getConcreteModelElementChangeAccess().getRule();
	}
	
	//AtomicConcreteModelElementChange:
	//	AtomicRootObjectChange | AtomicFeatureChange;
	public AtomicConcreteModelElementChangeElements getAtomicConcreteModelElementChangeAccess() {
		return pAtomicConcreteModelElementChange;
	}
	
	public ParserRule getAtomicConcreteModelElementChangeRule() {
		return getAtomicConcreteModelElementChangeAccess().getRule();
	}
	
	//AtomicRootObjectChange:
	//	('insert root' {InsertRootChange} |
	//	'remove root' {RemoveRootChange}) changedElement=ModelElement;
	public AtomicRootObjectChangeElements getAtomicRootObjectChangeAccess() {
		return pAtomicRootObjectChange;
	}
	
	public ParserRule getAtomicRootObjectChangeRule() {
		return getAtomicRootObjectChangeAccess().getRule();
	}
	
	//AtomicFeatureChange:
	//	(AtomicMultiValuedFeatureChange | AtomicSingleValuedFeatureChange) changedFeature=FeatureOfElement;
	public AtomicFeatureChangeElements getAtomicFeatureChangeAccess() {
		return pAtomicFeatureChange;
	}
	
	public ParserRule getAtomicFeatureChangeRule() {
		return getAtomicFeatureChangeAccess().getRule();
	}
	
	//AtomicMultiValuedFeatureChange:
	//	'insert in list' {MultiValuedFeatureInsertChange} |
	//	'remove from list' {MultiValuedFeatureRemoveChange} |
	//	'permute list' {MultiValuedFeaturePermuteChange};
	public AtomicMultiValuedFeatureChangeElements getAtomicMultiValuedFeatureChangeAccess() {
		return pAtomicMultiValuedFeatureChange;
	}
	
	public ParserRule getAtomicMultiValuedFeatureChangeRule() {
		return getAtomicMultiValuedFeatureChangeAccess().getRule();
	}
	
	//AtomicSingleValuedFeatureChange: //'create value' {SingleValuedFeatureCreate} | 'delete value' {SingleValuedFeatureDelete} | 
	//	'replace value' {SingleValuedFeatureReplace};
	public AtomicSingleValuedFeatureChangeElements getAtomicSingleValuedFeatureChangeAccess() {
		return pAtomicSingleValuedFeatureChange;
	}
	
	public ParserRule getAtomicSingleValuedFeatureChangeRule() {
		return getAtomicSingleValuedFeatureChangeAccess().getRule();
	}
	
	//ArbitraryModelElementChange:
	//	{ArbitraryModelElementChange} 'any change';
	public ArbitraryModelElementChangeElements getArbitraryModelElementChangeAccess() {
		return pArbitraryModelElementChange;
	}
	
	public ParserRule getArbitraryModelElementChangeRule() {
		return getArbitraryModelElementChangeAccess().getRule();
	}
	
	//// ****** EFFECTS ******
	//fragment Routine:
	//	matching=Matching?
	//	effect=Effect;
	public RoutineElements getRoutineAccess() {
		return pRoutine;
	}
	
	public ParserRule getRoutineRule() {
		return getRoutineAccess().getRule();
	}
	
	//ImplicitRoutine:
	//	Routine;
	public ImplicitRoutineElements getImplicitRoutineAccess() {
		return pImplicitRoutine;
	}
	
	public ParserRule getImplicitRoutineRule() {
		return getImplicitRoutineAccess().getRule();
	}
	
	//Matching:
	//	{Matching}
	//	'match:'
	//	retrievedElements+=RetrieveModelElement* ('check:' condition=PreconditionCodeBlock)?;
	public MatchingElements getMatchingAccess() {
		return pMatching;
	}
	
	public ParserRule getMatchingRule() {
		return getMatchingAccess().getRule();
	}
	
	//Effect:
	//	{Effect}
	//	'effect:' (elementCreation+=CreateElement | elementDeletion+=DeleteElement)*
	//	(correspondenceCreation+=CreateCorrespondence | correspondenceDeletion+=RemoveCorrespondence)* ('execute:'
	//	codeBlock=ExecutionCodeBlock)?;
	public EffectElements getEffectAccess() {
		return pEffect;
	}
	
	public ParserRule getEffectRule() {
		return getEffectAccess().getRule();
	}
	
	//ExplicitRoutine:
	//	'routine:' name=ValidID
	//	input=RoutineInput
	//	Routine;
	public ExplicitRoutineElements getExplicitRoutineAccess() {
		return pExplicitRoutine;
	}
	
	public ParserRule getExplicitRoutineRule() {
		return getExplicitRoutineAccess().getRule();
	}
	
	//RoutineInput:
	//	{RoutineInput} ('input:' modelInputElements+=NamedModelElement (',' modelInputElements+=NamedModelElement)*)?
	//	('plain java input:' javaInputElements+=NamedJavaElement (',' javaInputElements+=NamedJavaElement)*)?;
	public RoutineInputElements getRoutineInputAccess() {
		return pRoutineInput;
	}
	
	public ParserRule getRoutineInputRule() {
		return getRoutineInputAccess().getRule();
	}
	
	//// ****** CORRESPONDENCE SPECIFICATION ******	
	//fragment Taggable:
	//	tag=TagCodeBlock;
	public TaggableElements getTaggableAccess() {
		return pTaggable;
	}
	
	public ParserRule getTaggableRule() {
		return getTaggableAccess().getRule();
	}
	
	//RetrieveModelElement:
	//	(required?='retrieve required element:' | optional?='retrieve optional element:' |
	//	abscence?='require absence of element:') element=NamedModelElement 'corresponding to'
	//	correspondenceSource=CorrespondingObjectCodeBlock ('tagged with' Taggable)? ('with'
	//	precondition=PreconditionCodeBlock)?;
	public RetrieveModelElementElements getRetrieveModelElementAccess() {
		return pRetrieveModelElement;
	}
	
	public ParserRule getRetrieveModelElementRule() {
		return getRetrieveModelElementAccess().getRule();
	}
	
	//ExistingElementReference:
	//	CodeBlock;
	public ExistingElementReferenceElements getExistingElementReferenceAccess() {
		return pExistingElementReference;
	}
	
	public ParserRule getExistingElementReferenceRule() {
		return getExistingElementReferenceAccess().getRule();
	}
	
	//CreateElement:
	//	"create element:" element=NamedModelElement;
	public CreateElementElements getCreateElementAccess() {
		return pCreateElement;
	}
	
	public ParserRule getCreateElementRule() {
		return getCreateElementAccess().getRule();
	}
	
	//DeleteElement:
	//	"delete element:" element=ExistingElementReference;
	public DeleteElementElements getDeleteElementAccess() {
		return pDeleteElement;
	}
	
	public ParserRule getDeleteElementRule() {
		return getDeleteElementAccess().getRule();
	}
	
	//CreateCorrespondence:
	//	"add correspondence:" firstElement=ExistingElementReference "," secondElement=ExistingElementReference ('tag with'
	//	Taggable)?;
	public CreateCorrespondenceElements getCreateCorrespondenceAccess() {
		return pCreateCorrespondence;
	}
	
	public ParserRule getCreateCorrespondenceRule() {
		return getCreateCorrespondenceAccess().getRule();
	}
	
	//RemoveCorrespondence:
	//	"remove correspondence:" firstElement=ExistingElementReference "," secondElement=ExistingElementReference;
	public RemoveCorrespondenceElements getRemoveCorrespondenceAccess() {
		return pRemoveCorrespondence;
	}
	
	public ParserRule getRemoveCorrespondenceRule() {
		return getRemoveCorrespondenceAccess().getRule();
	}
	
	//// ****** CODE BLOCKS ******
	//TagCodeBlock:
	//	{TagCodeBlock} CodeBlock;
	public TagCodeBlockElements getTagCodeBlockAccess() {
		return pTagCodeBlock;
	}
	
	public ParserRule getTagCodeBlockRule() {
		return getTagCodeBlockAccess().getRule();
	}
	
	//PreconditionCodeBlock:
	//	{PreconditionCodeBlock} CodeBlock;
	public PreconditionCodeBlockElements getPreconditionCodeBlockAccess() {
		return pPreconditionCodeBlock;
	}
	
	public ParserRule getPreconditionCodeBlockRule() {
		return getPreconditionCodeBlockAccess().getRule();
	}
	
	//CorrespondingObjectCodeBlock:
	//	{CorrespondingObjectCodeBlock} CodeBlock;
	public CorrespondingObjectCodeBlockElements getCorrespondingObjectCodeBlockAccess() {
		return pCorrespondingObjectCodeBlock;
	}
	
	public ParserRule getCorrespondingObjectCodeBlockRule() {
		return getCorrespondingObjectCodeBlockAccess().getRule();
	}
	
	//ExecutionCodeBlock:
	//	{ExecutionCodeBlock} CodeBlock;
	public ExecutionCodeBlockElements getExecutionCodeBlockAccess() {
		return pExecutionCodeBlock;
	}
	
	public ParserRule getExecutionCodeBlockRule() {
		return getExecutionCodeBlockAccess().getRule();
	}
	
	//fragment CodeBlock:
	//	code=XExpression;
	public CodeBlockElements getCodeBlockAccess() {
		return pCodeBlock;
	}
	
	public ParserRule getCodeBlockRule() {
		return getCodeBlockAccess().getRule();
	}
	
	//DummyEntryRule:
	//	MirBaseFile;
	public MirBaseGrammarAccess.DummyEntryRuleElements getDummyEntryRuleAccess() {
		return gaMirBase.getDummyEntryRuleAccess();
	}
	
	public ParserRule getDummyEntryRuleRule() {
		return getDummyEntryRuleAccess().getRule();
	}
	
	//fragment MirBaseFile:
	//	metamodelImports+=MetamodelImport*;
	public MirBaseGrammarAccess.MirBaseFileElements getMirBaseFileAccess() {
		return gaMirBase.getMirBaseFileAccess();
	}
	
	public ParserRule getMirBaseFileRule() {
		return getMirBaseFileAccess().getRule();
	}
	
	//MetamodelImport:
	//	'import' package=[ecore::EPackage|STRING] 'as' name=ValidID useSimpleNames?='using simple names'?;
	public MirBaseGrammarAccess.MetamodelImportElements getMetamodelImportAccess() {
		return gaMirBase.getMetamodelImportAccess();
	}
	
	public ParserRule getMetamodelImportRule() {
		return getMetamodelImportAccess().getRule();
	}
	
	//NamedJavaElement:
	//	type=JvmTypeReference 'as' name=ValidID;
	public MirBaseGrammarAccess.NamedJavaElementElements getNamedJavaElementAccess() {
		return gaMirBase.getNamedJavaElementAccess();
	}
	
	public ParserRule getNamedJavaElementRule() {
		return getNamedJavaElementAccess().getRule();
	}
	
	//ModelElement:
	//	element=[ecore::EClass|QualifiedName];
	public MirBaseGrammarAccess.ModelElementElements getModelElementAccess() {
		return gaMirBase.getModelElementAccess();
	}
	
	public ParserRule getModelElementRule() {
		return getModelElementAccess().getRule();
	}
	
	//NamedModelElement ModelElement:
	//	element=[ecore::EClass|QualifiedName] ('as' name=ValidID)?
	public MirBaseGrammarAccess.NamedModelElementElements getNamedModelElementAccess() {
		return gaMirBase.getNamedModelElementAccess();
	}
	
	public ParserRule getNamedModelElementRule() {
		return getNamedModelElementAccess().getRule();
	}
	
	////fragment ModelElement:
	// //	element=[ecore::EClass|QualifiedName]
	// //;
	// //
	// //UnnamedModelElement:
	// //	ModelElement;
	//
	////		
	// //NamedModelElement:
	// //	ModelElement ('as' name=ValidID)?
	// //;
	// FeatureOfElement:
	//	element=[ecore::EClass|QualifiedName] '[' feature=[ecore::EStructuralFeature|ValidID] ']';
	public MirBaseGrammarAccess.FeatureOfElementElements getFeatureOfElementAccess() {
		return gaMirBase.getFeatureOfElementAccess();
	}
	
	public ParserRule getFeatureOfElementRule() {
		return getFeatureOfElementAccess().getRule();
	}
	
	//MetamodelReference:
	//	model=[MetamodelImport];
	public MirBaseGrammarAccess.MetamodelReferenceElements getMetamodelReferenceAccess() {
		return gaMirBase.getMetamodelReferenceAccess();
	}
	
	public ParserRule getMetamodelReferenceRule() {
		return getMetamodelReferenceAccess().getRule();
	}
	
	//XExpression:
	//	XAssignment;
	public XbaseGrammarAccess.XExpressionElements getXExpressionAccess() {
		return gaXbase.getXExpressionAccess();
	}
	
	public ParserRule getXExpressionRule() {
		return getXExpressionAccess().getRule();
	}
	
	//XAssignment XExpression:
	//	{XAssignment} feature=[types::JvmIdentifiableElement|FeatureCallID] OpSingleAssign value=XAssignment | XOrExpression
	//	(=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpMultiAssign])
	//	rightOperand=XAssignment)?
	public XbaseGrammarAccess.XAssignmentElements getXAssignmentAccess() {
		return gaXbase.getXAssignmentAccess();
	}
	
	public ParserRule getXAssignmentRule() {
		return getXAssignmentAccess().getRule();
	}
	
	//OpSingleAssign:
	//	'=';
	public XbaseGrammarAccess.OpSingleAssignElements getOpSingleAssignAccess() {
		return gaXbase.getOpSingleAssignAccess();
	}
	
	public ParserRule getOpSingleAssignRule() {
		return getOpSingleAssignAccess().getRule();
	}
	
	//OpMultiAssign:
	//	'+=' | '-=' | '*=' | '/=' | '%=' | '<' '<' '=' | '>' '>'? '>=';
	public XbaseGrammarAccess.OpMultiAssignElements getOpMultiAssignAccess() {
		return gaXbase.getOpMultiAssignAccess();
	}
	
	public ParserRule getOpMultiAssignRule() {
		return getOpMultiAssignAccess().getRule();
	}
	
	//XOrExpression XExpression:
	//	XAndExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpOr])
	//	rightOperand=XAndExpression)*
	public XbaseGrammarAccess.XOrExpressionElements getXOrExpressionAccess() {
		return gaXbase.getXOrExpressionAccess();
	}
	
	public ParserRule getXOrExpressionRule() {
		return getXOrExpressionAccess().getRule();
	}
	
	//OpOr:
	//	'||';
	public XbaseGrammarAccess.OpOrElements getOpOrAccess() {
		return gaXbase.getOpOrAccess();
	}
	
	public ParserRule getOpOrRule() {
		return getOpOrAccess().getRule();
	}
	
	//XAndExpression XExpression:
	//	XEqualityExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpAnd])
	//	rightOperand=XEqualityExpression)*
	public XbaseGrammarAccess.XAndExpressionElements getXAndExpressionAccess() {
		return gaXbase.getXAndExpressionAccess();
	}
	
	public ParserRule getXAndExpressionRule() {
		return getXAndExpressionAccess().getRule();
	}
	
	//OpAnd:
	//	'&&';
	public XbaseGrammarAccess.OpAndElements getOpAndAccess() {
		return gaXbase.getOpAndAccess();
	}
	
	public ParserRule getOpAndRule() {
		return getOpAndAccess().getRule();
	}
	
	//XEqualityExpression XExpression:
	//	XRelationalExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpEquality])
	//	rightOperand=XRelationalExpression)*
	public XbaseGrammarAccess.XEqualityExpressionElements getXEqualityExpressionAccess() {
		return gaXbase.getXEqualityExpressionAccess();
	}
	
	public ParserRule getXEqualityExpressionRule() {
		return getXEqualityExpressionAccess().getRule();
	}
	
	//OpEquality:
	//	'==' | '!=' | '===' | '!==';
	public XbaseGrammarAccess.OpEqualityElements getOpEqualityAccess() {
		return gaXbase.getOpEqualityAccess();
	}
	
	public ParserRule getOpEqualityRule() {
		return getOpEqualityAccess().getRule();
	}
	
	//XRelationalExpression XExpression:
	//	XOtherOperatorExpression (=> ({XInstanceOfExpression.expression=current} 'instanceof') type=JvmTypeReference | =>
	//	({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpCompare])
	//	rightOperand=XOtherOperatorExpression)*
	public XbaseGrammarAccess.XRelationalExpressionElements getXRelationalExpressionAccess() {
		return gaXbase.getXRelationalExpressionAccess();
	}
	
	public ParserRule getXRelationalExpressionRule() {
		return getXRelationalExpressionAccess().getRule();
	}
	
	//OpCompare:
	//	'>=' | '<' '=' | '>' | '<';
	public XbaseGrammarAccess.OpCompareElements getOpCompareAccess() {
		return gaXbase.getOpCompareAccess();
	}
	
	public ParserRule getOpCompareRule() {
		return getOpCompareAccess().getRule();
	}
	
	//XOtherOperatorExpression XExpression:
	//	XAdditiveExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpOther])
	//	rightOperand=XAdditiveExpression)*
	public XbaseGrammarAccess.XOtherOperatorExpressionElements getXOtherOperatorExpressionAccess() {
		return gaXbase.getXOtherOperatorExpressionAccess();
	}
	
	public ParserRule getXOtherOperatorExpressionRule() {
		return getXOtherOperatorExpressionAccess().getRule();
	}
	
	//OpOther:
	//	'->' | '..<' | '>' '..' | '..' | '=>' | '>' (=> ('>' '>') | '>') | '<' (=> ('<' '<') | '<' | '=>') | '<>' | '?:';
	public XbaseGrammarAccess.OpOtherElements getOpOtherAccess() {
		return gaXbase.getOpOtherAccess();
	}
	
	public ParserRule getOpOtherRule() {
		return getOpOtherAccess().getRule();
	}
	
	//XAdditiveExpression XExpression:
	//	XMultiplicativeExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpAdd])
	//	rightOperand=XMultiplicativeExpression)*
	public XbaseGrammarAccess.XAdditiveExpressionElements getXAdditiveExpressionAccess() {
		return gaXbase.getXAdditiveExpressionAccess();
	}
	
	public ParserRule getXAdditiveExpressionRule() {
		return getXAdditiveExpressionAccess().getRule();
	}
	
	//OpAdd:
	//	'+' | '-';
	public XbaseGrammarAccess.OpAddElements getOpAddAccess() {
		return gaXbase.getOpAddAccess();
	}
	
	public ParserRule getOpAddRule() {
		return getOpAddAccess().getRule();
	}
	
	//XMultiplicativeExpression XExpression:
	//	XUnaryOperation (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpMulti])
	//	rightOperand=XUnaryOperation)*
	public XbaseGrammarAccess.XMultiplicativeExpressionElements getXMultiplicativeExpressionAccess() {
		return gaXbase.getXMultiplicativeExpressionAccess();
	}
	
	public ParserRule getXMultiplicativeExpressionRule() {
		return getXMultiplicativeExpressionAccess().getRule();
	}
	
	//OpMulti:
	//	'*' | '**' | '/' | '%';
	public XbaseGrammarAccess.OpMultiElements getOpMultiAccess() {
		return gaXbase.getOpMultiAccess();
	}
	
	public ParserRule getOpMultiRule() {
		return getOpMultiAccess().getRule();
	}
	
	//XUnaryOperation XExpression:
	//	{XUnaryOperation} feature=[types::JvmIdentifiableElement|OpUnary] operand=XUnaryOperation | XCastedExpression
	public XbaseGrammarAccess.XUnaryOperationElements getXUnaryOperationAccess() {
		return gaXbase.getXUnaryOperationAccess();
	}
	
	public ParserRule getXUnaryOperationRule() {
		return getXUnaryOperationAccess().getRule();
	}
	
	//OpUnary:
	//	"!" | "-" | "+";
	public XbaseGrammarAccess.OpUnaryElements getOpUnaryAccess() {
		return gaXbase.getOpUnaryAccess();
	}
	
	public ParserRule getOpUnaryRule() {
		return getOpUnaryAccess().getRule();
	}
	
	//XCastedExpression XExpression:
	//	XPostfixOperation (=> ({XCastedExpression.target=current} 'as') type=JvmTypeReference)*
	public XbaseGrammarAccess.XCastedExpressionElements getXCastedExpressionAccess() {
		return gaXbase.getXCastedExpressionAccess();
	}
	
	public ParserRule getXCastedExpressionRule() {
		return getXCastedExpressionAccess().getRule();
	}
	
	//XPostfixOperation XExpression:
	//	XMemberFeatureCall => ({XPostfixOperation.operand=current} feature=[types::JvmIdentifiableElement|OpPostfix])?
	public XbaseGrammarAccess.XPostfixOperationElements getXPostfixOperationAccess() {
		return gaXbase.getXPostfixOperationAccess();
	}
	
	public ParserRule getXPostfixOperationRule() {
		return getXPostfixOperationAccess().getRule();
	}
	
	//OpPostfix:
	//	"++" | "--";
	public XbaseGrammarAccess.OpPostfixElements getOpPostfixAccess() {
		return gaXbase.getOpPostfixAccess();
	}
	
	public ParserRule getOpPostfixRule() {
		return getOpPostfixAccess().getRule();
	}
	
	//XMemberFeatureCall XExpression:
	//	XPrimaryExpression (=> ({XAssignment.assignable=current} ('.' | explicitStatic?="::")
	//	feature=[types::JvmIdentifiableElement|FeatureCallID] OpSingleAssign) value=XAssignment | =>
	//	({XMemberFeatureCall.memberCallTarget=current} ("." | nullSafe?="?." | explicitStatic?="::")) ('<'
	//	typeArguments+=JvmArgumentTypeReference (',' typeArguments+=JvmArgumentTypeReference)* '>')?
	//	feature=[types::JvmIdentifiableElement|IdOrSuper] (=> explicitOperationCall?='(' (memberCallArguments+=XShortClosure
	//	| memberCallArguments+=XExpression (',' memberCallArguments+=XExpression)*)? ')')? memberCallArguments+=XClosure?)*
	public XbaseGrammarAccess.XMemberFeatureCallElements getXMemberFeatureCallAccess() {
		return gaXbase.getXMemberFeatureCallAccess();
	}
	
	public ParserRule getXMemberFeatureCallRule() {
		return getXMemberFeatureCallAccess().getRule();
	}
	
	//XPrimaryExpression XExpression:
	//	XConstructorCall | XBlockExpression | XSwitchExpression | XSynchronizedExpression | XFeatureCall | XLiteral |
	//	XIfExpression | XForLoopExpression | XBasicForLoopExpression | XWhileExpression | XDoWhileExpression |
	//	XThrowExpression | XReturnExpression | XTryCatchFinallyExpression | XParenthesizedExpression
	public XbaseGrammarAccess.XPrimaryExpressionElements getXPrimaryExpressionAccess() {
		return gaXbase.getXPrimaryExpressionAccess();
	}
	
	public ParserRule getXPrimaryExpressionRule() {
		return getXPrimaryExpressionAccess().getRule();
	}
	
	//XLiteral XExpression:
	//	XCollectionLiteral | XClosure | XBooleanLiteral | XNumberLiteral | XNullLiteral | XStringLiteral | XTypeLiteral
	public XbaseGrammarAccess.XLiteralElements getXLiteralAccess() {
		return gaXbase.getXLiteralAccess();
	}
	
	public ParserRule getXLiteralRule() {
		return getXLiteralAccess().getRule();
	}
	
	//XCollectionLiteral:
	//	XSetLiteral | XListLiteral;
	public XbaseGrammarAccess.XCollectionLiteralElements getXCollectionLiteralAccess() {
		return gaXbase.getXCollectionLiteralAccess();
	}
	
	public ParserRule getXCollectionLiteralRule() {
		return getXCollectionLiteralAccess().getRule();
	}
	
	//XSetLiteral:
	//	{XSetLiteral} '#' '{' (elements+=XExpression (',' elements+=XExpression)*)? '}';
	public XbaseGrammarAccess.XSetLiteralElements getXSetLiteralAccess() {
		return gaXbase.getXSetLiteralAccess();
	}
	
	public ParserRule getXSetLiteralRule() {
		return getXSetLiteralAccess().getRule();
	}
	
	//XListLiteral:
	//	{XListLiteral} '#' '[' (elements+=XExpression (',' elements+=XExpression)*)? ']';
	public XbaseGrammarAccess.XListLiteralElements getXListLiteralAccess() {
		return gaXbase.getXListLiteralAccess();
	}
	
	public ParserRule getXListLiteralRule() {
		return getXListLiteralAccess().getRule();
	}
	
	//XClosure XExpression:
	//	=> ({XClosure} '[') => ((declaredFormalParameters+=JvmFormalParameter (','
	//	declaredFormalParameters+=JvmFormalParameter)*)? explicitSyntax?='|')? expression=XExpressionInClosure ']'
	public XbaseGrammarAccess.XClosureElements getXClosureAccess() {
		return gaXbase.getXClosureAccess();
	}
	
	public ParserRule getXClosureRule() {
		return getXClosureAccess().getRule();
	}
	
	//XExpressionInClosure XExpression:
	//	{XBlockExpression} (expressions+=XExpressionOrVarDeclaration ';'?)*
	public XbaseGrammarAccess.XExpressionInClosureElements getXExpressionInClosureAccess() {
		return gaXbase.getXExpressionInClosureAccess();
	}
	
	public ParserRule getXExpressionInClosureRule() {
		return getXExpressionInClosureAccess().getRule();
	}
	
	//XShortClosure XExpression:
	//	=> ({XClosure} (declaredFormalParameters+=JvmFormalParameter (',' declaredFormalParameters+=JvmFormalParameter)*)?
	//	explicitSyntax?='|') expression=XExpression
	public XbaseGrammarAccess.XShortClosureElements getXShortClosureAccess() {
		return gaXbase.getXShortClosureAccess();
	}
	
	public ParserRule getXShortClosureRule() {
		return getXShortClosureAccess().getRule();
	}
	
	//XParenthesizedExpression XExpression:
	//	'(' XExpression ')'
	public XbaseGrammarAccess.XParenthesizedExpressionElements getXParenthesizedExpressionAccess() {
		return gaXbase.getXParenthesizedExpressionAccess();
	}
	
	public ParserRule getXParenthesizedExpressionRule() {
		return getXParenthesizedExpressionAccess().getRule();
	}
	
	//XIfExpression XExpression:
	//	{XIfExpression} 'if' '(' if=XExpression ')' then=XExpression (=> 'else' else=XExpression)?
	public XbaseGrammarAccess.XIfExpressionElements getXIfExpressionAccess() {
		return gaXbase.getXIfExpressionAccess();
	}
	
	public ParserRule getXIfExpressionRule() {
		return getXIfExpressionAccess().getRule();
	}
	
	//XSwitchExpression XExpression:
	//	{XSwitchExpression} 'switch' (=> ('(' declaredParam=JvmFormalParameter ':') switch=XExpression ')' | =>
	//	(declaredParam=JvmFormalParameter ':')? switch=XExpression) '{' cases+=XCasePart* ('default' ':'
	//	default=XExpression)? '}'
	public XbaseGrammarAccess.XSwitchExpressionElements getXSwitchExpressionAccess() {
		return gaXbase.getXSwitchExpressionAccess();
	}
	
	public ParserRule getXSwitchExpressionRule() {
		return getXSwitchExpressionAccess().getRule();
	}
	
	//XCasePart:
	//	{XCasePart} typeGuard=JvmTypeReference? ('case' case=XExpression)? (':' then=XExpression | fallThrough?=',');
	public XbaseGrammarAccess.XCasePartElements getXCasePartAccess() {
		return gaXbase.getXCasePartAccess();
	}
	
	public ParserRule getXCasePartRule() {
		return getXCasePartAccess().getRule();
	}
	
	//XForLoopExpression XExpression:
	//	=> ({XForLoopExpression} 'for' '(' declaredParam=JvmFormalParameter ':') forExpression=XExpression ')'
	//	eachExpression=XExpression
	public XbaseGrammarAccess.XForLoopExpressionElements getXForLoopExpressionAccess() {
		return gaXbase.getXForLoopExpressionAccess();
	}
	
	public ParserRule getXForLoopExpressionRule() {
		return getXForLoopExpressionAccess().getRule();
	}
	
	//XBasicForLoopExpression XExpression:
	//	{XBasicForLoopExpression} 'for' '(' (initExpressions+=XExpressionOrVarDeclaration (','
	//	initExpressions+=XExpressionOrVarDeclaration)*)? ';' expression=XExpression? ';' (updateExpressions+=XExpression (','
	//	updateExpressions+=XExpression)*)? ')' eachExpression=XExpression
	public XbaseGrammarAccess.XBasicForLoopExpressionElements getXBasicForLoopExpressionAccess() {
		return gaXbase.getXBasicForLoopExpressionAccess();
	}
	
	public ParserRule getXBasicForLoopExpressionRule() {
		return getXBasicForLoopExpressionAccess().getRule();
	}
	
	//XWhileExpression XExpression:
	//	{XWhileExpression} 'while' '(' predicate=XExpression ')' body=XExpression
	public XbaseGrammarAccess.XWhileExpressionElements getXWhileExpressionAccess() {
		return gaXbase.getXWhileExpressionAccess();
	}
	
	public ParserRule getXWhileExpressionRule() {
		return getXWhileExpressionAccess().getRule();
	}
	
	//XDoWhileExpression XExpression:
	//	{XDoWhileExpression} 'do' body=XExpression 'while' '(' predicate=XExpression ')'
	public XbaseGrammarAccess.XDoWhileExpressionElements getXDoWhileExpressionAccess() {
		return gaXbase.getXDoWhileExpressionAccess();
	}
	
	public ParserRule getXDoWhileExpressionRule() {
		return getXDoWhileExpressionAccess().getRule();
	}
	
	//XBlockExpression XExpression:
	//	{XBlockExpression} '{' (expressions+=XExpressionOrVarDeclaration ';'?)* '}'
	public XbaseGrammarAccess.XBlockExpressionElements getXBlockExpressionAccess() {
		return gaXbase.getXBlockExpressionAccess();
	}
	
	public ParserRule getXBlockExpressionRule() {
		return getXBlockExpressionAccess().getRule();
	}
	
	//XExpressionOrVarDeclaration XExpression:
	//	XVariableDeclaration | XExpression
	public XbaseGrammarAccess.XExpressionOrVarDeclarationElements getXExpressionOrVarDeclarationAccess() {
		return gaXbase.getXExpressionOrVarDeclarationAccess();
	}
	
	public ParserRule getXExpressionOrVarDeclarationRule() {
		return getXExpressionOrVarDeclarationAccess().getRule();
	}
	
	//XVariableDeclaration XExpression:
	//	{XVariableDeclaration} (writeable?='var' | 'val') (=> (type=JvmTypeReference name=ValidID) | name=ValidID) ('='
	//	right=XExpression)?
	public XbaseGrammarAccess.XVariableDeclarationElements getXVariableDeclarationAccess() {
		return gaXbase.getXVariableDeclarationAccess();
	}
	
	public ParserRule getXVariableDeclarationRule() {
		return getXVariableDeclarationAccess().getRule();
	}
	
	//JvmFormalParameter types::JvmFormalParameter:
	//	parameterType=JvmTypeReference? name=ValidID
	public XbaseGrammarAccess.JvmFormalParameterElements getJvmFormalParameterAccess() {
		return gaXbase.getJvmFormalParameterAccess();
	}
	
	public ParserRule getJvmFormalParameterRule() {
		return getJvmFormalParameterAccess().getRule();
	}
	
	//FullJvmFormalParameter types::JvmFormalParameter:
	//	parameterType=JvmTypeReference name=ValidID
	public XbaseGrammarAccess.FullJvmFormalParameterElements getFullJvmFormalParameterAccess() {
		return gaXbase.getFullJvmFormalParameterAccess();
	}
	
	public ParserRule getFullJvmFormalParameterRule() {
		return getFullJvmFormalParameterAccess().getRule();
	}
	
	//XFeatureCall XExpression:
	//	{XFeatureCall} ('<' typeArguments+=JvmArgumentTypeReference (',' typeArguments+=JvmArgumentTypeReference)* '>')?
	//	feature=[types::JvmIdentifiableElement|IdOrSuper] (=> explicitOperationCall?='(' (featureCallArguments+=XShortClosure
	//	| featureCallArguments+=XExpression (',' featureCallArguments+=XExpression)*)? ')')? featureCallArguments+=XClosure?
	public XbaseGrammarAccess.XFeatureCallElements getXFeatureCallAccess() {
		return gaXbase.getXFeatureCallAccess();
	}
	
	public ParserRule getXFeatureCallRule() {
		return getXFeatureCallAccess().getRule();
	}
	
	//FeatureCallID:
	//	ValidID | 'extends' | 'static' | 'import' | 'extension';
	public XbaseGrammarAccess.FeatureCallIDElements getFeatureCallIDAccess() {
		return gaXbase.getFeatureCallIDAccess();
	}
	
	public ParserRule getFeatureCallIDRule() {
		return getFeatureCallIDAccess().getRule();
	}
	
	//IdOrSuper:
	//	FeatureCallID | 'super';
	public XbaseGrammarAccess.IdOrSuperElements getIdOrSuperAccess() {
		return gaXbase.getIdOrSuperAccess();
	}
	
	public ParserRule getIdOrSuperRule() {
		return getIdOrSuperAccess().getRule();
	}
	
	//XConstructorCall XExpression:
	//	{XConstructorCall} 'new' constructor=[types::JvmConstructor|QualifiedName] (=> '<'
	//	typeArguments+=JvmArgumentTypeReference (',' typeArguments+=JvmArgumentTypeReference)* '>')? (=>
	//	explicitConstructorCall?='(' (arguments+=XShortClosure | arguments+=XExpression (',' arguments+=XExpression)*)? ')')?
	//	arguments+=XClosure?
	public XbaseGrammarAccess.XConstructorCallElements getXConstructorCallAccess() {
		return gaXbase.getXConstructorCallAccess();
	}
	
	public ParserRule getXConstructorCallRule() {
		return getXConstructorCallAccess().getRule();
	}
	
	//XBooleanLiteral XExpression:
	//	{XBooleanLiteral} ('false' | isTrue?='true')
	public XbaseGrammarAccess.XBooleanLiteralElements getXBooleanLiteralAccess() {
		return gaXbase.getXBooleanLiteralAccess();
	}
	
	public ParserRule getXBooleanLiteralRule() {
		return getXBooleanLiteralAccess().getRule();
	}
	
	//XNullLiteral XExpression:
	//	{XNullLiteral} 'null'
	public XbaseGrammarAccess.XNullLiteralElements getXNullLiteralAccess() {
		return gaXbase.getXNullLiteralAccess();
	}
	
	public ParserRule getXNullLiteralRule() {
		return getXNullLiteralAccess().getRule();
	}
	
	//XNumberLiteral XExpression:
	//	{XNumberLiteral} value=Number
	public XbaseGrammarAccess.XNumberLiteralElements getXNumberLiteralAccess() {
		return gaXbase.getXNumberLiteralAccess();
	}
	
	public ParserRule getXNumberLiteralRule() {
		return getXNumberLiteralAccess().getRule();
	}
	
	//XStringLiteral XExpression:
	//	{XStringLiteral} value=STRING
	public XbaseGrammarAccess.XStringLiteralElements getXStringLiteralAccess() {
		return gaXbase.getXStringLiteralAccess();
	}
	
	public ParserRule getXStringLiteralRule() {
		return getXStringLiteralAccess().getRule();
	}
	
	//XTypeLiteral XExpression:
	//	{XTypeLiteral} 'typeof' '(' type=[types::JvmType|QualifiedName] arrayDimensions+=ArrayBrackets* ')'
	public XbaseGrammarAccess.XTypeLiteralElements getXTypeLiteralAccess() {
		return gaXbase.getXTypeLiteralAccess();
	}
	
	public ParserRule getXTypeLiteralRule() {
		return getXTypeLiteralAccess().getRule();
	}
	
	//XThrowExpression XExpression:
	//	{XThrowExpression} 'throw' expression=XExpression
	public XbaseGrammarAccess.XThrowExpressionElements getXThrowExpressionAccess() {
		return gaXbase.getXThrowExpressionAccess();
	}
	
	public ParserRule getXThrowExpressionRule() {
		return getXThrowExpressionAccess().getRule();
	}
	
	//XReturnExpression XExpression:
	//	{XReturnExpression} 'return' -> expression=XExpression?
	public XbaseGrammarAccess.XReturnExpressionElements getXReturnExpressionAccess() {
		return gaXbase.getXReturnExpressionAccess();
	}
	
	public ParserRule getXReturnExpressionRule() {
		return getXReturnExpressionAccess().getRule();
	}
	
	//XTryCatchFinallyExpression XExpression:
	//	{XTryCatchFinallyExpression} 'try' expression=XExpression (catchClauses+=XCatchClause+ (=> 'finally'
	//	finallyExpression=XExpression)? | 'finally' finallyExpression=XExpression)
	public XbaseGrammarAccess.XTryCatchFinallyExpressionElements getXTryCatchFinallyExpressionAccess() {
		return gaXbase.getXTryCatchFinallyExpressionAccess();
	}
	
	public ParserRule getXTryCatchFinallyExpressionRule() {
		return getXTryCatchFinallyExpressionAccess().getRule();
	}
	
	//XSynchronizedExpression XExpression:
	//	=> ({XSynchronizedExpression} 'synchronized' '(') param=XExpression ')' expression=XExpression
	public XbaseGrammarAccess.XSynchronizedExpressionElements getXSynchronizedExpressionAccess() {
		return gaXbase.getXSynchronizedExpressionAccess();
	}
	
	public ParserRule getXSynchronizedExpressionRule() {
		return getXSynchronizedExpressionAccess().getRule();
	}
	
	//XCatchClause:
	//	=> 'catch' '(' declaredParam=FullJvmFormalParameter ')' expression=XExpression;
	public XbaseGrammarAccess.XCatchClauseElements getXCatchClauseAccess() {
		return gaXbase.getXCatchClauseAccess();
	}
	
	public ParserRule getXCatchClauseRule() {
		return getXCatchClauseAccess().getRule();
	}
	
	//QualifiedName:
	//	ValidID (=> '.' ValidID)*;
	public XbaseGrammarAccess.QualifiedNameElements getQualifiedNameAccess() {
		return gaXbase.getQualifiedNameAccess();
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}
	
	//Number hidden():
	//	HEX | (INT | DECIMAL) ('.' (INT | DECIMAL))?;
	public XbaseGrammarAccess.NumberElements getNumberAccess() {
		return gaXbase.getNumberAccess();
	}
	
	public ParserRule getNumberRule() {
		return getNumberAccess().getRule();
	}
	
	/// **
	// * Dummy rule, for "better" downwards compatibility, since GrammarAccess generates non-static inner classes, 
	// * which makes downstream grammars break on classloading, when a rule is removed.
	// * /
	//StaticQualifier:
	//	(ValidID '::')+;
	public XbaseGrammarAccess.StaticQualifierElements getStaticQualifierAccess() {
		return gaXbase.getStaticQualifierAccess();
	}
	
	public ParserRule getStaticQualifierRule() {
		return getStaticQualifierAccess().getRule();
	}
	
	//terminal HEX:
	//	('0x' | '0X') ('0'..'9' | 'a'..'f' | 'A'..'F' | '_')+ ('#' (('b' | 'B') ('i' | 'I') | ('l' | 'L')))?;
	public TerminalRule getHEXRule() {
		return gaXbase.getHEXRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9' ('0'..'9' | '_')*;
	public TerminalRule getINTRule() {
		return gaXbase.getINTRule();
	}
	
	//terminal DECIMAL:
	//	INT (('e' | 'E') ('+' | '-')? INT)? (('b' | 'B') ('i' | 'I' | 'd' | 'D') | ('l' | 'L' | 'd' | 'D' | 'f' | 'F'))?;
	public TerminalRule getDECIMALRule() {
		return gaXbase.getDECIMALRule();
	}
	
	//JvmTypeReference:
	//	JvmParameterizedTypeReference => ({JvmGenericArrayTypeReference.componentType=current} ArrayBrackets)* |
	//	XFunctionTypeRef;
	public XtypeGrammarAccess.JvmTypeReferenceElements getJvmTypeReferenceAccess() {
		return gaXtype.getJvmTypeReferenceAccess();
	}
	
	public ParserRule getJvmTypeReferenceRule() {
		return getJvmTypeReferenceAccess().getRule();
	}
	
	//ArrayBrackets:
	//	'[' ']';
	public XtypeGrammarAccess.ArrayBracketsElements getArrayBracketsAccess() {
		return gaXtype.getArrayBracketsAccess();
	}
	
	public ParserRule getArrayBracketsRule() {
		return getArrayBracketsAccess().getRule();
	}
	
	//XFunctionTypeRef:
	//	('(' (paramTypes+=JvmTypeReference (',' paramTypes+=JvmTypeReference)*)? ')')? '=>' returnType=JvmTypeReference;
	public XtypeGrammarAccess.XFunctionTypeRefElements getXFunctionTypeRefAccess() {
		return gaXtype.getXFunctionTypeRefAccess();
	}
	
	public ParserRule getXFunctionTypeRefRule() {
		return getXFunctionTypeRefAccess().getRule();
	}
	
	//JvmParameterizedTypeReference:
	//	type=[JvmType|super::QualifiedName] (=> '<' arguments+=JvmArgumentTypeReference (','
	//	arguments+=JvmArgumentTypeReference)* '>' (=> ({JvmInnerTypeReference.outer=current} '.') type=[JvmType|ValidID] (=>
	//	'<' arguments+=JvmArgumentTypeReference (',' arguments+=JvmArgumentTypeReference)* '>')?)*)?;
	public XtypeGrammarAccess.JvmParameterizedTypeReferenceElements getJvmParameterizedTypeReferenceAccess() {
		return gaXtype.getJvmParameterizedTypeReferenceAccess();
	}
	
	public ParserRule getJvmParameterizedTypeReferenceRule() {
		return getJvmParameterizedTypeReferenceAccess().getRule();
	}
	
	//JvmArgumentTypeReference JvmTypeReference:
	//	JvmTypeReference | JvmWildcardTypeReference
	public XtypeGrammarAccess.JvmArgumentTypeReferenceElements getJvmArgumentTypeReferenceAccess() {
		return gaXtype.getJvmArgumentTypeReferenceAccess();
	}
	
	public ParserRule getJvmArgumentTypeReferenceRule() {
		return getJvmArgumentTypeReferenceAccess().getRule();
	}
	
	//JvmWildcardTypeReference:
	//	{JvmWildcardTypeReference} '?' (constraints+=JvmUpperBound constraints+=JvmUpperBoundAnded* |
	//	constraints+=JvmLowerBound constraints+=JvmLowerBoundAnded*)?;
	public XtypeGrammarAccess.JvmWildcardTypeReferenceElements getJvmWildcardTypeReferenceAccess() {
		return gaXtype.getJvmWildcardTypeReferenceAccess();
	}
	
	public ParserRule getJvmWildcardTypeReferenceRule() {
		return getJvmWildcardTypeReferenceAccess().getRule();
	}
	
	//JvmUpperBound:
	//	'extends' typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmUpperBoundElements getJvmUpperBoundAccess() {
		return gaXtype.getJvmUpperBoundAccess();
	}
	
	public ParserRule getJvmUpperBoundRule() {
		return getJvmUpperBoundAccess().getRule();
	}
	
	//JvmUpperBoundAnded JvmUpperBound:
	//	'&' typeReference=JvmTypeReference
	public XtypeGrammarAccess.JvmUpperBoundAndedElements getJvmUpperBoundAndedAccess() {
		return gaXtype.getJvmUpperBoundAndedAccess();
	}
	
	public ParserRule getJvmUpperBoundAndedRule() {
		return getJvmUpperBoundAndedAccess().getRule();
	}
	
	//JvmLowerBound:
	//	'super' typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmLowerBoundElements getJvmLowerBoundAccess() {
		return gaXtype.getJvmLowerBoundAccess();
	}
	
	public ParserRule getJvmLowerBoundRule() {
		return getJvmLowerBoundAccess().getRule();
	}
	
	//JvmLowerBoundAnded JvmLowerBound:
	//	'&' typeReference=JvmTypeReference
	public XtypeGrammarAccess.JvmLowerBoundAndedElements getJvmLowerBoundAndedAccess() {
		return gaXtype.getJvmLowerBoundAndedAccess();
	}
	
	public ParserRule getJvmLowerBoundAndedRule() {
		return getJvmLowerBoundAndedAccess().getRule();
	}
	
	//JvmTypeParameter:
	//	name=ValidID (constraints+=JvmUpperBound constraints+=JvmUpperBoundAnded*)?;
	public XtypeGrammarAccess.JvmTypeParameterElements getJvmTypeParameterAccess() {
		return gaXtype.getJvmTypeParameterAccess();
	}
	
	public ParserRule getJvmTypeParameterRule() {
		return getJvmTypeParameterAccess().getRule();
	}
	
	//QualifiedNameWithWildcard:
	//	super::QualifiedName '.' '*';
	public XtypeGrammarAccess.QualifiedNameWithWildcardElements getQualifiedNameWithWildcardAccess() {
		return gaXtype.getQualifiedNameWithWildcardAccess();
	}
	
	public ParserRule getQualifiedNameWithWildcardRule() {
		return getQualifiedNameWithWildcardAccess().getRule();
	}
	
	//ValidID:
	//	ID;
	public XtypeGrammarAccess.ValidIDElements getValidIDAccess() {
		return gaXtype.getValidIDAccess();
	}
	
	public ParserRule getValidIDRule() {
		return getValidIDAccess().getRule();
	}
	
	//XImportSection:
	//	importDeclarations+=XImportDeclaration+;
	public XtypeGrammarAccess.XImportSectionElements getXImportSectionAccess() {
		return gaXtype.getXImportSectionAccess();
	}
	
	public ParserRule getXImportSectionRule() {
		return getXImportSectionAccess().getRule();
	}
	
	//XImportDeclaration:
	//	'import' (static?='static' extension?='extension'? importedType=[JvmDeclaredType|QualifiedNameInStaticImport]
	//	(wildcard?='*' | memberName=ValidID) | importedType=[JvmDeclaredType|super::QualifiedName] |
	//	importedNamespace=QualifiedNameWithWildcard) ';'?;
	public XtypeGrammarAccess.XImportDeclarationElements getXImportDeclarationAccess() {
		return gaXtype.getXImportDeclarationAccess();
	}
	
	public ParserRule getXImportDeclarationRule() {
		return getXImportDeclarationAccess().getRule();
	}
	
	//QualifiedNameInStaticImport:
	//	(ValidID '.')+;
	public XtypeGrammarAccess.QualifiedNameInStaticImportElements getQualifiedNameInStaticImportAccess() {
		return gaXtype.getQualifiedNameInStaticImportAccess();
	}
	
	public ParserRule getQualifiedNameInStaticImportRule() {
		return getQualifiedNameInStaticImportAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '$' | '_') ('a'..'z' | 'A'..'Z' | '$' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaXtype.getIDRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"'? | "'" ('\\' . | !('\\' | "'"))* "'"?;
	public TerminalRule getSTRINGRule() {
		return gaXtype.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/ *'->'* /';
	public TerminalRule getML_COMMENTRule() {
		return gaXtype.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaXtype.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaXtype.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaXtype.getANY_OTHERRule();
	}
}
