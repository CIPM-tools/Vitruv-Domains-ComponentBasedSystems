/**
 * generated by Xtext 2.10.0
 */
package tools.vitruvius.dsls.response.responseLanguage.util;

import tools.vitruvius.dsls.mirbase.mirBase.MirBaseFile;

import tools.vitruvius.dsls.response.responseLanguage.*;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.util.Switch;

/**
 * <!-- begin-user-doc -->
 * The <b>Switch</b> for the model's inheritance hierarchy.
 * It supports the call {@link #doSwitch(EObject) doSwitch(object)}
 * to invoke the <code>caseXXX</code> method for each class of the model,
 * starting with the actual class of the object
 * and proceeding up the inheritance hierarchy
 * until a non-null result is returned,
 * which is the result of the switch.
 * <!-- end-user-doc -->
 * @see tools.vitruvius.dsls.response.responseLanguage.ResponseLanguagePackage
 * @generated
 */
public class ResponseLanguageSwitch<T> extends Switch<T>
{
  /**
   * The cached model package
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static ResponseLanguagePackage modelPackage;

  /**
   * Creates an instance of the switch.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ResponseLanguageSwitch()
  {
    if (modelPackage == null)
    {
      modelPackage = ResponseLanguagePackage.eINSTANCE;
    }
  }

  /**
   * Checks whether this is a switch for the given package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param ePackage the package in question.
   * @return whether this is a switch for the given package.
   * @generated
   */
  @Override
  protected boolean isSwitchFor(EPackage ePackage)
  {
    return ePackage == modelPackage;
  }

  /**
   * Calls <code>caseXXX</code> for each class of the model until one returns a non null result; it yields that result.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the first non-null result returned by a <code>caseXXX</code> call.
   * @generated
   */
  @Override
  protected T doSwitch(int classifierID, EObject theEObject)
  {
    switch (classifierID)
    {
      case ResponseLanguagePackage.RESPONSE_FILE:
      {
        ResponseFile responseFile = (ResponseFile)theEObject;
        T result = caseResponseFile(responseFile);
        if (result == null) result = caseMirBaseFile(responseFile);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ResponseLanguagePackage.RESPONSES_SEGMENT:
      {
        ResponsesSegment responsesSegment = (ResponsesSegment)theEObject;
        T result = caseResponsesSegment(responsesSegment);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ResponseLanguagePackage.RESPONSE:
      {
        Response response = (Response)theEObject;
        T result = caseResponse(response);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ResponseLanguagePackage.INVARIANT_VIOLATION_EVENT:
      {
        InvariantViolationEvent invariantViolationEvent = (InvariantViolationEvent)theEObject;
        T result = caseInvariantViolationEvent(invariantViolationEvent);
        if (result == null) result = caseTrigger(invariantViolationEvent);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ResponseLanguagePackage.TRIGGER:
      {
        Trigger trigger = (Trigger)theEObject;
        T result = caseTrigger(trigger);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ResponseLanguagePackage.MODEL_CHANGE:
      {
        ModelChange modelChange = (ModelChange)theEObject;
        T result = caseModelChange(modelChange);
        if (result == null) result = caseTrigger(modelChange);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ResponseLanguagePackage.CONCRETE_MODEL_ELEMENT_CHANGE:
      {
        ConcreteModelElementChange concreteModelElementChange = (ConcreteModelElementChange)theEObject;
        T result = caseConcreteModelElementChange(concreteModelElementChange);
        if (result == null) result = caseModelChange(concreteModelElementChange);
        if (result == null) result = caseTrigger(concreteModelElementChange);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ResponseLanguagePackage.ATOMIC_CONCRETE_MODEL_ELEMENT_CHANGE:
      {
        AtomicConcreteModelElementChange atomicConcreteModelElementChange = (AtomicConcreteModelElementChange)theEObject;
        T result = caseAtomicConcreteModelElementChange(atomicConcreteModelElementChange);
        if (result == null) result = caseConcreteModelElementChange(atomicConcreteModelElementChange);
        if (result == null) result = caseModelChange(atomicConcreteModelElementChange);
        if (result == null) result = caseTrigger(atomicConcreteModelElementChange);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ResponseLanguagePackage.ATOMIC_ROOT_OBJECT_CHANGE:
      {
        AtomicRootObjectChange atomicRootObjectChange = (AtomicRootObjectChange)theEObject;
        T result = caseAtomicRootObjectChange(atomicRootObjectChange);
        if (result == null) result = caseAtomicConcreteModelElementChange(atomicRootObjectChange);
        if (result == null) result = caseConcreteModelElementChange(atomicRootObjectChange);
        if (result == null) result = caseModelChange(atomicRootObjectChange);
        if (result == null) result = caseTrigger(atomicRootObjectChange);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ResponseLanguagePackage.ATOMIC_FEATURE_CHANGE:
      {
        AtomicFeatureChange atomicFeatureChange = (AtomicFeatureChange)theEObject;
        T result = caseAtomicFeatureChange(atomicFeatureChange);
        if (result == null) result = caseAtomicConcreteModelElementChange(atomicFeatureChange);
        if (result == null) result = caseConcreteModelElementChange(atomicFeatureChange);
        if (result == null) result = caseModelChange(atomicFeatureChange);
        if (result == null) result = caseTrigger(atomicFeatureChange);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ResponseLanguagePackage.ATOMIC_MULTI_VALUED_FEATURE_CHANGE:
      {
        AtomicMultiValuedFeatureChange atomicMultiValuedFeatureChange = (AtomicMultiValuedFeatureChange)theEObject;
        T result = caseAtomicMultiValuedFeatureChange(atomicMultiValuedFeatureChange);
        if (result == null) result = caseAtomicFeatureChange(atomicMultiValuedFeatureChange);
        if (result == null) result = caseAtomicConcreteModelElementChange(atomicMultiValuedFeatureChange);
        if (result == null) result = caseConcreteModelElementChange(atomicMultiValuedFeatureChange);
        if (result == null) result = caseModelChange(atomicMultiValuedFeatureChange);
        if (result == null) result = caseTrigger(atomicMultiValuedFeatureChange);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ResponseLanguagePackage.ATOMIC_SINGLE_VALUED_FEATURE_CHANGE:
      {
        AtomicSingleValuedFeatureChange atomicSingleValuedFeatureChange = (AtomicSingleValuedFeatureChange)theEObject;
        T result = caseAtomicSingleValuedFeatureChange(atomicSingleValuedFeatureChange);
        if (result == null) result = caseAtomicFeatureChange(atomicSingleValuedFeatureChange);
        if (result == null) result = caseAtomicConcreteModelElementChange(atomicSingleValuedFeatureChange);
        if (result == null) result = caseConcreteModelElementChange(atomicSingleValuedFeatureChange);
        if (result == null) result = caseModelChange(atomicSingleValuedFeatureChange);
        if (result == null) result = caseTrigger(atomicSingleValuedFeatureChange);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ResponseLanguagePackage.ARBITRARY_MODEL_ELEMENT_CHANGE:
      {
        ArbitraryModelElementChange arbitraryModelElementChange = (ArbitraryModelElementChange)theEObject;
        T result = caseArbitraryModelElementChange(arbitraryModelElementChange);
        if (result == null) result = caseModelChange(arbitraryModelElementChange);
        if (result == null) result = caseTrigger(arbitraryModelElementChange);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ResponseLanguagePackage.ROUTINE:
      {
        Routine routine = (Routine)theEObject;
        T result = caseRoutine(routine);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ResponseLanguagePackage.IMPLICIT_ROUTINE:
      {
        ImplicitRoutine implicitRoutine = (ImplicitRoutine)theEObject;
        T result = caseImplicitRoutine(implicitRoutine);
        if (result == null) result = caseRoutine(implicitRoutine);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ResponseLanguagePackage.MATCHING:
      {
        Matching matching = (Matching)theEObject;
        T result = caseMatching(matching);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ResponseLanguagePackage.EFFECT:
      {
        Effect effect = (Effect)theEObject;
        T result = caseEffect(effect);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ResponseLanguagePackage.EXPLICIT_ROUTINE:
      {
        ExplicitRoutine explicitRoutine = (ExplicitRoutine)theEObject;
        T result = caseExplicitRoutine(explicitRoutine);
        if (result == null) result = caseRoutine(explicitRoutine);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ResponseLanguagePackage.ROUTINE_INPUT:
      {
        RoutineInput routineInput = (RoutineInput)theEObject;
        T result = caseRoutineInput(routineInput);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ResponseLanguagePackage.TAGGABLE:
      {
        Taggable taggable = (Taggable)theEObject;
        T result = caseTaggable(taggable);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ResponseLanguagePackage.RETRIEVE_MODEL_ELEMENT:
      {
        RetrieveModelElement retrieveModelElement = (RetrieveModelElement)theEObject;
        T result = caseRetrieveModelElement(retrieveModelElement);
        if (result == null) result = caseTaggable(retrieveModelElement);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ResponseLanguagePackage.EXISTING_ELEMENT_REFERENCE:
      {
        ExistingElementReference existingElementReference = (ExistingElementReference)theEObject;
        T result = caseExistingElementReference(existingElementReference);
        if (result == null) result = caseCodeBlock(existingElementReference);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ResponseLanguagePackage.CREATE_ELEMENT:
      {
        CreateElement createElement = (CreateElement)theEObject;
        T result = caseCreateElement(createElement);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ResponseLanguagePackage.DELETE_ELEMENT:
      {
        DeleteElement deleteElement = (DeleteElement)theEObject;
        T result = caseDeleteElement(deleteElement);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ResponseLanguagePackage.CREATE_CORRESPONDENCE:
      {
        CreateCorrespondence createCorrespondence = (CreateCorrespondence)theEObject;
        T result = caseCreateCorrespondence(createCorrespondence);
        if (result == null) result = caseTaggable(createCorrespondence);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ResponseLanguagePackage.REMOVE_CORRESPONDENCE:
      {
        RemoveCorrespondence removeCorrespondence = (RemoveCorrespondence)theEObject;
        T result = caseRemoveCorrespondence(removeCorrespondence);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ResponseLanguagePackage.TAG_CODE_BLOCK:
      {
        TagCodeBlock tagCodeBlock = (TagCodeBlock)theEObject;
        T result = caseTagCodeBlock(tagCodeBlock);
        if (result == null) result = caseCodeBlock(tagCodeBlock);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ResponseLanguagePackage.PRECONDITION_CODE_BLOCK:
      {
        PreconditionCodeBlock preconditionCodeBlock = (PreconditionCodeBlock)theEObject;
        T result = casePreconditionCodeBlock(preconditionCodeBlock);
        if (result == null) result = caseCodeBlock(preconditionCodeBlock);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ResponseLanguagePackage.CORRESPONDING_OBJECT_CODE_BLOCK:
      {
        CorrespondingObjectCodeBlock correspondingObjectCodeBlock = (CorrespondingObjectCodeBlock)theEObject;
        T result = caseCorrespondingObjectCodeBlock(correspondingObjectCodeBlock);
        if (result == null) result = caseCodeBlock(correspondingObjectCodeBlock);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ResponseLanguagePackage.EXECUTION_CODE_BLOCK:
      {
        ExecutionCodeBlock executionCodeBlock = (ExecutionCodeBlock)theEObject;
        T result = caseExecutionCodeBlock(executionCodeBlock);
        if (result == null) result = caseCodeBlock(executionCodeBlock);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ResponseLanguagePackage.CODE_BLOCK:
      {
        CodeBlock codeBlock = (CodeBlock)theEObject;
        T result = caseCodeBlock(codeBlock);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ResponseLanguagePackage.INSERT_ROOT_CHANGE:
      {
        InsertRootChange insertRootChange = (InsertRootChange)theEObject;
        T result = caseInsertRootChange(insertRootChange);
        if (result == null) result = caseAtomicRootObjectChange(insertRootChange);
        if (result == null) result = caseAtomicConcreteModelElementChange(insertRootChange);
        if (result == null) result = caseConcreteModelElementChange(insertRootChange);
        if (result == null) result = caseModelChange(insertRootChange);
        if (result == null) result = caseTrigger(insertRootChange);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ResponseLanguagePackage.REMOVE_ROOT_CHANGE:
      {
        RemoveRootChange removeRootChange = (RemoveRootChange)theEObject;
        T result = caseRemoveRootChange(removeRootChange);
        if (result == null) result = caseAtomicRootObjectChange(removeRootChange);
        if (result == null) result = caseAtomicConcreteModelElementChange(removeRootChange);
        if (result == null) result = caseConcreteModelElementChange(removeRootChange);
        if (result == null) result = caseModelChange(removeRootChange);
        if (result == null) result = caseTrigger(removeRootChange);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ResponseLanguagePackage.MULTI_VALUED_FEATURE_INSERT_CHANGE:
      {
        MultiValuedFeatureInsertChange multiValuedFeatureInsertChange = (MultiValuedFeatureInsertChange)theEObject;
        T result = caseMultiValuedFeatureInsertChange(multiValuedFeatureInsertChange);
        if (result == null) result = caseAtomicMultiValuedFeatureChange(multiValuedFeatureInsertChange);
        if (result == null) result = caseAtomicFeatureChange(multiValuedFeatureInsertChange);
        if (result == null) result = caseAtomicConcreteModelElementChange(multiValuedFeatureInsertChange);
        if (result == null) result = caseConcreteModelElementChange(multiValuedFeatureInsertChange);
        if (result == null) result = caseModelChange(multiValuedFeatureInsertChange);
        if (result == null) result = caseTrigger(multiValuedFeatureInsertChange);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ResponseLanguagePackage.MULTI_VALUED_FEATURE_REMOVE_CHANGE:
      {
        MultiValuedFeatureRemoveChange multiValuedFeatureRemoveChange = (MultiValuedFeatureRemoveChange)theEObject;
        T result = caseMultiValuedFeatureRemoveChange(multiValuedFeatureRemoveChange);
        if (result == null) result = caseAtomicMultiValuedFeatureChange(multiValuedFeatureRemoveChange);
        if (result == null) result = caseAtomicFeatureChange(multiValuedFeatureRemoveChange);
        if (result == null) result = caseAtomicConcreteModelElementChange(multiValuedFeatureRemoveChange);
        if (result == null) result = caseConcreteModelElementChange(multiValuedFeatureRemoveChange);
        if (result == null) result = caseModelChange(multiValuedFeatureRemoveChange);
        if (result == null) result = caseTrigger(multiValuedFeatureRemoveChange);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ResponseLanguagePackage.MULTI_VALUED_FEATURE_PERMUTE_CHANGE:
      {
        MultiValuedFeaturePermuteChange multiValuedFeaturePermuteChange = (MultiValuedFeaturePermuteChange)theEObject;
        T result = caseMultiValuedFeaturePermuteChange(multiValuedFeaturePermuteChange);
        if (result == null) result = caseAtomicMultiValuedFeatureChange(multiValuedFeaturePermuteChange);
        if (result == null) result = caseAtomicFeatureChange(multiValuedFeaturePermuteChange);
        if (result == null) result = caseAtomicConcreteModelElementChange(multiValuedFeaturePermuteChange);
        if (result == null) result = caseConcreteModelElementChange(multiValuedFeaturePermuteChange);
        if (result == null) result = caseModelChange(multiValuedFeaturePermuteChange);
        if (result == null) result = caseTrigger(multiValuedFeaturePermuteChange);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ResponseLanguagePackage.SINGLE_VALUED_FEATURE_REPLACE:
      {
        SingleValuedFeatureReplace singleValuedFeatureReplace = (SingleValuedFeatureReplace)theEObject;
        T result = caseSingleValuedFeatureReplace(singleValuedFeatureReplace);
        if (result == null) result = caseAtomicSingleValuedFeatureChange(singleValuedFeatureReplace);
        if (result == null) result = caseAtomicFeatureChange(singleValuedFeatureReplace);
        if (result == null) result = caseAtomicConcreteModelElementChange(singleValuedFeatureReplace);
        if (result == null) result = caseConcreteModelElementChange(singleValuedFeatureReplace);
        if (result == null) result = caseModelChange(singleValuedFeatureReplace);
        if (result == null) result = caseTrigger(singleValuedFeatureReplace);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      default: return defaultCase(theEObject);
    }
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Response File</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Response File</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseResponseFile(ResponseFile object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Responses Segment</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Responses Segment</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseResponsesSegment(ResponsesSegment object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Response</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Response</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseResponse(Response object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Invariant Violation Event</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Invariant Violation Event</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseInvariantViolationEvent(InvariantViolationEvent object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Trigger</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Trigger</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseTrigger(Trigger object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Model Change</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Model Change</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseModelChange(ModelChange object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Concrete Model Element Change</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Concrete Model Element Change</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseConcreteModelElementChange(ConcreteModelElementChange object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Atomic Concrete Model Element Change</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Atomic Concrete Model Element Change</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAtomicConcreteModelElementChange(AtomicConcreteModelElementChange object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Atomic Root Object Change</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Atomic Root Object Change</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAtomicRootObjectChange(AtomicRootObjectChange object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Atomic Feature Change</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Atomic Feature Change</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAtomicFeatureChange(AtomicFeatureChange object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Atomic Multi Valued Feature Change</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Atomic Multi Valued Feature Change</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAtomicMultiValuedFeatureChange(AtomicMultiValuedFeatureChange object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Atomic Single Valued Feature Change</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Atomic Single Valued Feature Change</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAtomicSingleValuedFeatureChange(AtomicSingleValuedFeatureChange object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Arbitrary Model Element Change</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Arbitrary Model Element Change</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseArbitraryModelElementChange(ArbitraryModelElementChange object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Routine</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Routine</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseRoutine(Routine object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Implicit Routine</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Implicit Routine</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseImplicitRoutine(ImplicitRoutine object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Matching</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Matching</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseMatching(Matching object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Effect</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Effect</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEffect(Effect object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Explicit Routine</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Explicit Routine</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseExplicitRoutine(ExplicitRoutine object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Routine Input</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Routine Input</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseRoutineInput(RoutineInput object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Taggable</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Taggable</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseTaggable(Taggable object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Retrieve Model Element</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Retrieve Model Element</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseRetrieveModelElement(RetrieveModelElement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Existing Element Reference</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Existing Element Reference</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseExistingElementReference(ExistingElementReference object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Create Element</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Create Element</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCreateElement(CreateElement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Delete Element</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Delete Element</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDeleteElement(DeleteElement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Create Correspondence</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Create Correspondence</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCreateCorrespondence(CreateCorrespondence object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Remove Correspondence</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Remove Correspondence</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseRemoveCorrespondence(RemoveCorrespondence object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Tag Code Block</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Tag Code Block</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseTagCodeBlock(TagCodeBlock object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Precondition Code Block</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Precondition Code Block</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePreconditionCodeBlock(PreconditionCodeBlock object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Corresponding Object Code Block</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Corresponding Object Code Block</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCorrespondingObjectCodeBlock(CorrespondingObjectCodeBlock object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Execution Code Block</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Execution Code Block</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseExecutionCodeBlock(ExecutionCodeBlock object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Code Block</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Code Block</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCodeBlock(CodeBlock object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Insert Root Change</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Insert Root Change</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseInsertRootChange(InsertRootChange object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Remove Root Change</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Remove Root Change</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseRemoveRootChange(RemoveRootChange object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Multi Valued Feature Insert Change</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Multi Valued Feature Insert Change</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseMultiValuedFeatureInsertChange(MultiValuedFeatureInsertChange object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Multi Valued Feature Remove Change</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Multi Valued Feature Remove Change</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseMultiValuedFeatureRemoveChange(MultiValuedFeatureRemoveChange object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Multi Valued Feature Permute Change</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Multi Valued Feature Permute Change</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseMultiValuedFeaturePermuteChange(MultiValuedFeaturePermuteChange object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Single Valued Feature Replace</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Single Valued Feature Replace</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSingleValuedFeatureReplace(SingleValuedFeatureReplace object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>File</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>File</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseMirBaseFile(MirBaseFile object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>EObject</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch, but this is the last case anyway.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>EObject</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject)
   * @generated
   */
  @Override
  public T defaultCase(EObject object)
  {
    return null;
  }

} //ResponseLanguageSwitch
