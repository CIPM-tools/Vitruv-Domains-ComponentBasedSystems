/**
 * generated by Xtext 2.10.0
 */
package tools.vitruvius.dsls.response.responseLanguage.impl;

import tools.vitruvius.dsls.mirbase.mirBase.ModelElement;

import tools.vitruvius.dsls.response.responseLanguage.AtomicRootObjectChange;
import tools.vitruvius.dsls.response.responseLanguage.ResponseLanguagePackage;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Atomic Root Object Change</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link tools.vitruvius.dsls.response.responseLanguage.impl.AtomicRootObjectChangeImpl#getChangedElement <em>Changed Element</em>}</li>
 * </ul>
 *
 * @generated
 */
public class AtomicRootObjectChangeImpl extends AtomicConcreteModelElementChangeImpl implements AtomicRootObjectChange
{
  /**
   * The cached value of the '{@link #getChangedElement() <em>Changed Element</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getChangedElement()
   * @generated
   * @ordered
   */
  protected ModelElement changedElement;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected AtomicRootObjectChangeImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return ResponseLanguagePackage.Literals.ATOMIC_ROOT_OBJECT_CHANGE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ModelElement getChangedElement()
  {
    return changedElement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetChangedElement(ModelElement newChangedElement, NotificationChain msgs)
  {
    ModelElement oldChangedElement = changedElement;
    changedElement = newChangedElement;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, ResponseLanguagePackage.ATOMIC_ROOT_OBJECT_CHANGE__CHANGED_ELEMENT, oldChangedElement, newChangedElement);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setChangedElement(ModelElement newChangedElement)
  {
    if (newChangedElement != changedElement)
    {
      NotificationChain msgs = null;
      if (changedElement != null)
        msgs = ((InternalEObject)changedElement).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - ResponseLanguagePackage.ATOMIC_ROOT_OBJECT_CHANGE__CHANGED_ELEMENT, null, msgs);
      if (newChangedElement != null)
        msgs = ((InternalEObject)newChangedElement).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - ResponseLanguagePackage.ATOMIC_ROOT_OBJECT_CHANGE__CHANGED_ELEMENT, null, msgs);
      msgs = basicSetChangedElement(newChangedElement, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, ResponseLanguagePackage.ATOMIC_ROOT_OBJECT_CHANGE__CHANGED_ELEMENT, newChangedElement, newChangedElement));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case ResponseLanguagePackage.ATOMIC_ROOT_OBJECT_CHANGE__CHANGED_ELEMENT:
        return basicSetChangedElement(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case ResponseLanguagePackage.ATOMIC_ROOT_OBJECT_CHANGE__CHANGED_ELEMENT:
        return getChangedElement();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case ResponseLanguagePackage.ATOMIC_ROOT_OBJECT_CHANGE__CHANGED_ELEMENT:
        setChangedElement((ModelElement)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case ResponseLanguagePackage.ATOMIC_ROOT_OBJECT_CHANGE__CHANGED_ELEMENT:
        setChangedElement((ModelElement)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case ResponseLanguagePackage.ATOMIC_ROOT_OBJECT_CHANGE__CHANGED_ELEMENT:
        return changedElement != null;
    }
    return super.eIsSet(featureID);
  }

} //AtomicRootObjectChangeImpl
