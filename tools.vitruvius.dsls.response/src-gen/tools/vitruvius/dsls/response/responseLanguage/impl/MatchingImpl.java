/**
 * generated by Xtext 2.10.0
 */
package tools.vitruvius.dsls.response.responseLanguage.impl;

import tools.vitruvius.dsls.response.responseLanguage.Matching;
import tools.vitruvius.dsls.response.responseLanguage.PreconditionCodeBlock;
import tools.vitruvius.dsls.response.responseLanguage.ResponseLanguagePackage;
import tools.vitruvius.dsls.response.responseLanguage.RetrieveModelElement;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Matching</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link tools.vitruvius.dsls.response.responseLanguage.impl.MatchingImpl#getRetrievedElements <em>Retrieved Elements</em>}</li>
 *   <li>{@link tools.vitruvius.dsls.response.responseLanguage.impl.MatchingImpl#getCondition <em>Condition</em>}</li>
 * </ul>
 *
 * @generated
 */
public class MatchingImpl extends MinimalEObjectImpl.Container implements Matching
{
  /**
   * The cached value of the '{@link #getRetrievedElements() <em>Retrieved Elements</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getRetrievedElements()
   * @generated
   * @ordered
   */
  protected EList<RetrieveModelElement> retrievedElements;

  /**
   * The cached value of the '{@link #getCondition() <em>Condition</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCondition()
   * @generated
   * @ordered
   */
  protected PreconditionCodeBlock condition;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected MatchingImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return ResponseLanguagePackage.Literals.MATCHING;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<RetrieveModelElement> getRetrievedElements()
  {
    if (retrievedElements == null)
    {
      retrievedElements = new EObjectContainmentEList<RetrieveModelElement>(RetrieveModelElement.class, this, ResponseLanguagePackage.MATCHING__RETRIEVED_ELEMENTS);
    }
    return retrievedElements;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public PreconditionCodeBlock getCondition()
  {
    return condition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetCondition(PreconditionCodeBlock newCondition, NotificationChain msgs)
  {
    PreconditionCodeBlock oldCondition = condition;
    condition = newCondition;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, ResponseLanguagePackage.MATCHING__CONDITION, oldCondition, newCondition);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setCondition(PreconditionCodeBlock newCondition)
  {
    if (newCondition != condition)
    {
      NotificationChain msgs = null;
      if (condition != null)
        msgs = ((InternalEObject)condition).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - ResponseLanguagePackage.MATCHING__CONDITION, null, msgs);
      if (newCondition != null)
        msgs = ((InternalEObject)newCondition).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - ResponseLanguagePackage.MATCHING__CONDITION, null, msgs);
      msgs = basicSetCondition(newCondition, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, ResponseLanguagePackage.MATCHING__CONDITION, newCondition, newCondition));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case ResponseLanguagePackage.MATCHING__RETRIEVED_ELEMENTS:
        return ((InternalEList<?>)getRetrievedElements()).basicRemove(otherEnd, msgs);
      case ResponseLanguagePackage.MATCHING__CONDITION:
        return basicSetCondition(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case ResponseLanguagePackage.MATCHING__RETRIEVED_ELEMENTS:
        return getRetrievedElements();
      case ResponseLanguagePackage.MATCHING__CONDITION:
        return getCondition();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case ResponseLanguagePackage.MATCHING__RETRIEVED_ELEMENTS:
        getRetrievedElements().clear();
        getRetrievedElements().addAll((Collection<? extends RetrieveModelElement>)newValue);
        return;
      case ResponseLanguagePackage.MATCHING__CONDITION:
        setCondition((PreconditionCodeBlock)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case ResponseLanguagePackage.MATCHING__RETRIEVED_ELEMENTS:
        getRetrievedElements().clear();
        return;
      case ResponseLanguagePackage.MATCHING__CONDITION:
        setCondition((PreconditionCodeBlock)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case ResponseLanguagePackage.MATCHING__RETRIEVED_ELEMENTS:
        return retrievedElements != null && !retrievedElements.isEmpty();
      case ResponseLanguagePackage.MATCHING__CONDITION:
        return condition != null;
    }
    return super.eIsSet(featureID);
  }

} //MatchingImpl
