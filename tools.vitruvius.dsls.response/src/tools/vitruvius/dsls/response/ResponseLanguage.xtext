grammar tools.vitruvius.dsls.response.ResponseLanguage with tools.vitruvius.dsls.mirbase.MirBase
hidden(WS, SL_COMMENT)

generate responseLanguage "http://www.kit.edu/ipd/sdq/vitruvius/dsls/response/ResponseLanguage"

import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "http://www.kit.edu/ipd/sdq/vitruvius/dsls/mirbase/MirBase" as mirbase


ResponseFile:
	(namespaceImports=XImportSection)?
	MirBaseFile
	(responsesSegments+=ResponsesSegment)+;
	
ResponsesSegment:
	'responses from metamodel' fromMetamodel=MetamodelReference 'to metamodel' toMetamodel=MetamodelReference
	'called' name=ValidID
	(responses+=Response |
		routines+=ExplicitRoutine)*;

Response:
	(documentation=ML_COMMENT)?
	'response:' name=ValidID
	trigger=Trigger
	routine=ImplicitRoutine;

// ****** TRIGGER ******

InvariantViolationEvent:
	'invariant' violation=[ecore::EClass|QualifiedName];

Trigger:
	'trigger:' (ModelChange | InvariantViolationEvent)
	('check:' precondition=PreconditionCodeBlock)?;

ModelChange:
	ConcreteModelElementChange | ArbitraryModelElementChange;

ConcreteModelElementChange returns ConcreteModelElementChange:
	AtomicConcreteModelElementChange;

AtomicConcreteModelElementChange:
	AtomicRootObjectChange | AtomicFeatureChange;

AtomicRootObjectChange:
	('insert root' {InsertRootChange} |
	'remove root' {RemoveRootChange})
	changedElement=ModelElement;

AtomicFeatureChange:
	(AtomicMultiValuedFeatureChange | AtomicSingleValuedFeatureChange)
	changedFeature=FeatureOfElement;

AtomicMultiValuedFeatureChange returns AtomicMultiValuedFeatureChange:
	'insert in list' {MultiValuedFeatureInsertChange} |
	'remove from list' {MultiValuedFeatureRemoveChange} |
	'permute list' {MultiValuedFeaturePermuteChange};

AtomicSingleValuedFeatureChange returns AtomicSingleValuedFeatureChange:
	//'create value' {SingleValuedFeatureCreate} | 'delete value' {SingleValuedFeatureDelete} | 
	'replace value' {SingleValuedFeatureReplace};

ArbitraryModelElementChange:
	{ArbitraryModelElementChange} 'any change';



// ****** EFFECTS ******


fragment Routine:
	matching=Matching?
	effect=Effect;

ImplicitRoutine:
	Routine;	

Matching:
	{Matching}
	'match:'
	retrievedElements+=RetrieveModelElement*
	('check:' condition=PreconditionCodeBlock)?;

Effect:
	{Effect}
	'effect:'
	(elementCreation += CreateElement |
		elementDeletion += DeleteElement)*
	(correspondenceCreation += CreateCorrespondence | 
		correspondenceDeletion += RemoveCorrespondence)*
	('execute:' codeBlock=ExecutionCodeBlock)?;

ExplicitRoutine:
	'routine:' name=ValidID
	input=RoutineInput
	Routine;
	
RoutineInput:
	{RoutineInput}
	('input:' modelInputElements+=NamedModelElement (',' modelInputElements+=NamedModelElement)*)?
	('plain java input:' javaInputElements+=NamedJavaElement (',' javaInputElements+=NamedJavaElement)*)?;



// ****** CORRESPONDENCE SPECIFICATION ******	

fragment Taggable:
	tag=TagCodeBlock;

RetrieveModelElement:
	(required?='retrieve required element:' | optional?='retrieve optional element:' | abscence?='require absence of element:') 
	element=NamedModelElement 'corresponding to' correspondenceSource=CorrespondingObjectCodeBlock
	('tagged with' Taggable)? ('with' precondition=PreconditionCodeBlock)?;

ExistingElementReference:
	CodeBlock;

CreateElement:
	"create element:" element=NamedModelElement;
	
DeleteElement:
	"delete element:" element=ExistingElementReference;

CreateCorrespondence:
	"add correspondence:" firstElement=ExistingElementReference "," secondElement=ExistingElementReference
	('tag with' Taggable)?;
	
RemoveCorrespondence:
	"remove correspondence:" firstElement=ExistingElementReference "," secondElement=ExistingElementReference;


// ****** CODE BLOCKS ******

TagCodeBlock returns TagCodeBlock:
	{TagCodeBlock}
	CodeBlock;

PreconditionCodeBlock returns PreconditionCodeBlock:
	{PreconditionCodeBlock}
	CodeBlock;

CorrespondingObjectCodeBlock returns CorrespondingObjectCodeBlock:
	{CorrespondingObjectCodeBlock}
	CodeBlock;

ExecutionCodeBlock returns ExecutionCodeBlock:
	{ExecutionCodeBlock}
	CodeBlock;

fragment CodeBlock:
	code=XExpression;

